[{"F:\\Code\\shopPro\\frontend\\src\\index.js":"1","F:\\Code\\shopPro\\frontend\\src\\App.js":"2","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js":"3","F:\\Code\\shopPro\\frontend\\src\\components\\Header.js":"4","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js":"5","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js":"6","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js":"7","F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js":"8","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js":"9","F:\\Code\\shopPro\\frontend\\src\\store.js":"10","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js":"11","F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js":"12","F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js":"13","F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js":"14","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js":"15","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js":"16","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js":"17","F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js":"18","F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js":"19","F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js":"20","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js":"21","F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js":"22","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js":"23","F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js":"24","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js":"25","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js":"26","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js":"27","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js":"28","F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js":"29","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js":"30","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js":"31","F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js":"32","F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js":"33","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js":"34","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js":"35","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js":"36","F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js":"37","F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js":"38","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js":"39","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js":"40","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js":"41","F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js":"42","F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js":"43","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js":"44","F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js":"45","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js":"46","F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js":"47","F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js":"48","F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js":"49"},{"size":596,"mtime":1611681056363,"results":"50","hashOfConfig":"51"},{"size":2958,"mtime":1615610095048,"results":"52","hashOfConfig":"51"},{"size":362,"mtime":499162500000,"results":"53","hashOfConfig":"51"},{"size":14414,"mtime":1615628915390,"results":"54","hashOfConfig":"51"},{"size":356,"mtime":1611459654848,"results":"55","hashOfConfig":"51"},{"size":1757,"mtime":1615603804271,"results":"56","hashOfConfig":"51"},{"size":1330,"mtime":1615564326941,"results":"57","hashOfConfig":"51"},{"size":1802,"mtime":1611471571179,"results":"58","hashOfConfig":"51"},{"size":14173,"mtime":1615602887962,"results":"59","hashOfConfig":"51"},{"size":2473,"mtime":1614846527695,"results":"60","hashOfConfig":"51"},{"size":3751,"mtime":1615541925888,"results":"61","hashOfConfig":"51"},{"size":1526,"mtime":1614838929673,"results":"62","hashOfConfig":"51"},{"size":5088,"mtime":1614846213773,"results":"63","hashOfConfig":"51"},{"size":595,"mtime":1615608682510,"results":"64","hashOfConfig":"51"},{"size":689,"mtime":1615567604368,"results":"65","hashOfConfig":"51"},{"size":8614,"mtime":1615603708864,"results":"66","hashOfConfig":"51"},{"size":1184,"mtime":1615605660974,"results":"67","hashOfConfig":"51"},{"size":1281,"mtime":1615605733344,"results":"68","hashOfConfig":"51"},{"size":238,"mtime":1612540677571,"results":"69","hashOfConfig":"51"},{"size":3522,"mtime":1614317117535,"results":"70","hashOfConfig":"51"},{"size":1506,"mtime":1614316949729,"results":"71","hashOfConfig":"51"},{"size":2343,"mtime":1612088379243,"results":"72","hashOfConfig":"51"},{"size":402,"mtime":1612087628650,"results":"73","hashOfConfig":"51"},{"size":6108,"mtime":1614317410747,"results":"74","hashOfConfig":"51"},{"size":3365,"mtime":1614649258585,"results":"75","hashOfConfig":"51"},{"size":8143,"mtime":1615685845833,"results":"76","hashOfConfig":"51"},{"size":3233,"mtime":1615605932797,"results":"77","hashOfConfig":"51"},{"size":1643,"mtime":1612593111433,"results":"78","hashOfConfig":"51"},{"size":2074,"mtime":1615474376122,"results":"79","hashOfConfig":"51"},{"size":6490,"mtime":1615566287579,"results":"80","hashOfConfig":"51"},{"size":3492,"mtime":1614579706810,"results":"81","hashOfConfig":"51"},{"size":1206,"mtime":1614579714910,"results":"82","hashOfConfig":"51"},{"size":4874,"mtime":1614577675915,"results":"83","hashOfConfig":"51"},{"size":8884,"mtime":1615606485645,"results":"84","hashOfConfig":"51"},{"size":866,"mtime":1614649154847,"results":"85","hashOfConfig":"51"},{"size":263,"mtime":1613712470178,"results":"86","hashOfConfig":"51"},{"size":3242,"mtime":1615360842378,"results":"87","hashOfConfig":"51"},{"size":3358,"mtime":1614437771361,"results":"88","hashOfConfig":"51"},{"size":4583,"mtime":1615607830818,"results":"89","hashOfConfig":"51"},{"size":8258,"mtime":1615617994525,"results":"90","hashOfConfig":"51"},{"size":3113,"mtime":1615359969736,"results":"91","hashOfConfig":"51"},{"size":993,"mtime":1615105710189,"results":"92","hashOfConfig":"51"},{"size":1371,"mtime":1615104385062,"results":"93","hashOfConfig":"51"},{"size":3277,"mtime":1615473858235,"results":"94","hashOfConfig":"51"},{"size":1218,"mtime":1615521728832,"results":"95","hashOfConfig":"51"},{"size":778,"mtime":1614826321511,"results":"96","hashOfConfig":"51"},{"size":1769,"mtime":1615609003920,"results":"97","hashOfConfig":"51"},{"size":514,"mtime":1615015305728,"results":"98","hashOfConfig":"51"},{"size":6214,"mtime":1615611082595,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1shtzj8",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"102"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"102"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"102"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"102"},"F:\\Code\\shopPro\\frontend\\src\\index.js",[],["211","212"],"F:\\Code\\shopPro\\frontend\\src\\App.js",[],"F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Header.js",["213","214","215"],"F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js",["216"],"import React, { useEffect, useState } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listProducts } from '../actions/productActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport Product from '../components/Product'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport Meta from '../components/Meta'\r\n\r\nfunction HomeScreen({ match }) {\r\n  const keyword = match.params.keyword\r\n  const pageNumber = match.params.pageNumber || 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products, pages, page } = productList\r\n\r\n  useEffect(() => {\r\n    dispatch(listProducts(keyword, pageNumber))\r\n  }, [dispatch, keyword, pageNumber])\r\n\r\n  return (\r\n    <>\r\n      <Meta />\r\n      {!keyword && <ProductCarousel />}\r\n      <h3 className='mt-5'>Latest Product</h3>\r\n\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <>\r\n          <Row>\r\n            {products?.map((\r\n              product // phai co ? de kiem tra product === null\r\n            ) => (\r\n              <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                <Product product={product} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <div className='d-flex justify-content-center'>\r\n            <Paginate\r\n              pages={pages}\r\n              page={page}\r\n              keyword={keyword ? keyword : ''}\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\store.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js",["217","218"],"import { useState } from 'react'\r\nimport { css } from '@emotion/core'\r\nimport RotateLoader from 'react-spinners/RotateLoader'\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`\r\n\r\nfunction Loader() {\r\n  let [loading, setLoading] = useState(true)\r\n  let [color, setColor] = useState('orange')\r\n\r\n  return (\r\n    <div className='sweet-loading text-center'>\r\n      <RotateLoader color={color} loading={loading} css={override} size={15} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js",["219"],"import Buttonn from '@material-ui/core/Button'\r\nimport ButtonGroupp from '@material-ui/core/ButtonGroup'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions.js'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(0),\r\n    },\r\n\r\n    '& .MuiInputBase-input': {\r\n      padding: theme.spacing(2),\r\n    },\r\n\r\n    '& .MuiFilledInput-input': {\r\n      padding: theme.spacing(2),\r\n    },\r\n\r\n    '& .MuiFilledInput-inputMarginDense': {\r\n      padding: theme.spacing(1),\r\n      textAlign: 'center',\r\n    },\r\n  },\r\n}))\r\n\r\nexport const CartScreen = ({ match, location, history }) => {\r\n  const classes = useStyles()\r\n  const productId = match.params.id\r\n  const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  console.log(cartItems.product)\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      dispatch(addToCart(productId, qty))\r\n    }\r\n  }, [dispatch, productId, qty])\r\n\r\n  const removeFromCartHandler = (id) => {\r\n    dispatch(removeFromCart(id))\r\n  }\r\n\r\n  const checkoutHandler = () => {\r\n    history.push('/login?redirect=shipping')\r\n  }\r\n\r\n  // const test = (e) => {\r\n  //   const value = e.target.value\r\n  //   if (parseInt(value) === 0) {\r\n  //     alert('sai')\r\n  //   }\r\n  //   console.log(value)\r\n  // }\r\n\r\n  return (\r\n    <Col>\r\n      <Link className='btn btn-light my-3' to='/'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <h3>Shopping Cart</h3>\r\n      <Row>\r\n        <Col md={9} className='p-0 pr-4 mt-3 text-uppercase'>\r\n          {cartItems.length === 0 ? (\r\n            <Announcement variant='danger'>\r\n              <b className='fs-1'>Your cart is empty </b>\r\n              <Link to='/'>\r\n                <Button variant='light' className='text-uppercase'>\r\n                  Shop now\r\n                </Button>\r\n              </Link>\r\n            </Announcement>\r\n          ) : (\r\n            <ListGroup variant='flush' className=''>\r\n              {cartItems.map((item) => (\r\n                <ListGroup.Item\r\n                  key={item.product}\r\n                  className='border-0 mt-1 shadow rounded'\r\n                  rounded\r\n                >\r\n                  <h6>\r\n                    {item.brand} <i class='fas fa-angle-right'></i>\r\n                  </h6>\r\n                  <Row>\r\n                    <Col md={3}>\r\n                      <Link\r\n                        to={`/product/${item.product}`}\r\n                        className='text-decoration-none product-card-green'\r\n                      >\r\n                        <Image src={item.image} alt={item.name} fluid />\r\n                      </Link>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                      <Link\r\n                        to={`/product/${item.product}`}\r\n                        className='text-decoration-none'\r\n                      >\r\n                        <p style={{ color: '#343a40' }}>{item.name}</p>\r\n                      </Link>\r\n                    </Col>\r\n\r\n                    <Col md={2} className='pt-2'>\r\n                      <h4>${item.price}</h4>\r\n                    </Col>\r\n\r\n                    <Col md={2} className='pt-2'>\r\n                      <ButtonGroupp size='small' aria-label='small '>\r\n                        <Buttonn\r\n                          aria-label='reduce'\r\n                          size='small'\r\n                          color='secondary'\r\n                          onClick={() =>\r\n                            item.qty !== 0\r\n                              ? dispatch(\r\n                                  addToCart(\r\n                                    item.product,\r\n                                    Math.max(item.qty - 1, 1)\r\n                                  )\r\n                                )\r\n                              : () => removeFromCartHandler(item.product)\r\n                          }\r\n                          variant='contained'\r\n                        >\r\n                          <RemoveIcon fontSize='small' />\r\n                        </Buttonn>\r\n\r\n                        {/* <Buttonn variant='contained'>{item.qty}</Buttonn> */}\r\n                        <div>\r\n                          <TextField\r\n                            className={classes.root}\r\n                            id='filled-size-small'\r\n                            value={item.qty}\r\n                            variant='filled'\r\n                            size='small'\r\n                            onChange={(e) =>\r\n                              Number(e.target.value) !== 0\r\n                                ? dispatch(\r\n                                    addToCart(\r\n                                      item.product,\r\n                                      Number(e.target.value)\r\n                                    )\r\n                                  )\r\n                                : dispatch(\r\n                                    addToCart(\r\n                                      item.product,\r\n                                      Number((e.target.value = ''))\r\n                                    )\r\n                                  )\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <Buttonn\r\n                          aria-label='increase'\r\n                          size='small'\r\n                          onClick={() =>\r\n                            dispatch(addToCart(item.product, item.qty + 1))\r\n                          }\r\n                          variant='contained'\r\n                          color='secondary'\r\n                        >\r\n                          <AddIcon fontSize='small' />\r\n                        </Buttonn>\r\n                      </ButtonGroupp>\r\n                    </Col>\r\n\r\n                    <Col md={1}>\r\n                      <Button\r\n                        type='button'\r\n                        className='pl-2 pr-2 rounded'\r\n                        variant='light'\r\n                        onClick={() => removeFromCartHandler(item.product)}\r\n                      >\r\n                        <Image src='https://img.icons8.com/fluent/28/000000/delete-forever.png' />\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          )}\r\n        </Col>\r\n\r\n        <Col md={3} className='p-0'>\r\n          <Card className='border-0 shadow mt-4 rounded'>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item className='d-flex justify-content-around '>\r\n                <div>\r\n                  <h5 className='title-bill'>Subtotal: </h5>\r\n                  <h5 className='title-bill'>Price: </h5>\r\n                </div>\r\n                <div>\r\n                  <h5 className='title-bill-value'>\r\n                    {cartItems.reduce((acc, item) => acc + item.qty, 0)} items\r\n                  </h5>\r\n                  <h5 className='title-bill-value'>\r\n                    $\r\n                    {cartItems\r\n                      .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n                      .toFixed(2)}\r\n                  </h5>\r\n                </div>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n          <Card className='mt-3 border-0 btn-proceed'>\r\n            <Button\r\n              type='button'\r\n              className='btn-block btn-danger text-uppercase p-3 text-light'\r\n              disabled={cartItems === 0}\r\n              onClick={checkoutHandler}\r\n              size='sm'\r\n              style={{\r\n                fontFamily: 'Montserrat',\r\n                fontSize: '0.78em',\r\n                color: '#fff',\r\n              }}\r\n            >\r\n              <h6 className='text-light m-0'>Proceed To Checkout</h6>\r\n            </Button>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Col>\r\n  )\r\n}\r\n\r\nexport default CartScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js",["220","221"],"F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js",["222","223","224"],"import React, { useState } from 'react'\r\nimport { Button, Form, Container } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport Step from '../components/Step'\r\nimport FormContainer from '../components/FormContainer'\r\n\r\nexport const ShippingScreen = ({ history }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const { shippingAddress, loading } = cart\r\n\r\n  const [address, setAddress] = useState(shippingAddress.address)\r\n  const [city, setCity] = useState(shippingAddress.city)\r\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n  const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n    history.push('./payment')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <Container className='pl-5 pr-5 mb-2 '>\r\n        <Step step1 step2 className='p-5' />\r\n      </Container> */}\r\n      <FormContainer>\r\n        <Step step1 step2 />\r\n\r\n        <Form\r\n          onSubmit={submitHandler}\r\n          className='rounded bg-light shadow p-4 mt-2'\r\n        >\r\n          <h3 className='pt-3 text-center'>Shipping</h3>\r\n          <Form.Group controlId='address'>\r\n            <Form.Label as='p'>Address</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter address'\r\n              value={address}\r\n              onChange={(e) => setAddress(e.target.value)}\r\n              className='border border-gray'\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='city'>\r\n            <Form.Label as='p'>City</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter city'\r\n              value={city}\r\n              onChange={(e) => setCity(e.target.value)}\r\n              className='border border-gray'\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='postalCode'>\r\n            <Form.Label as='p'>PostalCode</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter postalCode'\r\n              value={postalCode}\r\n              onChange={(e) => setPostalCode(e.target.value)}\r\n              className='border border-gray'\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='country'>\r\n            <Form.Label as='p'>Country</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter country'\r\n              value={country}\r\n              onChange={(e) => setCountry(e.target.value)}\r\n              className='border border-gray'\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <div>\r\n            <Button type='submit' variant='danger' className='btn-block'>\r\n              Continue\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js",["225","226","227"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Image,\r\n  Card,\r\n  Container,\r\n} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Step from '../components/Step'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\nimport { USER_DETAILS_RESET } from '../constants/userConstants'\r\nimport Announcement from '../components/Announcement'\r\n\r\nPlaceOrderScreen.propTypes = {}\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n\r\n  // Calculate prices\r\n  cart.itemsPrice = cart.cartItems.reduce(\r\n    (acc, item) => acc + item.price + item.qty,\r\n    0\r\n  )\r\n\r\n  const addDecimals = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2)\r\n  }\r\n\r\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2)\r\n\r\n  const orderCreate = useSelector((state) => state.orderCreate)\r\n  const { order, success, error } = orderCreate\r\n\r\n  const placeOrderHandler = () => {\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      history.push(`/order/${order._id}`)\r\n    }\r\n  }, [history, success])\r\n\r\n  return (\r\n    <>\r\n      <Container></Container>\r\n      <Row className='justify-content-center'>\r\n        <Col md={7} className='ml-3 mr-3 pl-0 pr-0 mt-2'>\r\n          <Step step1 step2 step3 step4 />\r\n          <ListGroup variant='flush' className='shadow pt-2'>\r\n            <ListGroup.Item className='border-0'>\r\n              <h5 className='text-uppercase'>Shiping</h5>\r\n              <p className='mb-1'>\r\n                <strong>Address: </strong>\r\n                {cart.shippingAddress.address}, {cart.shippingAddress.city},{' '}\r\n                {cart.shippingAddress.postalCode},{' '}\r\n                {cart.shippingAddress.country},\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item className='border-0'>\r\n              <h5 className='text-uppercase'>Payment Method</h5>\r\n              <strong>Method: </strong>\r\n              {cart.paymentMethod}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Order Items</h5>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message>Your cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n\r\n                        <Col>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='link-product'\r\n                          >\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                          <b>\r\n                            {item.qty} x ${item.price} = $\r\n                            {item.qty * item.price}\r\n                          </b>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className='shadow mt-2'>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h4 className='text-uppercase text-center'>Order Summary</h4>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-5'>Items</Col>\r\n                  <Col className='pl-5 pr-0'>\r\n                    <strong>${cart.itemsPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-5'>Shipping</Col>\r\n                  <Col className='pl-5 pr-0'>\r\n                    <strong>${cart.shippingPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-5'>Tax</Col>\r\n                  <Col className='pl-5 pr-0'>\r\n                    <strong>${cart.taxPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-5'>Total</Col>\r\n                  <Col className='pl-5 pr-0'>\r\n                    <strong>${cart.totalPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                {error && (\r\n                  <Announcement variant='danger'>\r\n                    Vui lòng chọn phương thức thanh toán\r\n                  </Announcement>\r\n                )}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Button\r\n                  type='button'\r\n                  className='btn-block btn-dark text-uppercase btn-apply'\r\n                  disabled={cart.cartItems === 0}\r\n                  onClick={placeOrderHandler}\r\n                >\r\n                  <strong>Place Order</strong>\r\n                </Button>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js",["228"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  deliverOrder,\r\n  getOrderDetails,\r\n  payOrder,\r\n} from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport {\r\n  ORDER_DELIVER_RESET,\r\n  ORDER_PAY_RESET,\r\n} from '../constants/orderConstants'\r\n\r\nconst OrderScreen = ({ match, history }) => {\r\n  const orderId = match.params.id\r\n\r\n  const [sdkReady, setSdkReady] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  const orderPay = useSelector((state) => state.orderPay)\r\n  const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver)\r\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  if (!loading) {\r\n    //   Calculate prices\r\n    const addDecimals = (num) => {\r\n      return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    order.itemsPrice = addDecimals(\r\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login')\r\n    }\r\n\r\n    const addPayPalScript = async () => {\r\n      const { data: clientId } = await axios.get('/api/config/paypal')\r\n      const script = document.createElement('script')\r\n      script.type = 'text/javascript'\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n      script.async = true\r\n      script.onload = () => {\r\n        setSdkReady(true)\r\n      }\r\n      document.body.appendChild(script)\r\n    }\r\n\r\n    if (!order || successPay || successDeliver) {\r\n      dispatch({ type: ORDER_PAY_RESET })\r\n      dispatch({ type: ORDER_DELIVER_RESET })\r\n      dispatch(getOrderDetails(orderId))\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPalScript()\r\n      } else {\r\n        setSdkReady(true)\r\n      }\r\n    }\r\n  }, [dispatch, orderId, successPay, successDeliver, order])\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    console.log(paymentResult)\r\n    dispatch(payOrder(orderId, paymentResult))\r\n  }\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order))\r\n  }\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message>{error}</Message>\r\n  ) : (\r\n    <>\r\n      <h2>Order {order._id}</h2>\r\n      <Row className='justify-content-center'>\r\n        <Col md={7} className='ml-3 mr-3 pl-0 pr-0 mt-2'>\r\n          <ListGroup variant='flush' className='shadow'>\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Shiping</h5>\r\n              <p>\r\n                <strong>Name: </strong> {order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email: </strong>\r\n                <a\r\n                  className='link-product'\r\n                  href={`mailto: ${order.user.email}`}\r\n                >\r\n                  {order.user.email}\r\n                </a>\r\n              </p>\r\n\r\n              <p className='mb-3'>\r\n                <strong>Address: </strong>\r\n                {order.shippingAddress.address}, {order.shippingAddress.city},{' '}\r\n                {order.shippingAddress.postalCode},{' '}\r\n                {order.shippingAddress.country},\r\n              </p>\r\n\r\n              {order.isDelivered ? (\r\n                <Announcement variant='success'>\r\n                  Delivered on {order.deliveredAt}\r\n                </Announcement>\r\n              ) : (\r\n                <Announcement variant='danger'>No Delivered</Announcement>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Payment Method</h5>\r\n              <p>\r\n                <strong>Method: </strong>\r\n                {order.paymentMethod}\r\n              </p>\r\n\r\n              {order.isPaid ? (\r\n                <Announcement variant='success'>\r\n                  Paid on {order.paidAt}\r\n                </Announcement>\r\n              ) : (\r\n                <Announcement variant='danger'>No Paid</Announcement>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Order Items</h5>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='link-product'\r\n                          >\r\n                            <Image\r\n                              src={item.image}\r\n                              alt={item.name}\r\n                              fluid\r\n                              rounded\r\n                              className='border border-gray'\r\n                            />\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col className='d-flex align-items-center' md={5}>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='text-decoration-none '\r\n                          >\r\n                            <p>{item.name}</p>\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={5} className='d-flex align-items-center'>\r\n                          <h5>\r\n                            {item.qty} x ${item.price} = $\r\n                            {item.qty * item.price}\r\n                          </h5>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className='shadow mt-2'>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h4 className='text-uppercase text-center'>Order Summary</h4>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>\r\n                    <strong>${order.itemsPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>\r\n                    <strong>${order.shippingPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>\r\n                    <strong>${order.taxPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>\r\n                    <strong>${order.totalPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              {!order.isPaid && (\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {!sdkReady ? (\r\n                    <Loader />\r\n                  ) : (\r\n                    <PayPalButton\r\n                      amount={order.totalPrice}\r\n                      onSuccess={successPaymentHandler}\r\n                    />\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n\r\n              {loadingDeliver && <Loader />}\r\n              {userInfo &&\r\n                userInfo.isAdmin &&\r\n                order.isPaid &&\r\n                !order.isDelivered && (\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      type='button'\r\n                      className='btn btn-block'\r\n                      onClick={deliverHandler}\r\n                    >\r\n                      Mark As Delivered\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js",["229","230"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport {\r\n  USER_UPDATE_RESET\r\n} from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n      history.push('/admin/userlist')\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link to='/admin/userlist' className='btn btn-light my-3 text-uppercase'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer sm>\r\n        <h2>Edit User</h2>\r\n        {loadingUpdate ? (\r\n          <Loader /> \r\n        ) && <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess> : errorUpdate ? (\r\n          <Message>{errorUpdate}</Message>\r\n        ) : loading ? (\r\n          <Loader />\r\n        ) : (\r\n          <Form onSubmit={submitHandler} md={10}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter email'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='idAdmin'>\r\n              <Form.Check\r\n                type='checkbox'\r\n                label='Is Admin'\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n            <Button type='submit' variant='warning'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js",["231"],"import React, { useEffect } from 'react'\r\nimport { Button, Col, Row, Table } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  createProduct,\r\n  deleteProduct,\r\n  listProducts,\r\n} from '../actions/productActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\nimport Paginate from '../components/Paginate'\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n  const pageNumber = match.params.pageNumber || 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products, pages, page } = productList\r\n\r\n  const productDelete = useSelector((state) => state.productDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = productDelete\r\n\r\n  const productCreate = useSelector((state) => state.productCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    product: createdProduct,\r\n  } = productCreate\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n    if (!userInfo.isAdmin) {\r\n      history.push('/login')\r\n    }\r\n\r\n    if (successCreate) {\r\n      history.push(`/admin/product/${createdProduct._id}/edit`)\r\n    } else {\r\n      dispatch(listProducts('', pageNumber))\r\n    }\r\n  }, [\r\n    dispatch,\r\n    history,\r\n    userInfo,\r\n    successDelete,\r\n    successCreate,\r\n    createProduct,\r\n    pageNumber,\r\n  ])\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteProduct(id))\r\n    }\r\n  }\r\n\r\n  const createProductHandle = () => {\r\n    dispatch(createProduct())\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row className='align-items-center'>\r\n        <Col>\r\n          <h2 className='text-uppercase'>Products</h2>\r\n        </Col>\r\n        <Col className='text-right'>\r\n          <Button\r\n            className='my-3 text-uppercase btn-teal '\r\n            onClick={createProductHandle}\r\n          >\r\n            <i className='fas fa-plus'></i> Create Product\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      {loadingDelete && <Loader />}\r\n      {errorDelete && <Message>{errorDelete}</Message>}\r\n      {loadingCreate && <Loader />}\r\n      {errorCreate && <Message>{errorCreate}</Message>}\r\n\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <Table\r\n            striped\r\n            bordered\r\n            hover\r\n            response\r\n            className='table-sm text-center rounded shadow bg-light'\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>NAME</th>\r\n                <th>PRICE</th>\r\n                <th>CATEGORY</th>\r\n                <th>BRAND</th>\r\n                <th>QUANTITY</th>\r\n                <th>ACTION</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {products.map((product) => (\r\n                <tr key={product._id}>\r\n                  <td>{product._id}</td>\r\n                  <td>{product.name}</td>\r\n                  <td>${product.price}</td>\r\n                  <td>{product.category}</td>\r\n                  <td>{product.brand}</td>\r\n                  <td>{product.countInStock}</td>\r\n                  <td>\r\n                    <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                      <Button variant='info' className='btn-sm'>\r\n                        <i className='far fa-edit'></i>\r\n                      </Button>\r\n                    </LinkContainer>\r\n                    <Button\r\n                      variant='danger'\r\n                      className='btn-sm ml-1'\r\n                      onClick={() => deleteHandle(product._id)}\r\n                    >\r\n                      <i className='fas fa-trash'></i>\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          <div className='d-flex justify-content-center'>\r\n            <Paginate pages={pages} page={page} isAdmin={true}></Paginate>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js",["232","233","234","235","236"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      history.push('/admin/productlist')\r\n    } else {\r\n      if (!product.name || product._id != productId) {\r\n        dispatch(listProductDetails(productId))\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInStock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, history, productId, product, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link\r\n        to='/admin/productlist'\r\n        className='btn btn-light my-3 text-uppercase'\r\n      >\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message>{error}</Message>\r\n        ) : (\r\n          <>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow rounded'\r\n            >\r\n              <h2 className='text-center'>Edit Product</h2>\r\n              <Form.Group controlId='name' className='pl-3 pr-3 pt-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='name'\r\n                  placeholder='Enter name'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='price' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Price\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='number'\r\n                  placeholder='Enter price'\r\n                  value={price}\r\n                  onChange={(e) => setPrice(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Image\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter image url'\r\n                  value={image}\r\n                  onChange={(e) => setImage(e.target.value)}\r\n                ></Form.Control>\r\n                <Form.File\r\n                  className='border border-grey'\r\n                  id='image-file'\r\n                  label='Choose File'\r\n                  custom\r\n                  onChange={uploadFileHandler}\r\n                ></Form.File>\r\n                {uploading && <Loader />}\r\n              </Form.Group>\r\n\r\n              <Row>\r\n                <Col>\r\n                  <Form.Group controlId='brand' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Brand\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey'\r\n                      type='text'\r\n                      placeholder='Enter brand'\r\n                      value={brand}\r\n                      onChange={(e) => setBrand(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={5}>\r\n                  <Form.Group controlId='countInStock' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Count In Stock\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey'\r\n                      type='number'\r\n                      placeholder='Enter countInStock'\r\n                      value={countInStock}\r\n                      onChange={(e) => setCountInStock(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Form.Group controlId='category' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Category\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter category'\r\n                  value={category}\r\n                  onChange={(e) => setCategory(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='description' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  rows={3}\r\n                  as='textarea'\r\n                  placeholder='Enter description'\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <div className='pl-3 pr-3'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-success'\r\n                  className='btn-block'\r\n                  style={{ fontSize: '1rem', letterSpacing: '0.25rem' }}\r\n                >\r\n                  Update\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js",["237"],"import Button from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\r\nimport lime from '@material-ui/core/colors/lime'\r\n\r\nconst theme = createMuiTheme({\r\n  success: {\r\n    main: '#bac778',\r\n  },\r\n\r\n  palette: {\r\n    primary: {\r\n      light: '#ea605d',\r\n      main: '#e53935',\r\n      dark: '#a02725',\r\n      contrastText: '#fff',\r\n    },\r\n\r\n    secondary: {\r\n      light: '#57975b',\r\n      main: '#2e7d32',\r\n      dark: '#205723',\r\n      contrastText: '#fff',\r\n    },\r\n\r\n    success: {\r\n      main: '#bac778',\r\n    },\r\n  },\r\n})\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    // margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nexport default function IconLabelButtons({\r\n  color,\r\n  value,\r\n  size,\r\n  endIcon,\r\n  startIcon,\r\n  onClick,\r\n  disabled,\r\n  type,\r\n}) {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={theme}>\r\n        <Button\r\n          variant='contained'\r\n          size={size}\r\n          color={color}\r\n          endIcon={endIcon}\r\n          startIcon={startIcon}\r\n          className={classes.button}\r\n          onClick={onClick}\r\n          disabled={disabled}\r\n          type={type}\r\n        >\r\n          {value}\r\n        </Button>\r\n      </ThemeProvider>\r\n    </div>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js",["238","239","240","241","242"],"import { React, useState } from 'react'\r\nimport { Form, Button, Image, InputGroup } from 'react-bootstrap'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { FormGroup, Input } from '@material-ui/core'\r\nimport InputBase from '@material-ui/core/InputBase'\r\n\r\nconst SearchBox = ({ history }) => {\r\n  const [keyword, setKeyword] = useState('')\r\n\r\n  const submitHandle = (e) => {\r\n    e.preventDefault()\r\n    if (keyword.trim()) {\r\n      history.push(`/search/${keyword}`)\r\n    } else {\r\n      history.push('/')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={submitHandle} inline>\r\n      <div className='d-flex'>\r\n        <Form.Control\r\n          type='text'\r\n          name='q'\r\n          placeholder='Search Product...'\r\n          className='mr-sm-2 ml-sm-5'\r\n          onChange={(e) => setKeyword(e.target.value)}\r\n        ></Form.Control>\r\n\r\n        {/* <Button type='reset' value='hello' variant='light'>\r\n          <Image src='https://img.icons8.com/fluent/18/000000/delete-sign.png' />\r\n        </Button> */}\r\n      </div>\r\n\r\n      <Button type='submit' variant='outline-success' className='p-2'>\r\n        <SearchIcon />\r\n        Search\r\n      </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js",["243","244","245","246","247","248","249"],"import CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Image, Table } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { listMyOrders } from '../actions/orderActions'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport '../toast.css'\r\n\r\nconst MyOrdersScreen = ({ history }) => {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n  const { success } = userUpdateProfile\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy)\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    error &&\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> {error}\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n\r\n    if (password !== confirmPassword) {\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> Password is not\r\n          match\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    } else {\r\n      dispatch(updateUserProfile({ id: user._id, email, name, password }))\r\n      toast.success(\r\n        <div>\r\n          <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n          Profile Updated\r\n        </div>,\r\n        {\r\n          className: 'Toastify__toast--success',\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push()\r\n    } else {\r\n      if (!user.name) {\r\n        dispatch(getUserDetails('profile'))\r\n        dispatch(listMyOrders())\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user])\r\n  return (\r\n    <>\r\n      <h2>My Order</h2>\r\n      {loadingOrders ? (\r\n        <Loader />\r\n      ) : errorOrders ? (\r\n        <Announcement variant='danger'>{errorOrders}</Announcement>\r\n      ) : (\r\n        <>\r\n          <Table\r\n            striped\r\n            bordered\r\n            hover\r\n            responsive\r\n            className='table-sm align-items-center text-center rounded shadow bg-light '\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>NAME</th>\r\n                <th>IMAGE</th>\r\n                <th>DATE</th>\r\n                <th>TOTAL</th>\r\n                <th>PAID</th>\r\n                <th>DELIVERED</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td className=' pb-1'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <td key={index} className='border-0 pb-1 pt-1'>\r\n                        {item.name}\r\n                      </td>\r\n                    ))}\r\n                  </td>\r\n                  <td style={{ width: '2rem', height: '2rem' }} className='p-0'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <td key={index} className='p-1 border-0'>\r\n                        <Image\r\n                          src={item.image}\r\n                          alt={item.name}\r\n                          fluid\r\n                          rounded\r\n                          className='border border-grey'\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                  </td>\r\n                  <td>\r\n                    {order.createdAt.substring(11, 19)}\r\n                    {' - '}\r\n                    {order.createdAt.substring(0, 10)}\r\n                  </td>\r\n                  <td>\r\n                    {order.isPaid ? (\r\n                      order.paidAt.substring(11, 19) +\r\n                      ' : ' +\r\n                      order.paidAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {order.isDelivered ? (\r\n                      order.deliveredAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td className='p-1 pt-2'>\r\n                    <LinkContainer to={`/orders/${order._id}`}>\r\n                      <Button variant='dark' className='text-uppercase p-2'>\r\n                        Details\r\n                      </Button>\r\n                    </LinkContainer>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyOrdersScreen\r\n",{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","severity":1,"message":"255","line":23,"column":3,"nodeType":"256","messageId":"257","endLine":23,"endColumn":11},{"ruleId":"254","severity":1,"message":"258","line":76,"column":10,"nodeType":"256","messageId":"257","endLine":76,"endColumn":18},{"ruleId":"254","severity":1,"message":"259","line":78,"column":9,"nodeType":"256","messageId":"257","endLine":78,"endColumn":20},{"ruleId":"254","severity":1,"message":"260","line":1,"column":28,"nodeType":"256","messageId":"257","endLine":1,"endColumn":36},{"ruleId":"254","severity":1,"message":"261","line":13,"column":17,"nodeType":"256","messageId":"257","endLine":13,"endColumn":27},{"ruleId":"254","severity":1,"message":"262","line":14,"column":15,"nodeType":"256","messageId":"257","endLine":14,"endColumn":23},{"ruleId":"254","severity":1,"message":"263","line":13,"column":8,"nodeType":"256","messageId":"257","endLine":13,"endColumn":14},{"ruleId":"254","severity":1,"message":"264","line":21,"column":19,"nodeType":"256","messageId":"257","endLine":21,"endColumn":29},{"ruleId":"254","severity":1,"message":"265","line":32,"column":11,"nodeType":"256","messageId":"257","endLine":32,"endColumn":18},{"ruleId":"254","severity":1,"message":"266","line":2,"column":24,"nodeType":"256","messageId":"257","endLine":2,"endColumn":33},{"ruleId":"254","severity":1,"message":"267","line":5,"column":8,"nodeType":"256","messageId":"257","endLine":5,"endColumn":21},{"ruleId":"254","severity":1,"message":"268","line":11,"column":28,"nodeType":"256","messageId":"257","endLine":11,"endColumn":35},{"ruleId":"254","severity":1,"message":"269","line":16,"column":10,"nodeType":"256","messageId":"257","endLine":16,"endColumn":28},{"ruleId":"254","severity":1,"message":"270","line":17,"column":10,"nodeType":"256","messageId":"257","endLine":17,"endColumn":28},{"ruleId":"271","severity":1,"message":"272","line":66,"column":6,"nodeType":"273","endLine":66,"endColumn":24,"suggestions":"274"},{"ruleId":"271","severity":1,"message":"275","line":79,"column":6,"nodeType":"273","endLine":79,"endColumn":60,"suggestions":"276"},{"ruleId":"254","severity":1,"message":"277","line":24,"column":20,"nodeType":"256","messageId":"257","endLine":24,"endColumn":25},{"ruleId":"271","severity":1,"message":"278","line":51,"column":6,"nodeType":"273","endLine":51,"endColumn":45,"suggestions":"279"},{"ruleId":"271","severity":1,"message":"280","line":55,"column":6,"nodeType":"273","endLine":63,"endColumn":4,"suggestions":"281"},{"ruleId":"254","severity":1,"message":"282","line":6,"column":10,"nodeType":"256","messageId":"257","endLine":6,"endColumn":24},{"ruleId":"254","severity":1,"message":"283","line":6,"column":26,"nodeType":"256","messageId":"257","endLine":6,"endColumn":36},{"ruleId":"254","severity":1,"message":"284","line":11,"column":8,"nodeType":"256","messageId":"257","endLine":11,"endColumn":22},{"ruleId":"254","severity":1,"message":"285","line":12,"column":10,"nodeType":"256","messageId":"257","endLine":12,"endColumn":27},{"ruleId":"286","severity":1,"message":"287","line":84,"column":40,"nodeType":"288","messageId":"289","endLine":84,"endColumn":42},{"ruleId":"254","severity":1,"message":"290","line":5,"column":8,"nodeType":"256","messageId":"257","endLine":5,"endColumn":12},{"ruleId":"254","severity":1,"message":"291","line":2,"column":24,"nodeType":"256","messageId":"257","endLine":2,"endColumn":29},{"ruleId":"254","severity":1,"message":"292","line":2,"column":31,"nodeType":"256","messageId":"257","endLine":2,"endColumn":41},{"ruleId":"254","severity":1,"message":"293","line":4,"column":10,"nodeType":"256","messageId":"257","endLine":4,"endColumn":19},{"ruleId":"254","severity":1,"message":"294","line":4,"column":21,"nodeType":"256","messageId":"257","endLine":4,"endColumn":26},{"ruleId":"254","severity":1,"message":"295","line":5,"column":8,"nodeType":"256","messageId":"257","endLine":5,"endColumn":17},{"ruleId":"254","severity":1,"message":"296","line":18,"column":20,"nodeType":"256","messageId":"257","endLine":18,"endColumn":31},{"ruleId":"254","severity":1,"message":"297","line":19,"column":27,"nodeType":"256","messageId":"257","endLine":19,"endColumn":45},{"ruleId":"254","severity":1,"message":"298","line":20,"column":10,"nodeType":"256","messageId":"257","endLine":20,"endColumn":17},{"ruleId":"254","severity":1,"message":"264","line":20,"column":19,"nodeType":"256","messageId":"257","endLine":20,"endColumn":29},{"ruleId":"254","severity":1,"message":"268","line":25,"column":11,"nodeType":"256","messageId":"257","endLine":25,"endColumn":18},{"ruleId":"254","severity":1,"message":"265","line":31,"column":11,"nodeType":"256","messageId":"257","endLine":31,"endColumn":18},{"ruleId":"254","severity":1,"message":"299","line":36,"column":9,"nodeType":"256","messageId":"257","endLine":36,"endColumn":22},"no-native-reassign",["300"],"no-negated-in-lhs",["301"],"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'useState' is defined but never used.","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","'Loader' is defined but never used.","'setMessage' is assigned a value but never used.","'success' is assigned a value but never used.","'Container' is defined but never used.","'CheckoutSteps' is defined but never used.","'loading' is assigned a value but never used.","'ORDER_CREATE_RESET' is defined but never used.","'USER_DETAILS_RESET' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["302"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["303"],"'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["304"],"React Hook useEffect has a missing dependency: 'createdProduct._id'. Either include it or remove the dependency array. Outer scope values like 'createProduct' aren't valid dependencies because mutating them doesn't re-render the component.",["305"],"'getUserDetails' is defined but never used.","'updateUser' is defined but never used.","'MessageSuccess' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'lime' is defined but never used.","'Image' is defined but never used.","'InputGroup' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'InputBase' is defined but never used.","'setPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'message' is assigned a value but never used.","'submitHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},"Update the dependencies array to be: [history, order._id, success]",{"range":"314","text":"315"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, order, userInfo, history]",{"range":"316","text":"317"},"Update the dependencies array to be: [dispatch, user, userId, successUpdate, history]",{"range":"318","text":"319"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, pageNumber, createdProduct._id]",{"range":"320","text":"321"},[1836,1854],"[history, order._id, success]",[2453,2507],"[dispatch, orderId, successPay, successDeliver, order, userInfo, history]",[1578,1617],"[dispatch, user, userId, successUpdate, history]",[1679,1806],"[dispatch, history, userInfo, successDelete, successCreate, pageNumber, createdProduct._id]"]