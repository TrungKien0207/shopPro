[{"F:\\Code\\shopPro\\frontend\\src\\index.js":"1","F:\\Code\\shopPro\\frontend\\src\\App.js":"2","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js":"3","F:\\Code\\shopPro\\frontend\\src\\components\\Header.js":"4","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js":"5","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js":"6","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js":"7","F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js":"8","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js":"9","F:\\Code\\shopPro\\frontend\\src\\store.js":"10","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js":"11","F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js":"12","F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js":"13","F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js":"14","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js":"15","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js":"16","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js":"17","F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js":"18","F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js":"19","F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js":"20","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js":"21","F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js":"22","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js":"23","F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js":"24","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js":"25","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js":"26","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js":"27","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js":"28","F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js":"29","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js":"30","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js":"31","F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js":"32","F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js":"33","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js":"34","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js":"35","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js":"36","F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js":"37","F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js":"38","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js":"39","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js":"40","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js":"41","F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js":"42","F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js":"43","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js":"44","F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js":"45","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js":"46","F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js":"47","F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js":"48","F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js":"49","F:\\Code\\shopPro\\frontend\\src\\screens\\UScreen.js":"50"},{"size":629,"mtime":1615780501407,"results":"51","hashOfConfig":"52"},{"size":3442,"mtime":1615874707095,"results":"53","hashOfConfig":"52"},{"size":362,"mtime":499162500000,"results":"54","hashOfConfig":"52"},{"size":15118,"mtime":1615798328252,"results":"55","hashOfConfig":"52"},{"size":356,"mtime":1611459654848,"results":"56","hashOfConfig":"52"},{"size":1773,"mtime":1615791335387,"results":"57","hashOfConfig":"52"},{"size":1330,"mtime":1615779421854,"results":"58","hashOfConfig":"52"},{"size":1802,"mtime":1611471571179,"results":"59","hashOfConfig":"52"},{"size":14686,"mtime":1615797932698,"results":"60","hashOfConfig":"52"},{"size":2473,"mtime":1614846527695,"results":"61","hashOfConfig":"52"},{"size":3751,"mtime":1615541925888,"results":"62","hashOfConfig":"52"},{"size":1526,"mtime":1614838929673,"results":"63","hashOfConfig":"52"},{"size":5088,"mtime":1614846213773,"results":"64","hashOfConfig":"52"},{"size":567,"mtime":1615791677731,"results":"65","hashOfConfig":"52"},{"size":689,"mtime":1615567604368,"results":"66","hashOfConfig":"52"},{"size":8849,"mtime":1615799675563,"results":"67","hashOfConfig":"52"},{"size":1184,"mtime":1615605660974,"results":"68","hashOfConfig":"52"},{"size":1281,"mtime":1615605733344,"results":"69","hashOfConfig":"52"},{"size":238,"mtime":1612540677571,"results":"70","hashOfConfig":"52"},{"size":3523,"mtime":1615776048178,"results":"71","hashOfConfig":"52"},{"size":1506,"mtime":1614316949729,"results":"72","hashOfConfig":"52"},{"size":3229,"mtime":1615699802975,"results":"73","hashOfConfig":"52"},{"size":402,"mtime":1612087628650,"results":"74","hashOfConfig":"52"},{"size":6124,"mtime":1615797752658,"results":"75","hashOfConfig":"52"},{"size":5683,"mtime":1615700054551,"results":"76","hashOfConfig":"52"},{"size":10396,"mtime":1615797828225,"results":"77","hashOfConfig":"52"},{"size":3488,"mtime":1615781127700,"results":"78","hashOfConfig":"52"},{"size":1643,"mtime":1612593111433,"results":"79","hashOfConfig":"52"},{"size":2140,"mtime":1615781349859,"results":"80","hashOfConfig":"52"},{"size":6618,"mtime":1615782083674,"results":"81","hashOfConfig":"52"},{"size":3492,"mtime":1614579706810,"results":"82","hashOfConfig":"52"},{"size":1206,"mtime":1614579714910,"results":"83","hashOfConfig":"52"},{"size":5527,"mtime":1615904697870,"results":"84","hashOfConfig":"52"},{"size":9370,"mtime":1615790177715,"results":"85","hashOfConfig":"52"},{"size":866,"mtime":1614649154847,"results":"86","hashOfConfig":"52"},{"size":316,"mtime":1615789308280,"results":"87","hashOfConfig":"52"},{"size":14956,"mtime":1615874295340,"results":"88","hashOfConfig":"52"},{"size":3358,"mtime":1614437771361,"results":"89","hashOfConfig":"52"},{"size":17057,"mtime":1615904350196,"results":"90","hashOfConfig":"52"},{"size":8258,"mtime":1615617994525,"results":"91","hashOfConfig":"52"},{"size":15456,"mtime":1615904429386,"results":"92","hashOfConfig":"52"},{"size":993,"mtime":1615105710189,"results":"93","hashOfConfig":"52"},{"size":1379,"mtime":1615784050906,"results":"94","hashOfConfig":"52"},{"size":3237,"mtime":1615781622017,"results":"95","hashOfConfig":"52"},{"size":1105,"mtime":1615782621834,"results":"96","hashOfConfig":"52"},{"size":778,"mtime":1614826321511,"results":"97","hashOfConfig":"52"},{"size":1739,"mtime":1615790896892,"results":"98","hashOfConfig":"52"},{"size":514,"mtime":1615015305728,"results":"99","hashOfConfig":"52"},{"size":6214,"mtime":1615611082595,"results":"100","hashOfConfig":"52"},{"size":14768,"mtime":1615871398507,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1shtzj8",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"104"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"104"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"104"},{"filePath":"195","messages":"196","errorCount":3,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"104"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"104"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\Code\\shopPro\\frontend\\src\\index.js",[],["218","219"],"F:\\Code\\shopPro\\frontend\\src\\App.js",["220"],"F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Header.js",["221","222","223"],"import Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Button from '@material-ui/core/Button'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Link from '@material-ui/core/Link'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport { black } from 'colors'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Container, Image, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Route } from 'react-router-dom'\r\nimport { getUserDetails, logout } from '../actions/userActions'\r\nimport SearchBox from './SearchBox'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  paper: {\r\n    marginRight: theme.spacing(2),\r\n    zIndex: '7 !important',\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n  },\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: -3,\r\n    top: 13,\r\n    border: `2px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n  },\r\n}))(Badge)\r\n\r\nfunction Header(props) {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = React.useState(false)\r\n  const anchorRef = React.useRef(null)\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(logout())\r\n  }\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen)\r\n  }\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return\r\n    }\r\n\r\n    setOpen(false)\r\n  }\r\n\r\n  function handleListKeyDown(event) {\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault()\r\n      setOpen(false)\r\n    }\r\n  }\r\n\r\n  // return focus to the button when we transitioned from !open -> open\r\n  const prevOpen = React.useRef(open)\r\n  useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      anchorRef.current.focus()\r\n    }\r\n\r\n    prevOpen.current = open\r\n  }, [open, userInfo, user])\r\n\r\n  return (\r\n    <>\r\n      <Navbar\r\n        expand='lg'\r\n        collapseOnSelect\r\n        className='p-0 pl-5 pr-5'\r\n        style={{ backgroundColor: '#FFFFFF' }}\r\n      >\r\n        <Container fluid>\r\n          <LinkContainer to='/' className=''>\r\n            <Navbar.Brand className='text-uppercase font-weight-bold flex-grow-1'>\r\n              <h2>ProShop</h2>\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Route render={({ history }) => <SearchBox history={history} />} />\r\n            <Nav className='ml-auto' inline>\r\n              <LinkContainer to='/cart'>\r\n                <Nav.Link className='text-uppercase'>\r\n                  <IconButton aria-label='cart'>\r\n                    <StyledBadge\r\n                      badgeContent={cartItems.length}\r\n                      color='secondary'\r\n                    >\r\n                      <ShoppingCartIcon />\r\n                    </StyledBadge>\r\n                  </IconButton>\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n\r\n              {userInfo ? (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2  mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    {userInfo ? (\r\n                      <Image\r\n                        className='rounded-circle border border-grey'\r\n                        src={user.avatar}\r\n                        alt={userDetails.user?.avatar}\r\n                        style={{ width: '2.5rem', height: '2.5rem' }}\r\n                        fluid\r\n                      />\r\n                    ) : (\r\n                      <Avatar className={classes.orange}>\r\n                        {userInfo.name.substring(0, 1)}\r\n                      </Avatar>\r\n                    )}\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '2' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                          transformOrigin:\r\n                            placement === 'bottom'\r\n                              ? 'center top'\r\n                              : 'center bottom',\r\n                        }}\r\n                      >\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              <MenuItem onClick={handleClose}>\r\n                                <Link\r\n                                  href='/profile'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                    className='pr-1'\r\n                                  />\r\n                                  <strong>PROFILE</strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem onClick={handleClose}>\r\n                                <Link\r\n                                  href='/myorders'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    src='https://img.icons8.com/fluent/24/000000/receipt-dollar.png'\r\n                                    className='pr-1'\r\n                                  />\r\n                                  <strong>MY ORDERS</strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem\r\n                                onClick={logoutHandler}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link\r\n                                  href='/'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/exit.png'\r\n                                  />\r\n                                  <strong>LOG OUT</strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2 mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    <Image src='https://img.icons8.com/fluent/30/000000/circled-menu.png' />\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '2' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                          transformOrigin:\r\n                            placement === 'bottom'\r\n                              ? 'center top'\r\n                              : 'center bottom',\r\n                        }}\r\n                      >\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link href='/login' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/key.png'\r\n                                  />\r\n                                  <strong>SIGN IN</strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link href='/register' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/new-contact.png'\r\n                                  />\r\n                                  <strong>SIGN UP</strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              )}\r\n\r\n              {userInfo && userInfo.isAdmin && (\r\n                <>\r\n                  <NavDropdown\r\n                    title={\r\n                      <Image src='https://img.icons8.com/fluent/38/000000/favorites-shield.png' />\r\n                    }\r\n                    id='nav-dropdown'\r\n                    className='pt-1 navbar-right'\r\n                    style={{ fontSize: '0.865625rem', zIndex: '2' }}\r\n                    alignRight\r\n                    variant='light'\r\n                  >\r\n                    <div>\r\n                      <LinkContainer to='/admin/userlist'>\r\n                        <NavDropdown.Item>\r\n                          <Image\r\n                            className='pr-1'\r\n                            src='https://img.icons8.com/fluent/24/000000/user-menu-male.png'\r\n                          />\r\n                          <strong>USER</strong>\r\n                        </NavDropdown.Item>\r\n                      </LinkContainer>\r\n                      <LinkContainer to='/admin/productlist'>\r\n                        <NavDropdown.Item>\r\n                          <Image\r\n                            className='pr-1'\r\n                            src='https://img.icons8.com/fluent/24/000000/box-settings-1.png'\r\n                          />\r\n                          <strong>PRODUCTS</strong>\r\n                        </NavDropdown.Item>\r\n                      </LinkContainer>\r\n                      <LinkContainer to='/admin/orderlist'>\r\n                        <NavDropdown.Item>\r\n                          <Image\r\n                            className='pr-1'\r\n                            src='https://img.icons8.com/fluent/24/000000/purchase-order.png'\r\n                          />\r\n                          <strong>ORDERS</strong>\r\n                        </NavDropdown.Item>\r\n                      </LinkContainer>\r\n                    </div>\r\n                  </NavDropdown>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js",["224"],"import React, { useEffect, useState } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listProducts } from '../actions/productActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport Product from '../components/Product'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport Meta from '../components/Meta'\r\n\r\nfunction HomeScreen({ match }) {\r\n  const keyword = match.params.keyword\r\n  const pageNumber = match.params.pageNumber || 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products, pages, page } = productList\r\n\r\n  useEffect(() => {\r\n    dispatch(listProducts(keyword, pageNumber))\r\n  }, [dispatch, keyword, pageNumber])\r\n\r\n  return (\r\n    <>\r\n      <Meta />\r\n      {!keyword && <ProductCarousel className='m-0' />}\r\n      <h3 className='mt-5'>Latest Product</h3>\r\n\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <>\r\n          <Row>\r\n            {products?.map((\r\n              product // phai co ? de kiem tra product === null\r\n            ) => (\r\n              <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                <Product product={product} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <div className='d-flex justify-content-center'>\r\n            <Paginate\r\n              pages={pages}\r\n              page={page}\r\n              keyword={keyword ? keyword : ''}\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\store.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js",["225","226"],"import { useState } from 'react'\r\nimport { css } from '@emotion/core'\r\nimport ClipLoader from 'react-spinners/ClipLoader'\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n`\r\n\r\nfunction Loader() {\r\n  let [loading, setLoading] = useState(true)\r\n  let [color, setColor] = useState('orange')\r\n\r\n  return (\r\n    <div className='sweet-loading text-center'>\r\n      <ClipLoader color={color} loading={loading} css={override} size={60} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js",["227","228"],"import Buttonn from '@material-ui/core/Button'\r\nimport ButtonGroupp from '@material-ui/core/ButtonGroup'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions.js'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(0),\r\n    },\r\n\r\n    '& .MuiInputBase-input': {\r\n      padding: theme.spacing(2),\r\n    },\r\n\r\n    '& .MuiFilledInput-input': {\r\n      padding: theme.spacing(2),\r\n    },\r\n\r\n    '& .MuiFilledInput-inputMarginDense': {\r\n      padding: theme.spacing(1),\r\n      textAlign: 'center',\r\n    },\r\n  },\r\n}))\r\n\r\nexport const CartScreen = ({ match, location, history }) => {\r\n  const classes = useStyles()\r\n  const productId = match.params.id\r\n  const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  console.log(cartItems.product)\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      dispatch(addToCart(productId, qty))\r\n    }\r\n  }, [dispatch, productId, qty])\r\n\r\n  const removeFromCartHandler = (id) => {\r\n    dispatch(removeFromCart(id))\r\n  }\r\n\r\n  const checkoutHandler = () => {\r\n    history.push('/login?redirect=shipping')\r\n  }\r\n\r\n  // const test = (e) => {\r\n  //   const value = e.target.value\r\n  //   if (parseInt(value) === 0) {\r\n  //     alert('sai')\r\n  //   }\r\n  //   console.log(value)\r\n  // }\r\n\r\n  return (\r\n    <Col>\r\n      {/* <Link className='btn btn-light my-3 rounded-pill' to='/'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link> */}\r\n\r\n      <Row>\r\n        <Col md={9} className='p-0 pr-4 mt-3 text-uppercase'>\r\n          {cartItems.length === 0 ? (\r\n            // <Announcement variant='danger'>\r\n            <>\r\n              {/* <Row>\r\n                <Col className='mb-2'> */}\r\n              <div className='mb-1'>\r\n                <Link to='/'>\r\n                  <Button className='text-uppercase btn_color rounded-pill'>\r\n                    Shop now\r\n                  </Button>\r\n                </Link>\r\n              </div>\r\n              {/* </Col>\r\n                <Col md={12}> */}\r\n              <div>\r\n                <Image className=' p-5' src='/images/cart_empty.png' fluid />\r\n              </div>\r\n              {/* </Col>\r\n              </Row> */}\r\n            </>\r\n          ) : (\r\n            // </Announcement>\r\n            <ListGroup variant='flush'>\r\n              <h3>Shopping Cart</h3>\r\n              {cartItems.map((item) => (\r\n                <ListGroup.Item\r\n                  key={item.product}\r\n                  className='border-0 mt-1 shadow card_color'\r\n                  rounded\r\n                >\r\n                  <h6>\r\n                    {item.brand} <i class='fas fa-angle-right'></i>\r\n                  </h6>\r\n                  <Row>\r\n                    <Col md={3}>\r\n                      <Link\r\n                        to={`/product/${item.product}`}\r\n                        className='text-decoration-none product-card-green'\r\n                      >\r\n                        <Image src={item.image} alt={item.name} fluid />\r\n                      </Link>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                      <Link\r\n                        to={`/product/${item.product}`}\r\n                        className='text-decoration-none'\r\n                      >\r\n                        <p style={{ color: '#343a40' }}>{item.name}</p>\r\n                      </Link>\r\n                    </Col>\r\n\r\n                    <Col md={2} className='pt-2'>\r\n                      <h4>${item.price}</h4>\r\n                    </Col>\r\n\r\n                    <Col md={2} className='pt-2'>\r\n                      <ButtonGroupp size='small' aria-label='small '>\r\n                        <Buttonn\r\n                          aria-label='reduce'\r\n                          size='small'\r\n                          color='secondary'\r\n                          onClick={() =>\r\n                            item.qty !== 0\r\n                              ? dispatch(\r\n                                  addToCart(\r\n                                    item.product,\r\n                                    Math.max(item.qty - 1, 1)\r\n                                  )\r\n                                )\r\n                              : () => removeFromCartHandler(item.product)\r\n                          }\r\n                          variant='contained'\r\n                        >\r\n                          <RemoveIcon fontSize='small' />\r\n                        </Buttonn>\r\n\r\n                        {/* <Buttonn variant='contained'>{item.qty}</Buttonn> */}\r\n                        <div>\r\n                          <TextField\r\n                            className={classes.root}\r\n                            id='filled-size-small'\r\n                            value={item.qty}\r\n                            variant='filled'\r\n                            size='small'\r\n                            onChange={(e) =>\r\n                              Number(e.target.value) !== 0\r\n                                ? dispatch(\r\n                                    addToCart(\r\n                                      item.product,\r\n                                      Number(e.target.value)\r\n                                    )\r\n                                  )\r\n                                : dispatch(\r\n                                    addToCart(\r\n                                      item.product,\r\n                                      Number((e.target.value = ''))\r\n                                    )\r\n                                  )\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <Buttonn\r\n                          aria-label='increase'\r\n                          size='small'\r\n                          onClick={() =>\r\n                            dispatch(addToCart(item.product, item.qty + 1))\r\n                          }\r\n                          variant='contained'\r\n                          color='secondary'\r\n                        >\r\n                          <AddIcon fontSize='small' />\r\n                        </Buttonn>\r\n                      </ButtonGroupp>\r\n                    </Col>\r\n\r\n                    <Col md={1}>\r\n                      <Button\r\n                        type='button'\r\n                        className='pl-2 pr-2 rounded'\r\n                        variant='light'\r\n                        onClick={() => removeFromCartHandler(item.product)}\r\n                      >\r\n                        <Image src='https://img.icons8.com/fluent/28/000000/delete-forever.png' />\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          )}\r\n        </Col>\r\n\r\n        <Col md={3} className='p-0'>\r\n          <Card className='border-0 shadow mt-4 card_color p-3'>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item className='d-flex justify-content-around '>\r\n                <div>\r\n                  <h5 className='title-bill'>Subtotal: </h5>\r\n                  <h5 className='title-bill'>Price: </h5>\r\n                </div>\r\n                <div>\r\n                  <h5 className='title-bill-value'>\r\n                    {cartItems.reduce((acc, item) => acc + item.qty, 0)} items\r\n                  </h5>\r\n                  <h5 className='title-bill-value'>\r\n                    $\r\n                    {cartItems\r\n                      .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n                      .toFixed(2)}\r\n                  </h5>\r\n                </div>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n          <Card className='mt-3 border-0'>\r\n            <Button\r\n              type='button'\r\n              className='btn-block btn_color rounded-pill text-uppercase p-3 text-light'\r\n              disabled={cartItems === 0}\r\n              onClick={checkoutHandler}\r\n              size='sm'\r\n            >\r\n              <h6 className='text-light m-0'>Proceed To Checkout</h6>\r\n            </Button>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Col>\r\n  )\r\n}\r\n\r\nexport default CartScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js",["229","230","231","232"],"import Avatar from '@material-ui/core/Avatar'\r\nimport Link from '@material-ui/core/Link'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport '../toast.css'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    width: theme.spacing(59),\r\n    height: theme.spacing(60),\r\n    fontSize: '20rem',\r\n  },\r\n}))\r\n\r\nfunction ProfileScreen({ location, history }) {\r\n  const classes = useStyles()\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [avatar, setAvatar] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n  // console.log('hello anh em', userUpdateProfile)\r\n  const { success } = userUpdateProfile\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    error &&\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> {error}\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n\r\n    if (password !== confirmPassword) {\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> Password is not\r\n          match\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    } else {\r\n      dispatch(\r\n        updateUserProfile({ id: user._id, email, name, avatar, password })\r\n      )\r\n\r\n      toast.success(\r\n        <div>\r\n          <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n          Profile Updated\r\n        </div>,\r\n        {\r\n          className: 'Toastify__toast--success',\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setAvatar(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login')\r\n    } else {\r\n      if (!user || !user.name || success) {\r\n        dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n        dispatch(getUserDetails('profile'))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setAvatar(user.avatar)\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user])\r\n\r\n  return (\r\n    <div>\r\n      {message && <Announcement variant='danger'>{message}</Announcement>}\r\n      {error && <Announcement variant='danger'>{error}</Announcement>}\r\n      {/* {loading && <Loader />} */}\r\n      <div className='card_color border-0'>\r\n        <Row className='justify-content-center '>\r\n          <Col\r\n            md={7}\r\n            className='pt-5 shadow '\r\n            style={{\r\n              backgroundColor: '#977bd5',\r\n              // borderTopLeftRadius: '0.8rem',\r\n              // borderBottomLeftRadius: '0.8rem',\r\n            }}\r\n          >\r\n            <div\r\n              className='m-auto text-center'\r\n              style={{\r\n                border: '5px solid #55595c',\r\n                borderRadius: '50%',\r\n                width: '30rem',\r\n                height: '30.6rem',\r\n              }}\r\n            >\r\n              <div className='text-center mb-3'>\r\n                {user.avatar ? (\r\n                  <Image\r\n                    style={{\r\n                      width: '30rem',\r\n                      height: '30rem',\r\n                    }}\r\n                    src={avatar}\r\n                    className='rounded-circle'\r\n                    fluid\r\n                  />\r\n                ) : (\r\n                  <Avatar className={classes.orange}>\r\n                    {userInfo.name.substring(0, 1)}\r\n                  </Avatar>\r\n                )}\r\n              </div>\r\n              <div className='text-center'>\r\n                <Link\r\n                  href='/myorders'\r\n                  style={{\r\n                    fontSize: '0.8rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className='text-decoration-none shadow'\r\n                >\r\n                  <Button\r\n                    variant='outline-light'\r\n                    className='rounded-pill shadow'\r\n                    style={{ fontSize: '1rem', letterSpacing: '0.25rem' }}\r\n                  >\r\n                    MY ORDERS\r\n                  </Button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col\r\n            md={4}\r\n            className='pt-4 pb-4 mr-1 bg-light shadow border-0'\r\n            style={{\r\n              backgroundColor:\r\n                'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%);',\r\n              // borderTopRightRadius: '0.8rem',\r\n              // borderBottomRightRadius: '0.8rem',\r\n            }}\r\n          >\r\n            <h2 className='text-center'>User Profile</h2>\r\n            <Form onSubmit={submitHandler} className='pl-4 pr-4 pt-3'>\r\n              <Form.Group controlId='name'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='name'\r\n                  placeholder='Enter name'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='email'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Email address\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='email'\r\n                  placeholder='Enter email'\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='image'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Image\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter image url'\r\n                  value={avatar}\r\n                  onChange={(e) => setAvatar(e.target.value)}\r\n                ></Form.Control>\r\n                <Form.File\r\n                  className='border border-grey'\r\n                  id='image-file'\r\n                  label='Choose File'\r\n                  custom\r\n                  onChange={uploadFileHandler}\r\n                ></Form.File>\r\n                {uploading && <Loader />}\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='password'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Password\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='password'\r\n                  placeholder='Enter password'\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='password'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Confirm Password\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='password'\r\n                  placeholder='Enter Confirm Password'\r\n                  value={confirmPassword}\r\n                  onChange={(e) => setConfirmPassword(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <div>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-success'\r\n                  className='btn-block shadow rounded-pill'\r\n                  style={{ fontSize: '1rem', letterSpacing: '0.25rem' }}\r\n                >\r\n                  Update\r\n                </Button>\r\n              </div>\r\n              <ToastContainer />\r\n            </Form>{' '}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js",["233","234","235"],"import React, { useState } from 'react'\r\nimport { Button, Form, Container } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport Step from '../components/Step'\r\nimport FormContainer from '../components/FormContainer'\r\n\r\nexport const ShippingScreen = ({ history }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const { shippingAddress, loading } = cart\r\n\r\n  const [address, setAddress] = useState(shippingAddress.address)\r\n  const [city, setCity] = useState(shippingAddress.city)\r\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n  const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n    history.push('./payment')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <Container className='pl-5 pr-5 mb-2 '>\r\n        <Step step1 step2 className='p-5' />\r\n      </Container> */}\r\n      <FormContainer>\r\n        <Step step1 step2 />\r\n\r\n        <Form\r\n          onSubmit={submitHandler}\r\n          className='rounded bg-light shadow p-4 mt-2 border-0'\r\n        >\r\n          <h3 className='pt-3 text-center'>Shipping</h3>\r\n          <Form.Group controlId='address'>\r\n            <Form.Label as='p' className='mb-1'>\r\n              Address\r\n            </Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter address'\r\n              value={address}\r\n              onChange={(e) => setAddress(e.target.value)}\r\n              className='border border-gray rounded-pill'\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='city'>\r\n            <Form.Label as='p' className='mb-1'>\r\n              City\r\n            </Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter city'\r\n              value={city}\r\n              onChange={(e) => setCity(e.target.value)}\r\n              className='border border-gray rounded-pill'\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='postalCode'>\r\n            <Form.Label as='p' className='mb-1'>\r\n              PostalCode\r\n            </Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter postalCode'\r\n              value={postalCode}\r\n              onChange={(e) => setPostalCode(e.target.value)}\r\n              className='border border-gray rounded-pill'\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='country'>\r\n            <Form.Label as='p' className='mb-1'>\r\n              Country\r\n            </Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter country'\r\n              value={country}\r\n              onChange={(e) => setCountry(e.target.value)}\r\n              className='border border-gray rounded-pill'\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <div>\r\n            <Button type='submit' className='btn-block btn_color rounded-pill'>\r\n              Continue\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js",["236","237","238"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Image,\r\n  Card,\r\n  Container,\r\n} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Step from '../components/Step'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\nimport { USER_DETAILS_RESET } from '../constants/userConstants'\r\nimport Announcement from '../components/Announcement'\r\n\r\nPlaceOrderScreen.propTypes = {}\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n\r\n  // Calculate prices\r\n  cart.itemsPrice = cart.cartItems.reduce(\r\n    (acc, item) => acc + item.price + item.qty,\r\n    0\r\n  )\r\n\r\n  const addDecimals = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2)\r\n  }\r\n\r\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2)\r\n\r\n  const orderCreate = useSelector((state) => state.orderCreate)\r\n  const { order, success, error } = orderCreate\r\n\r\n  const placeOrderHandler = () => {\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      history.push(`/order/${order._id}`)\r\n    }\r\n  }, [history, success])\r\n\r\n  return (\r\n    <>\r\n      <Container></Container>\r\n      <Row className='justify-content-center'>\r\n        <Col md={7} className='ml-3 mr-3 pl-0 pr-0 mt-2'>\r\n          <Step step1 step2 step3 step4 />\r\n          <ListGroup\r\n            variant='flush'\r\n            className='shadow pt-3 mt-3 card_color pb-3'\r\n          >\r\n            <ListGroup.Item className='border-0'>\r\n              <h5 className='text-uppercase'>Shiping</h5>\r\n              <p className='mb-1'>\r\n                <strong>Address: </strong>\r\n                {cart.shippingAddress.address}, {cart.shippingAddress.city},{' '}\r\n                {cart.shippingAddress.postalCode},{' '}\r\n                {cart.shippingAddress.country},\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item className='border-0'>\r\n              <h5 className='text-uppercase'>Payment Method</h5>\r\n              <strong>Method: </strong>\r\n              {cart.paymentMethod}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Order Items</h5>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message>Your cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n\r\n                        <Col>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='link-product'\r\n                          >\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                          <b>\r\n                            {item.qty} x ${item.price} = $\r\n                            {item.qty * item.price}\r\n                          </b>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className='shadow mt-2 border-0 card_color pt-3 pb-3'>\r\n            <ListGroup variant='flush' className='card_color'>\r\n              <ListGroup.Item>\r\n                <h4 className='text-uppercase text-center'>Order Summary</h4>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-5'>Items</Col>\r\n                  <Col className='pl-5 pr-0'>\r\n                    <strong>${cart.itemsPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-5'>Shipping</Col>\r\n                  <Col className='pl-5 pr-0'>\r\n                    <strong>${cart.shippingPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-5'>Tax</Col>\r\n                  <Col className='pl-5 pr-0'>\r\n                    <strong>${cart.taxPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-5'>Total</Col>\r\n                  <Col className='pl-5 pr-0'>\r\n                    <strong>${cart.totalPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                {error && (\r\n                  <Announcement variant='danger'>\r\n                    Vui lòng chọn phương thức thanh toán\r\n                  </Announcement>\r\n                )}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Button\r\n                  type='button'\r\n                  className='btn-block  text-uppercase btn-apply btn_color rounded-pill '\r\n                  disabled={cart.cartItems === 0}\r\n                  onClick={placeOrderHandler}\r\n                >\r\n                  <strong>Place Order</strong>\r\n                </Button>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js",["239","240","241"],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js",["242"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  deliverOrder,\r\n  getOrderDetails,\r\n  payOrder,\r\n} from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport {\r\n  ORDER_DELIVER_RESET,\r\n  ORDER_PAY_RESET,\r\n} from '../constants/orderConstants'\r\n\r\nconst OrderScreen = ({ match, history }) => {\r\n  const orderId = match.params.id\r\n\r\n  const [sdkReady, setSdkReady] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  const orderPay = useSelector((state) => state.orderPay)\r\n  const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver)\r\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  if (!loading) {\r\n    //   Calculate prices\r\n    const addDecimals = (num) => {\r\n      return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    order.itemsPrice = addDecimals(\r\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login')\r\n    }\r\n\r\n    const addPayPalScript = async () => {\r\n      const { data: clientId } = await axios.get('/api/config/paypal')\r\n      const script = document.createElement('script')\r\n      script.type = 'text/javascript'\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n      script.async = true\r\n      script.onload = () => {\r\n        setSdkReady(true)\r\n      }\r\n      document.body.appendChild(script)\r\n    }\r\n\r\n    if (!order || successPay || successDeliver) {\r\n      dispatch({ type: ORDER_PAY_RESET })\r\n      dispatch({ type: ORDER_DELIVER_RESET })\r\n      dispatch(getOrderDetails(orderId))\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPalScript()\r\n      } else {\r\n        setSdkReady(true)\r\n      }\r\n    }\r\n  }, [dispatch, orderId, successPay, successDeliver, order])\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    console.log(paymentResult)\r\n    dispatch(payOrder(orderId, paymentResult))\r\n  }\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order))\r\n  }\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message>{error}</Message>\r\n  ) : (\r\n    <>\r\n      <Row className='justify-content-center'>\r\n        <Col md={7} className='ml-3 mr-3 pl-0 pr-0 mt-2'>\r\n          <ListGroup variant='flush' className='card_color_bill p-3'>\r\n            <h2 className='text-center' style={{ color: '#7563c8' }}>\r\n              Order {order._id}\r\n            </h2>\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Shiping</h5>\r\n              <p>\r\n                <strong>Name: </strong> {order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email: </strong>\r\n                <a\r\n                  className='link-product'\r\n                  href={`mailto: ${order.user.email}`}\r\n                >\r\n                  {order.user.email}\r\n                </a>\r\n              </p>\r\n\r\n              <p className='mb-3'>\r\n                <strong>Address: </strong>\r\n                {order.shippingAddress.address}, {order.shippingAddress.city},{' '}\r\n                {order.shippingAddress.postalCode},{' '}\r\n                {order.shippingAddress.country},\r\n              </p>\r\n\r\n              {order.isDelivered ? (\r\n                <Announcement variant='success'>\r\n                  Delivered on {order.deliveredAt}\r\n                </Announcement>\r\n              ) : (\r\n                <Announcement variant='danger'>No Delivered</Announcement>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Payment Method</h5>\r\n              <p>\r\n                <strong>Method: </strong>\r\n                {order.paymentMethod}\r\n              </p>\r\n\r\n              {order.isPaid ? (\r\n                <Announcement variant='success' className='rounded-pill'>\r\n                  Paid on {order.paidAt}\r\n                </Announcement>\r\n              ) : (\r\n                <Announcement variant='danger'>No Paid</Announcement>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Order Items</h5>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='link-product'\r\n                          >\r\n                            <Image\r\n                              src={item.image}\r\n                              alt={item.name}\r\n                              fluid\r\n                              rounded\r\n                              className='border border-gray'\r\n                            />\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col className='d-flex align-items-center' md={5}>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='text-decoration-none '\r\n                          >\r\n                            <p>{item.name}</p>\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={5} className='d-flex align-items-center'>\r\n                          <h5>\r\n                            {item.qty} x ${item.price} = $\r\n                            {item.qty * item.price}\r\n                          </h5>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className='mt-2 border-0'>\r\n            <ListGroup variant='flush' className='card_color_bill p-3 '>\r\n              <ListGroup.Item>\r\n                <h4 className='text-uppercase text-center'>Order Summary</h4>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-4'>Items</Col>\r\n                  <Col className='pl-5 mr-4'>\r\n                    <strong>${order.itemsPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-4'>Shipping</Col>\r\n                  <Col className='pl-5 mr-4'>\r\n                    <strong>${order.shippingPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-4'>Tax</Col>\r\n                  <Col className='pl-5 mr-4'>\r\n                    <strong>${order.taxPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className='pl-5 mr-4 text-danger '>\r\n                    {' '}\r\n                    <h5 className='mb-0'>TOTAL</h5>\r\n                  </Col>\r\n                  <Col className='pl-5 mr-3'>\r\n                    <h5 className='mb-0 text-danger'>${order.totalPrice}</h5>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              {!order.isPaid && (\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {!sdkReady ? (\r\n                    <Loader />\r\n                  ) : (\r\n                    <PayPalButton\r\n                      amount={order.totalPrice}\r\n                      onSuccess={successPaymentHandler}\r\n                    />\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n\r\n              {loadingDeliver && <Loader />}\r\n              {userInfo &&\r\n                userInfo.isAdmin &&\r\n                order.isPaid &&\r\n                !order.isDelivered && (\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      type='button'\r\n                      className='btn_color btn-block rounded-pill'\r\n                      onClick={deliverHandler}\r\n                    >\r\n                      Mark As Delivered\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js",["243","244","245"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport { deleteUser, listUsers } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'Name' },\r\n  { id: 'email', numeric: true, disablePadding: false, label: 'EMAIL' },\r\n  { id: 'isAdmin', numeric: true, disablePadding: false, label: 'ADMIN' },\r\n  { id: 'action', numeric: true, disablePadding: false, label: 'ACTION' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction UserListScreen({ history }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((user) => user._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userList = useSelector((state) => state.userList)\r\n  const { loading, error, users } = userList\r\n\r\n  const emptyRows =\r\n    users !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage)\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDelete = useSelector((state) => state.userDelete)\r\n  const { success: successDelete } = userDelete\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteUser(id))\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = users.find((user) => user._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>Users List</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers())\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch, history, successDelete, userInfo])\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <div className={classes.root}>\r\n            <Paper\r\n              className={classes.paper + 'shadow'}\r\n              style={{\r\n                borderRadius: '1rem',\r\n                border: '0.25px solid #ddd',\r\n              }}\r\n            >\r\n              <TableContainer\r\n                className='text-center p-5'\r\n                style={{\r\n                  borderRadius: '1rem',\r\n                }}\r\n              >\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby='tableTitle'\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label='enhanced table'\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={users.length}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(users, getComparator(order, orderBy))\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((user, index) => {\r\n                        const isItemSelected = isSelected(user._id)\r\n                        const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            onClick={(event) => handleClick(event, user._id)}\r\n                            role='checkbox'\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={user._id}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding='checkbox'>\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              component='th'\r\n                              id={labelId}\r\n                              scope='row'\r\n                              padding='none'\r\n                              align='center'\r\n                            >\r\n                              {user._id}\r\n                            </TableCell>\r\n                            <TableCell align='left' className='text-center'>\r\n                              {user.name}\r\n                            </TableCell>\r\n                            <TableCell align='center'>{user.email}</TableCell>\r\n                            <TableCell align='center'>\r\n                              {' '}\r\n                              {user.isAdmin ? (\r\n                                <i\r\n                                  className='fas fa-check'\r\n                                  style={{ color: 'green' }}\r\n                                ></i>\r\n                              ) : (\r\n                                <i\r\n                                  className='fas fa-times'\r\n                                  style={{ color: 'red' }}\r\n                                ></i>\r\n                              )}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              <LinkContainer\r\n                                to={`/admin/user/${user._id}/edit`}\r\n                              >\r\n                                <Button\r\n                                  variant='info'\r\n                                  className='btn-sm rounded-pill'\r\n                                >\r\n                                  <i className='far fa-edit'></i>\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                    {emptyRows > 0 && (\r\n                      <TableRow\r\n                        style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                      >\r\n                        <TableCell colSpan={6} />\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component='div'\r\n                count={users.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n            <FormControlLabel\r\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n              label='Dense padding'\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js",["246","247"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport {\r\n  USER_UPDATE_RESET\r\n} from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n      history.push('/admin/userlist')\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link to='/admin/userlist' className='btn btn-light my-3 text-uppercase'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer sm>\r\n        <h2>Edit User</h2>\r\n        {loadingUpdate ? (\r\n          <Loader /> \r\n        ) && <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess> : errorUpdate ? (\r\n          <Message>{errorUpdate}</Message>\r\n        ) : loading ? (\r\n          <Loader />\r\n        ) : (\r\n          <Form onSubmit={submitHandler} md={10}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter email'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='idAdmin'>\r\n              <Form.Check\r\n                type='checkbox'\r\n                label='Is Admin'\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n            <Button type='submit' variant='warning'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js",["248"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport { default as React, useEffect } from 'react'\r\nimport { Button, Col, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  createProduct,\r\n  deleteProduct,\r\n  listProducts,\r\n} from '../actions/productActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: false, disablePadding: false, label: 'NAME' },\r\n  { id: 'image', numeric: false, disablePadding: false, label: 'IMAGE' },\r\n  { id: 'price', numeric: true, disablePadding: false, label: 'PRICE' },\r\n  { id: 'category', numeric: false, disablePadding: false, label: 'CATEGORY' },\r\n  { id: 'brand', numeric: false, disablePadding: false, label: 'BRAND' },\r\n  { id: 'quantity', numeric: true, disablePadding: false, label: 'QUANTITY' },\r\n  { id: 'action', numeric: false, disablePadding: false, label: 'ACTION' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = products.map((product) => product._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n  const pageNumber = match.params.pageNumber || 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products } = productList\r\n\r\n  const emptyRows =\r\n    products !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, products.length - page * rowsPerPage)\r\n\r\n  const productDelete = useSelector((state) => state.productDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = productDelete\r\n\r\n  const productCreate = useSelector((state) => state.productCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    product: createdProduct,\r\n  } = productCreate\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n    if (!userInfo.isAdmin) {\r\n      history.push('/login')\r\n    }\r\n\r\n    if (successCreate) {\r\n      history.push(`/admin/product/${createdProduct._id}/edit`)\r\n    } else {\r\n      dispatch(listProducts('', pageNumber))\r\n    }\r\n  }, [dispatch, history, userInfo, successDelete, successCreate, createProduct])\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteProduct(id))\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          ></Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  const createProductHandle = () => {\r\n    dispatch(createProduct())\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row className='align-items-center'>\r\n        <Col>\r\n          <h2 className='text-uppercase'>Products</h2>\r\n        </Col>\r\n        <Col className='text-right'>\r\n          <Button\r\n            className='my-3 text-uppercase btn-teal btn_color rounded-pill'\r\n            onClick={createProductHandle}\r\n          >\r\n            <i className='fas fa-plus'></i> Create Product\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      {loadingDelete && <Loader />}\r\n      {errorDelete && <Message>{errorDelete}</Message>}\r\n      {loadingCreate && <Loader />}\r\n      {errorCreate && <Message>{errorCreate}</Message>}\r\n\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <div className={classes.root}>\r\n            <Paper\r\n              className={classes.paper + 'shadow'}\r\n              style={{\r\n                borderRadius: '1rem',\r\n                border: '0.25px solid #ddd',\r\n              }}\r\n            >\r\n              <TableContainer\r\n                className='text-center p-2'\r\n                style={{\r\n                  borderRadius: '1rem',\r\n                }}\r\n              >\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby='tableTitle'\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label='enhanced table'\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={products.length}\r\n                    colSpan={1}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(products, getComparator(order, orderBy))\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((product, index) => {\r\n                        const isItemSelected = isSelected(product._id)\r\n                        const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            onClick={(event) => handleClick(event, product._id)}\r\n                            role='checkbox'\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={product._id}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding='checkbox'>\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              component='th'\r\n                              id={labelId}\r\n                              scope='row'\r\n                              padding='none'\r\n                              align='center'\r\n                            >\r\n                              {product._id}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              align='left'\r\n                              component='th'\r\n                              className='text-center'\r\n                            >\r\n                              {product.name}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              <Image\r\n                                src={product.image}\r\n                                fluid\r\n                                className='rounded-circle p-1'\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              ${product.price}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {product.category}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {product.brand}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              align='center'\r\n                              style={{ padding: '1px' }}\r\n                            >\r\n                              {product.countInStock}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              <LinkContainer\r\n                                to={`/admin/product/${product._id}/edit`}\r\n                              >\r\n                                <Button\r\n                                  variant='info'\r\n                                  className='btn-block rounded-pill'\r\n                                >\r\n                                  <i className='far fa-edit'></i>\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                    {emptyRows > 0 && (\r\n                      <TableRow\r\n                        style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                      >\r\n                        <TableCell colSpan={6} />\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component='div'\r\n                count={products.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n            <FormControlLabel\r\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n              label='Dense padding'\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js",["249","250","251","252","253"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      history.push('/admin/productlist')\r\n    } else {\r\n      if (!product.name || product._id != productId) {\r\n        dispatch(listProductDetails(productId))\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInStock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, history, productId, product, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link\r\n        to='/admin/productlist'\r\n        className='btn btn-light my-3 text-uppercase'\r\n      >\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message>{error}</Message>\r\n        ) : (\r\n          <>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow rounded'\r\n            >\r\n              <h2 className='text-center'>Edit Product</h2>\r\n              <Form.Group controlId='name' className='pl-3 pr-3 pt-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='name'\r\n                  placeholder='Enter name'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='price' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Price\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='number'\r\n                  placeholder='Enter price'\r\n                  value={price}\r\n                  onChange={(e) => setPrice(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Image\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter image url'\r\n                  value={image}\r\n                  onChange={(e) => setImage(e.target.value)}\r\n                ></Form.Control>\r\n                <Form.File\r\n                  className='border border-grey'\r\n                  id='image-file'\r\n                  label='Choose File'\r\n                  custom\r\n                  onChange={uploadFileHandler}\r\n                ></Form.File>\r\n                {uploading && <Loader />}\r\n              </Form.Group>\r\n\r\n              <Row>\r\n                <Col>\r\n                  <Form.Group controlId='brand' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Brand\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey'\r\n                      type='text'\r\n                      placeholder='Enter brand'\r\n                      value={brand}\r\n                      onChange={(e) => setBrand(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={5}>\r\n                  <Form.Group controlId='countInStock' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Count In Stock\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey'\r\n                      type='number'\r\n                      placeholder='Enter countInStock'\r\n                      value={countInStock}\r\n                      onChange={(e) => setCountInStock(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Form.Group controlId='category' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Category\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter category'\r\n                  value={category}\r\n                  onChange={(e) => setCategory(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='description' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  rows={3}\r\n                  as='textarea'\r\n                  placeholder='Enter description'\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <div className='pl-3 pr-3'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-success'\r\n                  className='btn-block'\r\n                  style={{ fontSize: '1rem', letterSpacing: '0.25rem' }}\r\n                >\r\n                  Update\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js",["254","255","256","257"],"F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js",["258"],"import Button from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\r\nimport lime from '@material-ui/core/colors/lime'\r\n\r\nconst theme = createMuiTheme({\r\n  success: {\r\n    main: '#bac778',\r\n  },\r\n\r\n  palette: {\r\n    primary: {\r\n      light: '#ea605d',\r\n      main: '#e53935',\r\n      dark: '#a02725',\r\n      contrastText: '#fff',\r\n    },\r\n\r\n    secondary: {\r\n      light: '#57975b',\r\n      main: '#7563c8',\r\n      dark: '#6353a7',\r\n      contrastText: '#fff',\r\n      borderRadius: '1rem',\r\n    },\r\n  },\r\n})\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    // margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nexport default function IconLabelButtons({\r\n  color,\r\n  value,\r\n  size,\r\n  endIcon,\r\n  startIcon,\r\n  onClick,\r\n  disabled,\r\n  type,\r\n}) {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={theme}>\r\n        <Button\r\n          variant='contained'\r\n          size={size}\r\n          color={color}\r\n          endIcon={endIcon}\r\n          startIcon={startIcon}\r\n          className={classes.button}\r\n          onClick={onClick}\r\n          disabled={disabled}\r\n          type={type}\r\n          borderRadius={16}\r\n        >\r\n          {value}\r\n        </Button>\r\n      </ThemeProvider>\r\n    </div>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js",["259","260","261","262","263"],"import { React, useState } from 'react'\r\nimport { Form, Button, Image, InputGroup } from 'react-bootstrap'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { FormGroup, Input } from '@material-ui/core'\r\nimport InputBase from '@material-ui/core/InputBase'\r\n\r\nconst SearchBox = ({ history }) => {\r\n  const [keyword, setKeyword] = useState('')\r\n\r\n  const submitHandle = (e) => {\r\n    e.preventDefault()\r\n    if (keyword.trim()) {\r\n      history.push(`/search/${keyword}`)\r\n    } else {\r\n      history.push('/')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={submitHandle} inline>\r\n      <div className='d-flex'>\r\n        <Form.Control\r\n          type='text'\r\n          name='q'\r\n          placeholder='Search Product...'\r\n          className='mr-sm-2 ml-sm-5 rounded-pill'\r\n          onChange={(e) => setKeyword(e.target.value)}\r\n        ></Form.Control>\r\n      </div>\r\n\r\n      <Button\r\n        type='submit'\r\n        className='p-2 btn_color rounded-pill'\r\n        style={{ fontSize: '0.7rem' }}\r\n      >\r\n        <SearchIcon />\r\n      </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js",["264","265","266","267","268","269","270"],"import CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Image, Table } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { listMyOrders } from '../actions/orderActions'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport '../toast.css'\r\n\r\nconst MyOrdersScreen = ({ history }) => {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n  const { success } = userUpdateProfile\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy)\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    error &&\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> {error}\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n\r\n    if (password !== confirmPassword) {\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> Password is not\r\n          match\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    } else {\r\n      dispatch(updateUserProfile({ id: user._id, email, name, password }))\r\n      toast.success(\r\n        <div>\r\n          <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n          Profile Updated\r\n        </div>,\r\n        {\r\n          className: 'Toastify__toast--success',\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push()\r\n    } else {\r\n      if (!user.name) {\r\n        dispatch(getUserDetails('profile'))\r\n        dispatch(listMyOrders())\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user])\r\n  return (\r\n    <>\r\n      <h2>My Order</h2>\r\n      {loadingOrders ? (\r\n        <Loader />\r\n      ) : errorOrders ? (\r\n        <Announcement variant='danger'>{errorOrders}</Announcement>\r\n      ) : (\r\n        <>\r\n          <Table\r\n            striped\r\n            bordered\r\n            hover\r\n            responsive\r\n            className='table-sm align-items-center text-center rounded shadow bg-light '\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>NAME</th>\r\n                <th>IMAGE</th>\r\n                <th>DATE</th>\r\n                <th>TOTAL</th>\r\n                <th>PAID</th>\r\n                <th>DELIVERED</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td className=' pb-1'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <td key={index} className='border-0 pb-1 pt-1'>\r\n                        {item.name}\r\n                      </td>\r\n                    ))}\r\n                  </td>\r\n                  <td style={{ width: '2rem', height: '2rem' }} className='p-0'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <td key={index} className='p-1 border-0'>\r\n                        <Image\r\n                          src={item.image}\r\n                          alt={item.name}\r\n                          fluid\r\n                          rounded\r\n                          className='border border-grey'\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                  </td>\r\n                  <td>\r\n                    {order.createdAt.substring(11, 19)}\r\n                    {' - '}\r\n                    {order.createdAt.substring(0, 10)}\r\n                  </td>\r\n                  <td>\r\n                    {order.isPaid ? (\r\n                      order.paidAt.substring(11, 19) +\r\n                      ' : ' +\r\n                      order.paidAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {order.isDelivered ? (\r\n                      order.deliveredAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td className='p-1 pt-2'>\r\n                    <LinkContainer to={`/orders/${order._id}`}>\r\n                      <Button variant='dark' className='text-uppercase p-2'>\r\n                        Details\r\n                      </Button>\r\n                    </LinkContainer>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyOrdersScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\UScreen.js",["271"],{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","severity":1,"message":"277","line":6,"column":8,"nodeType":"278","messageId":"279","endLine":6,"endColumn":23},{"ruleId":"276","severity":1,"message":"280","line":21,"column":10,"nodeType":"278","messageId":"279","endLine":21,"endColumn":24},{"ruleId":"276","severity":1,"message":"281","line":69,"column":10,"nodeType":"278","messageId":"279","endLine":69,"endColumn":18},{"ruleId":"276","severity":1,"message":"282","line":71,"column":9,"nodeType":"278","messageId":"279","endLine":71,"endColumn":20},{"ruleId":"276","severity":1,"message":"283","line":1,"column":28,"nodeType":"278","messageId":"279","endLine":1,"endColumn":36},{"ruleId":"276","severity":1,"message":"284","line":12,"column":17,"nodeType":"278","messageId":"279","endLine":12,"endColumn":27},{"ruleId":"276","severity":1,"message":"285","line":13,"column":15,"nodeType":"278","messageId":"279","endLine":13,"endColumn":23},{"ruleId":"276","severity":1,"message":"286","line":12,"column":8,"nodeType":"278","messageId":"279","endLine":12,"endColumn":20},{"ruleId":"276","severity":1,"message":"287","line":13,"column":8,"nodeType":"278","messageId":"279","endLine":13,"endColumn":14},{"ruleId":"276","severity":1,"message":"288","line":15,"column":22,"nodeType":"278","messageId":"279","endLine":15,"endColumn":32},{"ruleId":"276","severity":1,"message":"289","line":41,"column":19,"nodeType":"278","messageId":"279","endLine":41,"endColumn":29},{"ruleId":"276","severity":1,"message":"290","line":46,"column":11,"nodeType":"278","messageId":"279","endLine":46,"endColumn":18},{"ruleId":"291","severity":1,"message":"292","line":149,"column":6,"nodeType":"293","endLine":149,"endColumn":41,"suggestions":"294"},{"ruleId":"276","severity":1,"message":"295","line":2,"column":24,"nodeType":"278","messageId":"279","endLine":2,"endColumn":33},{"ruleId":"276","severity":1,"message":"296","line":5,"column":8,"nodeType":"278","messageId":"279","endLine":5,"endColumn":21},{"ruleId":"276","severity":1,"message":"290","line":11,"column":28,"nodeType":"278","messageId":"279","endLine":11,"endColumn":35},{"ruleId":"276","severity":1,"message":"297","line":16,"column":10,"nodeType":"278","messageId":"279","endLine":16,"endColumn":28},{"ruleId":"276","severity":1,"message":"298","line":17,"column":10,"nodeType":"278","messageId":"279","endLine":17,"endColumn":28},{"ruleId":"291","severity":1,"message":"299","line":66,"column":6,"nodeType":"293","endLine":66,"endColumn":24,"suggestions":"300"},{"ruleId":"301","severity":2,"message":"302","line":237,"column":13,"nodeType":"278","messageId":"303","endLine":237,"endColumn":32},{"ruleId":"301","severity":2,"message":"304","line":253,"column":13,"nodeType":"278","messageId":"303","endLine":253,"endColumn":32},{"ruleId":"301","severity":2,"message":"305","line":257,"column":13,"nodeType":"278","messageId":"303","endLine":257,"endColumn":29},{"ruleId":"291","severity":1,"message":"306","line":79,"column":6,"nodeType":"293","endLine":79,"endColumn":60,"suggestions":"307"},{"ruleId":"276","severity":1,"message":"308","line":30,"column":10,"nodeType":"278","messageId":"279","endLine":30,"endColumn":26},{"ruleId":"276","severity":1,"message":"309","line":30,"column":28,"nodeType":"278","messageId":"279","endLine":30,"endColumn":42},{"ruleId":"276","severity":1,"message":"310","line":263,"column":11,"nodeType":"278","messageId":"279","endLine":263,"endColumn":14},{"ruleId":"276","severity":1,"message":"311","line":24,"column":20,"nodeType":"278","messageId":"279","endLine":24,"endColumn":25},{"ruleId":"291","severity":1,"message":"312","line":51,"column":6,"nodeType":"293","endLine":51,"endColumn":45,"suggestions":"313"},{"ruleId":"291","severity":1,"message":"314","line":286,"column":6,"nodeType":"293","endLine":286,"endColumn":80,"suggestions":"315"},{"ruleId":"276","severity":1,"message":"280","line":6,"column":10,"nodeType":"278","messageId":"279","endLine":6,"endColumn":24},{"ruleId":"276","severity":1,"message":"316","line":6,"column":26,"nodeType":"278","messageId":"279","endLine":6,"endColumn":36},{"ruleId":"276","severity":1,"message":"317","line":11,"column":8,"nodeType":"278","messageId":"279","endLine":11,"endColumn":22},{"ruleId":"276","severity":1,"message":"318","line":12,"column":10,"nodeType":"278","messageId":"279","endLine":12,"endColumn":27},{"ruleId":"319","severity":1,"message":"320","line":84,"column":40,"nodeType":"321","messageId":"322","endLine":84,"endColumn":42},{"ruleId":"276","severity":1,"message":"323","line":237,"column":9,"nodeType":"278","messageId":"279","endLine":237,"endColumn":19},{"ruleId":"301","severity":2,"message":"324","line":237,"column":22,"nodeType":"278","messageId":"303","endLine":237,"endColumn":27},{"ruleId":"301","severity":2,"message":"325","line":260,"column":16,"nodeType":"278","messageId":"303","endLine":260,"endColumn":26},{"ruleId":"301","severity":2,"message":"326","line":449,"column":22,"nodeType":"278","messageId":"303","endLine":449,"endColumn":30},{"ruleId":"276","severity":1,"message":"327","line":5,"column":8,"nodeType":"278","messageId":"279","endLine":5,"endColumn":12},{"ruleId":"276","severity":1,"message":"328","line":2,"column":24,"nodeType":"278","messageId":"279","endLine":2,"endColumn":29},{"ruleId":"276","severity":1,"message":"329","line":2,"column":31,"nodeType":"278","messageId":"279","endLine":2,"endColumn":41},{"ruleId":"276","severity":1,"message":"330","line":4,"column":10,"nodeType":"278","messageId":"279","endLine":4,"endColumn":19},{"ruleId":"276","severity":1,"message":"331","line":4,"column":21,"nodeType":"278","messageId":"279","endLine":4,"endColumn":26},{"ruleId":"276","severity":1,"message":"332","line":5,"column":8,"nodeType":"278","messageId":"279","endLine":5,"endColumn":17},{"ruleId":"276","severity":1,"message":"333","line":18,"column":20,"nodeType":"278","messageId":"279","endLine":18,"endColumn":31},{"ruleId":"276","severity":1,"message":"334","line":19,"column":27,"nodeType":"278","messageId":"279","endLine":19,"endColumn":45},{"ruleId":"276","severity":1,"message":"335","line":20,"column":10,"nodeType":"278","messageId":"279","endLine":20,"endColumn":17},{"ruleId":"276","severity":1,"message":"289","line":20,"column":19,"nodeType":"278","messageId":"279","endLine":20,"endColumn":29},{"ruleId":"276","severity":1,"message":"290","line":25,"column":11,"nodeType":"278","messageId":"279","endLine":25,"endColumn":18},{"ruleId":"276","severity":1,"message":"336","line":31,"column":11,"nodeType":"278","messageId":"279","endLine":31,"endColumn":18},{"ruleId":"276","severity":1,"message":"337","line":36,"column":9,"nodeType":"278","messageId":"279","endLine":36,"endColumn":22},{"ruleId":"276","severity":1,"message":"310","line":262,"column":11,"nodeType":"278","messageId":"279","endLine":262,"endColumn":14},"no-native-reassign",["338"],"no-negated-in-lhs",["339"],"no-unused-vars","'ProductCarousel' is defined but never used.","Identifier","unusedVar","'getUserDetails' is defined but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'useState' is defined but never used.","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","'Announcement' is defined but never used.","'Loader' is defined but never used.","'withStyles' is defined but never used.","'setMessage' is assigned a value but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'success'. Either include it or remove the dependency array.","ArrayExpression",["340"],"'Container' is defined but never used.","'CheckoutSteps' is defined but never used.","'ORDER_CREATE_RESET' is defined but never used.","'USER_DETAILS_RESET' is defined but never used.","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.",["341"],"no-undef","'USER_DELETE_REQUEST' is not defined.","undef","'USER_DELETE_SUCCESS' is not defined.","'USER_DELETE_FAIL' is not defined.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["342"],"'MuiThemeProvider' is defined but never used.","'createMuiTheme' is defined but never used.","'did' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["343"],"React Hook useEffect has missing dependencies: 'createdProduct._id' and 'pageNumber'. Either include them or remove the dependency array. Outer scope values like 'createProduct' aren't valid dependencies because mutating them doesn't re-render the component.",["344"],"'updateUser' is defined but never used.","'MessageSuccess' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'pageNumber' is assigned a value but never used.","'match' is not defined.","'deleteUser' is not defined.","'products' is not defined.","'lime' is defined but never used.","'Image' is defined but never used.","'InputGroup' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'InputBase' is defined but never used.","'setPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'message' is assigned a value but never used.","'success' is assigned a value but never used.","'submitHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},"Update the dependencies array to be: [dispatch, history, userInfo, user, success]",{"range":"355","text":"356"},"Update the dependencies array to be: [history, order._id, success]",{"range":"357","text":"358"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, order, userInfo, history]",{"range":"359","text":"360"},"Update the dependencies array to be: [dispatch, user, userId, successUpdate, history]",{"range":"361","text":"362"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, createdProduct._id, pageNumber]",{"range":"363","text":"364"},[4423,4458],"[dispatch, history, userInfo, user, success]",[1836,1854],"[history, order._id, success]",[2453,2507],"[dispatch, orderId, successPay, successDeliver, order, userInfo, history]",[1578,1617],"[dispatch, user, userId, successUpdate, history]",[8818,8892],"[dispatch, history, userInfo, successDelete, successCreate, createdProduct._id, pageNumber]"]