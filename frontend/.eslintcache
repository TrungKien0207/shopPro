[{"F:\\Code\\shopPro\\frontend\\src\\index.js":"1","F:\\Code\\shopPro\\frontend\\src\\App.js":"2","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js":"3","F:\\Code\\shopPro\\frontend\\src\\components\\Header.js":"4","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js":"5","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js":"6","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js":"7","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js":"8","F:\\Code\\shopPro\\frontend\\src\\store.js":"9","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js":"10","F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js":"11","F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js":"12","F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js":"13","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js":"14","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js":"15","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js":"16","F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js":"17","F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js":"18","F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js":"19","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js":"20","F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js":"21","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js":"22","F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js":"23","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js":"24","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js":"25","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js":"26","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js":"27","F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js":"28","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js":"29","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js":"30","F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js":"31","F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js":"32","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js":"33","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js":"34","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js":"35","F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js":"36","F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js":"37","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js":"38","F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js":"39","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js":"40","F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js":"41","F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js":"42","F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js":"43","F:\\Code\\shopPro\\frontend\\src\\configAuth.js":"44","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js":"45","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js":"46","F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js":"47","F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js":"48","F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js":"49","F:\\Code\\shopPro\\frontend\\src\\components\\test.js":"50","F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js":"51","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js":"52","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js":"53","F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js":"54","F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js":"55","F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js":"56","F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js":"57","F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js":"58","F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js":"59","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js":"60","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js":"61","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js":"62","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js":"63","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js":"64","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js":"65","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js":"66","F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js":"67","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js":"68","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js":"69","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js":"70","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js":"71","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js":"72","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js":"73","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js":"74","F:\\Code\\shopPro\\frontend\\src\\actions\\cloudinary.js":"75","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\ListNumber.js":"76","F:\\Code\\shopPro\\frontend\\src\\actions\\notificationsAction.js":"77","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\NotificationsDropDown.js":"78","F:\\Code\\shopPro\\frontend\\src\\screens\\UsersAddressListScreen.js":"79","F:\\Code\\shopPro\\frontend\\src\\actions\\subCategoryAction.js":"80","F:\\Code\\shopPro\\frontend\\src\\constants\\subCategoryConstants.js":"81","F:\\Code\\shopPro\\frontend\\src\\reducers\\subCategoryReducers.js":"82","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SubCategoryListScreen.js":"83","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SubCategoryEditScreen.js":"84","F:\\Code\\shopPro\\frontend\\src\\reducers\\saleReducer.js":"85","F:\\Code\\shopPro\\frontend\\src\\constants\\saleConstants.js":"86","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SaleListScreen.js":"87","F:\\Code\\shopPro\\frontend\\src\\actions\\saleAction.js":"88","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SaleEditScreen.js":"89","F:\\Code\\shopPro\\frontend\\src\\reducers\\codeReducers.js":"90","F:\\Code\\shopPro\\frontend\\src\\constants\\codeConstants.js":"91","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CodeListScreen.js":"92","F:\\Code\\shopPro\\frontend\\src\\actions\\codeAction.js":"93","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CodeEditScreen.js":"94","F:\\Code\\shopPro\\frontend\\src\\screens\\SearchScreen.js":"95","F:\\Code\\shopPro\\frontend\\src\\screens\\ChatScreen.js":"96","F:\\Code\\shopPro\\frontend\\src\\components\\MessageChat.js":"97","F:\\Code\\shopPro\\frontend\\src\\firebase.js":"98","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminChatScreen.js":"99","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\AdminMessageChat.js":"100","F:\\Code\\shopPro\\frontend\\src\\components\\KonChat.js":"101"},{"size":629,"mtime":1620119595981,"results":"102","hashOfConfig":"103"},{"size":10648,"mtime":1623167591500,"results":"104","hashOfConfig":"103"},{"size":362,"mtime":499162500000,"results":"105","hashOfConfig":"103"},{"size":26353,"mtime":1622270941054,"results":"106","hashOfConfig":"103"},{"size":11268,"mtime":1620267385392,"results":"107","hashOfConfig":"103"},{"size":8722,"mtime":1623190188288,"results":"108","hashOfConfig":"103"},{"size":5647,"mtime":1622862600771,"results":"109","hashOfConfig":"103"},{"size":32321,"mtime":1622880547419,"results":"110","hashOfConfig":"103"},{"size":6093,"mtime":1622969122255,"results":"111","hashOfConfig":"103"},{"size":8470,"mtime":1622273387536,"results":"112","hashOfConfig":"103"},{"size":3358,"mtime":1622273283293,"results":"113","hashOfConfig":"103"},{"size":12313,"mtime":1622273320752,"results":"114","hashOfConfig":"103"},{"size":567,"mtime":1615791677731,"results":"115","hashOfConfig":"103"},{"size":689,"mtime":1619547659359,"results":"116","hashOfConfig":"103"},{"size":25252,"mtime":1622897135396,"results":"117","hashOfConfig":"103"},{"size":1184,"mtime":1615605660974,"results":"118","hashOfConfig":"103"},{"size":1425,"mtime":1622660841978,"results":"119","hashOfConfig":"103"},{"size":238,"mtime":1612540677571,"results":"120","hashOfConfig":"103"},{"size":8565,"mtime":1622295495729,"results":"121","hashOfConfig":"103"},{"size":3634,"mtime":1621830105112,"results":"122","hashOfConfig":"103"},{"size":8418,"mtime":1623165762956,"results":"123","hashOfConfig":"103"},{"size":402,"mtime":1612087628650,"results":"124","hashOfConfig":"103"},{"size":10424,"mtime":1621830196924,"results":"125","hashOfConfig":"103"},{"size":9066,"mtime":1622896989589,"results":"126","hashOfConfig":"103"},{"size":25152,"mtime":1623164479437,"results":"127","hashOfConfig":"103"},{"size":12712,"mtime":1622897602804,"results":"128","hashOfConfig":"103"},{"size":1643,"mtime":1612593111433,"results":"129","hashOfConfig":"103"},{"size":3454,"mtime":1622897318215,"results":"130","hashOfConfig":"103"},{"size":13103,"mtime":1623204959791,"results":"131","hashOfConfig":"103"},{"size":7521,"mtime":1622969101359,"results":"132","hashOfConfig":"103"},{"size":2670,"mtime":1622968943069,"results":"133","hashOfConfig":"103"},{"size":10733,"mtime":1622969029163,"results":"134","hashOfConfig":"103"},{"size":20717,"mtime":1623204458795,"results":"135","hashOfConfig":"103"},{"size":855,"mtime":1619547664611,"results":"136","hashOfConfig":"103"},{"size":311,"mtime":1619377332627,"results":"137","hashOfConfig":"103"},{"size":995,"mtime":1618210153490,"results":"138","hashOfConfig":"103"},{"size":1297,"mtime":1619197232259,"results":"139","hashOfConfig":"103"},{"size":3613,"mtime":1619707633985,"results":"140","hashOfConfig":"103"},{"size":2347,"mtime":1620526178345,"results":"141","hashOfConfig":"103"},{"size":2090,"mtime":1621262623606,"results":"142","hashOfConfig":"103"},{"size":1725,"mtime":1616170962837,"results":"143","hashOfConfig":"103"},{"size":514,"mtime":1615015305728,"results":"144","hashOfConfig":"103"},{"size":22583,"mtime":1622896903844,"results":"145","hashOfConfig":"103"},{"size":393,"mtime":1616226016215,"results":"146","hashOfConfig":"103"},{"size":5057,"mtime":1617288730631,"results":"147","hashOfConfig":"103"},{"size":514,"mtime":1617284362928,"results":"148","hashOfConfig":"103"},{"size":3260,"mtime":1622184108559,"results":"149","hashOfConfig":"103"},{"size":1148,"mtime":1617555469184,"results":"150","hashOfConfig":"103"},{"size":4859,"mtime":1617764862267,"results":"151","hashOfConfig":"103"},{"size":0,"mtime":1617780641945,"results":"152","hashOfConfig":"103"},{"size":251,"mtime":1617900546652,"results":"153","hashOfConfig":"103"},{"size":10326,"mtime":1623167073084,"results":"154","hashOfConfig":"103"},{"size":855,"mtime":1618203083711,"results":"155","hashOfConfig":"103"},{"size":1802,"mtime":1611471571179,"results":"156","hashOfConfig":"103"},{"size":10176,"mtime":1623203595113,"results":"157","hashOfConfig":"103"},{"size":1395,"mtime":1622881204334,"results":"158","hashOfConfig":"103"},{"size":4900,"mtime":1619943611553,"results":"159","hashOfConfig":"103"},{"size":1148,"mtime":1619935367616,"results":"160","hashOfConfig":"103"},{"size":3073,"mtime":1619936932800,"results":"161","hashOfConfig":"103"},{"size":4476,"mtime":1622883179326,"results":"162","hashOfConfig":"103"},{"size":25967,"mtime":1622898394663,"results":"163","hashOfConfig":"103"},{"size":7144,"mtime":1622883196484,"results":"164","hashOfConfig":"103"},{"size":19729,"mtime":1622896808950,"results":"165","hashOfConfig":"103"},{"size":20301,"mtime":1622896541922,"results":"166","hashOfConfig":"103"},{"size":22616,"mtime":1622896688531,"results":"167","hashOfConfig":"103"},{"size":23519,"mtime":1623190095935,"results":"168","hashOfConfig":"103"},{"size":815,"mtime":1620138964451,"results":"169","hashOfConfig":"103"},{"size":24829,"mtime":1622896429162,"results":"170","hashOfConfig":"103"},{"size":46880,"mtime":1623165716109,"results":"171","hashOfConfig":"103"},{"size":4658,"mtime":1622896597339,"results":"172","hashOfConfig":"103"},{"size":25018,"mtime":1623165149239,"results":"173","hashOfConfig":"103"},{"size":23869,"mtime":1622896469613,"results":"174","hashOfConfig":"103"},{"size":4079,"mtime":1622896765647,"results":"175","hashOfConfig":"103"},{"size":11223,"mtime":1622896790625,"results":"176","hashOfConfig":"103"},{"size":331,"mtime":1621665934913,"results":"177","hashOfConfig":"103"},{"size":8363,"mtime":1621444444445,"results":"178","hashOfConfig":"103"},{"size":1638,"mtime":1622284180519,"results":"179","hashOfConfig":"103"},{"size":2309,"mtime":1622300352329,"results":"180","hashOfConfig":"103"},{"size":25960,"mtime":1623164654316,"results":"181","hashOfConfig":"103"},{"size":5609,"mtime":1622220915043,"results":"182","hashOfConfig":"103"},{"size":1292,"mtime":1622184210031,"results":"183","hashOfConfig":"103"},{"size":3369,"mtime":1622219738168,"results":"184","hashOfConfig":"103"},{"size":26955,"mtime":1622896753517,"results":"185","hashOfConfig":"103"},{"size":6793,"mtime":1622896408750,"results":"186","hashOfConfig":"103"},{"size":2586,"mtime":1622623266297,"results":"187","hashOfConfig":"103"},{"size":1052,"mtime":1622623140858,"results":"188","hashOfConfig":"103"},{"size":25050,"mtime":1622896740413,"results":"189","hashOfConfig":"103"},{"size":4313,"mtime":1622863348261,"results":"190","hashOfConfig":"103"},{"size":4665,"mtime":1622896718108,"results":"191","hashOfConfig":"103"},{"size":2587,"mtime":1622642951490,"results":"192","hashOfConfig":"103"},{"size":1052,"mtime":1622642499918,"results":"193","hashOfConfig":"103"},{"size":29970,"mtime":1622896627428,"results":"194","hashOfConfig":"103"},{"size":4290,"mtime":1622645351347,"results":"195","hashOfConfig":"103"},{"size":6702,"mtime":1622896616675,"results":"196","hashOfConfig":"103"},{"size":2411,"mtime":1622910796464,"results":"197","hashOfConfig":"103"},{"size":3122,"mtime":1623108639919,"results":"198","hashOfConfig":"103"},{"size":802,"mtime":1623106594595,"results":"199","hashOfConfig":"103"},{"size":601,"mtime":1623079003101,"results":"200","hashOfConfig":"103"},{"size":3370,"mtime":1623108513918,"results":"201","hashOfConfig":"103"},{"size":811,"mtime":1623107792379,"results":"202","hashOfConfig":"103"},{"size":864,"mtime":1623133035691,"results":"203","hashOfConfig":"103"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},"1shtzj8",{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"206"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"206"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"206"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"206"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"206"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"206"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"206"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"206"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"206"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"206"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"206"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"206"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"206"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"206"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"206"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"206"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"206"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"206"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"206"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"206"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"365","messages":"366","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"206"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"370","messages":"371","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"206"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"206"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"206"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"206"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"388"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"206"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"206"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"206"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"206"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"206"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"206"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"206"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"206"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"206"},"F:\\Code\\shopPro\\frontend\\src\\index.js",[],["444","445"],"F:\\Code\\shopPro\\frontend\\src\\App.js",["446"],"F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Header.js",["447","448","449","450","451","452","453","454","455","456"],"// import { Menu } from '@material-ui/core'\r\n// import { Link } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Button from '@material-ui/core/Button'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport { Menu } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport { black } from 'colors'\r\nimport firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Container, Image, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Route, useHistory } from 'react-router-dom'\r\nimport { listCategories } from '../actions/categoryAction'\r\nimport { logout } from '../actions/userActions'\r\nimport SearchBox from './SearchBox'\r\nimport { USER_DETAILS_RESET } from '../constants/userConstants'\r\nimport { listSubCategory } from '../actions/subCategoryAction'\r\n\r\nconst StyledMenu = withStyles({\r\n   paper: {\r\n      border: '1px solid #d3d4d5',\r\n   },\r\n})((props) => (\r\n   <Menu\r\n      elevation={0}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n         vertical: 'bottom',\r\n         horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n         vertical: 'top',\r\n         horizontal: 'center',\r\n      }}\r\n      {...props}\r\n   />\r\n))\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n   root: {\r\n      '&:focus': {\r\n         backgroundColor: theme.palette.primary.main,\r\n         '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n            color: theme.palette.common.white,\r\n         },\r\n      },\r\n   },\r\n}))(MenuItem)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      display: 'flex',\r\n   },\r\n   paper: {\r\n      marginRight: theme.spacing(1),\r\n      zIndex: '7 !important',\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(4),\r\n      height: theme.spacing(4),\r\n   },\r\n   link: {\r\n      color: black,\r\n      '&:hover': {\r\n         color: '#002984',\r\n         textDecoration: 'none',\r\n      },\r\n      '&:active': {\r\n         color: '#002984',\r\n         textDecoration: 'none',\r\n      },\r\n      '&:visited': {\r\n         color: '#002984',\r\n         textDecoration: 'none',\r\n      },\r\n   },\r\n}))\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n   badge: {\r\n      right: -3,\r\n      top: 13,\r\n      border: `2px solid ${theme.palette.background.paper}`,\r\n      padding: '0 4px',\r\n   },\r\n}))(Badge)\r\n\r\nfunction Header(props) {\r\n   const classes = useStyles()\r\n   const [open, setOpen] = React.useState(false)\r\n   const anchorRef = React.useRef(null)\r\n   const anchorReff = React.useRef(null)\r\n   const history = useHistory()\r\n   const [anchorEl, setAnchorEl] = useState(null)\r\n   // const [menu, setMenu] = useState(false)\r\n\r\n   const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget)\r\n   }\r\n\r\n   const menu = (\r\n      <Menu>\r\n         <Menu.Item key='0'>\r\n            <a to='https://www.antgroup.com'>1st menu item</a>\r\n         </Menu.Item>\r\n         <Menu.Item key='1'>\r\n            <a to='https://www.aliyun.com'>2nd menu item</a>\r\n         </Menu.Item>\r\n         <Menu.Divider />\r\n         <Menu.Item key='3'>3rd menu item</Menu.Item>\r\n      </Menu>\r\n   )\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { user } = userDetails\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category } = categoriesList\r\n\r\n   const subCategoryList = useSelector((state) => state.subCategoryList)\r\n   const { Sub } = subCategoryList\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const cart = useSelector((state) => state.cart)\r\n   const { cartItems } = cart\r\n\r\n   const logoutHandler = () => {\r\n      firebase.auth().signOut()\r\n      dispatch(logout())\r\n      dispatch({ type: USER_DETAILS_RESET })\r\n      history.push('/')\r\n   }\r\n\r\n   const handleToggle = () => {\r\n      setOpen((prevOpen) => !prevOpen)\r\n   }\r\n\r\n   const handleClose = (event) => {\r\n      if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n         return\r\n      }\r\n\r\n      setOpen(false)\r\n   }\r\n\r\n   function handleListKeyDown(event) {\r\n      if (event.key === 'Tab') {\r\n         event.preventDefault()\r\n         setOpen(false)\r\n      }\r\n   }\r\n\r\n   // return focus to the button when we transitioned from !open -> open\r\n   const prevOpen = React.useRef(open)\r\n   useEffect(() => {\r\n      if (prevOpen.current === true && open === false) {\r\n         anchorRef.current.focus()\r\n      }\r\n\r\n      dispatch(listCategories())\r\n      dispatch(listSubCategory())\r\n\r\n      prevOpen.current = open\r\n   }, [open, userInfo, user])\r\n\r\n   return (\r\n      <>\r\n         <Navbar\r\n            expand='lg'\r\n            collapseOnSelect\r\n            className='p-0 pl-5 pr-5 m-0 shadow'\r\n            style={{ backgroundColor: '#edfead', height: '4rem' }}\r\n         >\r\n            <Container fluid>\r\n               <LinkContainer to='/'>\r\n                  <Navbar.Brand className='text-uppercase font-weight-bold flex-grow-1 '>\r\n                     {/* <h2>ProShop</h2> */}\r\n                     <Image\r\n                        className='border-bottom border-danger'\r\n                        src='/logo/logo_white.png'\r\n                        style={{ width: '6rem', height: '5rem', zIndex: '0' }}\r\n                     />\r\n                  </Navbar.Brand>\r\n               </LinkContainer>\r\n               <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\r\n               <Route\r\n                  render={({ history }) => <SearchBox history={history} />}\r\n               />\r\n               <Navbar.Collapse id='basic-navbar-nav'>\r\n                  <Nav className='ml-auto' inline>\r\n                     <LinkContainer to='/cart'>\r\n                        <Nav.Link className='text-uppercase'>\r\n                           <IconButton aria-label='cart'>\r\n                              <StyledBadge\r\n                                 badgeContent={cartItems.length}\r\n                                 color='secondary'\r\n                              >\r\n                                 <ShoppingCartIcon />\r\n                              </StyledBadge>\r\n                           </IconButton>\r\n                        </Nav.Link>\r\n                     </LinkContainer>\r\n\r\n                     {userInfo ? (\r\n                        <>\r\n                           <Button\r\n                              ref={anchorRef}\r\n                              aria-controls={\r\n                                 open ? 'menu-list-grow' : undefined\r\n                              }\r\n                              aria-haspopup='true'\r\n                              onClick={handleToggle}\r\n                              className='ml-2  mt-1 mb-1 rounded-circle'\r\n                           >\r\n                              {userInfo ? (\r\n                                 <Image\r\n                                    className='rounded-circle border border-grey'\r\n                                    src={\r\n                                       userDetails.user\r\n                                          ? userDetails.user?.avatar?.url\r\n                                          : userDetails.user.avatar?.url\r\n                                    }\r\n                                    alt={\r\n                                       userDetails.user && userDetails.user.name\r\n                                    }\r\n                                    style={{\r\n                                       width: '2.5rem',\r\n                                       height: '2.5rem',\r\n                                    }}\r\n                                    fluid\r\n                                 />\r\n                              ) : (\r\n                                 <Avatar className={classes.orange}>\r\n                                    {userInfo.name.substring(0, 1)}\r\n                                 </Avatar>\r\n                              )}\r\n                           </Button>\r\n                           <Popper\r\n                              open={open}\r\n                              anchorEl={anchorRef.current}\r\n                              role={undefined}\r\n                              transition\r\n                              disablePortal\r\n                              style={{ zIndex: '2' }}\r\n                           >\r\n                              {({ TransitionProps, placement }) => (\r\n                                 <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{\r\n                                       transformOrigin:\r\n                                          placement === 'bottom'\r\n                                             ? 'center top'\r\n                                             : 'center bottom',\r\n                                    }}\r\n                                 >\r\n                                    <Paper>\r\n                                       <ClickAwayListener\r\n                                          onClickAway={handleClose}\r\n                                       >\r\n                                          <MenuList\r\n                                             autoFocusItem={open}\r\n                                             id='menu-list-grow'\r\n                                             onKeyDown={handleListKeyDown}\r\n                                          >\r\n                                             {userInfo && userInfo.isAdmin && (\r\n                                                <MenuItem onClick={handleClose}>\r\n                                                   <Link\r\n                                                      to='/admin'\r\n                                                      className={classes.link}\r\n                                                      style={{\r\n                                                         color: 'black',\r\n                                                         fontSize: '0.8rem',\r\n                                                         letterSpacing:\r\n                                                            '0.05rem',\r\n                                                      }}\r\n                                                   >\r\n                                                      <Image\r\n                                                         src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                                         className='pr-1'\r\n                                                      />\r\n                                                      <strong className='text-capitalize'>\r\n                                                         Quản lí\r\n                                                      </strong>\r\n                                                   </Link>\r\n                                                </MenuItem>\r\n                                             )}\r\n                                             <MenuItem onClick={handleClose}>\r\n                                                <Link\r\n                                                   to='/profile'\r\n                                                   className={classes.link}\r\n                                                   style={{\r\n                                                      color: 'black',\r\n                                                      fontSize: '0.8rem',\r\n                                                      letterSpacing: '0.05rem',\r\n                                                   }}\r\n                                                >\r\n                                                   <Image\r\n                                                      src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                                      className='pr-1'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Thông tin cá nhân\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n\r\n                                             <MenuItem onClick={handleClose}>\r\n                                                <Link\r\n                                                   to='/myorders'\r\n                                                   className={classes.link}\r\n                                                   style={{\r\n                                                      color: 'black',\r\n                                                      fontSize: '0.8rem',\r\n                                                      letterSpacing: '0.05rem',\r\n                                                   }}\r\n                                                >\r\n                                                   <Image\r\n                                                      src='https://img.icons8.com/fluent/24/000000/receipt-dollar.png'\r\n                                                      className='pr-1'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đơn hàng của tôi\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n\r\n                                             <MenuItem\r\n                                                onClick={logoutHandler}\r\n                                                style={{\r\n                                                   color: 'black',\r\n                                                   fontSize: '0.8rem',\r\n                                                   letterSpacing: '0.05rem',\r\n                                                }}\r\n                                             >\r\n                                                <Link\r\n                                                   to='/'\r\n                                                   className={classes.link}\r\n                                                   style={{\r\n                                                      color: 'black',\r\n                                                      fontSize: '0.8rem',\r\n                                                      letterSpacing: '0.05rem',\r\n                                                   }}\r\n                                                >\r\n                                                   <Image\r\n                                                      className='pr-1'\r\n                                                      src='https://img.icons8.com/fluent/24/000000/exit.png'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đăng Xuất\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n                                          </MenuList>\r\n                                       </ClickAwayListener>\r\n                                    </Paper>\r\n                                 </Grow>\r\n                              )}\r\n                           </Popper>\r\n                        </>\r\n                     ) : (\r\n                        <>\r\n                           <Button\r\n                              ref={anchorRef}\r\n                              aria-controls={\r\n                                 open ? 'menu-list-grow' : undefined\r\n                              }\r\n                              aria-haspopup='true'\r\n                              onClick={handleToggle}\r\n                              className='ml-2 mt-1 mb-1 rounded-circle'\r\n                           >\r\n                              <Image src='https://img.icons8.com/fluent/30/000000/circled-menu.png' />\r\n                           </Button>\r\n                           <Popper\r\n                              open={open}\r\n                              anchorEl={anchorRef.current}\r\n                              role={undefined}\r\n                              transition\r\n                              disablePortal\r\n                              style={{ zIndex: '2' }}\r\n                           >\r\n                              {({ TransitionProps, placement }) => (\r\n                                 <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{\r\n                                       transformOrigin:\r\n                                          placement === 'bottom'\r\n                                             ? 'center top'\r\n                                             : 'center bottom',\r\n                                    }}\r\n                                 >\r\n                                    <Paper>\r\n                                       <ClickAwayListener\r\n                                          onClickAway={handleClose}\r\n                                       >\r\n                                          <MenuList\r\n                                             autoFocusItem={open}\r\n                                             id='menu-list-grow'\r\n                                             onKeyDown={handleListKeyDown}\r\n                                          >\r\n                                             <MenuItem\r\n                                                onClick={handleClose}\r\n                                                style={{\r\n                                                   color: 'black',\r\n                                                   fontSize: '0.8rem',\r\n                                                   letterSpacing: '0.05rem',\r\n                                                }}\r\n                                             >\r\n                                                <Link\r\n                                                   to='/login'\r\n                                                   className={classes.link}\r\n                                                >\r\n                                                   <Image\r\n                                                      className='pr-1'\r\n                                                      src='https://img.icons8.com/fluent/24/000000/key.png'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đăng Nhập\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n                                             <MenuItem\r\n                                                onClick={handleClose}\r\n                                                style={{\r\n                                                   color: 'black',\r\n                                                   fontSize: '0.8rem',\r\n                                                   letterSpacing: '0.05rem',\r\n                                                }}\r\n                                             >\r\n                                                <Link\r\n                                                   to='/register'\r\n                                                   className={classes.link}\r\n                                                >\r\n                                                   <Image\r\n                                                      className='pr-1'\r\n                                                      src='https://img.icons8.com/fluent/24/000000/new-contact.png'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đăng Kí\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n                                          </MenuList>\r\n                                       </ClickAwayListener>\r\n                                    </Paper>\r\n                                 </Grow>\r\n                              )}\r\n                           </Popper>\r\n                        </>\r\n                     )}\r\n                  </Nav>\r\n               </Navbar.Collapse>\r\n            </Container>\r\n         </Navbar>\r\n         <Navbar\r\n            expand='lg'\r\n            collapseOnSelect\r\n            className='p-0 pl-5 pr-5'\r\n            style={{ backgroundColor: '#edfead' }}\r\n            variant='tabs'\r\n         >\r\n            {/* <Row>\r\n          <Col md={12} className='pl-5'> */}\r\n            {/* <div className='d-flex justify-content-around'>\r\n            {category &&\r\n              category.map((cat) => (\r\n                <div className='container_link_color'>\r\n                  <Dropdown overlay={menu}>\r\n                    <Link\r\n                      to='/product'\r\n                      className='ant-dropdown-link text-decoration-none link_color'\r\n                      onClick={(e) => e.preventDefault()}\r\n                      style={{ fontSize: '1rem' }}\r\n                    >\r\n                      {cat.name}\r\n                      <DownOutlined\r\n                        className='pl-1'\r\n                        style={{ fontSize: '0.5rem' }}\r\n                      />\r\n                    </Link>\r\n                  </Dropdown>\r\n                </div>\r\n              ))}\r\n          </div> */}\r\n            <div class='collapse navbar-collapse pl-2 pr-2' id='main_nav'>\r\n               <ul className='navbar-nav'>\r\n                  <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n                     <Link className='nav-link' to='/'>\r\n                        Trang chủ\r\n                     </Link>\r\n                  </li>\r\n\r\n                  <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n                     <Link className='nav-link' to='/'>\r\n                        Giới thiệu\r\n                     </Link>\r\n                  </li>\r\n                  <li\r\n                     className='nav-item dropdown has-megamenu'\r\n                     style={{ fontSize: '0.85rem' }}\r\n                  >\r\n                     <Link\r\n                        className='nav-link dropdown-toggle'\r\n                        to='#'\r\n                        data-bs-toggle='dropdown'\r\n                     >\r\n                        Danh mục\r\n                     </Link>\r\n                     <div\r\n                        className='dropdown-menu megamenu border border-secondary shadow'\r\n                        style={{ borderRadius: '2rem' }}\r\n                        role='menu'\r\n                     >\r\n                        <div className='row g-6' style={{ width: '30rem' }}>\r\n                           {category &&\r\n                              category.map((cat) => (\r\n                                 <div className='col-lg-4 col-8 text-center pt-2 pb-2'>\r\n                                    <div className='col-megamenu container_link_color'>\r\n                                       <LinkContainer\r\n                                          to={`/product/${cat._id}/category`}\r\n                                          className='link_color'\r\n                                       >\r\n                                          <h6\r\n                                             className='title'\r\n                                             style={{ fontSize: '0.85rem' }}\r\n                                          >\r\n                                             {cat.name}\r\n                                          </h6>\r\n                                       </LinkContainer>\r\n                                       <ul className='list-unstyled'>\r\n                                          {Sub &&\r\n                                             Sub?.map((s) => (\r\n                                                <li>\r\n                                                   <Link\r\n                                                      to={`/product/${s._id}/category`}\r\n                                                   >\r\n                                                      {s.category === cat._id &&\r\n                                                         s.name}\r\n                                                   </Link>\r\n                                                </li>\r\n                                             ))}\r\n                                       </ul>\r\n                                    </div>\r\n                                 </div>\r\n                              ))}\r\n                        </div>\r\n                     </div>\r\n                  </li>\r\n\r\n                  <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n                     <Link className='nav-link' to='/'>\r\n                        Liên hệ\r\n                     </Link>\r\n                  </li>\r\n               </ul>\r\n            </div>\r\n            {/* </Col>\r\n        </Row> */}\r\n         </Navbar>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Header\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js",["457","458","459"],"import { Link } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Col, Container, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport { black } from 'colors'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nFooter.propTypes = {}\r\n\r\nfunction Footer(props) {\r\n  const classes = useStyles()\r\n  return (\r\n    <footer style={{ backgroundColor: '#edfead' }}>\r\n      <div className='pl-5 pb-4  pr-5'>\r\n        <Row>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Hỗ trợ</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức giao hàng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức thanh toán\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách đổi trả\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách bảo hành\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Thông tin</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Tuyển dụng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Góp ý\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giải đáp thắc mắc\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={3}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Về Natural Food</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giới thiệu\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Liên hệ\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={5}>\r\n            <ListGroup>\r\n              <div className='d-flex justify-content-center'>\r\n                <Image\r\n                  src='/logo/logo_white.png'\r\n                  style={{ width: '9rem', height: '8rem', zIndex: '0' }}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex justify-content-evenly'>\r\n                <Link\r\n                  href='#'\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/gmail-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='#'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/facebook-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='#'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/twitter.png' />\r\n                </Link>\r\n              </div>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Địa chỉ: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      22 Lý Chiêu Hoàng, Phường 10, Quận 6, TP HCM\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Email: </strong>\r\n                    <p className='mb-0 pl-1'>tuvan_online@naturalfood.com.vn</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Số điện thoại: </strong>\r\n                    <p className='mb-0 pl-1'>(028) 38 753 443</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Hotline: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      19002126 ( cước phí: 3000đ/phút )\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <p className='mb-0'>\r\n                      Thời gian tư vấn: Từ 07h30 đến 12h15, 13h15 đến 21h30 các\r\n                      ngày trong tuần ( Trừ ngày Lễ, Tết)\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js",["460","461","462","463"],"F:\\Code\\shopPro\\frontend\\src\\components\\Product.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js",["464","465","466","467"],"import Avatar from '@material-ui/core/Avatar'\r\nimport Buttonn from '@material-ui/core/Button'\r\nimport ButtonGroupp from '@material-ui/core/ButtonGroup'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport { Carousel, Image, Skeleton } from 'antd'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { GlassMagnifier } from 'react-image-magnifiers'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport {\r\n   createProductReview,\r\n   listProductDetails,\r\n} from '../actions/productActions.js'\r\nimport { listSale } from '../actions/saleAction.js'\r\nimport { listUsers } from '../actions/userActions.js'\r\nimport ActiveRating from '../components/ActiveRating'\r\nimport Announcement from '../components/Announcement.js'\r\nimport ButtonComponent from '../components/ButtonComponent'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport Message from '../components/Message'\r\nimport Meta from '../components/Meta'\r\nimport ProgressLine from '../components/ProgressLine.js'\r\nimport Rating from '../components/Rating'\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants.js'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      '& .MuiTextField-root': {\r\n         margin: theme.spacing(1),\r\n      },\r\n\r\n      '& .MuiInputBase-input': {\r\n         padding: theme.spacing(1),\r\n      },\r\n\r\n      '& .MuiFilledInput-input': {\r\n         padding: theme.spacing(1),\r\n      },\r\n\r\n      '& .MuiFilledInput-inputMarginDense': {\r\n         padding: theme.spacing(1),\r\n         textAlign: 'center',\r\n      },\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(4),\r\n      height: theme.spacing(4),\r\n      textAlign: 'center',\r\n   },\r\n   form: {\r\n      width: 1150,\r\n   },\r\n}))\r\n\r\nfunction formatPrice(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction ProductScreen({ history, match }) {\r\n   const classes = useStyles()\r\n   const [qty, setQty] = useState(1)\r\n   const [rating, setRating] = useState(0)\r\n   const [comment, setComment] = useState('')\r\n   const [hover, setHover] = React.useState(-1)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const productDetails = useSelector((state) => state.productDetails)\r\n   const { loading, error, product } = productDetails\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userList = useSelector((state) => state.userList)\r\n   const { users } = userList\r\n\r\n   const saleList = useSelector((state) => state.saleList)\r\n   const { sale } = saleList\r\n\r\n   const productReviewCreate = useSelector((state) => state.productReviewCreate)\r\n   const {\r\n      loading: loadingProductReview,\r\n      success: successProductReview,\r\n      error: errorProductReview,\r\n   } = productReviewCreate\r\n\r\n   let url = users?.map((u) => u._id)\r\n\r\n   console.log('url', url)\r\n\r\n   var settings = {\r\n      className: 'slider variable-width',\r\n      dots: true,\r\n      infinite: true,\r\n      speed: 700,\r\n      slidesToShow: 1,\r\n      slidesToScroll: 1,\r\n      adaptiveHeight: true,\r\n      autoplaySpeed: 2500,\r\n      cssEase: 'linear',\r\n      autoplay: true,\r\n   }\r\n\r\n   function onChange(a, b, c) {\r\n      console.log(a, b, c)\r\n   }\r\n\r\n   useEffect(() => {\r\n      dispatch(listUsers())\r\n      dispatch(listSale())\r\n      if (successProductReview) {\r\n         setRating(0)\r\n         setComment(' ')\r\n         dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n      }\r\n\r\n      dispatch(listProductDetails(match.params.id))\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, match, successProductReview])\r\n\r\n   const submitHandle = (e) => {\r\n      e.preventDefault()\r\n      dispatch(\r\n         createProductReview(match.params.id, {\r\n            rating,\r\n            comment,\r\n         })\r\n      )\r\n      toast.success(\r\n         <div>\r\n            <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n            Đã đánh giá thành công\r\n         </div>,\r\n         {\r\n            className: 'Toastify__toast--success',\r\n            position: 'top-right',\r\n            autoClose: 2500,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n         }\r\n      )\r\n   }\r\n\r\n   const addToCartHandler = () => {\r\n      if (qty <= product.countInStock && qty > 0) {\r\n         history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n      } else if (qty <= 0) {\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' />\r\n               Phải có ít nhất 1 sản phẩm\r\n            </div>,\r\n            {\r\n               className: 'Toastify__toast--success',\r\n               position: 'top-right',\r\n               autoClose: 3000,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n      } else {\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' />\r\n               {`Số lượng đặt hàng không được vượt quá số lượng hàng hoá trong kho (${product.countInStock} sản phẩm)`}\r\n            </div>,\r\n            {\r\n               className: 'Toastify__toast--success',\r\n               position: 'top-right',\r\n               autoClose: 3500,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n         {/* {successProductReview && <MessageSuccess variant='Success' />} */}\r\n         <Header />\r\n         <div className='ml-4 mr-4 mb-4'>\r\n            <Link className='btn btn-light my-3 rounded-pill' to='/'>\r\n               <i className='fas fa-arrow-left pr-2'></i>\r\n               Quay lại\r\n            </Link>\r\n            {loading ? (\r\n               <SkeletonEffect />\r\n            ) : error ? (\r\n               <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n               <>\r\n                  <Meta title={product.name} />\r\n                  <Row className='container-productGreen mb-2 rounded shadow card_color'>\r\n                     <Col\r\n                        md={7}\r\n                        className='p-3 img-productGreen mt-5 align-items-center'\r\n                     >\r\n                        <Row>\r\n                           <Col md={10} className='mt-3'>\r\n                              <Carousel vertical fade dots>\r\n                                 {product.images &&\r\n                                    product.images.map((img) => (\r\n                                       <>\r\n                                          <GlassMagnifier\r\n                                             style={{\r\n                                                objectFit: 'cover',\r\n                                                zIndex: '5',\r\n                                                borderRadius: '2rem',\r\n                                                border: '0.5rem solid #ddd',\r\n                                             }}\r\n                                             imageSrc={img && img?.url}\r\n                                             imageAlt='Example'\r\n                                             largeImageSrc={\r\n                                                product.images && img?.url\r\n                                             } // Optional\r\n                                          />\r\n                                       </>\r\n                                    ))}\r\n                              </Carousel>\r\n                           </Col>\r\n                           <Col md={2} className='mt-5'>\r\n                              <Image.PreviewGroup>\r\n                                 {product.images &&\r\n                                    product.images.map((img) => (\r\n                                       <div className='d-flex p-1'>\r\n                                          <Image\r\n                                             src={img.url}\r\n                                             style={{\r\n                                                height: '5rem',\r\n                                                width: '5rem',\r\n                                             }}\r\n                                             className='rounded-circle  shadow'\r\n                                          />\r\n                                       </div>\r\n                                    ))}\r\n                              </Image.PreviewGroup>\r\n                           </Col>\r\n                        </Row>\r\n                     </Col>\r\n\r\n                     <Col md={5} className='text-left p-1'>\r\n                        <Row className='pl-4 pr-2'>\r\n                           <ListGroup variant='flush' className='pr-3'>\r\n                              <ListGroup.Item className='border-0 pb-0'>\r\n                                 <strong>\r\n                                    <h3 className='border-0 pb-0'>\r\n                                       {product.name}\r\n                                    </h3>\r\n                                 </strong>\r\n                              </ListGroup.Item>\r\n\r\n                              <ListGroup.Item className='border-0 pb-0'>\r\n                                 <Rating\r\n                                    value={product.rating}\r\n                                    text={`(${product.numReviews} đánh giá)`}\r\n                                 />\r\n                              </ListGroup.Item>\r\n\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <div\r\n                                    className='border border-danger rounded-pill text-center p-1 shadow'\r\n                                    style={{ width: '15rem' }}\r\n                                 >\r\n                                    {product.supplier?.name}\r\n                                 </div>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <h6 className='mb-0'>Thông tin</h6>\r\n                                 <p className='mb-0'>{product.description}</p>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <Row>\r\n                                    <Col\r\n                                       md={6}\r\n                                       className='d-flex align-items-center'\r\n                                    >\r\n                                       <h6 className='mb-0 pr-2'>Khối lượng</h6>\r\n                                       <p className='mb-0'>{product.mass}</p>\r\n                                    </Col>\r\n                                 </Row>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <h6 className='mb-0'>Hướng dẫn sử dụng</h6>\r\n                                 <p className='mb-0'>{product.hdsd}</p>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify border-bottom mb-2'>\r\n                                 <h6 className='mb-0'>Bảo quản</h6>\r\n                                 <p className='mb-0'>{product.hdbq}</p>\r\n                              </ListGroup.Item>\r\n                           </ListGroup>\r\n\r\n                           <ListGroup\r\n                              variant='flush'\r\n                              className='border-0 pt-0 mb-4 '\r\n                              style={{ zIndex: '1' }}\r\n                           >\r\n                              <div className='group-items pt-2 pb-2 ml-4 mr-4 rounded shadow'>\r\n                                 <ListGroup.Item className='border-0 pt-0 pb-0 mb-0 pr-0 group-items'>\r\n                                    {product.sales ? (\r\n                                       <div className='d-flex justify-content-around'>\r\n                                          <h4 className='text-lowercase text-secondary text-decoration-line-through'>\r\n                                             {product.price &&\r\n                                                formatPrice(product.price, 'đ')}\r\n                                          </h4>\r\n                                          <h2\r\n                                             className='text-lowercase'\r\n                                             style={{\r\n                                                color: '#ff6a88',\r\n                                             }}\r\n                                          >\r\n                                             {product.price &&\r\n                                                formatPrice(\r\n                                                   product.price -\r\n                                                      product.price *\r\n                                                         product.sales.percent,\r\n                                                   'đ'\r\n                                                )}\r\n                                          </h2>\r\n                                       </div>\r\n                                    ) : (\r\n                                       <h2 className='text-lowercase'>\r\n                                          {product.price &&\r\n                                             formatPrice(product.price, 'đ')}\r\n                                       </h2>\r\n                                    )}\r\n                                 </ListGroup.Item>\r\n\r\n                                 <ListGroup.Item className='border-0 group-items'>\r\n                                    {product.countInStock > 0 ? (\r\n                                       <div>\r\n                                          <Row>\r\n                                             <Col md={5}>\r\n                                                <p className='mb-0'>\r\n                                                   Trạng thái:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={7}>\r\n                                                <p className='mb-0 fw-bold ml-2 text-success'>\r\n                                                   {product?.countInStock} sản\r\n                                                   phẩm\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                       </div>\r\n                                    ) : (\r\n                                       <div className='d-flex justify-content-start align-items-center'>\r\n                                          <p className='mb-0'>Trạng thái:</p>\r\n                                          <Image src='https://img.icons8.com/fluent/35/000000/close-sign.png' />\r\n                                          <p className='mb-0 fw-bold ml-2 danger'>\r\n                                             Hết hàng\r\n                                          </p>\r\n                                       </div>\r\n                                    )}\r\n                                 </ListGroup.Item>\r\n\r\n                                 {product.countInStock > 0 && (\r\n                                    <ListGroup.Item className='border-0 pt-0 pb-0 group-items '>\r\n                                       <Row>\r\n                                          <Col\r\n                                             md={5}\r\n                                             className='d-flex align-items-center'\r\n                                          >\r\n                                             <p className='mb-0'>Số lượng:</p>\r\n                                          </Col>\r\n                                          <Col md={2} className='d-flex'>\r\n                                             <ButtonGroupp\r\n                                                size='small'\r\n                                                aria-label='small '\r\n                                             >\r\n                                                <Buttonn\r\n                                                   aria-label='reduce'\r\n                                                   size='small'\r\n                                                   color='primary'\r\n                                                   onClick={() => {\r\n                                                      setQty(\r\n                                                         Math.max(qty - 1, 1)\r\n                                                      )\r\n                                                   }}\r\n                                                   variant='contained'\r\n                                                >\r\n                                                   <RemoveIcon fontSize='small' />\r\n                                                </Buttonn>\r\n                                                {/* {qty === 0 ? (\r\n                                <Buttonn variant='contained'>1</Buttonn>\r\n                              ) : (\r\n                                <Buttonn variant='contained'>{qty}</Buttonn>\r\n                              )} */}\r\n                                                <div>\r\n                                                   <TextField\r\n                                                      className={classes.root}\r\n                                                      id='filled-size-small'\r\n                                                      value={qty}\r\n                                                      variant='filled'\r\n                                                      size='small'\r\n                                                      onChange={(e) =>\r\n                                                         setQty(e.target.value)\r\n                                                      }\r\n                                                   />\r\n                                                </div>\r\n                                                <Buttonn\r\n                                                   aria-label='increase'\r\n                                                   size='small'\r\n                                                   onClick={() => {\r\n                                                      setQty(Number(qty) + 1)\r\n                                                   }}\r\n                                                   variant='contained'\r\n                                                   color='primary'\r\n                                                >\r\n                                                   <AddIcon fontSize='small' />\r\n                                                </Buttonn>\r\n                                             </ButtonGroupp>\r\n                                          </Col>\r\n                                       </Row>\r\n                                    </ListGroup.Item>\r\n                                 )}\r\n                              </div>\r\n\r\n                              <ListGroup.Item className='ml-4 pl-0 pr-0 pb-0 mr-4'>\r\n                                 <Button\r\n                                    onClick={addToCartHandler}\r\n                                    className='btn-block btn_color rounded-pill'\r\n                                    variant='outline-light'\r\n                                    type='button'\r\n                                    disabled={product.countInStock === 0}\r\n                                    style={{ fontSize: '1em', width: '20rem' }}\r\n                                 >\r\n                                    <AddShoppingCartIcon />\r\n                                    <strong className='pl-1 '>\r\n                                       Thêm vào giỏ hàng\r\n                                    </strong>\r\n                                    <div className='wave'></div>\r\n                                 </Button>\r\n                              </ListGroup.Item>\r\n                           </ListGroup>\r\n                        </Row>\r\n                     </Col>\r\n                  </Row>\r\n\r\n                  {loading ? (\r\n                     <SkeletonEffect />\r\n                  ) : (\r\n                     <Row>\r\n                        <Col className='mt-3 p-3 pl-5 pr-5 background-light rounded shadow card_color'>\r\n                           <h5 className='text-uppercase'>Đánh giá sản phẩm</h5>\r\n                           {product.reviews.length === 0 && (\r\n                              <Row>\r\n                                 <Col md={4}>\r\n                                    <Announcement variant='warning'>\r\n                                       Không có đánh giá{' '}\r\n                                       <Image src='https://img.icons8.com/fluent/24/000000/box-important.png' />\r\n                                    </Announcement>\r\n                                 </Col>\r\n                              </Row>\r\n                           )}\r\n                           <div\r\n                              className=' rounded text-center circle-rate pt-2 pb-1 ml-3 mb-2'\r\n                              style={{ width: '14rem' }}\r\n                           >\r\n                              <h5 className=''>Điểm</h5>\r\n                              <h4 className='mb-0'>\r\n                                 {product.rating + ' trên 5'}\r\n                              </h4>\r\n                           </div>\r\n\r\n                           <ListGroup variant='flush'>\r\n                              {loadingProductReview ? (\r\n                                 <>\r\n                                    {/* <MessageSuccess variant='Success' /> */}\r\n                                    <Skeleton avatar paragraph={{ rows: 1 }} />\r\n                                 </>\r\n                              ) : (\r\n                                 product.reviews.map((review) => (\r\n                                    <ListGroup.Item key={review._id}>\r\n                                       <div className='d-flex justify-content-start'>\r\n                                          {/* <Row>\r\n                        <Col md={1} className=''> */}\r\n                                          <div className='pr-2'>\r\n                                             {review ? (\r\n                                                <Image\r\n                                                   className='rounded-circle'\r\n                                                   src={review.avatar.url}\r\n                                                   style={{\r\n                                                      height: '2rem',\r\n                                                      width: '2rem',\r\n                                                   }}\r\n                                                />\r\n                                             ) : (\r\n                                                <Avatar\r\n                                                   className={classes.orange}\r\n                                                >\r\n                                                   {review.name.substring(0, 1)}\r\n                                                </Avatar>\r\n                                             )}\r\n                                          </div>\r\n                                          {/* </Col>\r\n                        <Col> */}\r\n                                          <div>\r\n                                             <div className='d-flex'>\r\n                                                <h5 className='mb-0 text-capitalize'>\r\n                                                   {review.name}\r\n                                                </h5>\r\n                                                <span className='pl-2'>\r\n                                                   <Rating\r\n                                                      value={review.rating}\r\n                                                   />\r\n                                                </span>\r\n                                             </div>\r\n                                             <div\r\n                                                style={{\r\n                                                   fontWeight: '200',\r\n                                                   color: 'gray',\r\n                                                   fontSize: '0.65rem',\r\n                                                }}\r\n                                             >\r\n                                                <p className='mb-1'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         review.createdAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - MM/dd/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </p>\r\n                                             </div>\r\n                                          </div>\r\n                                          {/* </Col>\r\n                      </Row> */}\r\n                                       </div>\r\n                                       <strong\r\n                                          className='ml-3'\r\n                                          style={{\r\n                                             fontWeight: '500',\r\n                                             color: 'black',\r\n                                          }}\r\n                                       >\r\n                                          {review.comment}\r\n                                       </strong>\r\n                                    </ListGroup.Item>\r\n                                 ))\r\n                              )}\r\n\r\n                              <ListGroup.Item shadow>\r\n                                 {loadingProductReview && <ProgressLine />}\r\n                                 <h5>\r\n                                    ĐÁNH GIÁ VÀ BÌNH LUẬN{' '}\r\n                                    <Image src='https://img.icons8.com/fluent/24/000000/favorite-chat.png' />\r\n                                 </h5>\r\n\r\n                                 {errorProductReview && (\r\n                                    <Message>{errorProductReview}</Message>\r\n                                 )}\r\n                                 {userInfo ? (\r\n                                    <Form onSubmit={submitHandle}>\r\n                                       <Form.Group controlId='rating'>\r\n                                          <Form.Label\r\n                                             as='h5'\r\n                                             className='text-capitalize'\r\n                                          >\r\n                                             Đánh giá\r\n                                          </Form.Label>\r\n                                          <ActiveRating\r\n                                             value={rating}\r\n                                             hover={hover}\r\n                                             setValue={setRating}\r\n                                             setHover={setHover}\r\n                                             size='large'\r\n                                          />\r\n                                       </Form.Group>\r\n\r\n                                       <Form.Group\r\n                                          controlId='comment'\r\n                                          className={classes.root}\r\n                                       >\r\n                                          <TextField\r\n                                             className={classes.form}\r\n                                             id='outlined-multiline-static'\r\n                                             label='Bình luận'\r\n                                             multiline\r\n                                             rows={2}\r\n                                             value={comment}\r\n                                             // defaultValue='Default Value'\r\n                                             // variant='outlined'\r\n                                             onChange={(e) =>\r\n                                                setComment(e.target.value)\r\n                                             }\r\n                                          />\r\n                                       </Form.Group>\r\n                                       <ButtonComponent\r\n                                          type='submit'\r\n                                          color='secondary'\r\n                                          size='large'\r\n                                          value='GỬI'\r\n                                          disabled={loadingProductReview}\r\n                                          endIcon={<SendIcon />}\r\n                                       ></ButtonComponent>\r\n                                       <ToastContainer />\r\n                                    </Form>\r\n                                 ) : (\r\n                                    <Announcement\r\n                                       variant='dark'\r\n                                       style={{ color: '#82FF9E' }}\r\n                                    >\r\n                                       Vui lòng{' '}\r\n                                       <Link\r\n                                          to='/login'\r\n                                          style={{\r\n                                             color: '#5FAD41',\r\n                                             textDecoration: 'none',\r\n                                             fontWeight: '700',\r\n                                          }}\r\n                                       >\r\n                                          Đăng nhập\r\n                                       </Link>{' '}\r\n                                       để đánh giá\r\n                                    </Announcement>\r\n                                 )}\r\n                              </ListGroup.Item>\r\n                           </ListGroup>\r\n                        </Col>\r\n                     </Row>\r\n                  )}\r\n               </>\r\n            )}\r\n         </div>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\store.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js",["468","469"],"import { useState } from 'react'\r\nimport { css } from '@emotion/core'\r\nimport ClipLoader from 'react-spinners/ClipLoader'\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n`\r\n\r\nfunction Loader() {\r\n  let [loading, setLoading] = useState(true)\r\n  let [color, setColor] = useState('orange')\r\n\r\n  return (\r\n    <div className='sweet-loading text-center'>\r\n      <ClipLoader color={color} loading={loading} css={override} size={60} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js",["470","471","472","473","474","475"],"import { Chip } from '@material-ui/core'\r\nimport Buttonn from '@material-ui/core/Button'\r\nimport ButtonGroupp from '@material-ui/core/ButtonGroup'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions.js'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      '& .MuiTextField-root': {\r\n         margin: theme.spacing(0),\r\n      },\r\n\r\n      '& .MuiInputBase-input': {\r\n         padding: theme.spacing(2),\r\n      },\r\n\r\n      '& .MuiFilledInput-input': {\r\n         padding: theme.spacing(2),\r\n      },\r\n\r\n      '& .MuiFilledInput-inputMarginDense': {\r\n         padding: theme.spacing(1),\r\n         textAlign: 'center',\r\n      },\r\n   },\r\n}))\r\n\r\nfunction format(n) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'\r\n}\r\n\r\nexport const CartScreen = ({ match, location, history }) => {\r\n   const classes = useStyles()\r\n   const productId = match.params.id\r\n   const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const cart = useSelector((state) => state.cart)\r\n   const { cartItems } = cart\r\n\r\n   const [items, setItems] = useState(cartItems.map((c) => c.qty))\r\n\r\n   useEffect(() => {\r\n      if (productId) {\r\n         dispatch(addToCart(productId, qty))\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, productId, qty, userInfo])\r\n\r\n   const removeFromCartHandler = (id) => {\r\n      dispatch(removeFromCart(id))\r\n   }\r\n\r\n   const checkoutHandler = () => {\r\n      history.push('/login?redirect=shipping')\r\n   }\r\n\r\n   // const test = (e) => {\r\n   //   const value = e.target.value\r\n   //   if (parseInt(value) === 0) {\r\n   //     alert('sai')\r\n   //   }\r\n   //   console.log(value)\r\n   // }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {/* <Link className='btn btn-light my-3 rounded-pill' to='/'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link> */}\r\n\r\n         <Row className='m-4' style={{ height: '100vh' }}>\r\n            <Col md={8} className='p-0 pr-4 mt-3 text-uppercase'>\r\n               {cartItems.length === 0 ? (\r\n                  // <Announcement variant='danger'>\r\n                  <>\r\n                     {/* <Row>\r\n                <Col className='mb-2'> */}\r\n                     <div className='mb-1'>\r\n                        <Link to='/'>\r\n                           <Button className='text-uppercase btn_color rounded-pill'>\r\n                              Mua hàng\r\n                           </Button>\r\n                        </Link>\r\n                     </div>\r\n                     {/* </Col>\r\n                <Col md={12}> */}\r\n                     <div>\r\n                        <Image\r\n                           className=' p-5'\r\n                           src='/images/cart_empty.png'\r\n                           fluid\r\n                        />\r\n                     </div>\r\n                     {/* </Col>\r\n              </Row> */}\r\n                  </>\r\n               ) : (\r\n                  // </Announcement>\r\n                  <ListGroup variant='flush'>\r\n                     <h3>Giỏ hàng</h3>\r\n                     {cartItems.map((item) => (\r\n                        <ListGroup.Item\r\n                           key={item.product}\r\n                           className='border-0 mt-1 shadow card_color'\r\n                           rounded\r\n                        >\r\n                           {/* <div className='mb-2'>\r\n                              <Chip label={item.brand} variant='outlined' />\r\n                           </div> */}\r\n                           <Row>\r\n                              <Col md={2}>\r\n                                 <Link\r\n                                    to={`/product/${item.product}`}\r\n                                    className='text-decoration-none  product-card-green'\r\n                                 >\r\n                                    <Image\r\n                                       src={item.images[0].url}\r\n                                       alt={item.name}\r\n                                       fluid\r\n                                    />\r\n                                 </Link>\r\n                              </Col>\r\n\r\n                              <Col\r\n                                 md={3}\r\n                                 className='text-lowercase text-capitalize d-flex align-items-center'\r\n                              >\r\n                                 <Link\r\n                                    to={`/product/${item.product}`}\r\n                                    className='text-decoration-none'\r\n                                 >\r\n                                    <p\r\n                                       className='mb-0'\r\n                                       style={{ color: '#343a40' }}\r\n                                    >\r\n                                       {item.name}\r\n                                    </p>\r\n                                 </Link>\r\n                              </Col>\r\n\r\n                              <Col\r\n                                 md={3}\r\n                                 className='text-lowercase d-flex align-items-center'\r\n                              >\r\n                                 <h4 className='text-lowercase'>\r\n                                    {format(item.price)}\r\n                                 </h4>\r\n                              </Col>\r\n\r\n                              <Col md={3} className='d-flex align-items-center'>\r\n                                 <ButtonGroupp size='small' aria-label='small '>\r\n                                    <Buttonn\r\n                                       aria-label='reduce'\r\n                                       size='small'\r\n                                       color='primary'\r\n                                       onClick={() =>\r\n                                          Number(item.qty) - 1 === 0\r\n                                             ? toast.error(\r\n                                                  <div>\r\n                                                     <ErrorOutlineIcon\r\n                                                        className='pr-1'\r\n                                                        fontSize='large'\r\n                                                     />\r\n                                                     {`Phải có ít nhất 1 sản phẩm`}\r\n                                                  </div>,\r\n                                                  {\r\n                                                     className:\r\n                                                        'Toastify__toast--success',\r\n                                                     position: 'top-right',\r\n                                                     autoClose: 3000,\r\n                                                     hideProgressBar: true,\r\n                                                     closeOnClick: true,\r\n                                                     pauseOnHover: true,\r\n                                                     draggable: true,\r\n                                                     progress: undefined,\r\n                                                  }\r\n                                               )\r\n                                             : item.qty > 0 &&\r\n                                               dispatch(\r\n                                                  addToCart(\r\n                                                     item.product,\r\n                                                     Math.min(item.qty - 1, 1)\r\n                                                  )\r\n                                               )\r\n                                       }\r\n                                       variant='contained'\r\n                                    >\r\n                                       <RemoveIcon fontSize='small' />\r\n                                    </Buttonn>\r\n\r\n                                    {/* <Buttonn variant='contained'>{item.qty}</Buttonn> */}\r\n                                    <div>\r\n                                       {item.qty === 0 ? (\r\n                                          <TextField\r\n                                             error\r\n                                             className={classes.root}\r\n                                             id='filled-size-small'\r\n                                             value={item.qty}\r\n                                             variant='filled'\r\n                                             size='small'\r\n                                             onChange={(e) =>\r\n                                                // Number(e.target.value) === 0\r\n                                                //   ? toast.error(\r\n                                                //       <div>\r\n                                                //         <ErrorOutlineIcon\r\n                                                //           className='pr-1'\r\n                                                //           fontSize='large'\r\n                                                //         />\r\n                                                //         Phải có ít nhất 1 sản phẩm\r\n                                                //       </div>,\r\n                                                //       {\r\n                                                //         className: 'Toastify__toast--success',\r\n                                                //         position: 'top-right',\r\n                                                //         autoClose: 3000,\r\n                                                //         hideProgressBar: true,\r\n                                                //         closeOnClick: true,\r\n                                                //         pauseOnHover: true,\r\n                                                //         draggable: true,\r\n                                                //         progress: undefined,\r\n                                                //       }\r\n                                                //     )\r\n                                                //   :\r\n                                                Number(e.target.value) >\r\n                                                item.countInStock\r\n                                                   ? toast.error(\r\n                                                        <div>\r\n                                                           <ErrorOutlineIcon\r\n                                                              className='pr-1'\r\n                                                              fontSize='large'\r\n                                                           />\r\n                                                           {`Số lượng không được vượt quá ${item.countInStock}`}\r\n                                                        </div>,\r\n                                                        {\r\n                                                           className:\r\n                                                              'Toastify__toast--success',\r\n                                                           position:\r\n                                                              'top-right',\r\n                                                           autoClose: 3000,\r\n                                                           hideProgressBar: true,\r\n                                                           closeOnClick: true,\r\n                                                           pauseOnHover: true,\r\n                                                           draggable: true,\r\n                                                           progress: undefined,\r\n                                                        }\r\n                                                     )\r\n                                                   : Number(e.target.value) <=\r\n                                                        item.countInStock &&\r\n                                                     dispatch(\r\n                                                        addToCart(\r\n                                                           item.product,\r\n                                                           Math.max(\r\n                                                              Number(\r\n                                                                 e.target.value\r\n                                                              ),\r\n                                                              0\r\n                                                           )\r\n                                                        )\r\n                                                     )\r\n                                             }\r\n                                          />\r\n                                       ) : (\r\n                                          <TextField\r\n                                             className={classes.root}\r\n                                             id='filled-size-small'\r\n                                             value={item.qty}\r\n                                             variant='filled'\r\n                                             size='small'\r\n                                             onChange={(e) =>\r\n                                                // Number(e.target.value) === 0\r\n                                                //   ? toast.error(\r\n                                                //       <div>\r\n                                                //         <ErrorOutlineIcon\r\n                                                //           className='pr-1'\r\n                                                //           fontSize='large'\r\n                                                //         />\r\n                                                //         Phải có ít nhất 1 sản phẩm\r\n                                                //       </div>,\r\n                                                //       {\r\n                                                //         className: 'Toastify__toast--success',\r\n                                                //         position: 'top-right',\r\n                                                //         autoClose: 3000,\r\n                                                //         hideProgressBar: true,\r\n                                                //         closeOnClick: true,\r\n                                                //         pauseOnHover: true,\r\n                                                //         draggable: true,\r\n                                                //         progress: undefined,\r\n                                                //       }\r\n                                                //     )\r\n                                                //   :\r\n                                                Number(e.target.value) >\r\n                                                item.countInStock\r\n                                                   ? toast.error(\r\n                                                        <div>\r\n                                                           <ErrorOutlineIcon\r\n                                                              className='pr-1'\r\n                                                              fontSize='large'\r\n                                                           />\r\n                                                           {`Số lượng đặt hàng không được vượt quá số lượng hàng hoá trong kho (${item.countInStock} sản phẩm)`}\r\n                                                        </div>,\r\n                                                        {\r\n                                                           className:\r\n                                                              'Toastify__toast--success',\r\n                                                           position:\r\n                                                              'top-right',\r\n                                                           autoClose: 3000,\r\n                                                           hideProgressBar: true,\r\n                                                           closeOnClick: true,\r\n                                                           pauseOnHover: true,\r\n                                                           draggable: true,\r\n                                                           progress: undefined,\r\n                                                        }\r\n                                                     )\r\n                                                   : Number(e.target.value) <=\r\n                                                        item.countInStock &&\r\n                                                     dispatch(\r\n                                                        addToCart(\r\n                                                           item.product,\r\n                                                           Math.max(\r\n                                                              Number(\r\n                                                                 e.target.value\r\n                                                              ),\r\n                                                              0\r\n                                                           )\r\n                                                        )\r\n                                                     )\r\n                                             }\r\n                                          />\r\n                                       )}\r\n                                    </div>\r\n                                    <Buttonn\r\n                                       aria-label='increase'\r\n                                       size='small'\r\n                                       onClick={() => {\r\n                                          item.qty < item.countInStock\r\n                                             ? dispatch(\r\n                                                  addToCart(\r\n                                                     item.product,\r\n                                                     Number(item.qty) + 1\r\n                                                  )\r\n                                               )\r\n                                             : Number(item.qty) >=\r\n                                                  item.countInStock &&\r\n                                               toast.error(\r\n                                                  <div>\r\n                                                     <ErrorOutlineIcon\r\n                                                        className='pr-1'\r\n                                                        fontSize='large'\r\n                                                     />\r\n                                                     {`Số lượng không được vượt quá  ${item.countInStock}`}\r\n                                                  </div>,\r\n                                                  {\r\n                                                     className:\r\n                                                        'Toastify__toast--success',\r\n                                                     position: 'top-right',\r\n                                                     autoClose: 3000,\r\n                                                     hideProgressBar: true,\r\n                                                     closeOnClick: true,\r\n                                                     pauseOnHover: true,\r\n                                                     draggable: true,\r\n                                                     progress: undefined,\r\n                                                  }\r\n                                               )\r\n                                       }}\r\n                                       variant='contained'\r\n                                       color='primary'\r\n                                    >\r\n                                       <AddIcon fontSize='small' />\r\n                                    </Buttonn>\r\n                                 </ButtonGroupp>\r\n                              </Col>\r\n\r\n                              <Col md={1} className='d-flex align-items-center'>\r\n                                 <Button\r\n                                    type='button'\r\n                                    className='p-1 rounded'\r\n                                    variant='light'\r\n                                    onClick={() =>\r\n                                       removeFromCartHandler(item.product)\r\n                                    }\r\n                                 >\r\n                                    <i\r\n                                       style={{ fontSize: '1.2rem' }}\r\n                                       class='far fa-trash-alt'\r\n                                    ></i>\r\n                                 </Button>\r\n                              </Col>\r\n                              <ToastContainer />\r\n                           </Row>\r\n                        </ListGroup.Item>\r\n                     ))}\r\n                  </ListGroup>\r\n               )}\r\n            </Col>\r\n\r\n            <Col md={4} className='p-0'>\r\n               <Card\r\n                  className='border-0 shadow mt-4 card_color p-3'\r\n                  style={{ zIndex: '1' }}\r\n               >\r\n                  <ListGroup variant='flush'>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill text-capitalize'>\r\n                                 Số lượng:{' '}\r\n                              </h5>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill-value text-lowercase pl-1'>\r\n                                 {cartItems.reduce(\r\n                                    (acc, item) => acc + item.qty,\r\n                                    0\r\n                                 )}{' '}\r\n                                 sản phẩm\r\n                              </h5>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill text-capitalize'>\r\n                                 Giá:{' '}\r\n                              </h5>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill-value text-lowercase pl-1'>\r\n                                 {format(\r\n                                    cartItems.reduce(\r\n                                       (acc, item) =>\r\n                                          acc + item.qty * item.price,\r\n                                       0\r\n                                    )\r\n                                 )}\r\n                              </h5>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                  </ListGroup>\r\n               </Card>\r\n               <Card className='mt-3 border-0'>\r\n                  <Button\r\n                     type='button'\r\n                     variant='outline-light'\r\n                     className='btn-block btn_color rounded-pill text-uppercase p-3 text-light'\r\n                     disabled={\r\n                        cartItems.length === 0 ||\r\n                        cartItems.reduce((acc, item) => acc + item.qty, 0) <\r\n                           cartItems.length\r\n                     }\r\n                     onClick={checkoutHandler}\r\n                     size='sm'\r\n                  >\r\n                     <h5 className='text-light m-0'>Đặt hàng</h5>\r\n                  </Button>\r\n               </Card>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default CartScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js",["476","477","478","479","480"],"F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js",["481","482"],"import axios from 'axios'\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\nimport {\r\n   CLEAR_ERRORS,\r\n   USER_CREATE_ADDRESS_FAIL,\r\n   USER_CREATE_ADDRESS_REQUEST,\r\n   USER_CREATE_ADDRESS_SUCCESS,\r\n   USER_DELETE_ADDRESS_FAIL,\r\n   USER_DELETE_ADDRESS_REQUEST,\r\n   USER_DELETE_ADDRESS_SUCCESS,\r\n   USER_DELETE_FAIL,\r\n   USER_DELETE_REQUEST,\r\n   USER_DELETE_SUCCESS,\r\n   USER_DETAILS_FAIL,\r\n   USER_DETAILS_REQUEST,\r\n   USER_DETAILS_RESET,\r\n   USER_DETAILS_SUCCESS,\r\n   USER_EDIT_ADDRESS_FAIL,\r\n   USER_EDIT_ADDRESS_REQUEST,\r\n   USER_EDIT_ADDRESS_SUCCESS,\r\n   USER_LIST_FAIL,\r\n   USER_LIST_REQUEST,\r\n   USER_LIST_RESET,\r\n   USER_LIST_SUCCESS,\r\n   USER_LOGIN_FAIL,\r\n   USER_LOGIN_REQUEST,\r\n   USER_LOGIN_SUCCESS,\r\n   USER_LOGOUT,\r\n   USER_REGISTER_FAIL,\r\n   USER_REGISTER_REQUEST,\r\n   USER_REGISTER_SUCCESS,\r\n   USER_SELECT_ROLE_FAIL,\r\n   USER_SELECT_ROLE_REQUEST,\r\n   USER_SELECT_ROLE_SUCCESS,\r\n   USER_UPDATE_FAIL,\r\n   USER_UPDATE_PROFILE_FAIL,\r\n   USER_UPDATE_PROFILE_REQUEST,\r\n   USER_UPDATE_PROFILE_SUCCESS,\r\n   USER_UPDATE_REQUEST,\r\n   USER_UPDATE_SUCCESS,\r\n} from '../constants/userConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_LOGIN_REQUEST,\r\n      })\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.post(\r\n         '/api/users/login',\r\n         { email, password },\r\n         config\r\n      )\r\n\r\n      dispatch({\r\n         type: USER_LOGIN_SUCCESS,\r\n         payload: data,\r\n      })\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_LOGIN_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const register = (name, email, avatar, password) => async (dispatch) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_REGISTER_REQUEST,\r\n      })\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.post(\r\n         '/api/users',\r\n         { name, email, avatar, password },\r\n         config\r\n      )\r\n\r\n      dispatch({\r\n         type: USER_LOGIN_SUCCESS,\r\n         payload: data,\r\n      })\r\n\r\n      dispatch({\r\n         type: USER_REGISTER_SUCCESS,\r\n         payload: data,\r\n      })\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_REGISTER_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_DETAILS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.get(`/api/users/${id}`, config)\r\n\r\n      dispatch({\r\n         type: USER_DETAILS_SUCCESS,\r\n         payload: data,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_DETAILS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_UPDATE_PROFILE_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.put('/api/users/profile', user, config)\r\n\r\n      console.log('data post update profile', data)\r\n\r\n      dispatch({\r\n         type: USER_UPDATE_PROFILE_SUCCESS,\r\n         type: USER_LOGOUT,\r\n         type: USER_DETAILS_RESET,\r\n         payload: data,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_UPDATE_PROFILE_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n   localStorage.removeItem('userInfo')\r\n   dispatch({ type: USER_LOGOUT })\r\n   dispatch({ type: USER_DETAILS_RESET })\r\n   dispatch({ type: ORDER_LIST_MY_RESET })\r\n   dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_LIST_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.get('/api/users', config)\r\n\r\n      dispatch({\r\n         type: USER_LIST_SUCCESS,\r\n         payload: data,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_LIST_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_DELETE_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      await axios.delete(`/api/users/${id}`, config)\r\n\r\n      dispatch({\r\n         type: USER_DELETE_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_DELETE_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_UPDATE_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.put(`/api/users/${user._id}`, user, config)\r\n\r\n      dispatch({ type: USER_UPDATE_SUCCESS })\r\n      dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_UPDATE_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const deleteAddressUser = (id) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_DELETE_ADDRESS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      console.log('id address', id)\r\n\r\n      await axios.post('/api/users/deleteaddress', id, config)\r\n\r\n      dispatch({\r\n         type: USER_DELETE_ADDRESS_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_DELETE_ADDRESS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const createAddressUser = (address) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_CREATE_ADDRESS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      await axios.post('/api/users/createaddress', address, config)\r\n\r\n      dispatch({\r\n         type: USER_CREATE_ADDRESS_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_CREATE_ADDRESS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const updateAddressUser = (address) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_EDIT_ADDRESS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      await axios.post('/api/users/address', address, config)\r\n\r\n      dispatch({\r\n         type: USER_EDIT_ADDRESS_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_EDIT_ADDRESS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const selectRoleAddressUser =\r\n   (address) => async (dispatch, getState) => {\r\n      try {\r\n         dispatch({\r\n            type: USER_SELECT_ROLE_REQUEST,\r\n         })\r\n\r\n         const {\r\n            userLogin: { userInfo },\r\n         } = getState()\r\n\r\n         const config = {\r\n            headers: {\r\n               Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n         }\r\n\r\n         await axios.post('/api/users/roleaddress', address, config)\r\n\r\n         dispatch({\r\n            type: USER_SELECT_ROLE_SUCCESS,\r\n         })\r\n      } catch (error) {\r\n         dispatch({\r\n            type: USER_SELECT_ROLE_FAIL,\r\n            payload:\r\n               error.response && error.response.data.message\r\n                  ? error.response.data.message\r\n                  : error.message,\r\n         })\r\n      }\r\n   }\r\n\r\nexport const clearErrors = () => async (dispatch) => {\r\n   dispatch({\r\n      type: CLEAR_ERRORS,\r\n   })\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js",["483","484"],"import { deepOrange } from '@material-ui/core/colors'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { uploadFileAvatar } from '../actions/cloudinary'\r\nimport { register } from '../actions/userActions'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      display: 'flex',\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(8),\r\n      height: theme.spacing(8),\r\n      fontSize: '3rem',\r\n   },\r\n}))\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n   const classes = useStyles()\r\n\r\n   const [name, setName] = useState('')\r\n   const [email, setEmail] = useState('')\r\n   const [avatar, setAvatar] = useState(null)\r\n   const [password, setPassword] = useState('')\r\n   const [confirmPassword, setConfirmPassword] = useState('')\r\n   const [message, setMessage] = useState(null)\r\n   const [uploading, setUploading] = useState(false)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userRegister = useSelector((state) => state.userRegister)\r\n   const { loading, error, userInfo } = userRegister\r\n\r\n   const redirect = location.search ? location.search.split('=')[1] : '/'\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      if (password !== confirmPassword) {\r\n         setMessage('Password do not match')\r\n      } else {\r\n         dispatch(register(name, email, avatar, password))\r\n      }\r\n   }\r\n\r\n   const uploadFile = (e) => {\r\n      let files = e.target.files[0]\r\n\r\n      let preview = []\r\n      if (files) {\r\n         preview.push(files.name)\r\n         Resizer.imageFileResizer(files, 720, 720, 'JPEG', 100, 0, (uri) => {\r\n            try {\r\n               uploadFileAvatar({ image: uri }).then((res) => {\r\n                  setAvatar(res.data)\r\n               })\r\n               setUploading(true)\r\n            } catch (error) {\r\n               setUploading(false)\r\n            }\r\n         })\r\n      }\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (userInfo) {\r\n         history.push(redirect)\r\n      }\r\n\r\n      window.scrollTo(0, 0)\r\n   }, [history, userInfo, redirect])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row className='shadow p-5 card_color m-0'>\r\n            <Col md={7}>\r\n               <Image src='/background/3071357.jpg' fluid />\r\n            </Col>\r\n            <Col md={5}>\r\n               <div>\r\n                  {message && <Message variant='danger'>{message}</Message>}\r\n                  {error && <Message variant='danger'>{error}</Message>}\r\n                  {loading && <Loader />}\r\n                  {/* {uploading === false && (\r\n                     <Message variant='danger'>\r\n                        {'Ảnh đại diện không được trống'}\r\n                     </Message>\r\n                  )} */}\r\n                  <Form onSubmit={submitHandler}>\r\n                     <h2 className='text-center'>Đăng kí</h2>\r\n                     <Form.Group controlId='name'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Họ và tên\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           type='name'\r\n                           placeholder='Nhập họ và tên'\r\n                           value={name}\r\n                           onChange={(e) => setName(e.target.value)}\r\n                           className='border border-grey rounded-pill'\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <Form.Group controlId='email'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Địa chỉ email\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           type='email'\r\n                           placeholder='Nhập địa chỉ email'\r\n                           value={email}\r\n                           onChange={(e) => setEmail(e.target.value)}\r\n                           className='border border-grey rounded-pill'\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <Form.Group controlId='password'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Mật khẩu\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           type='password'\r\n                           placeholder='Nhập mật khẩu'\r\n                           value={password}\r\n                           onChange={(e) => setPassword(e.target.value)}\r\n                           className='border border-grey rounded-pill'\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <Form.Group controlId='password'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Nhập lại mật khẩu\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           type='password'\r\n                           placeholder=' Nhập lại mật khẩu'\r\n                           value={confirmPassword}\r\n                           onChange={(e) => setConfirmPassword(e.target.value)}\r\n                           className='border border-grey rounded-pill'\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <Form.Group controlId='image'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Ảnh đại diện\r\n                        </Form.Label>\r\n                        <Row>\r\n                           <div className='d-flex align-items-center'>\r\n                              <Col md={6}>\r\n                                 {avatar && (\r\n                                    <Image\r\n                                       src={avatar && avatar?.url}\r\n                                       className='rounded-circle avatar_img'\r\n                                       fluid\r\n                                    />\r\n                                 )}\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <Form.File\r\n                                    className='border border-grey'\r\n                                    id='image-file'\r\n                                    label='Chọn ảnh'\r\n                                    custom\r\n                                    onChange={uploadFile}\r\n                                    required\r\n                                 ></Form.File>\r\n                                 {/* {uploading && <Loader />} */}\r\n                              </Col>\r\n                           </div>\r\n                        </Row>\r\n                     </Form.Group>\r\n\r\n                     <div>\r\n                        <Button\r\n                           type='submit'\r\n                           variant='outline-light'\r\n                           className='btn-block  rounded-pill btn_color_created'\r\n                           style={{\r\n                              fontSize: '0.875rem',\r\n                              letterSpacing: '0.25rem',\r\n                           }}\r\n                        >\r\n                           Đăng kí\r\n                        </Button>\r\n                     </div>\r\n\r\n                     <Row className='py-3'>\r\n                        <Col\r\n                           className='d-flex align-items-center justify-content-center'\r\n                           style={{\r\n                              fontSize: '0.8rem',\r\n                              letterSpacing: '0.05rem',\r\n                           }}\r\n                        >\r\n                           <div>\r\n                              Bạn đã có tài khoản?\r\n                              <Link\r\n                                 className='text-decoration-none text-info pl-1 '\r\n                                 to={\r\n                                    redirect\r\n                                       ? `/login?redirect=${redirect}`\r\n                                       : '/login'\r\n                                 }\r\n                                 style={{ fontWeight: '700' }}\r\n                              >\r\n                                 Đăng nhập\r\n                              </Link>\r\n                           </div>\r\n                        </Col>\r\n                     </Row>\r\n                  </Form>\r\n               </div>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default RegisterScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js",["485","486","487","488","489"],"import DateFnsUtils from '@date-io/date-fns'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Link from '@material-ui/core/Link'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport {\r\n   KeyboardDatePicker,\r\n   MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { uploadFileAvatar } from '../actions/cloudinary'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Message from '../components/Message'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport '../toast.css'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      display: 'flex',\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(38.75),\r\n      height: theme.spacing(40),\r\n      fontSize: '15rem',\r\n   },\r\n}))\r\n\r\nfunction ProfileScreen({ location, history }) {\r\n   const classes = useStyles()\r\n\r\n   const [state, setState] = useState(false)\r\n\r\n   const handleChange = () => {\r\n      setState(!state)\r\n   }\r\n\r\n   const [selectedDate, setSelectedDate] = useState(\r\n      new Date('2021-03-22T21:11:54')\r\n   )\r\n\r\n   const handleDateChange = (date) => {\r\n      setSelectedDate(date)\r\n   }\r\n\r\n   // console.log('user', user)\r\n\r\n   const [name, setName] = useState('')\r\n   const [email, setEmail] = useState('')\r\n   const [avatar, setAvatar] = useState(null)\r\n   const [password, setPassword] = useState('')\r\n   const [confirmPassword, setConfirmPassword] = useState('')\r\n   const [message, setMessage] = useState(null)\r\n   const [sex, setSex] = useState('')\r\n   const [thanhPho, setThanhPho] = useState('')\r\n   const [huyen, setHuyen] = useState('')\r\n   const [xa, setXa] = useState('')\r\n   const [diaChi, setDiachi] = useState('')\r\n   const [numberPhone, setNumberPhone] = useState('')\r\n   const [uploading, setUploading] = useState(false)\r\n   const address = { thanhPho, huyen, xa, diaChi }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n   const { loading: loadingUpdate, success } = userUpdateProfile\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   let formatPhoneNumber = (str) => {\r\n      //Filter only numbers from the input\r\n      let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n      //Check if the input is of correct length\r\n      let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n      if (match) {\r\n         return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n      }\r\n\r\n      return null\r\n   }\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      error &&\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' /> {error}\r\n            </div>,\r\n            {\r\n               position: 'top-right',\r\n               autoClose: 2500,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n\r\n      if (password !== confirmPassword) {\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' /> Password\r\n               is not match\r\n            </div>,\r\n            {\r\n               position: 'top-right',\r\n               autoClose: 2500,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n      } else {\r\n         // if (numberPhone.length === 14 || numberPhone.length === 10) {\r\n         dispatch(\r\n            updateUserProfile({\r\n               id: user._id,\r\n               email,\r\n               name,\r\n               avatar,\r\n               password,\r\n               sex,\r\n               selectedDate,\r\n            })\r\n         )\r\n         toast.success(\r\n            <div>\r\n               <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n               Hồ sơ đã được cập nhật\r\n            </div>,\r\n            {\r\n               className: 'Toastify__toast--success',\r\n               position: 'top-right',\r\n               autoClose: 2500,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n      }\r\n   }\r\n\r\n   const uploadFile = (e) => {\r\n      let files = e.target.files[0]\r\n      let preview = []\r\n      if (files) {\r\n         preview.push(files.name)\r\n         Resizer.imageFileResizer(files, 720, 720, 'JPEG', 100, 0, (uri) => {\r\n            try {\r\n               uploadFileAvatar({ image: uri }).then((res) => {\r\n                  setAvatar(res.data)\r\n               })\r\n            } catch (error) {\r\n               setUploading(false)\r\n            }\r\n         })\r\n      }\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push('/login')\r\n      } else {\r\n         if (!user || !user.name || success) {\r\n            dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n            dispatch(getUserDetails('profile'))\r\n         } else {\r\n            setName(user.name)\r\n            setEmail(user.email)\r\n            setAvatar(user.avatar)\r\n            // setAddress(user.address)\r\n            {\r\n               user.address?.map(\r\n                  (ad) =>\r\n                     ad.role === true &&\r\n                     (setThanhPho(ad.thanhPho),\r\n                     setHuyen(ad.huyen),\r\n                     setXa(ad.xa),\r\n                     setDiachi(ad.diaChi),\r\n                     setNumberPhone(ad.numberPhone))\r\n               )\r\n            }\r\n            setSelectedDate(user.birthDay)\r\n            setSex(user.sex)\r\n         }\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, history, success, user])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {message && <Announcement variant='danger'>{message}</Announcement>}\r\n         {error && <Announcement variant='danger'>{error}</Announcement>}\r\n\r\n         {loading ? (\r\n            <SkeletonEffect />\r\n         ) : error ? (\r\n            <Message variant='danger'>{error}</Message>\r\n         ) : (\r\n            <div className='border-0'>\r\n               <Row className='justify-content-center  m-4 '>\r\n                  <Col\r\n                     md={4}\r\n                     className='pt-5 shadow'\r\n                     style={{\r\n                        backgroundColor: '#977bd5',\r\n                        borderTopLeftRadius: '1rem',\r\n                        borderBottomLeftRadius: '1rem',\r\n                     }}\r\n                  >\r\n                     <div\r\n                        className='text-center mt-5 m-auto'\r\n                        style={{\r\n                           border: '5px solid #55595c',\r\n                           borderRadius: '50%',\r\n                           width: '20rem',\r\n                           height: '20.6rem',\r\n                        }}\r\n                     >\r\n                        <div className='text-center mb-3 avatar_container'>\r\n                           {user.avatar?.url ? (\r\n                              <>\r\n                                 <Image\r\n                                    style={{\r\n                                       width: '20rem',\r\n                                       height: '20rem',\r\n                                    }}\r\n                                    src={\r\n                                       avatar ? avatar?.url : user.avatar?.url\r\n                                    }\r\n                                    className='rounded-circle avatar_img'\r\n                                    fluid\r\n                                 />\r\n\r\n                                 <div className='avatar_upload'>\r\n                                    <div className='avatar_edit'>\r\n                                       {uploading && <SkeletonEffect />}\r\n                                       <Form.Group>\r\n                                          <Image\r\n                                             className='avatar_icon'\r\n                                             src='https://img.icons8.com/fluent/40/000000/camera.png'\r\n                                          />\r\n                                          <Form.File\r\n                                             id='image-file'\r\n                                             custom\r\n                                             onChange={uploadFile}\r\n                                             className='avatar_file'\r\n                                          ></Form.File>\r\n                                       </Form.Group>\r\n                                    </div>\r\n                                 </div>\r\n                              </>\r\n                           ) : (\r\n                              <>\r\n                                 <Avatar className={classes.orange}>\r\n                                    {uploading && <SkeletonEffect />}\r\n                                    {userInfo.name.substring(0, 1)}\r\n                                 </Avatar>\r\n\r\n                                 <div className='avatar_upload'>\r\n                                    <div className='avatar_edit'>\r\n                                       {uploading && <SkeletonEffect />}\r\n                                       <Form.Group>\r\n                                          <Image\r\n                                             className='avatar_icon'\r\n                                             src='https://img.icons8.com/fluent/40/000000/camera.png'\r\n                                          />\r\n                                          <Form.File\r\n                                             id='image-file'\r\n                                             custom\r\n                                             onChange={uploadFile}\r\n                                             className='avatar_file'\r\n                                          ></Form.File>\r\n                                       </Form.Group>\r\n                                    </div>\r\n                                 </div>\r\n                              </>\r\n                           )}\r\n                        </div>\r\n                        <div className='text-center mt-5'>\r\n                           <Link\r\n                              href='/myorders'\r\n                              style={{\r\n                                 fontSize: '0.8rem',\r\n                                 letterSpacing: '0.05rem',\r\n                              }}\r\n                              className='text-decoration-none shadow'\r\n                           >\r\n                              <Button\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill shadow '\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                 }}\r\n                              >\r\n                                 ĐƠN HÀNG CỦA TÔI\r\n                              </Button>\r\n                           </Link>\r\n                        </div>\r\n                     </div>\r\n                  </Col>\r\n                  <Col\r\n                     md={8}\r\n                     className='pt-4 pb-4  bg-light shadow border-0'\r\n                     style={{\r\n                        backgroundColor:\r\n                           'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%);',\r\n                        borderTopRightRadius: '1rem',\r\n                        borderBottomRightRadius: '1rem',\r\n                     }}\r\n                  >\r\n                     <h2 className='text-center'>Thông tin cá nhân</h2>\r\n                     <Form onSubmit={submitHandler} className='pl-4 pr-4 pt-3'>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='name'>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Họ và tên</strong>\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    className='border-1 border-grey rounded-pill'\r\n                                    type='name'\r\n                                    placeholder='Nhập họ và tên'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                 ></Form.Control>\r\n                              </Form.Group>\r\n                           </Col>\r\n\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='email'>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Địa chỉ email</strong>\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    className='border-1 border-grey rounded-pill'\r\n                                    type='email'\r\n                                    placeholder='Nhập địa chỉ email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                 ></Form.Control>\r\n                              </Form.Group>\r\n                           </Col>\r\n                        </Row>\r\n                        <Form.Group>\r\n                           <Row>\r\n                              <Col md={6}>\r\n                                 <strong>Ngày sinh</strong>\r\n                                 <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <Grid container justify='space-between'>\r\n                                       <KeyboardDatePicker\r\n                                          className='m-0'\r\n                                          margin='normal'\r\n                                          id='date-picker-dialog'\r\n                                          format='MM/dd/yyyy'\r\n                                          value={selectedDate}\r\n                                          onChange={handleDateChange}\r\n                                          KeyboardButtonProps={{\r\n                                             'aria-label': 'change date',\r\n                                          }}\r\n                                       />\r\n                                    </Grid>\r\n                                 </MuiPickersUtilsProvider>\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <strong>Giới tính:</strong>\r\n                                 <RadioGroup\r\n                                    value={sex}\r\n                                    onChange={(e) => setSex(e.target.value)}\r\n                                 >\r\n                                    <div className='d-flex justify-content-evenly align-items-center'>\r\n                                       <FormControlLabel\r\n                                          value='Nam'\r\n                                          control={<Radio size='small' />}\r\n                                          label='Nam'\r\n                                          size='medium'\r\n                                       />\r\n                                       <FormControlLabel\r\n                                          value='Nữ'\r\n                                          control={<Radio size='small' />}\r\n                                          label='Nữ'\r\n                                       />\r\n                                    </div>\r\n                                 </RadioGroup>\r\n                              </Col>\r\n                           </Row>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                           <div\r\n                              className='rounded p-3'\r\n                              style={{\r\n                                 border: '0.14rem dotted grey',\r\n                              }}\r\n                           >\r\n                              <Row className='mb-2'>\r\n                                 <Col md={3}>\r\n                                    <strong>Số điện thoại</strong>\r\n                                 </Col>\r\n                                 <Col md={9} style={{ fontSize: '0.9rem' }}>\r\n                                    {formatPhoneNumber(numberPhone)}\r\n                                 </Col>\r\n                              </Row>\r\n                              <Row>\r\n                                 <Col md={3}>\r\n                                    <strong>Địa chỉ liên hệ</strong>\r\n                                 </Col>\r\n                                 <Col md={9} style={{ fontSize: '0.9rem' }}>\r\n                                    {diaChi} {' - '} {xa} {' - '} {huyen}{' '}\r\n                                    {' - '}\r\n                                    {thanhPho}.\r\n                                 </Col>\r\n                              </Row>\r\n                              <div className='text-end'>\r\n                                 <strong>\r\n                                    <Link\r\n                                       href='/profile/address'\r\n                                       color='secondary'\r\n                                    >\r\n                                       Thay đổi\r\n                                    </Link>\r\n                                 </strong>\r\n                              </div>\r\n                           </div>\r\n                        </Form.Group>\r\n\r\n                        <div className='d-flex align-items-center'>\r\n                           <Switch\r\n                              value={state}\r\n                              onChange={handleChange}\r\n                              color='secondary'\r\n                              name='checkedB'\r\n                              inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                           />\r\n                           {state === true ? (\r\n                              <p className='mb-0' style={{ opacity: '1' }}>\r\n                                 <strong>Đổi mật khẩu</strong>\r\n                                 <Image\r\n                                    style={{ opacity: '1' }}\r\n                                    src='https://img.icons8.com/fluent/32/000000/unlock-2.png'\r\n                                 />\r\n                              </p>\r\n                           ) : (\r\n                              <p className='mb-0' style={{ opacity: '0.7' }}>\r\n                                 Đổi mật khẩu\r\n                                 <Image\r\n                                    style={{ opacity: '1' }}\r\n                                    src='https://img.icons8.com/fluent/32/000000/lock-2.png'\r\n                                 />\r\n                              </p>\r\n                           )}\r\n                        </div>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='password' fluid>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Mật khẩu mới</strong>\r\n                                 </Form.Label>\r\n                                 {state === true ? (\r\n                                    <>\r\n                                       <Form.Control\r\n                                          className='border-1 border-grey rounded-pill '\r\n                                          type='password'\r\n                                          placeholder='Nhập mật khẩu mới'\r\n                                          value={password}\r\n                                          onChange={(e) =>\r\n                                             setPassword(e.target.value)\r\n                                          }\r\n                                       ></Form.Control>\r\n                                    </>\r\n                                 ) : (\r\n                                    <Form.Control\r\n                                       className='border-1 border-grey rounded-pill '\r\n                                       type='password'\r\n                                       placeholder='Nhập mật khẩu mới'\r\n                                       value={password}\r\n                                       onChange={(e) =>\r\n                                          setPassword(e.target.value)\r\n                                       }\r\n                                       disabled\r\n                                       // style={{ visibility: 'hidden' }}\r\n                                    ></Form.Control>\r\n                                 )}\r\n                              </Form.Group>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='password'>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Nhập lại mật khẩu</strong>\r\n                                 </Form.Label>\r\n                                 {state === true ? (\r\n                                    <>\r\n                                       <Form.Control\r\n                                          className='border-1 border-grey rounded-pill'\r\n                                          type='password'\r\n                                          placeholder='Nhập lại mật khẩu'\r\n                                          value={confirmPassword}\r\n                                          onChange={(e) =>\r\n                                             setConfirmPassword(e.target.value)\r\n                                          }\r\n                                       ></Form.Control>\r\n                                    </>\r\n                                 ) : (\r\n                                    <Form.Control\r\n                                       className='border-1 border-grey rounded-pill'\r\n                                       type='password'\r\n                                       placeholder='Nhập lại mật khẩu'\r\n                                       value={confirmPassword}\r\n                                       onChange={(e) =>\r\n                                          setConfirmPassword(e.target.value)\r\n                                       }\r\n                                       disabled\r\n                                       // style={{ visibility: 'hidden' }}\r\n                                    ></Form.Control>\r\n                                 )}\r\n                              </Form.Group>\r\n                           </Col>\r\n                        </Row>\r\n                        <div className='d-flex justify-content-center'>\r\n                           <Button\r\n                              type='submit'\r\n                              variant='outline-light'\r\n                              className='rounded-pill btn_color_created'\r\n                              style={{\r\n                                 fontSize: '1rem',\r\n                                 letterSpacing: '0.25rem',\r\n                                 width: '10rem',\r\n                              }}\r\n                           >\r\n                              Lưu\r\n                           </Button>\r\n                        </div>\r\n                        <ToastContainer />\r\n                     </Form>\r\n                  </Col>\r\n               </Row>\r\n            </div>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProfileScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js",["490","491","492","493","494","495","496","497","498"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport { getUserDetails } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport Step from '../components/Step'\r\nimport data from '../data.json'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport { Link } from '@material-ui/core'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport { Close } from '@material-ui/icons'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nexport const ShippingScreen = ({ history }) => {\r\n   const cart = useSelector((state) => state.cart)\r\n   const { shippingAddress, loading } = cart\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading: loadingUserDetail, success, user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const [thanhPho, setThanhPho] = useState(shippingAddress.thanhPho)\r\n   const [huyen, setHuyen] = useState(shippingAddress.huyen)\r\n   const [xa, setXa] = useState(shippingAddress.xa)\r\n   const [diaChi, setDiachi] = useState(shippingAddress.diaChi)\r\n   const [numberPhone, setNumberPhone] = useState(shippingAddress.numberPhone)\r\n   const [open, setOpen] = useState(false)\r\n   const [add, setAdd] = useState([])\r\n   const updateInformationAddress = {\r\n      thanhPho,\r\n      huyen,\r\n      xa,\r\n      diaChi,\r\n      numberPhone,\r\n   }\r\n\r\n   console.log('add', add)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const handleClickOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(\r\n         saveShippingAddress({ thanhPho, huyen, xa, diaChi, numberPhone })\r\n      )\r\n      history.push('/payment')\r\n   }\r\n\r\n   const updateAddress = (diaChi, xa, huyen, thanhPho, numberPhone) => {\r\n      setThanhPho(thanhPho)\r\n      setHuyen(huyen)\r\n      setXa(xa)\r\n      setDiachi(diaChi)\r\n      setNumberPhone(numberPhone)\r\n      setOpen(false)\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push('/login')\r\n      } else {\r\n         if (!user) {\r\n            dispatch(getUserDetails('profile'))\r\n         } else {\r\n            {\r\n               user.address?.map(\r\n                  (ad) =>\r\n                     ad.role === true &&\r\n                     (setThanhPho(ad.thanhPho),\r\n                     setHuyen(ad.huyen),\r\n                     setXa(ad.xa),\r\n                     setDiachi(ad.diaChi),\r\n                     setNumberPhone(ad.numberPhone))\r\n               )\r\n            }\r\n         }\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, history, user])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {loadingUserDetail ? (\r\n            <SkeletonEffect />\r\n         ) : (\r\n            <>\r\n               <div>\r\n                  <Dialog\r\n                     maxWidth='xl'\r\n                     open={open}\r\n                     onClose={handleClose}\r\n                     aria-labelledby='form-dialog-title'\r\n                  >\r\n                     <div className='d-flex justify-content-end'>\r\n                        <Button\r\n                           onClick={handleClose}\r\n                           className='p-1 m-1 rounded-pill'\r\n                           variant='light'\r\n                        >\r\n                           <Close />\r\n                        </Button>\r\n                     </div>\r\n                     <h4 id='form-dialog-title' className='text-center p-2'>\r\n                        Thay đổi thông tin giao hàng\r\n                     </h4>\r\n                     <DialogContent style={{ width: '45rem' }}>\r\n                        <Form\r\n                           // onSubmit={updateAddress}\r\n                           className='mt-2 border-0 mb-2'\r\n                        >\r\n                           <Form.Group controlId='address'>\r\n                              <Form.Label as='p' className='mb-1 mt-2'>\r\n                                 <strong>Địa chỉ giao hàng</strong>\r\n                              </Form.Label>\r\n                              {user.address?.map((add) => (\r\n                                 <div\r\n                                    className='p-3 mt-1 mb-1'\r\n                                    style={{\r\n                                       borderBottom: '0.1rem solid #ddd',\r\n                                    }}\r\n                                 >\r\n                                    <Row className='mb-2'>\r\n                                       <Col\r\n                                          md={3}\r\n                                          className='d-flex align-items-center '\r\n                                       >\r\n                                          <strong>Số điện thoại</strong>\r\n                                       </Col>\r\n                                       <Col\r\n                                          md={7}\r\n                                          style={{ fontSize: '0.9rem' }}\r\n                                          className='d-flex align-items-center'\r\n                                       >\r\n                                          {formatPhoneNumber(add.numberPhone)}\r\n                                       </Col>\r\n                                       <Col md={2}>\r\n                                          <Button\r\n                                             variant='outline-dark'\r\n                                             size='sm'\r\n                                             className='rounded-pill btn-block'\r\n                                             style={{ letterSpacing: '0.1rem' }}\r\n                                             onClick={() =>\r\n                                                updateAddress(\r\n                                                   add.diaChi,\r\n                                                   add.xa,\r\n                                                   add.huyen,\r\n                                                   add.thanhPho,\r\n                                                   add.numberPhone\r\n                                                )\r\n                                             }\r\n                                          >\r\n                                             Chọn\r\n                                          </Button>\r\n                                       </Col>\r\n                                    </Row>\r\n                                    <Row className='button_select_default'>\r\n                                       <Col\r\n                                          md={3}\r\n                                          className='d-flex align-items-center'\r\n                                       >\r\n                                          <strong>Địa chỉ liên hệ</strong>\r\n                                       </Col>\r\n                                       <Col\r\n                                          md={9}\r\n                                          style={{ fontSize: '0.9rem' }}\r\n                                          className='d-flex align-items-center text-justify'\r\n                                       >\r\n                                          {add.diaChi} {' - '} {add.xa} {' - '}{' '}\r\n                                          {add.huyen} {' - '}\r\n                                          {add.thanhPho}.\r\n                                       </Col>\r\n                                    </Row>\r\n                                 </div>\r\n                              ))}\r\n                           </Form.Group>\r\n                           <div className='text-end'>\r\n                              <strong>\r\n                                 <Link\r\n                                    href='/profile/address'\r\n                                    color='secondary'\r\n                                 >\r\n                                    Thêm địa chỉ mới\r\n                                 </Link>\r\n                              </strong>\r\n                           </div>\r\n                        </Form>\r\n                     </DialogContent>\r\n                  </Dialog>\r\n               </div>\r\n               <Row\r\n                  className='shadow p-2 card_color m-4'\r\n                  style={{ height: '75vh' }}\r\n               >\r\n                  <Col md={6} className='d-flex align-items-center'>\r\n                     <Image\r\n                        src='/background/shipping.jpg'\r\n                        style={{ height: '60vh' }}\r\n                     />\r\n                  </Col>\r\n                  <Col md={6} className='mt-2 pr-4'>\r\n                     <div>\r\n                        <Step step1 step2 />\r\n\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='mt-2 border-0 mb-2'\r\n                        >\r\n                           <h3 className='pt-3 text-center'>\r\n                              Thông tin Vận chuyển\r\n                           </h3>\r\n                           <Form.Group>\r\n                              <div\r\n                                 className='rounded p-3'\r\n                                 style={{\r\n                                    border: '0.14rem dotted grey',\r\n                                 }}\r\n                              >\r\n                                 <Row className='mb-2'>\r\n                                    <Col md={4}>\r\n                                       <strong>Số điện thoại</strong>\r\n                                    </Col>\r\n                                    <Col md={8} style={{ fontSize: '0.9rem' }}>\r\n                                       {formatPhoneNumber(numberPhone)}\r\n                                    </Col>\r\n                                 </Row>\r\n                                 <Row>\r\n                                    <Col md={4}>\r\n                                       <strong>Địa chỉ liên hệ</strong>\r\n                                    </Col>\r\n                                    <Col\r\n                                       md={8}\r\n                                       style={{ fontSize: '0.9rem' }}\r\n                                       className='text-justify'\r\n                                    >\r\n                                       {diaChi} {' - '} {xa} {' - '} {huyen}{' '}\r\n                                       {' - '}\r\n                                       {thanhPho}.\r\n                                    </Col>\r\n                                 </Row>\r\n                                 <div className='text-end'>\r\n                                    <strong>\r\n                                       <Button\r\n                                          size='sm'\r\n                                          className='rounded-pill'\r\n                                          variant='outline-dark'\r\n                                          onClick={handleClickOpen}\r\n                                       >\r\n                                          Thay đổi\r\n                                       </Button>\r\n                                    </strong>\r\n                                 </div>\r\n                              </div>\r\n                           </Form.Group>\r\n                           <div className='d-flex justify-content-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='btn-block btn_color rounded-pill'\r\n                                 style={{ width: '10rem' }}\r\n                              >\r\n                                 Tiếp tục\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </div>\r\n                  </Col>\r\n               </Row>\r\n            </>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js",[],["499","500"],"F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js",["501"],"import FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Step from '../components/Step'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nexport const PaymentScreen = ({ history }) => {\r\n   const cart = useSelector((state) => state.cart)\r\n   const { shippingAddress } = cart\r\n\r\n   if (!shippingAddress) {\r\n      history.push('/shipping')\r\n   }\r\n\r\n   const [paymentMethod, setPaymentMethod] = useState('Thanh toán bằng PayPal')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   useEffect(() => {\r\n      window.scrollTo(0, 0)\r\n   }, [])\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(savePaymentMethod(paymentMethod))\r\n      history.push('/placeorder')\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row className='shadow p-2 card_color m-4' style={{ height: '100vh' }}>\r\n            <Col md={6} className='d-flex align-items-center'>\r\n               <Image\r\n                  src='/background/payment.jpg'\r\n                  style={{ height: '90vh' }}\r\n               />\r\n            </Col>\r\n            <Col md={6} className='d-flex align-items-center'>\r\n               <div>\r\n                  <Step step1 step2 step3 />\r\n                  <Form\r\n                     onSubmit={submitHandler}\r\n                     className=' p-4 mt-2 text-center'\r\n                  >\r\n                     <Form.Group>\r\n                        <Form.Label as='legend'>\r\n                           <h3>Phương thức thanh toán</h3>\r\n                        </Form.Label>\r\n\r\n                        <Col>\r\n                           <div>\r\n                              <RadioGroup\r\n                                 value={paymentMethod}\r\n                                 onChange={(e) =>\r\n                                    setPaymentMethod(e.target.value)\r\n                                 }\r\n                              >\r\n                                 <FormControlLabel\r\n                                    value='Thanh toán bằng PayPal'\r\n                                    control={<Radio />}\r\n                                    label='Thanh toán bằng PayPal'\r\n                                 />\r\n                                 <FormControlLabel\r\n                                    value='Thanh toán bằng tiền mặt'\r\n                                    control={<Radio />}\r\n                                    label='Thanh toán bằng tiền mặt'\r\n                                 />\r\n                              </RadioGroup>\r\n                           </div>\r\n                        </Col>\r\n                     </Form.Group>\r\n\r\n                     <Button\r\n                        type='submit'\r\n                        variant='danger'\r\n                        className='btn-block btn_color rounded-pill'\r\n                     >\r\n                        Tiếp Tục\r\n                     </Button>\r\n                  </Form>\r\n               </div>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js",["502","503","504","505"],"F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js",["506","507","508","509","510"],"F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Step.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js",["511","512","513","514","515"],"import { React, useState } from 'react'\r\nimport { Form, Button, Image, InputGroup } from 'react-bootstrap'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { ButtonBase, FormGroup, Input } from '@material-ui/core'\r\nimport SpeechRecognition, {\r\n  useSpeechRecognition,\r\n} from 'react-speech-recognition'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\n\r\nconst SearchBox = ({ history }) => {\r\n  const [keyword, setKeyword] = useState('')\r\n\r\n  const submitHandle = (e) => {\r\n    // setKeyword(transcript)\r\n    e.preventDefault()\r\n    if (keyword.trim()) {\r\n      if (keyword) {\r\n        history.push(`/search/${keyword}`)\r\n      } else {\r\n        history.push(`/search/${transcript}`)\r\n      }\r\n    } else {\r\n      history.push('/')\r\n    }\r\n  }\r\n\r\n  const { transcript, resetTranscript } = useSpeechRecognition()\r\n\r\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n    return null\r\n  }\r\n\r\n  const click = () => {\r\n    if (transcript) {\r\n      setKeyword(transcript)\r\n    }\r\n  }\r\n\r\n  const clear = () => {\r\n    setKeyword(' ')\r\n    resetTranscript()\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={submitHandle} inline>\r\n      <div className='d-flex align-items-center'>\r\n        <Form.Control\r\n          type='text'\r\n          name='q'\r\n          placeholder='Tìm kiếm sản phẩm.'\r\n          className='mr-sm-2 ml-sm-5 rounded-pill'\r\n          onChange={(e) => setKeyword(e.target.value)}\r\n          value={transcript ? transcript : keyword}\r\n          style={{ width: '30rem' }}\r\n        ></Form.Control>\r\n        <Button\r\n          variant='outline-light'\r\n          className='p-1 text-dark border-0'\r\n          style={{ marginLeft: '-14%', height: '2rem' }}\r\n          onClick={clear}\r\n        >\r\n          <ClearIcon />\r\n        </Button>\r\n\r\n        <Button\r\n          variant='outline-light'\r\n          onClick={SpeechRecognition.startListening}\r\n          className='p-1 text-dark border-0'\r\n          style={{ marginLeft: '-10%', fontSize: '1rem' }}\r\n        >\r\n          <i className='fa fa-microphone' />\r\n        </Button>\r\n      </div>\r\n\r\n      <Button\r\n        type='submit'\r\n        className='p-2 btn_color rounded-circle'\r\n        style={{ fontSize: '0.7rem', marginLeft: '-15%' }}\r\n        onClick={click}\r\n      >\r\n        <SearchIcon />\r\n      </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js",[],["516","517"],"F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js",["518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544"],"import CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { listMyOrders } from '../actions/orderActions'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport '../toast.css'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport PropTypes from 'prop-types'\r\nimport clsx from 'clsx'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'name',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: true, disablePadding: false, label: 'TÊN SẢN PHẨM' },\r\n   { id: 'date', numeric: true, disablePadding: false, label: 'NGÀY ĐẶT' },\r\n   { id: 'total', numeric: true, disablePadding: false, label: 'TỔNG CỘNG' },\r\n   { id: 'carbs', numeric: true, disablePadding: false, label: 'THANH TOÁN' },\r\n   {\r\n      id: 'protein',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'TRẠNG THÁI',\r\n   },\r\n   {\r\n      id: 'protein',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: '',\r\n   },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            {/* <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell> */}\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n   const classes = useToolbarStyles()\r\n   const { numSelected } = props\r\n\r\n   return (\r\n      <Toolbar\r\n         className={clsx(classes.root, {\r\n            [classes.highlight]: numSelected > 0,\r\n         })}\r\n      >\r\n         <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n         >\r\n            <h3 className='text-center'> Danh sách đơn hàng</h3>\r\n         </Typography>\r\n      </Toolbar>\r\n   )\r\n}\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n   numSelected: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n      padding: theme.spacing(3),\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nconst MyOrdersScreen = ({ history }) => {\r\n   const classes = useStyles()\r\n   const [name, setName] = useState('')\r\n   const [email, setEmail] = useState('')\r\n   const [password, setPassword] = useState('')\r\n   const [confirmPassword, setConfirmPassword] = useState('')\r\n   const [message, setMessage] = useState(null)\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('date')\r\n\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = orders?.map((n) => n.name)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   // const handleClick = (event, name) => {\r\n   //    const selectedIndex = selected.indexOf(name)\r\n   //    let newSelected = []\r\n\r\n   //    if (selectedIndex === -1) {\r\n   //       newSelected = newSelected.concat(selected, name)\r\n   //    } else if (selectedIndex === 0) {\r\n   //       newSelected = newSelected.concat(selected.slice(1))\r\n   //    } else if (selectedIndex === selected.length - 1) {\r\n   //       newSelected = newSelected.concat(selected.slice(0, -1))\r\n   //    } else if (selectedIndex > 0) {\r\n   //       newSelected = newSelected.concat(\r\n   //          selected.slice(0, selectedIndex),\r\n   //          selected.slice(selectedIndex + 1)\r\n   //       )\r\n   //    }\r\n\r\n   //    setSelected(newSelected)\r\n   // }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n   const { success } = userUpdateProfile\r\n\r\n   const orderListMy = useSelector((state) => state.orderListMy)\r\n   const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n   const emptyRows =\r\n      orders !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, orders.length - page * rowsPerPage)\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push()\r\n      } else {\r\n         // dispatch(getUserDetails('profile'))\r\n         dispatch(listMyOrders())\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, history, userInfo, user])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {loadingOrders ? (\r\n            <SkeletonEffect />\r\n         ) : errorOrders ? (\r\n            <Announcement variant='danger'>{errorOrders}</Announcement>\r\n         ) : (\r\n            <>\r\n               <div className={classes.root}>\r\n                  <Paper className={classes.paper} boxShadow={3}>\r\n                     <EnhancedTableToolbar numSelected={selected.length} />\r\n                     <TableContainer>\r\n                        <Table\r\n                           className={classes.table}\r\n                           aria-labelledby='tableTitle'\r\n                           size={dense ? 'small' : 'medium'}\r\n                           aria-label='enhanced table'\r\n                        >\r\n                           <EnhancedTableHead\r\n                              classes={classes}\r\n                              numSelected={selected.length}\r\n                              order={order}\r\n                              orderBy={orderBy}\r\n                              onSelectAllClick={handleSelectAllClick}\r\n                              onRequestSort={handleRequestSort}\r\n                              rowCount={orders?.length}\r\n                           />\r\n                           <TableBody>\r\n                              {stableSort(orders, getComparator(order, orderBy))\r\n                                 .slice(\r\n                                    page * rowsPerPage,\r\n                                    page * rowsPerPage + rowsPerPage\r\n                                 )\r\n                                 .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.name)\r\n                                    const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                    return (\r\n                                       <TableRow\r\n                                          hover\r\n                                          // onClick={(event) =>\r\n                                          //    handleClick(event, row._id)\r\n                                          // }\r\n                                          role='checkbox'\r\n                                          aria-checked={isItemSelected}\r\n                                          tabIndex={-1}\r\n                                          key={row._id}\r\n                                          selected={isItemSelected}\r\n                                       >\r\n                                          {/* <TableCell padding='checkbox'>\r\n                                             <Checkbox\r\n                                                checked={isItemSelected}\r\n                                                inputProps={{\r\n                                                   'aria-labelledby': labelId,\r\n                                                }}\r\n                                             />\r\n                                          </TableCell> */}\r\n                                          <TableCell\r\n                                             component='th'\r\n                                             id={labelId}\r\n                                             scope='row'\r\n                                             align='center'\r\n                                          >\r\n                                             {row._id}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {row.orderItems.map(\r\n                                                (item, index) => (\r\n                                                   <Row>\r\n                                                      <Col md={12}>\r\n                                                         <TableCell\r\n                                                            key={index}\r\n                                                            className='border-0'\r\n                                                            align='center'\r\n                                                         >\r\n                                                            {item.name.slice(\r\n                                                               0,\r\n                                                               30\r\n                                                            ) + '...'}\r\n                                                         </TableCell>\r\n                                                      </Col>\r\n                                                   </Row>\r\n                                                )\r\n                                             )}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {format(\r\n                                                new utcToZonedTime(\r\n                                                   row.createdAt,\r\n                                                   'Asia/Ho_Chi_Minh'\r\n                                                ),\r\n                                                'HH:mm:ss - dd/MM/yyyy',\r\n                                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                             )}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {formatMoney(row.totalPrice, 'đ')}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {row.paymentMethod ===\r\n                                                'Thanh toán bằng tiền mặt' &&\r\n                                             row.isDelivered ? (\r\n                                                <strong className='mb-0'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         row.deliveredAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </strong>\r\n                                             ) : row.paymentMethod ===\r\n                                                  'Thanh toán bằng PayPal' &&\r\n                                               row.isPaid ? (\r\n                                                <strong className='mb-0'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         row.paidAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </strong>\r\n                                             ) : (\r\n                                                <i\r\n                                                   className='fas fa-times'\r\n                                                   style={{ color: 'red' }}\r\n                                                />\r\n                                             )}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {row.orderStatus === 'Huỷ' ? (\r\n                                                <strong className='text-danger border border-danger p-2 rounded-pill'>\r\n                                                   {row.orderStatus}\r\n                                                </strong>\r\n                                             ) : row.orderStatus ===\r\n                                               'Đã giao hàng' ? (\r\n                                                <strong className='text-success border border-success p-2 rounded-pill'>\r\n                                                   {row.orderStatus}\r\n                                                </strong>\r\n                                             ) : (\r\n                                                <strong className='text-warning border border-warning p-2 rounded-pill'>\r\n                                                   {row.orderStatus}\r\n                                                </strong>\r\n                                             )}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             <LinkContainer\r\n                                                to={`/order/${row._id}`}\r\n                                             >\r\n                                                <div>\r\n                                                   <Button\r\n                                                      style={{\r\n                                                         fontSize: '1rem',\r\n                                                      }}\r\n                                                      variant='outline-light'\r\n                                                      className='text-uppercase p-2 pl-3 pr-3 btn_color_details rounded-pill'\r\n                                                   >\r\n                                                      <i class='fab fa-connectdevelop'></i>\r\n                                                   </Button>\r\n                                                </div>\r\n                                             </LinkContainer>\r\n                                          </TableCell>\r\n                                       </TableRow>\r\n                                    )\r\n                                 })}\r\n                              {emptyRows > 0 && (\r\n                                 <TableRow\r\n                                    style={{\r\n                                       height: (dense ? 33 : 53) * emptyRows,\r\n                                    }}\r\n                                 >\r\n                                    <TableCell colSpan={6} />\r\n                                 </TableRow>\r\n                              )}\r\n                           </TableBody>\r\n                        </Table>\r\n                     </TableContainer>\r\n                     <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component='div'\r\n                        count={orders.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                     />\r\n                  </Paper>\r\n                  <FormControlLabel\r\n                     control={\r\n                        <Switch checked={dense} onChange={handleChangeDense} />\r\n                     }\r\n                     label='Dense padding'\r\n                  />\r\n               </div>\r\n            </>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default MyOrdersScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\configAuth.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js",["545","546","547","548","549","550","551","552","553","554","555","556","557","558"],"import Step from '@material-ui/core/Step'\r\nimport StepConnector from '@material-ui/core/StepConnector'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Check from '@material-ui/icons/Check'\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport VideoLabelIcon from '@material-ui/icons/VideoLabel'\r\nimport CachedIcon from '@material-ui/icons/Cached'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping'\r\nimport EventAvailableIcon from '@material-ui/icons/EventAvailable'\r\n\r\nconst useQontoStepIconStyles = makeStyles({\r\n  root: {\r\n    color: '#eaeaf0',\r\n    display: 'flex',\r\n    height: 22,\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    color: '#784af4',\r\n  },\r\n  circle: {\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: '50%',\r\n    backgroundColor: 'currentColor',\r\n  },\r\n  completed: {\r\n    color: '#784af4',\r\n    zIndex: 1,\r\n    fontSize: 18,\r\n  },\r\n})\r\n\r\nfunction QontoStepIcon(props) {\r\n  const classes = useQontoStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n      })}\r\n    >\r\n      {completed ? (\r\n        <Check className={classes.completed} />\r\n      ) : (\r\n        <div className={classes.circle} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n}\r\n\r\nconst ColorlibConnector = withStyles({\r\n  alternativeLabel: {\r\n    top: 22,\r\n  },\r\n  active: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  completed: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  line: {\r\n    height: 3,\r\n    border: 0,\r\n    backgroundColor: '#eaeaf0',\r\n    borderRadius: 1,\r\n  },\r\n})(StepConnector)\r\n\r\nconst useColorlibStepIconStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: '#ccc',\r\n    zIndex: 1,\r\n    color: '#fff',\r\n    width: 50,\r\n    height: 50,\r\n    display: 'flex',\r\n    borderRadius: '50%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n  completed: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n})\r\n\r\nfunction ColorlibStepIcon(props) {\r\n  const classes = useColorlibStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  const icons = {\r\n    1: <CachedIcon style={{ fontSize: '1.8rem' }} />,\r\n    2: <LocalShippingIcon style={{ fontSize: '1.8rem' }} />,\r\n    3: <EventAvailableIcon style={{ fontSize: '1.8rem' }} />,\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n        [classes.completed]: completed,\r\n      })}\r\n    >\r\n      {icons[String(props.icon)]}\r\n    </div>\r\n  )\r\n}\r\n\r\nColorlibStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n  /**\r\n   * The label displayed in the step icon.\r\n   */\r\n  icon: PropTypes.node,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst ProgressShipping = () => {\r\n  const classes = useStyles()\r\n  const [activeStep, setActiveStep] = useState(0)\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  // const steps = getSteps()\r\n\r\n  const steps = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng']\r\n\r\n  const stepHandler = () => {\r\n    setActiveStep(1)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper\r\n        alternativeLabel\r\n        activeStep={steps.indexOf(order.orderStatus)}\r\n        connector={<ColorlibConnector />}\r\n      >\r\n        {steps.map((label) => (\r\n          <Step key={label} onChange={stepHandler}>\r\n            {order.orderStatus === label ? (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            ) : (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            )}\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressShipping\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\test.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js",["559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576"],"F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js",["577","578"],"F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js",["579"],"import FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useState } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Bar, BarChart, CartesianGrid, Tooltip, XAxis, YAxis } from 'recharts'\r\nimport { consultOrder } from '../../actions/orderActions'\r\nimport Header from './components/Header'\r\nimport ListNumbers from './components/ListNumber'\r\nimport SideBar from './components/SideBar'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 150,\r\n   },\r\n}))\r\n\r\nfunction format(n, currency) {\r\n   return n?.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst AdminScreen = ({ history }) => {\r\n   const classes = useStyles()\r\n   const dispatch = useDispatch()\r\n\r\n   const [consult, setConsult] = useState('')\r\n\r\n   const orderConsult = useSelector((state) => state.orderConsult)\r\n   const { order } = orderConsult\r\n\r\n   const handleChange = (event) => {\r\n      setConsult(event.target.value)\r\n      dispatch(consultOrder({ values: event.target.value }))\r\n   }\r\n\r\n   const data = order?.orderFilters.map((cn) => ({\r\n      name: cn._id,\r\n      'Số đơn hàng': cn.count,\r\n      'Tổng doanh thu': cn.total,\r\n   }))\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0 '>\r\n               <SideBar />\r\n            </Col>\r\n            <Col\r\n               md={10}\r\n               className='pl-0 pt-4'\r\n               style={{ backgroundColor: '#fff' }}\r\n            >\r\n               <h3 className='text-center'>Thống kê</h3>\r\n               <ListNumbers />\r\n               <div className='d-flex justify-content-end mr-4'>\r\n                  <FormControl\r\n                     className={classes.formControl}\r\n                     style={{ zIndex: '4' }}\r\n                  >\r\n                     <InputLabel id='demo-simple-select-label'>\r\n                        Xem theo:\r\n                     </InputLabel>\r\n                     <Select\r\n                        labelId='demo-simple-select-label'\r\n                        id='demo-simple-select'\r\n                        value={consult}\r\n                        onChange={handleChange}\r\n                        align='center'\r\n                        type='submit'\r\n                     >\r\n                        <MenuItem value={'day7Ago'}>7 ngày trước</MenuItem>\r\n                        <MenuItem value={'currentWeek'}>Tuần này</MenuItem>\r\n                        <MenuItem value={'monthAgo'}>Tháng trước</MenuItem>\r\n                        <MenuItem value={'currentMonth'}>Tháng này</MenuItem>\r\n                        <MenuItem value={'year'}>Cả năm</MenuItem>\r\n                     </Select>\r\n                  </FormControl>\r\n               </div>\r\n               <div className='ml-4'>\r\n                  <BarChart\r\n                     width={1100}\r\n                     height={500}\r\n                     data={data}\r\n                     style={{ zIndex: '5' }}\r\n                  >\r\n                     <XAxis\r\n                        dataKey='name'\r\n                        stroke='#334443'\r\n                        style={{ fontWeight: '700' }}\r\n                     />\r\n                     <YAxis />\r\n                     <Tooltip\r\n                        wrapperStyle={{\r\n                           width: 220,\r\n                           backgroundColor: '#ccc',\r\n                           fontSize: '0.9rem',\r\n                           fontWeight: '700',\r\n                        }}\r\n                     />\r\n\r\n                     <CartesianGrid\r\n                        stroke='#2e5a1c'\r\n                        // strokeDasharray='5 5'\r\n                        type='monotone'\r\n                     />\r\n                     <Bar\r\n                        dataKey={'Tổng doanh thu'}\r\n                        fill='#4e9525'\r\n                        barSize={20}\r\n                     />\r\n                     <Bar dataKey={'Số đơn hàng'} fill='#4e9525' barSize={1} />\r\n                  </BarChart>\r\n               </div>\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default AdminScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js",["580","581","582","583","584","585","586","587","588","589","590","591","592","593"],"// import { Menu } from '@material-ui/core'\r\n// import { Link } from '@material-ui/core'\r\nimport { MenuList } from '@material-ui/core'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Buttonn from '@material-ui/core/Button'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications'\r\nimport { Menu, notification } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport { black } from 'colors'\r\nimport firebase from 'firebase'\r\nimport moment from 'moment'\r\nimport 'moment/locale/vi'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport { Container, Image, Nav, Navbar } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport OpenSocket from 'socket.io-client'\r\nimport { listCategories } from '../../../actions/categoryAction'\r\nimport {\r\n   getNotification,\r\n   notificationCount,\r\n} from '../../../actions/notificationsAction'\r\nimport { logout } from '../../../actions/userActions'\r\n\r\nmoment.locale('vi')\r\n\r\nconst StyledMenu = withStyles({\r\n   paper: {\r\n      border: '1px solid #d3d4d5',\r\n   },\r\n})((props) => (\r\n   <Menu\r\n      elevation={0}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n         vertical: 'top',\r\n         horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n         vertical: 'top',\r\n         horizontal: 'center',\r\n      }}\r\n      {...props}\r\n   />\r\n))\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n   root: {\r\n      '&:focus': {\r\n         backgroundColor: theme.palette.primary.main,\r\n         '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n            color: theme.palette.common.white,\r\n         },\r\n      },\r\n   },\r\n}))(MenuItem)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n      maxWidth: '40ch',\r\n      backgroundColor: theme.palette.background.paper,\r\n   },\r\n   paper: {\r\n      marginRight: theme.spacing(1),\r\n      zIndex: '7 !important',\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(4),\r\n      height: theme.spacing(4),\r\n   },\r\n   link: {\r\n      color: black,\r\n      '&:hover': {\r\n         color: '#002984',\r\n         textDecoration: 'none',\r\n      },\r\n      '&:active': {\r\n         color: '#002984',\r\n         textDecoration: 'none',\r\n      },\r\n      '&:visited': {\r\n         color: '#002984',\r\n         textDecoration: 'none',\r\n      },\r\n   },\r\n}))\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n   badge: {\r\n      right: -3,\r\n      top: 13,\r\n      border: `2px solid ${theme.palette.background.paper}`,\r\n      padding: '0 4px',\r\n   },\r\n}))(Badge)\r\n\r\nfunction Header(props) {\r\n   const classes = useStyles()\r\n\r\n   const [open, setOpen] = React.useState(false)\r\n   const [open1, setOpen1] = React.useState(false)\r\n   const anchorRef = React.useRef(null)\r\n   const anchorRef1 = React.useRef(null)\r\n   const history = useHistory()\r\n   const [anchorEl, setAnchorEl] = useState(null)\r\n   const [anchorEl1, setAnchorEl1] = useState(null)\r\n   // const [menu, setMenu] = useState(false)\r\n\r\n   const [loadingNotifications, setLoadingNotifications] = useState(false)\r\n   const [notifications, setNotifications] = useState([])\r\n   const [hasFirstFetch, setHasFirstFetch] = useState(false)\r\n   const [visibleNoti, setVisibleNoti] = useState(false)\r\n\r\n   const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget)\r\n   }\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const notificationsAdm = useSelector((state) => state.notificationsAdm)\r\n   const { notificationsCount, userData } = notificationsAdm\r\n\r\n   const userNotification = useSelector((state) => state.userNotification)\r\n   const { notifi } = userNotification\r\n\r\n   const not = notifi?.notifications?.reverse()\r\n\r\n   const logoutHandler = () => {\r\n      firebase.auth().signOut()\r\n      dispatch(logout())\r\n      history.push('/')\r\n   }\r\n\r\n   const handleToggle = () => {\r\n      setOpen((prevOpen) => !prevOpen)\r\n   }\r\n\r\n   const handleToggle1 = () => {\r\n      setOpen1((prevOpen) => !prevOpen)\r\n   }\r\n\r\n   const handleClose = (event) => {\r\n      if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n         return\r\n      }\r\n\r\n      setOpen(false)\r\n   }\r\n\r\n   const handleClose1 = (event) => {\r\n      if (anchorRef1.current && anchorRef1.current.contains(event.target)) {\r\n         return\r\n      }\r\n\r\n      setOpen1(false)\r\n   }\r\n\r\n   function handleListKeyDown(event) {\r\n      if (event.key === 'Tab') {\r\n         event.preventDefault()\r\n         setOpen(false)\r\n      }\r\n   }\r\n\r\n   function handleListKeyDown1(event) {\r\n      if (event.key === 'Tab') {\r\n         event.preventDefault()\r\n         setOpen1(false)\r\n      }\r\n   }\r\n\r\n   // return focus to the button when we transitioned from !open -> open\r\n   const prevOpen = React.useRef(open)\r\n   const prevOpen1 = React.useRef(open1)\r\n\r\n   const openNotification = useCallback(\r\n      (type, data) => {\r\n         let action = 'đã thanh toán thành công đơn hàng.'\r\n         // let description = `\"${data.content}...\"`\r\n         let url\r\n\r\n         switch (type) {\r\n            case 'create order':\r\n               action = `đã đặt đơn hàng #${data.content?._id}.`\r\n               // description = `\"${data.content}...\"`\r\n               url = `/admin/orderlist/${data.orderId}`\r\n               break\r\n\r\n            default:\r\n               break\r\n         }\r\n\r\n         if (data) {\r\n            notification.open({\r\n               message: (\r\n                  <span>\r\n                     <strong>{data.user.name}</strong> đã {action}\r\n                  </span>\r\n               ),\r\n               // description,\r\n               placement: 'bottomLeft',\r\n               icon: <Avatar alt='avatar user' src={data.user.avatar?.url} />,\r\n               duration: 10,\r\n               key: Math.random(),\r\n               closeIcon: null,\r\n               style: {\r\n                  borderRadius: 5,\r\n                  boxShadow: '0 0 20px #ccc',\r\n                  cursor: 'pointer',\r\n               },\r\n               onClick() {\r\n                  history.push(`/admin/orderlist/${data.orderId}`)\r\n               },\r\n            })\r\n         }\r\n      },\r\n      [props]\r\n   )\r\n\r\n   useEffect(() => {\r\n      if (prevOpen.current === true && open === false) {\r\n         anchorRef.current.focus()\r\n      }\r\n\r\n      if (prevOpen1.current === true && open1 === false) {\r\n         anchorRef1.current.focus()\r\n      }\r\n\r\n      dispatch(listCategories())\r\n      // dispatch(getNotifications())\r\n\r\n      prevOpen.current = open\r\n      prevOpen1.current = open1\r\n\r\n      const socket = OpenSocket('http://localhost:5000')\r\n\r\n      socket.on('create order', (orderUser) => {\r\n         openNotification('create order', orderUser)\r\n\r\n         dispatch(\r\n            notificationCount({\r\n               count: notificationsCount + 1,\r\n            })\r\n         )\r\n      })\r\n\r\n      return () => {\r\n         socket.emit('logout')\r\n      }\r\n   }, [dispatch, notificationsCount, user])\r\n\r\n   const openNotificationsDropdown = () => {\r\n      // Nếu có notifications mới hoặc chưa fetch lần nào thì sẽ fetch notifications\r\n      if (!visibleNoti) {\r\n         if (user.notifications?.newNotifications || !hasFirstFetch) {\r\n            setLoadingNotifications(true)\r\n            setNotifications([])\r\n            dispatch(getNotification())\r\n            if (not) {\r\n               setNotifications(notifi?.notifications.reverse())\r\n               dispatch(notificationCount({ count: 0 }))\r\n            }\r\n         }\r\n      }\r\n      setVisibleNoti((pre) => !pre)\r\n   }\r\n\r\n   const markAsReadHandler = (index) => {}\r\n\r\n   return (\r\n      <>\r\n         <Navbar\r\n            expand='lg'\r\n            collapseOnSelect\r\n            className='p-0 pl-5 pr-5 m-0 shadow '\r\n            style={{ backgroundColor: '#edfead', height: '4rem' }}\r\n         >\r\n            <Container fluid>\r\n               <LinkContainer to='/'>\r\n                  <Navbar.Brand className='text-uppercase font-weight-bold flex-grow-1 '>\r\n                     <Image\r\n                        src='/logo/logo_white.png'\r\n                        style={{ width: '5rem', height: '4rem', zIndex: '0' }}\r\n                     />\r\n                  </Navbar.Brand>\r\n               </LinkContainer>\r\n               <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\r\n               <Navbar.Collapse id='basic-navbar-nav'>\r\n                  <Nav className='ml-auto' inline>\r\n                     <Buttonn\r\n                        ref={anchorRef1}\r\n                        aria-controls={open1 ? 'menu-list-grow' : undefined}\r\n                        aria-haspopup='true'\r\n                        onClick={handleToggle1}\r\n                        className='ml-2 mt-1 mb-1 rounded-circle'\r\n                     >\r\n                        <IconButton\r\n                           aria-label='cart'\r\n                           onClick={openNotificationsDropdown}\r\n                        >\r\n                           <StyledBadge\r\n                              badgeContent={notificationsCount}\r\n                              max={9}\r\n                              color='secondary'\r\n                           >\r\n                              <NotificationsIcon />\r\n                           </StyledBadge>\r\n                        </IconButton>\r\n                     </Buttonn>\r\n                     <Popper\r\n                        open={open1}\r\n                        anchorEl={anchorRef1.current}\r\n                        role={undefined}\r\n                        transition\r\n                        disablePortal\r\n                        style={{ zIndex: '5' }}\r\n                     >\r\n                        {({ TransitionProps, placement }) => (\r\n                           <Grow {...TransitionProps}>\r\n                              <Paper>\r\n                                 <ClickAwayListener onClickAway={handleClose1}>\r\n                                    <List\r\n                                       className={classes.root}\r\n                                       autoFocusItem={open}\r\n                                       id='menu-list-grow'\r\n                                       onKeyDown={handleListKeyDown1}\r\n                                    >\r\n                                       {not?.map((notify, index) => (\r\n                                          <Link\r\n                                             to={`/admin/order/${notify.logId.rootId}/edit`}\r\n                                             className='notifications'\r\n                                             // onClick={() =>\r\n                                             //    markAsReadHandler(index)\r\n                                             // }\r\n                                          >\r\n                                             <ListItem\r\n                                                alignItems='flex-start'\r\n                                                onClick={handleClose1}\r\n                                                className='notifications_items'\r\n                                             >\r\n                                                <ListItemAvatar>\r\n                                                   <Avatar\r\n                                                      alt='Remy Sharp'\r\n                                                      src={\r\n                                                         notify.logId.userId\r\n                                                            ?.avatar.url\r\n                                                      }\r\n                                                      style={{\r\n                                                         width: '2.5rem',\r\n                                                         height: '2.5rem',\r\n                                                      }}\r\n                                                   />\r\n                                                </ListItemAvatar>\r\n                                                <div>\r\n                                                   <strong className='text-capitalize'>\r\n                                                      {`${notify.logId.userId?.name} đã đặt hàng #${notify.logId.rootId} thành công.`}\r\n                                                   </strong>\r\n\r\n                                                   <p className='text-lowercase'>\r\n                                                      {moment(\r\n                                                         notify.logId.createdAt\r\n                                                      ).fromNow()}\r\n                                                   </p>\r\n                                                </div>\r\n                                                <p>\r\n                                                   {notify.hasRead === true ? (\r\n                                                      ''\r\n                                                   ) : (\r\n                                                      <i\r\n                                                         className='fas fa-circle'\r\n                                                         style={{\r\n                                                            color: 'blueviolet',\r\n                                                         }}\r\n                                                      ></i>\r\n                                                   )}\r\n                                                </p>\r\n                                             </ListItem>\r\n                                          </Link>\r\n                                       ))}\r\n                                    </List>\r\n                                 </ClickAwayListener>\r\n                              </Paper>\r\n                           </Grow>\r\n                        )}\r\n                     </Popper>\r\n\r\n                     {userInfo ? (\r\n                        <>\r\n                           <Buttonn\r\n                              ref={anchorRef}\r\n                              aria-controls={\r\n                                 open ? 'menu-list-grow' : undefined\r\n                              }\r\n                              aria-haspopup='true'\r\n                              onClick={handleToggle}\r\n                              className='ml-2  mt-1 mb-1 rounded-circle'\r\n                           >\r\n                              {userInfo ? (\r\n                                 <Image\r\n                                    className='rounded-circle border border-grey'\r\n                                    src={userDetails.user.avatar?.url}\r\n                                    alt={\r\n                                       userDetails.user && userDetails.user.name\r\n                                    }\r\n                                    style={{\r\n                                       width: '2.5rem',\r\n                                       height: '2.5rem',\r\n                                    }}\r\n                                    fluid\r\n                                 />\r\n                              ) : (\r\n                                 <Avatar className={classes.orange}>\r\n                                    {userInfo.name.substring(0, 1)}\r\n                                 </Avatar>\r\n                              )}\r\n                           </Buttonn>\r\n                           <Popper\r\n                              open={open}\r\n                              anchorEl={anchorRef.current}\r\n                              role={undefined}\r\n                              transition\r\n                              disablePortal\r\n                              style={{ zIndex: '5' }}\r\n                           >\r\n                              {({ TransitionProps, placement }) => (\r\n                                 <Grow {...TransitionProps}>\r\n                                    <Paper>\r\n                                       <ClickAwayListener\r\n                                          onClickAway={handleClose}\r\n                                       >\r\n                                          <MenuList\r\n                                             autoFocusItem={open}\r\n                                             id='menu-list-grow'\r\n                                             onKeyDown={handleListKeyDown}\r\n                                          >\r\n                                             <MenuItem onClick={handleClose}>\r\n                                                <Link\r\n                                                   to='/profile'\r\n                                                   className={classes.link}\r\n                                                   style={{\r\n                                                      color: 'black',\r\n                                                      fontSize: '0.8rem',\r\n                                                      letterSpacing: '0.05rem',\r\n                                                   }}\r\n                                                >\r\n                                                   <Image\r\n                                                      src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                                      className='pr-1'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Hồ sơ\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n\r\n                                             <MenuItem\r\n                                                onClick={logoutHandler}\r\n                                                style={{\r\n                                                   color: 'black',\r\n                                                   fontSize: '0.8rem',\r\n                                                   letterSpacing: '0.05rem',\r\n                                                }}\r\n                                             >\r\n                                                <Link\r\n                                                   to='/'\r\n                                                   className={classes.link}\r\n                                                   style={{\r\n                                                      color: 'black',\r\n                                                      fontSize: '0.8rem',\r\n                                                      letterSpacing: '0.05rem',\r\n                                                   }}\r\n                                                >\r\n                                                   <Image\r\n                                                      className='pr-1'\r\n                                                      src='https://img.icons8.com/fluent/24/000000/exit.png'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đăng Xuất\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n                                          </MenuList>\r\n                                       </ClickAwayListener>\r\n                                    </Paper>\r\n                                 </Grow>\r\n                              )}\r\n                           </Popper>\r\n                        </>\r\n                     ) : (\r\n                        <>\r\n                           <Buttonn\r\n                              ref={anchorRef}\r\n                              aria-controls={\r\n                                 open ? 'menu-list-grow' : undefined\r\n                              }\r\n                              aria-haspopup='true'\r\n                              onClick={handleToggle}\r\n                              className='ml-2 mt-1 mb-1 rounded-circle'\r\n                           >\r\n                              <Image src='https://img.icons8.com/fluent/30/000000/circled-menu.png' />\r\n                           </Buttonn>\r\n                           <Popper\r\n                              open={open}\r\n                              anchorEl={anchorRef.current}\r\n                              role={undefined}\r\n                              transition\r\n                              disablePortal\r\n                              style={{ zIndex: '2' }}\r\n                           >\r\n                              {({ TransitionProps, placement }) => (\r\n                                 <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{\r\n                                       transformOrigin:\r\n                                          placement === 'bottom'\r\n                                             ? 'center top'\r\n                                             : 'center bottom',\r\n                                    }}\r\n                                 >\r\n                                    <Paper>\r\n                                       <ClickAwayListener\r\n                                          onClickAway={handleClose}\r\n                                       >\r\n                                          <MenuList\r\n                                             autoFocusItem={open}\r\n                                             id='menu-list-grow'\r\n                                             onKeyDown={handleListKeyDown}\r\n                                          >\r\n                                             <MenuItem\r\n                                                onClick={handleClose}\r\n                                                style={{\r\n                                                   color: 'black',\r\n                                                   fontSize: '0.8rem',\r\n                                                   letterSpacing: '0.05rem',\r\n                                                }}\r\n                                             >\r\n                                                <Link\r\n                                                   to='/login'\r\n                                                   className={classes.link}\r\n                                                >\r\n                                                   <Image\r\n                                                      className='pr-1'\r\n                                                      src='https://img.icons8.com/fluent/24/000000/key.png'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đăng Nhập\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n                                             <MenuItem\r\n                                                onClick={handleClose}\r\n                                                style={{\r\n                                                   color: 'black',\r\n                                                   fontSize: '0.8rem',\r\n                                                   letterSpacing: '0.05rem',\r\n                                                }}\r\n                                             >\r\n                                                <Link\r\n                                                   to='/register'\r\n                                                   className={classes.link}\r\n                                                >\r\n                                                   <Image\r\n                                                      className='pr-1'\r\n                                                      src='https://img.icons8.com/fluent/24/000000/new-contact.png'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đăng Kí\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n                                          </MenuList>\r\n                                       </ClickAwayListener>\r\n                                    </Paper>\r\n                                 </Grow>\r\n                              )}\r\n                           </Popper>\r\n                        </>\r\n                     )}\r\n                  </Nav>\r\n               </Navbar.Collapse>\r\n            </Container>\r\n         </Navbar>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Header\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js",["594"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport { deleteUser, listUsers } from '../../actions/userActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n   {\r\n      id: 'email',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'ĐỊA CHỈ EMAIL',\r\n   },\r\n   { id: 'isAdmin', numeric: true, disablePadding: false, label: 'ADMIN' },\r\n   { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nfunction UserListScreen({ history }) {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = users.map((user) => user._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userList = useSelector((state) => state.userList)\r\n   const { loading, error, users } = userList\r\n\r\n   const emptyRows =\r\n      users !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage)\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userDelete = useSelector((state) => state.userDelete)\r\n   const { success: successDelete } = userDelete\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('You are sure?')) {\r\n         dispatch(deleteUser(id))\r\n      }\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      const did = users.find((user) => user._id)\r\n\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               >\r\n                  <h2>Danh sách tài khoản người dùng</h2>\r\n               </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (userInfo && userInfo.isAdmin) {\r\n         dispatch(listUsers())\r\n      } else {\r\n         history.push('/login')\r\n      }\r\n   }, [dispatch, history, successDelete, userInfo])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 '>\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <>\r\n                     <div className={classes.root}>\r\n                        <Paper\r\n                           className={classes.paper}\r\n                           // style={{\r\n                           //   borderRadius: '1rem',\r\n                           //   border: '0.25px solid #ddd',\r\n                           // }}\r\n                        >\r\n                           <TableContainer\r\n                              className='text-center p-5'\r\n                              style={{\r\n                                 borderRadius: '1rem',\r\n                              }}\r\n                           >\r\n                              <EnhancedTableToolbar\r\n                                 numSelected={selected.length}\r\n                              />\r\n                              <Table\r\n                                 className={classes.table}\r\n                                 aria-labelledby='tableTitle'\r\n                                 size={dense ? 'small' : 'medium'}\r\n                                 aria-label='enhanced table'\r\n                              >\r\n                                 <EnhancedTableHead\r\n                                    classes={classes}\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={users.length}\r\n                                 />\r\n                                 <TableBody>\r\n                                    {stableSort(\r\n                                       users,\r\n                                       getComparator(order, orderBy)\r\n                                    )\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((user, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             user._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(event, user._id)\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={user._id}\r\n                                                selected={isItemSelected}\r\n                                             >\r\n                                                <TableCell padding='checkbox'>\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   component='th'\r\n                                                   id={labelId}\r\n                                                   scope='row'\r\n                                                   padding='none'\r\n                                                   align='center'\r\n                                                >\r\n                                                   {user._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center'\r\n                                                >\r\n                                                   {user.name}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {user.email}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {' '}\r\n                                                   {user.isAdmin ? (\r\n                                                      <i\r\n                                                         className='fas fa-check'\r\n                                                         style={{\r\n                                                            color: 'green',\r\n                                                         }}\r\n                                                      ></i>\r\n                                                   ) : (\r\n                                                      <i\r\n                                                         className='fas fa-times'\r\n                                                         style={{\r\n                                                            color: 'red',\r\n                                                         }}\r\n                                                      ></i>\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/user/${user._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='info'\r\n                                                         className='btn-sm rounded-pill'\r\n                                                      >\r\n                                                         <i className='far fa-edit'></i>\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                    {emptyRows > 0 && (\r\n                                       <TableRow\r\n                                          style={{\r\n                                             height:\r\n                                                (dense ? 33 : 53) * emptyRows,\r\n                                          }}\r\n                                       >\r\n                                          <TableCell colSpan={6} />\r\n                                       </TableRow>\r\n                                    )}\r\n                                 </TableBody>\r\n                              </Table>\r\n                           </TableContainer>\r\n                           <TablePagination\r\n                              rowsPerPageOptions={[5, 10, 25]}\r\n                              component='div'\r\n                              count={users.length}\r\n                              rowsPerPage={rowsPerPage}\r\n                              page={page}\r\n                              onChangePage={handleChangePage}\r\n                              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                           />\r\n                        </Paper>\r\n                        <FormControlLabel\r\n                           control={\r\n                              <Switch\r\n                                 checked={dense}\r\n                                 onChange={handleChangeDense}\r\n                              />\r\n                           }\r\n                           label='Dense padding'\r\n                        />\r\n                     </div>\r\n                  </>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default UserListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js",["595","596"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n  createCategory,\r\n  deleteCategory,\r\n  listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport Announcement from '../../components/Announcement'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst CategoriesListScreen = ({ history }) => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = category.map((cat) => cat._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n  const { loading, error, category } = categoriesListAdm\r\n\r\n  const categoryDelete = useSelector((state) => state.categoryDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = categoryDelete\r\n\r\n  const categoryCreate = useSelector((state) => state.categoryCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    category: createdProduct,\r\n  } = categoryCreate\r\n\r\n  const emptyRows =\r\n    category !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, category.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteCategory(id))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = category.find((cat) => cat._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH DANH MỤC</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listCategoriesAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createCategory(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingDelete && (\r\n              <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n            ) && <SkeletonEffect />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n          {loadingCreate && (\r\n            <MessageSuccess\r\n              variant={'Đã thêm ' + name + ' thành công'}\r\n            ></MessageSuccess>\r\n          )}\r\n          {errorCreate && <Message>{errorCreate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Dialog\r\n                  disableBackdropClick\r\n                  disableEscapeKeyDown\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby='form-dialog-title'\r\n                  maxWidth='xl'\r\n                >\r\n                  <div className='d-flex justify-content-end'>\r\n                    <Button\r\n                      onClick={handleClose}\r\n                      className='p-1 m-1 rounded-pill'\r\n                      variant='light'\r\n                    >\r\n                      <Close />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <DialogContent style={{ width: '30rem' }}>\r\n                    <h4 className='text-center'>Tạo danh mục</h4>\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                          Tên danh mục\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='name'\r\n                          size='normal'\r\n                          placeholder='Enter name'\r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <div className='pl-3 pr-3 text-center'>\r\n                        <Button\r\n                          type='submit'\r\n                          size='sm'\r\n                          variant='outline-light'\r\n                          className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                          style={{\r\n                            fontSize: '1rem',\r\n                            letterSpacing: '0.25rem',\r\n                          }}\r\n                        >\r\n                          Tạo\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </DialogContent>\r\n                </Dialog>\r\n              </div>\r\n              <div className={classes.root}>\r\n                <div className='d-flex justify-content-end'>\r\n                  <Button\r\n                    variant='outline-light'\r\n                    className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                    onClick={handleClickOpen}\r\n                    size='normal'\r\n                  >\r\n                    <i className='fas fa-plus'></i> Tạo danh mục\r\n                  </Button>\r\n                </div>\r\n                <Paper\r\n                  className={classes.paper + 'shadow'}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={category.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(category, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((cat, index) => {\r\n                            const isItemSelected = isSelected(cat._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) => handleClick(event, cat._id)}\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={cat._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {cat._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {cat.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.createdAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.updatedAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - MM/dd/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/category/${cat._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-sm rounded-pill btn_color_details'\r\n                                    >\r\n                                      CHI TIẾT\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={category.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoriesListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js",["597","598"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport { default as React, useEffect } from 'react'\r\nimport { Button, Col, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport {\r\n   getCategoryDetails,\r\n   listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport { deleteProduct, listAllProduct } from '../../actions/productActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport Message from '../../components/Message'\r\nimport '../../notisfied.css'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: false, disablePadding: false, label: 'Tên' },\r\n   { id: 'image', numeric: false, disablePadding: false, label: 'Ảnh' },\r\n   { id: 'price', numeric: true, disablePadding: false, label: 'Giá' },\r\n   { id: 'category', numeric: false, disablePadding: false, label: 'Thể Loại' },\r\n   { id: 'quantity', numeric: true, disablePadding: false, label: 'Số lượng' },\r\n   { id: 'action', numeric: false, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = products.map((product) => product._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n   const pageNumber = match.params.pageNumber || 1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category: categoryCat } = categoriesList\r\n\r\n   const productListAll = useSelector((state) => state.productListAll)\r\n   const { loading, error, products } = productListAll\r\n\r\n   const emptyRows =\r\n      products !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, products.length - page * rowsPerPage)\r\n\r\n   const productDelete = useSelector((state) => state.productDelete)\r\n   const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n   } = productDelete\r\n\r\n   const productCreate = useSelector((state) => state.productCreate)\r\n   const { success: successCreate, product: createdProduct } = productCreate\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   useEffect(() => {\r\n      if (!userInfo.isAdmin) {\r\n         history.push('/login')\r\n      }\r\n\r\n      if (userInfo) {\r\n         dispatch(listCategoriesAdm())\r\n         dispatch(getCategoryDetails(categoryCat.map((e) => e._id)))\r\n      }\r\n\r\n      if (successCreate) {\r\n         history.push(`/admin/product/${createdProduct._id}/edit`)\r\n      } else {\r\n         dispatch(listAllProduct())\r\n      }\r\n   }, [dispatch, history, userInfo, successDelete, successCreate])\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('You are sure?')) {\r\n         dispatch(deleteProduct(id))\r\n         setSelected([])\r\n      }\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               >\r\n                  <h2>Danh sách sản phẩm</h2>\r\n               </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingDelete && <SkeletonEffect />}\r\n               {errorDelete && <Message>{errorDelete}</Message>}\r\n\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <>\r\n                     <div className='text-right bg-light'>\r\n                        <LinkContainer to='/admin/product/create'>\r\n                           <Button\r\n                              variant='outline-dark'\r\n                              className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                           >\r\n                              <i className='fas fa-plus'></i> Thêm sản phẩm\r\n                           </Button>\r\n                        </LinkContainer>\r\n                     </div>\r\n                     <div className={classes.root}>\r\n                        <Paper\r\n                           className={classes.paper}\r\n                           // style={{\r\n                           //   borderRadius: '1rem',\r\n                           //   border: '0.25px solid #ddd',\r\n                           // }}\r\n                        >\r\n                           <TableContainer\r\n                              className='text-center p-2'\r\n                              style={{\r\n                                 borderRadius: '1rem',\r\n                              }}\r\n                           >\r\n                              <EnhancedTableToolbar\r\n                                 numSelected={selected.length}\r\n                              />\r\n                              <Table\r\n                                 className={classes.table}\r\n                                 aria-labelledby='tableTitle'\r\n                                 size={dense ? 'small' : 'medium'}\r\n                                 aria-label='enhanced table'\r\n                              >\r\n                                 <EnhancedTableHead\r\n                                    classes={classes}\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={products.length}\r\n                                    colSpan={1}\r\n                                 />\r\n                                 <TableBody>\r\n                                    {stableSort(\r\n                                       products,\r\n                                       getComparator(order, orderBy)\r\n                                    )\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((product, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             product._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(\r\n                                                      event,\r\n                                                      product._id\r\n                                                   )\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={product._id}\r\n                                                selected={isItemSelected}\r\n                                             >\r\n                                                <TableCell padding='checkbox'>\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   component='th'\r\n                                                   id={labelId}\r\n                                                   scope='row'\r\n                                                   padding='none'\r\n                                                   align='center'\r\n                                                   className='text-center text-capitalize'\r\n                                                >\r\n                                                   {product._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center text-capitalize'\r\n                                                >\r\n                                                   <p className='text-capitalize'>\r\n                                                      {product.name}\r\n                                                   </p>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   <Image\r\n                                                      src={\r\n                                                         product.images[0].url\r\n                                                      }\r\n                                                      fluid\r\n                                                      className='rounded p-1'\r\n                                                   />\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align='center'>\r\n                                                   {formatMoney(\r\n                                                      product.price,\r\n                                                      'đ'\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {categoryCat &&\r\n                                                      categoryCat.map(\r\n                                                         (cat, index) =>\r\n                                                            cat._id ===\r\n                                                               product.category &&\r\n                                                            cat.name\r\n                                                      )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   style={{ padding: '1px' }}\r\n                                                >\r\n                                                   {product.countInStock}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/product/${product._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='outline-light'\r\n                                                         className='btn-block rounded-pill btn_color_details'\r\n                                                      >\r\n                                                         <i className='far fa-edit'></i>\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                    {emptyRows > 0 && (\r\n                                       <TableRow\r\n                                          style={{\r\n                                             height:\r\n                                                (dense ? 33 : 53) * emptyRows,\r\n                                          }}\r\n                                       >\r\n                                          <TableCell colSpan={6} />\r\n                                       </TableRow>\r\n                                    )}\r\n                                 </TableBody>\r\n                              </Table>\r\n                           </TableContainer>\r\n                           <TablePagination\r\n                              rowsPerPageOptions={[5, 10, 25]}\r\n                              component='div'\r\n                              count={products.length}\r\n                              rowsPerPage={rowsPerPage}\r\n                              page={page}\r\n                              onChangePage={handleChangePage}\r\n                              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                           />\r\n                        </Paper>\r\n                        <FormControlLabel\r\n                           control={\r\n                              <Switch\r\n                                 checked={dense}\r\n                                 onChange={handleChangeDense}\r\n                              />\r\n                           }\r\n                           label='Dense padding'\r\n                        />\r\n                     </div>\r\n                  </>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js",["599","600","601","602","603","604","605","606"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listCategoriesAdm } from '../../actions/categoryAction'\r\nimport { deleteFileImages, uploadFileImages } from '../../actions/cloudinary'\r\nimport { createProduct, newProduct } from '../../actions/productActions'\r\nimport { listSupplierAdm } from '../../actions/supplierActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { PRODUCT_CREATE_RESET } from '../../constants/productConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\nimport { CloseOutlined } from '@ant-design/icons'\r\nimport { listSubCategoryAdm } from '../../actions/subCategoryAction'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\n\r\nfunction formatPrice(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst ProductCreateScreen = () => {\r\n   const [name, setName] = useState('')\r\n   const [price, setPrice] = useState(0)\r\n   const [images, setImages] = useState([])\r\n   const [brand, setBrand] = useState('')\r\n   const [categoryy, setCategory] = useState('')\r\n   const [subCategory, setSubCategory] = useState('')\r\n   const [countInStock, setCountInStock] = useState(0)\r\n   const [description, setDescription] = useState('')\r\n   const [mass, setMass] = useState('')\r\n   const [hdsd, setHdsd] = useState('')\r\n   const [hdbq, setHdbq] = useState('')\r\n   const [supplierr, setSupplier] = useState('')\r\n   const [uploading, setUploading] = useState(false)\r\n   const [imagesPreview, setImagesPreview] = useState([])\r\n\r\n   const uploadFile = (e) => {\r\n      let files = e.target.files\r\n      let allImages = []\r\n      let preview = []\r\n      if (files) {\r\n         for (let i = 0; i < files.length; i++) {\r\n            preview.push(files[i].name)\r\n            Resizer.imageFileResizer(\r\n               files[i],\r\n               720,\r\n               720,\r\n               'JPEG',\r\n               100,\r\n               0,\r\n               (uri) => {\r\n                  try {\r\n                     uploadFileImages({ image: uri }).then((res) => {\r\n                        allImages.push(res.data)\r\n                        setImages(allImages)\r\n                     })\r\n                  } catch (error) {\r\n                     setUploading(false)\r\n                  }\r\n               }\r\n            )\r\n         }\r\n         console.log(allImages)\r\n      }\r\n   }\r\n\r\n   // const deleteFile = (e) => {\r\n   //    dispatch(deleteFileImages(e))\r\n   // }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const productCreate = useSelector((state) => state.productCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n   } = productCreate\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category } = categoriesList\r\n\r\n   const subCategoryList = useSelector((state) => state.subCategoryList)\r\n   const { Sub } = subCategoryList\r\n\r\n   const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n   const { supplier } = supplierListAdm\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n\r\n      dispatch(\r\n         createProduct({\r\n            name,\r\n            price,\r\n            description,\r\n            categoryy,\r\n            supplierr,\r\n            countInStock,\r\n            mass,\r\n            brand,\r\n            hdbq,\r\n            images,\r\n            hdsd,\r\n            subCategory,\r\n         })\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successCreate) {\r\n         dispatch({ type: PRODUCT_CREATE_RESET })\r\n      } else {\r\n         if (userInfo) {\r\n            dispatch(listCategoriesAdm())\r\n            dispatch(listSubCategoryAdm())\r\n            dispatch(listSupplierAdm())\r\n         }\r\n      }\r\n   }, [dispatch, userInfo, successCreate])\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0 '>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 pr-4 '>\r\n               <>\r\n                  {/* {loadingCreate && (\r\n            <Announcement variant='success'> Thêm thành công</Announcement>\r\n          ) && <Loader />}\r\n        {errorCreate && <Announcement>{errorCreate}</Announcement>} */}\r\n                  {loadingCreate && (\r\n                     <MessageSuccess variant='Thêm thành công'></MessageSuccess>\r\n                  )}\r\n                  {loadingCreate ? (\r\n                     <SkeletonEffect />\r\n                  ) : errorCreate ? (\r\n                     <Message>{errorCreate}</Message>\r\n                  ) : (\r\n                     <>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='bg-light border-0 pt-3 pb-3'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>Thêm sản phẩm</h2>\r\n\r\n                           <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Tên sản phẩm\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='name'\r\n                                 placeholder='Enter name'\r\n                                 value={name}\r\n                                 onChange={(e) => setName(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Ảnh\r\n                              </Form.Label>\r\n\r\n                              <Row>\r\n                                 <Col\r\n                                    md={6}\r\n                                    className='align-items-center d-flex'\r\n                                 >\r\n                                    <Form.File\r\n                                       className='border border-grey'\r\n                                       id='image-file'\r\n                                       label='Choose File'\r\n                                       custom\r\n                                       onChange={uploadFile}\r\n                                       multiple\r\n                                    ></Form.File>\r\n                                 </Col>\r\n                                 <Col md={6}>\r\n                                    <Row>\r\n                                       {images &&\r\n                                          images.map((img) => (\r\n                                             <Col md={3}>\r\n                                                <div>\r\n                                                   <Button\r\n                                                      className=''\r\n                                                      style={{\r\n                                                         // marginBottom: '-35%',\r\n                                                         zIndex: '5',\r\n                                                         color: 'black',\r\n                                                      }}\r\n                                                      size='sm'\r\n                                                      variant='outline-light'\r\n                                                      // onClick={deleteFile(\r\n                                                      //    images.public_id\r\n                                                      // )}\r\n                                                   >\r\n                                                      <CloseOutlined\r\n                                                         style={{\r\n                                                            fontSize: '1rem',\r\n                                                         }}\r\n                                                      />\r\n                                                   </Button>\r\n\r\n                                                   <Image\r\n                                                      src={img.url}\r\n                                                      className='rounded avatar_img'\r\n                                                      fluid\r\n                                                   />\r\n                                                </div>\r\n                                             </Col>\r\n                                          ))}\r\n                                    </Row>\r\n                                 </Col>\r\n                              </Row>\r\n                              {uploading && <SkeletonEffect />}\r\n                           </Form.Group>\r\n\r\n                           <Row>\r\n                              {/* <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='brand'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Thể loại\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='text'\r\n                                       placeholder='Enter brand'\r\n                                       value={brand}\r\n                                       onChange={(e) =>\r\n                                          setBrand(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col> */}\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Số lượng trong kho\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={countInStock}\r\n                                       onChange={(e) =>\r\n                                          setCountInStock(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Danh mục\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={categoryy}\r\n                                       onChange={(e) =>\r\n                                          setCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {category &&\r\n                                          category.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='price'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Giá\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter price'\r\n                                       value={price}\r\n                                       onChange={(e) =>\r\n                                          setPrice(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Row>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Danh mục con\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={subCategory}\r\n                                       onChange={(e) =>\r\n                                          setSubCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {Sub &&\r\n                                          Sub.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Khối lượng\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='text'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={mass}\r\n                                       onChange={(e) => setMass(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Nhà cung cấp\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={supplierr}\r\n                                       onChange={(e) =>\r\n                                          setSupplier(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {supplier &&\r\n                                          supplier.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Nội dung\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={description}\r\n                                 onChange={(e) =>\r\n                                    setDescription(e.target.value)\r\n                                 }\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn sử dụng\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdsd}\r\n                                 onChange={(e) => setHdsd(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn bảo quản\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdbq}\r\n                                 onChange={(e) => setHdbq(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Tạo\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </>\r\n                  )}\r\n               </>\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductCreateScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js",["607","608","609","610"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n   createSupplier,\r\n   deleteSupplier,\r\n   listSupplierAdm,\r\n} from '../../actions/supplierActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n   {\r\n      id: 'create',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN TẠO',\r\n   },\r\n   {\r\n      id: 'update',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN CẬP NHẬT',\r\n   },\r\n\r\n   { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nconst SupplierListScreen = () => {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = supplier.map((sup) => sup._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const [open, setOpen] = useState(false)\r\n   const [name, setName] = useState('')\r\n\r\n   const handleClickOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n   const { loading, error, supplier } = supplierListAdm\r\n\r\n   const supplierDelete = useSelector((state) => state.supplierDelete)\r\n   const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n   } = supplierDelete\r\n\r\n   const supplierCreate = useSelector((state) => state.supplierCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n      supplier: createdProduct,\r\n   } = supplierCreate\r\n\r\n   const emptyRows =\r\n      supplier !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, supplier.length - page * rowsPerPage)\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('Bạn có chắc?')) {\r\n         dispatch(deleteSupplier({ id }))\r\n         setSelected([])\r\n      }\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      const did = supplier.find((cat) => cat._id)\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               >\r\n                  <h2>DANH SÁCH NHÀ CUNG CẤP</h2>\r\n               </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (userInfo) {\r\n         dispatch(listSupplierAdm())\r\n      }\r\n   }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(createSupplier(name))\r\n   }\r\n\r\n   const submitHandlerDetails = (e) => {\r\n      e.preventDefault()\r\n      dispatch(createSupplier(name))\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingDelete && (\r\n                     <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n                  ) && <SkeletonEffect />}\r\n               {errorDelete && <Message>{errorDelete}</Message>}\r\n               {loadingCreate && (\r\n                  <MessageSuccess\r\n                     variant={'Đã thêm ' + name + ' thành công'}\r\n                  ></MessageSuccess>\r\n               )}\r\n               {errorCreate && <Message>{errorCreate}</Message>}\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <>\r\n                     <div>\r\n                        <Dialog\r\n                           disableBackdropClick\r\n                           disableEscapeKeyDown\r\n                           open={open}\r\n                           onClose={handleClose}\r\n                           aria-labelledby='form-dialog-title'\r\n                           maxWidth='xl'\r\n                        >\r\n                           <div className='d-flex justify-content-end'>\r\n                              <Button\r\n                                 onClick={handleClose}\r\n                                 className='p-1 m-1 rounded-pill'\r\n                                 variant='light'\r\n                              >\r\n                                 <Close />\r\n                              </Button>\r\n                           </div>\r\n\r\n                           <DialogContent style={{ width: '30rem' }}>\r\n                              <h4 className='text-center'>Thêm nhà cung cấp</h4>\r\n                              <Form onSubmit={submitHandler}>\r\n                                 <Form.Group>\r\n                                    <Form.Label as='p' className='mb-1'>\r\n                                       Tên nhà cung cấp\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='name'\r\n                                       size='normal'\r\n                                       placeholder='Enter name'\r\n                                       value={name}\r\n                                       onChange={(e) => setName(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                                 <div className='pl-3 pr-3 text-center'>\r\n                                    <Button\r\n                                       type='submit'\r\n                                       size='sm'\r\n                                       variant='outline-light'\r\n                                       className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                                       style={{\r\n                                          fontSize: '1rem',\r\n                                          letterSpacing: '0.25rem',\r\n                                       }}\r\n                                    >\r\n                                       Tạo\r\n                                    </Button>\r\n                                 </div>\r\n                              </Form>\r\n                           </DialogContent>\r\n                        </Dialog>\r\n                     </div>\r\n\r\n                     <div className={classes.root}>\r\n                        <div className='d-flex justify-content-end'>\r\n                           <Button\r\n                              variant='outline-light'\r\n                              className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                              onClick={handleClickOpen}\r\n                              size='normal'\r\n                           >\r\n                              <i className='fas fa-plus'></i> Thêm nhà cung cấp\r\n                           </Button>\r\n                        </div>\r\n                        <Paper className={classes.paper}>\r\n                           <TableContainer\r\n                              className='text-center p-5'\r\n                              style={{\r\n                                 borderRadius: '1rem',\r\n                              }}\r\n                           >\r\n                              <EnhancedTableToolbar\r\n                                 numSelected={selected.length}\r\n                              />\r\n                              <Table\r\n                                 className={classes.table}\r\n                                 aria-labelledby='tableTitle'\r\n                                 size={dense ? 'small' : 'medium'}\r\n                                 aria-label='enhanced table'\r\n                              >\r\n                                 <EnhancedTableHead\r\n                                    classes={classes}\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={supplier.length}\r\n                                 />\r\n                                 <TableBody>\r\n                                    {stableSort(\r\n                                       supplier,\r\n                                       getComparator(order, orderBy)\r\n                                    )\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((sup, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             sup._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(event, sup._id)\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={sup._id}\r\n                                                selected={isItemSelected}\r\n                                             >\r\n                                                <TableCell padding='checkbox'>\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   component='th'\r\n                                                   id={labelId}\r\n                                                   scope='row'\r\n                                                   padding='none'\r\n                                                   align='center'\r\n                                                >\r\n                                                   {sup._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center'\r\n                                                >\r\n                                                   {sup.name}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         sup.createdAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         sup.updatedAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - MM/dd/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align='center'>\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/supplier/${sup._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='outline-light'\r\n                                                         className='btn-sm rounded-pill btn_color_details'\r\n                                                      >\r\n                                                         CHI TIẾT\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                    {emptyRows > 0 && (\r\n                                       <TableRow\r\n                                          style={{\r\n                                             height:\r\n                                                (dense ? 33 : 53) * emptyRows,\r\n                                          }}\r\n                                       >\r\n                                          <TableCell colSpan={6} />\r\n                                       </TableRow>\r\n                                    )}\r\n                                 </TableBody>\r\n                              </Table>\r\n                           </TableContainer>\r\n                           <TablePagination\r\n                              rowsPerPageOptions={[5, 10, 25]}\r\n                              component='div'\r\n                              count={supplier.length}\r\n                              rowsPerPage={rowsPerPage}\r\n                              page={page}\r\n                              onChangePage={handleChangePage}\r\n                              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                           />\r\n                        </Paper>\r\n                        <FormControlLabel\r\n                           control={\r\n                              <Switch\r\n                                 checked={dense}\r\n                                 onChange={handleChangeDense}\r\n                              />\r\n                           }\r\n                           label='Dense padding'\r\n                        />\r\n                     </div>\r\n                  </>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default SupplierListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js",["611","612","613"],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js",["614","615","616"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport {\r\n   getCategoryDetails,\r\n   updateCategory,\r\n} from '../../actions/categoryAction'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../../constants/categoriesConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\n\r\nconst CategoryEditScreen = ({ match, history }) => {\r\n   const catId = match.params.id\r\n\r\n   const [name, setName] = useState('')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const categoryDetails = useSelector((state) => state.categoryDetails)\r\n   const { loading, error, category } = categoryDetails\r\n\r\n   const categoryUpdate = useSelector((state) => state.categoryUpdate)\r\n   const {\r\n      loading: loadingUpdate,\r\n      error: errorUpdate,\r\n      success: successUpdate,\r\n   } = categoryUpdate\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateCategory({ _id: catId, name }))\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successUpdate) {\r\n         dispatch({ type: CATEGORY_UPDATE_RESET })\r\n         history.push('/admin/categorieslist')\r\n      } else {\r\n         if (!category.name || category._id !== catId) {\r\n            dispatch(getCategoryDetails(catId))\r\n         } else {\r\n            setName(category.name)\r\n         }\r\n      }\r\n   }, [dispatch, history, catId, category, successUpdate])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 mt-3'>\r\n               {loadingUpdate && (\r\n                  <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n               )}\r\n               {errorUpdate && <Message>{errorUpdate}</Message>}\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : (\r\n                  <Row className='justify-content-center'>\r\n                     <Col md={6}>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='p-4 bg-light shadow card_color'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>\r\n                              Chỉnh sửa danh mục\r\n                           </h2>\r\n                           <Form.Group>\r\n                              <Container>\r\n                                 <Form.Label\r\n                                    as='p'\r\n                                    className='mb-1'\r\n                                    style={{ fontSize: '1.5rem' }}\r\n                                 >\r\n                                    Tên danh mục\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    style={{ fontSize: '1.2rem' }}\r\n                                    className='border border-grey rounded-pill'\r\n                                    type='name'\r\n                                    size='normal'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                 ></Form.Control>\r\n                              </Container>\r\n                           </Form.Group>\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Cập nhật\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </Col>\r\n                  </Row>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default CategoryEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js",["617","618","619"],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js",["620","621","622"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row, Image } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { listCategoriesAdm } from '../../actions/categoryAction'\r\nimport { listProductDetails, updateProduct } from '../../actions/productActions'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { PRODUCT_UPDATE_RESET } from '../../constants/productConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { CloseOutlined } from '@ant-design/icons'\r\nimport { deleteFileImages, uploadFileImages } from '../../actions/cloudinary'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n   const productId = match.params.id\r\n\r\n   const [name, setName] = useState('')\r\n   const [price, setPrice] = useState(0)\r\n   const [images, setImages] = useState([])\r\n   const [brand, setBrand] = useState('')\r\n   const [categoryy, setCategory] = useState('')\r\n   const [subCategory, setSubCategory] = useState('')\r\n   const [countInStock, setCountInStock] = useState(0)\r\n   const [description, setDescription] = useState('')\r\n   const [mass, setMass] = useState('')\r\n   const [hdsd, setHdsd] = useState('')\r\n   const [hdbq, setHdbq] = useState('')\r\n   const [supplierr, setSupplier] = useState('')\r\n   const [uploading, setUploading] = useState(false)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const productDetails = useSelector((state) => state.productDetails)\r\n   const { loading, error, product } = productDetails\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category } = categoriesList\r\n\r\n   const productUpdate = useSelector((state) => state.productUpdate)\r\n   const {\r\n      loading: loadingUpdate,\r\n      error: errorUpdate,\r\n      success: successUpdate,\r\n   } = productUpdate\r\n\r\n   const subCategoryList = useSelector((state) => state.subCategoryList)\r\n   const { Sub } = subCategoryList\r\n\r\n   const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n   const { supplier } = supplierListAdm\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      //UPDATE PRODUCT\r\n      dispatch(\r\n         updateProduct({\r\n            _id: productId,\r\n            name,\r\n            price,\r\n            description,\r\n            categoryy,\r\n            supplierr,\r\n            countInStock,\r\n            mass,\r\n            brand,\r\n            hdbq,\r\n            images,\r\n            hdsd,\r\n            subCategory,\r\n         })\r\n      )\r\n   }\r\n\r\n   const uploadFile = (e) => {\r\n      let files = e.target.files\r\n      let allImages = []\r\n      let preview = []\r\n      if (files) {\r\n         for (let i = 0; i < files.length; i++) {\r\n            preview.push(files[i].name)\r\n            Resizer.imageFileResizer(\r\n               files[i],\r\n               720,\r\n               720,\r\n               'JPEG',\r\n               100,\r\n               0,\r\n               (uri) => {\r\n                  try {\r\n                     uploadFileImages({ image: uri }).then((res) => {\r\n                        allImages.push(res.data)\r\n                        setImages(allImages)\r\n                     })\r\n                  } catch (error) {\r\n                     setUploading(false)\r\n                  }\r\n               }\r\n            )\r\n         }\r\n         console.log(allImages)\r\n      }\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successUpdate) {\r\n         dispatch({ type: PRODUCT_UPDATE_RESET })\r\n         // history.push('/admin/productlist')\r\n      } else {\r\n         if (!product.name || product._id !== productId) {\r\n            if (userInfo) {\r\n               dispatch(listProductDetails(productId))\r\n               dispatch(listCategoriesAdm())\r\n            }\r\n         } else {\r\n            setName(product.name)\r\n            setPrice(product.price)\r\n            setImages(product.image)\r\n            setBrand(product.brand)\r\n            setCategory(product.category)\r\n            setCountInStock(product.countInStock)\r\n            setDescription(product.description)\r\n            setHdsd(product.hdsd)\r\n            setHdbq(product.hdbq)\r\n            setMass(product.mass)\r\n         }\r\n      }\r\n   }, [dispatch, userInfo, history, productId, product, successUpdate])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 mt-3'>\r\n               <Container>\r\n                  {loadingUpdate && (\r\n                        <MessageSuccess variant='Đã cập nhật thành công'></MessageSuccess>\r\n                     ) && <SkeletonEffect />}\r\n                  {errorUpdate && <Message>{errorUpdate}</Message>}\r\n                  {loading ? (\r\n                     <SkeletonEffect />\r\n                  ) : error ? (\r\n                     <Message>{error}</Message>\r\n                  ) : (\r\n                     <>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='bg-light border-0 pt-3 pb-3'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>\r\n                              Chỉnh sửa thông tin sản phẩm\r\n                           </h2>\r\n\r\n                           <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Tên sản phẩm\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='name'\r\n                                 placeholder='Enter name'\r\n                                 value={name}\r\n                                 onChange={(e) => setName(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Ảnh\r\n                              </Form.Label>\r\n\r\n                              <Row>\r\n                                 <Col\r\n                                    md={6}\r\n                                    className='align-items-center d-flex'\r\n                                 >\r\n                                    <Form.File\r\n                                       className='border border-grey'\r\n                                       id='image-file'\r\n                                       label='Choose File'\r\n                                       custom\r\n                                       onChange={uploadFile}\r\n                                       multiple\r\n                                    ></Form.File>\r\n                                 </Col>\r\n                                 <Col md={6}>\r\n                                    <Row>\r\n                                       {images &&\r\n                                          images.map((img) => (\r\n                                             <Col md={3}>\r\n                                                <div>\r\n                                                   <Button\r\n                                                      className=''\r\n                                                      style={{\r\n                                                         // marginBottom: '-35%',\r\n                                                         zIndex: '5',\r\n                                                         color: 'black',\r\n                                                      }}\r\n                                                      size='sm'\r\n                                                      variant='outline-light'\r\n                                                      // onClick={deleteFile(\r\n                                                      //    images.public_id\r\n                                                      // )}\r\n                                                   >\r\n                                                      <CloseOutlined\r\n                                                         style={{\r\n                                                            fontSize: '1rem',\r\n                                                         }}\r\n                                                      />\r\n                                                   </Button>\r\n\r\n                                                   <Image\r\n                                                      src={img.url}\r\n                                                      className='rounded avatar_img'\r\n                                                      fluid\r\n                                                   />\r\n                                                </div>\r\n                                             </Col>\r\n                                          ))}\r\n                                    </Row>\r\n                                 </Col>\r\n                              </Row>\r\n                              {uploading && <SkeletonEffect />}\r\n                           </Form.Group>\r\n\r\n                           <Row>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='brand'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Thể loại\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='text'\r\n                                       placeholder='Enter brand'\r\n                                       value={brand}\r\n                                       onChange={(e) =>\r\n                                          setBrand(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Số lượng trong kho\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={countInStock}\r\n                                       onChange={(e) =>\r\n                                          setCountInStock(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Danh mục\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={categoryy}\r\n                                       onChange={(e) =>\r\n                                          setCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {category &&\r\n                                          category.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='price'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Giá\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter price'\r\n                                       value={price}\r\n                                       onChange={(e) =>\r\n                                          setPrice(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Row>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Danh mục con\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={subCategory}\r\n                                       onChange={(e) =>\r\n                                          setSubCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {Sub &&\r\n                                          Sub.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Khối lượng\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='text'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={mass}\r\n                                       onChange={(e) => setMass(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Nhà cung cấp\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={supplierr}\r\n                                       onChange={(e) =>\r\n                                          setSupplier(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {supplier &&\r\n                                          supplier.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Nội dung\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={description}\r\n                                 onChange={(e) =>\r\n                                    setDescription(e.target.value)\r\n                                 }\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn sử dụng\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdsd}\r\n                                 onChange={(e) => setHdsd(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn bảo quản\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdbq}\r\n                                 onChange={(e) => setHdbq(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Tạo\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </>\r\n                  )}\r\n               </Container>\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js",["623","624"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {\r\n  getSupplierDetails,\r\n  updateSupplier,\r\n} from '../../actions/supplierActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { SUPPLIER_UPDATE_RESET } from '../../constants/supplierConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\n\r\nconst SupplierEditScreen = ({ history, match }) => {\r\n  const supId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const supplierDetails = useSelector((state) => state.supplierDetails)\r\n  const { loading, error, supplier } = supplierDetails\r\n\r\n  const supplierUpdate = useSelector((state) => state.supplierUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = supplierUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateSupplier({ _id: supId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: SUPPLIER_UPDATE_RESET })\r\n      history.push('/admin/supplierlist')\r\n    } else {\r\n      if (!supplier.name || supplier._id !== supId) {\r\n        dispatch(getSupplierDetails(supId))\r\n      } else {\r\n        setName(supplier.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, supId, supplier, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : (\r\n            <Row className='justify-content-center'>\r\n              <Col md={6}>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h3 className='text-center mb-4'>\r\n                    Chỉnh sửa thông tin nhà cung cấp\r\n                  </h3>\r\n                  <Form.Group>\r\n                    <Container>\r\n                      <Form.Label\r\n                        as='p'\r\n                        className='mb-1'\r\n                        style={{ fontSize: '1rem' }}\r\n                      >\r\n                        Tên nhà cung cấp\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        style={{ fontSize: '1rem' }}\r\n                        className='border border-grey rounded-pill'\r\n                        type='name'\r\n                        size='sm'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                      ></Form.Control>\r\n                    </Container>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      size='sm'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn_color_created'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Cập nhật\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js",["625","626","627"],"import { Switch } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../../actions/userActions'\r\nimport FormContainer from '../../components/FormContainer'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { USER_UPDATE_RESET } from '../../constants/userConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n   const [state, setState] = useState(false)\r\n\r\n   const handleChange = () => {\r\n      setState(!state)\r\n   }\r\n\r\n   const userId = match.params.id\r\n\r\n   const [name, setName] = useState('')\r\n   const [email, setEmail] = useState('')\r\n   const [isAdmin, setIsAdmin] = useState(false)\r\n   const [password, setPassword] = useState('')\r\n   const [confirmPassword, setConfirmPassword] = useState('')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   const userUpdate = useSelector((state) => state.userUpdate)\r\n   const {\r\n      loading: loadingUpdate,\r\n      error: errorUpdate,\r\n      success: successUpdate,\r\n   } = userUpdate\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n\r\n      dispatch(updateUser({ _id: userId, name, email, isAdmin, password }))\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successUpdate) {\r\n         dispatch({ type: USER_UPDATE_RESET })\r\n      } else {\r\n         if (!user.name || user._id !== userId) {\r\n            dispatch(getUserDetails(userId))\r\n         } else {\r\n            setName(user.name)\r\n            setEmail(user.email)\r\n            setIsAdmin(user.isAdmin)\r\n         }\r\n      }\r\n   }, [dispatch, user, userId, successUpdate])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 mt-3'>\r\n               <div className='d-flex justify-content-center'>\r\n                  {loadingUpdate && <SkeletonEffect /> && (\r\n                     <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n                  )}\r\n                  {errorUpdate && <Message>{errorUpdate}</Message>}\r\n                  {loading ? (\r\n                     <SkeletonEffect />\r\n                  ) : (\r\n                     <Form\r\n                        onSubmit={submitHandler}\r\n                        className='bg-light p-3 card_color '\r\n                        style={{ width: '50rem' }}\r\n                     >\r\n                        <h2 className='mt-3 text-center'>\r\n                           Cập nhật người dùng\r\n                        </h2>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='name'>\r\n                                 <Form.Label>\r\n                                    <strong>Tên</strong>\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    type='name'\r\n                                    placeholder='Nhập tên'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                    className='rounded-pill border-1'\r\n                                 ></Form.Control>\r\n                              </Form.Group>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='email'>\r\n                                 <Form.Label>\r\n                                    <strong>Địa chỉ email</strong>\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    type='email'\r\n                                    placeholder='Enter email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                    className='rounded-pill border-1'\r\n                                 ></Form.Control>\r\n                              </Form.Group>\r\n                           </Col>\r\n                        </Row>\r\n\r\n                        <Form.Group\r\n                           controlId='idAdmin'\r\n                           className='d-flex justify-content-start'\r\n                        >\r\n                           <Form.Check\r\n                              type='checkbox'\r\n                              label='Người quản lí'\r\n                              size='lg'\r\n                              checked={isAdmin}\r\n                              onChange={(e) => setIsAdmin(e.target.checked)}\r\n                           ></Form.Check>\r\n                        </Form.Group>\r\n                        <div className='d-flex align-items-center'>\r\n                           <Switch\r\n                              value={state}\r\n                              onChange={handleChange}\r\n                              color='secondary'\r\n                              name='checkedB'\r\n                              inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                           />\r\n                           {state === true ? (\r\n                              <p className='mb-0' style={{ opacity: '1' }}>\r\n                                 <strong>Đổi mật khẩu</strong>\r\n                                 <Image\r\n                                    style={{ opacity: '1' }}\r\n                                    src='https://img.icons8.com/fluent/32/000000/unlock-2.png'\r\n                                 />\r\n                              </p>\r\n                           ) : (\r\n                              <p className='mb-0' style={{ opacity: '0.7' }}>\r\n                                 Đổi mật khẩu\r\n                                 <Image\r\n                                    style={{ opacity: '1' }}\r\n                                    src='https://img.icons8.com/fluent/32/000000/lock-2.png'\r\n                                 />\r\n                              </p>\r\n                           )}\r\n                        </div>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='password' fluid>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Mật khẩu mới</strong>\r\n                                 </Form.Label>\r\n                                 {state === true ? (\r\n                                    <>\r\n                                       <Form.Control\r\n                                          className='border-1 border-grey rounded-pill '\r\n                                          type='password'\r\n                                          placeholder='Nhập mật khẩu mới'\r\n                                          value={password}\r\n                                          onChange={(e) =>\r\n                                             setPassword(e.target.value)\r\n                                          }\r\n                                       ></Form.Control>\r\n                                    </>\r\n                                 ) : (\r\n                                    <Form.Control\r\n                                       className='border-1 border-grey rounded-pill '\r\n                                       type='password'\r\n                                       placeholder='Nhập mật khẩu mới'\r\n                                       value={password}\r\n                                       onChange={(e) =>\r\n                                          setPassword(e.target.value)\r\n                                       }\r\n                                       disabled\r\n                                       // style={{ visibility: 'hidden' }}\r\n                                    ></Form.Control>\r\n                                 )}\r\n                              </Form.Group>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='password'>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Nhập lại mật khẩu</strong>\r\n                                 </Form.Label>\r\n                                 {state === true ? (\r\n                                    <>\r\n                                       <Form.Control\r\n                                          className='border-1 border-grey rounded-pill'\r\n                                          type='password'\r\n                                          placeholder='Nhập lại mật khẩu'\r\n                                          value={confirmPassword}\r\n                                          onChange={(e) =>\r\n                                             setConfirmPassword(e.target.value)\r\n                                          }\r\n                                       ></Form.Control>\r\n                                    </>\r\n                                 ) : (\r\n                                    <Form.Control\r\n                                       className='border-1 border-grey rounded-pill'\r\n                                       type='password'\r\n                                       placeholder='Nhập lại mật khẩu'\r\n                                       value={confirmPassword}\r\n                                       onChange={(e) =>\r\n                                          setConfirmPassword(e.target.value)\r\n                                       }\r\n                                       disabled\r\n                                       // style={{ visibility: 'hidden' }}\r\n                                    ></Form.Control>\r\n                                 )}\r\n                              </Form.Group>\r\n                           </Col>\r\n                        </Row>\r\n                        <div className='pl-3 pr-3 text-center'>\r\n                           <Button\r\n                              type='submit'\r\n                              variant='outline-light'\r\n                              className='rounded-pill btn_color_created'\r\n                              style={{\r\n                                 fontSize: '1rem',\r\n                                 letterSpacing: '0.25rem',\r\n                                 width: '15rem',\r\n                              }}\r\n                           >\r\n                              Cập nhật\r\n                           </Button>\r\n                        </div>\r\n                     </Form>\r\n                  )}\r\n               </div>\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\cloudinary.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\ListNumber.js",["628","629","630","631","632"],"import { Button } from '@material-ui/core'\r\nimport React, { useEffect } from 'react'\r\nimport { Card, Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listOrders } from '../../../actions/orderActions'\r\nimport { listAllProduct, listProducts } from '../../../actions/productActions'\r\nimport { listSupplierAdm } from '../../../actions/supplierActions'\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst ListNumbers = ({ history }) => {\r\n   const dispatch = useDispatch()\r\n\r\n   const productListAll = useSelector((state) => state.productListAll)\r\n   const { products } = productListAll\r\n\r\n   const orderConsult = useSelector((state) => state.orderConsult)\r\n   const { order } = orderConsult\r\n\r\n   const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n   const { supplier } = supplierListAdm\r\n\r\n   const orderList = useSelector((state) => state.orderList)\r\n   const { ordersList } = orderList\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   let outOfStock = 0\r\n   let productOut = []\r\n   products.map((product) => {\r\n      if (product.countInStock == 0) {\r\n         productOut.push(product)\r\n         outOfStock += 1\r\n      }\r\n   })\r\n\r\n   useEffect(() => {\r\n      if (!userInfo.isAdmin) {\r\n         history.push('/login')\r\n      }\r\n\r\n      if (userInfo) {\r\n         dispatch(listOrders())\r\n         dispatch(listAllProduct())\r\n         dispatch(listSupplierAdm())\r\n      }\r\n   }, [dispatch, history, userInfo])\r\n\r\n   return (\r\n      <div>\r\n         <Row className='p-3 '>\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Tổng số đơn hàng</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className='mb-3  pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số đơn hàng đã được đặt\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>\r\n                           {ordersList && ordersList.orders?.length}\r\n                        </h1>\r\n                     </Card.Title>\r\n                     <Card.Subtitle className='mb-2 text-center'>\r\n                        <h5 className='text-secondary'>Đơn hàng</h5>\r\n                     </Card.Subtitle>\r\n                     <Card.Link\r\n                        href='/admin/orderlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>Chi tiết</strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Doanh thu</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className='mb-4 mt-4 pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số doanh thu từ các đơn hàng\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center mb-4'>\r\n                        <h2\r\n                           style={{ fontSize: '1.4rem' }}\r\n                           className='text-lowercase'\r\n                        >\r\n                           {ordersList?.totalAmount &&\r\n                              formatMoney(ordersList?.totalAmount, 'đ')}\r\n                        </h2>\r\n                     </Card.Title>\r\n\r\n                     <Card.Link\r\n                        href='/admin/orderlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>\r\n                              {' '}\r\n                              Chi tiết\r\n                           </strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Tổng số sản phẩm</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className=' pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số sản phẩm đang được bày bán\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>\r\n                           {products && products.length}\r\n                        </h1>\r\n                     </Card.Title>\r\n                     <Card.Subtitle className='mb-2 text-center'>\r\n                        <h5 className='text-secondary'>Sản phẩm</h5>\r\n                     </Card.Subtitle>\r\n                     <Card.Link\r\n                        href='/admin/productlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>Chi tiết</strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n                  text='light'\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Tổng số sản phẩm hết hàng</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className='mb-3 pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số sản phẩm hết hàng\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>{outOfStock}</h1>\r\n                     </Card.Title>\r\n                     <Card.Subtitle className='mb-1 text-center'>\r\n                        <h5 className='text-secondary'>Sản phẩm</h5>\r\n                     </Card.Subtitle>\r\n                     <Card.Link\r\n                        href='/admin/productlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>Chi tiết</strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </Row>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ListNumbers\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\notificationsAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\NotificationsDropDown.js",[],["633","634"],"F:\\Code\\shopPro\\frontend\\src\\screens\\UsersAddressListScreen.js",["635"],"F:\\Code\\shopPro\\frontend\\src\\actions\\subCategoryAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\subCategoryConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\subCategoryReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SubCategoryListScreen.js",["636","637","638","639"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n   createCategory,\r\n   deleteCategory,\r\n   listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\nimport {\r\n   create_subCategory,\r\n   deleteSubCategory,\r\n   listSubCategoryAdm,\r\n} from '../../actions/subCategoryAction'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n   {\r\n      id: 'create',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN TẠO',\r\n   },\r\n   {\r\n      id: 'update',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN CẬP NHẬT',\r\n   },\r\n\r\n   { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nconst SubCategoriesListScreen = ({ history }) => {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n   const [selectCategory, setSelectCategory] = useState('')\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = Sub.map((cat) => cat._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const [open, setOpen] = useState(false)\r\n   const [name, setName] = useState('')\r\n\r\n   const handleClickOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const subCategoryListAdm = useSelector((state) => state.subCategoryListAdm)\r\n   const { loading, error, Sub } = subCategoryListAdm\r\n\r\n   const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n   const { category } = categoriesListAdm\r\n\r\n   const subCategoryDelete = useSelector((state) => state.subCategoryDelete)\r\n   const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n   } = subCategoryDelete\r\n\r\n   const subCategoryCreate = useSelector((state) => state.subCategoryCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n   } = subCategoryCreate\r\n\r\n   const emptyRows =\r\n      Sub !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, Sub.length - page * rowsPerPage)\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('You are sure?')) {\r\n         dispatch(deleteSubCategory({ id }))\r\n         setSelected([])\r\n      }\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      const did = Sub.find((cat) => cat._id)\r\n\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               >\r\n                  <h2>DANH SÁCH DANH MỤC CON</h2>\r\n               </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (userInfo) {\r\n         dispatch(listSubCategoryAdm())\r\n         dispatch(listCategoriesAdm())\r\n      }\r\n   }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(create_subCategory({ name, selectCategory }))\r\n      setOpen(false)\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingDelete && (\r\n                     <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n                  ) && <SkeletonEffect />}\r\n               {errorDelete && <Message>{errorDelete}</Message>}\r\n               {loadingCreate && (\r\n                  <MessageSuccess\r\n                     variant={'Đã thêm ' + name + ' thành công'}\r\n                  ></MessageSuccess>\r\n               )}\r\n               {errorCreate && <Message>{errorCreate}</Message>}\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <>\r\n                     <div>\r\n                        <Dialog\r\n                           disableBackdropClick\r\n                           disableEscapeKeyDown\r\n                           open={open}\r\n                           onClose={handleClose}\r\n                           aria-labelledby='form-dialog-title'\r\n                           maxWidth='xl'\r\n                        >\r\n                           <div className='d-flex justify-content-end'>\r\n                              <Button\r\n                                 onClick={handleClose}\r\n                                 className='p-1 m-1 rounded-pill'\r\n                                 variant='light'\r\n                              >\r\n                                 <Close />\r\n                              </Button>\r\n                           </div>\r\n\r\n                           <DialogContent style={{ width: '30rem' }}>\r\n                              <h4 className='text-center'>Tạo danh mục</h4>\r\n                              <Form onSubmit={submitHandler}>\r\n                                 <Form.Group>\r\n                                    <Form.Label as='p' className='mb-1'>\r\n                                       Tên danh mục con\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='name'\r\n                                       size='normal'\r\n                                       placeholder='Enter name'\r\n                                       value={name}\r\n                                       onChange={(e) => setName(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                                 <Form.Group>\r\n                                    <Form.Label as='p' className='mb-1'>\r\n                                       Tên danh mục\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='text'\r\n                                       as='select'\r\n                                       size='normal'\r\n                                       placeholder='Enter name'\r\n                                       value={selectCategory}\r\n                                       onChange={(e) =>\r\n                                          setSelectCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option>Vui lòng chọn danh mục</option>\r\n\r\n                                       {category &&\r\n                                          category?.map((cat, index) => (\r\n                                             <option\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                                 <div className='pl-3 pr-3 text-center'>\r\n                                    <Button\r\n                                       type='submit'\r\n                                       size='sm'\r\n                                       variant='outline-light'\r\n                                       className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                                       style={{\r\n                                          fontSize: '1rem',\r\n                                          letterSpacing: '0.25rem',\r\n                                       }}\r\n                                    >\r\n                                       Tạo\r\n                                    </Button>\r\n                                 </div>\r\n                              </Form>\r\n                           </DialogContent>\r\n                        </Dialog>\r\n                     </div>\r\n                     <div className={classes.root}>\r\n                        <div className='d-flex justify-content-end'>\r\n                           <Button\r\n                              variant='outline-light'\r\n                              className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                              onClick={handleClickOpen}\r\n                              size='normal'\r\n                           >\r\n                              <i className='fas fa-plus'></i> Tạo danh mục con\r\n                           </Button>\r\n                        </div>\r\n                        <Paper\r\n                           className={classes.paper + 'shadow'}\r\n                           // style={{\r\n                           //   borderRadius: '1rem',\r\n                           //   border: '0.25px solid #ddd',\r\n                           // }}\r\n                        >\r\n                           <TableContainer\r\n                              className='text-center p-5'\r\n                              style={{\r\n                                 borderRadius: '1rem',\r\n                              }}\r\n                           >\r\n                              <EnhancedTableToolbar\r\n                                 numSelected={selected.length}\r\n                              />\r\n                              <Table\r\n                                 className={classes.table}\r\n                                 aria-labelledby='tableTitle'\r\n                                 size={dense ? 'small' : 'medium'}\r\n                                 aria-label='enhanced table'\r\n                              >\r\n                                 <EnhancedTableHead\r\n                                    classes={classes}\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={Sub.length}\r\n                                 />\r\n                                 <TableBody>\r\n                                    {stableSort(\r\n                                       Sub,\r\n                                       getComparator(order, orderBy)\r\n                                    )\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((cat, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             cat._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(event, cat._id)\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={cat._id}\r\n                                                selected={isItemSelected}\r\n                                             >\r\n                                                <TableCell padding='checkbox'>\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   component='th'\r\n                                                   id={labelId}\r\n                                                   scope='row'\r\n                                                   padding='none'\r\n                                                   align='center'\r\n                                                >\r\n                                                   {cat._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center'\r\n                                                >\r\n                                                   {cat.name}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         cat.createdAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         cat.updatedAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - MM/dd/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align='center'>\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/subcategory/${cat._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='outline-light'\r\n                                                         className='btn-sm rounded-pill btn_color_details'\r\n                                                      >\r\n                                                         CHI TIẾT\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                    {emptyRows > 0 && (\r\n                                       <TableRow\r\n                                          style={{\r\n                                             height:\r\n                                                (dense ? 33 : 53) * emptyRows,\r\n                                          }}\r\n                                       >\r\n                                          <TableCell colSpan={6} />\r\n                                       </TableRow>\r\n                                    )}\r\n                                 </TableBody>\r\n                              </Table>\r\n                           </TableContainer>\r\n                           <TablePagination\r\n                              rowsPerPageOptions={[5, 10, 25]}\r\n                              component='div'\r\n                              count={Sub.length}\r\n                              rowsPerPage={rowsPerPage}\r\n                              page={page}\r\n                              onChangePage={handleChangePage}\r\n                              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                           />\r\n                        </Paper>\r\n                        <FormControlLabel\r\n                           control={\r\n                              <Switch\r\n                                 checked={dense}\r\n                                 onChange={handleChangeDense}\r\n                              />\r\n                           }\r\n                           label='Dense padding'\r\n                        />\r\n                     </div>\r\n                  </>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default SubCategoriesListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SubCategoryEditScreen.js",["640","641","642","643","644"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport {\r\n   getCategoryDetails,\r\n   listCategoriesAdm,\r\n   updateCategory,\r\n} from '../../actions/categoryAction'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../../constants/categoriesConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\nimport {\r\n   getSubCategoryDetails,\r\n   updateSubCategory,\r\n} from '../../actions/subCategoryAction'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\n\r\nconst SubCategoryEditScreen = ({ match, history }) => {\r\n   const subId = match.params.id\r\n\r\n   const [name, setName] = useState('')\r\n   const [selectCategory, setSelectCategory] = useState('')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const subCategoryDetails = useSelector((state) => state.subCategoryDetails)\r\n   const { loading, error, subcat } = subCategoryDetails\r\n\r\n   const subCategoryUpdate = useSelector((state) => state.subCategoryUpdate)\r\n   const {\r\n      loading: loadingUpdate,\r\n      error: errorUpdate,\r\n      success: successUpdate,\r\n   } = subCategoryUpdate\r\n\r\n   const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n   const { category } = categoriesListAdm\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateSubCategory({ _id: subId, name, selectCategory }))\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successUpdate) {\r\n         dispatch({ type: CATEGORY_UPDATE_RESET })\r\n         history.push('/admin/subcategorieslist')\r\n      } else {\r\n         if (!subcat.name || subcat._id !== subId) {\r\n            dispatch(getSubCategoryDetails(subId))\r\n            dispatch(listCategoriesAdm())\r\n         } else {\r\n            setName(subcat.name)\r\n            setSelectCategory(subcat.category)\r\n         }\r\n      }\r\n   }, [dispatch, history, subId, subcat, successUpdate])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 mt-3'>\r\n               {loadingUpdate && (\r\n                  <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n               )}\r\n               {errorUpdate && <Message>{errorUpdate}</Message>}\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : (\r\n                  <Row className='justify-content-center'>\r\n                     <Col md={6}>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='p-4 bg-light shadow card_color'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>\r\n                              Chỉnh sửa danh mục con\r\n                           </h2>\r\n                           <Form.Group>\r\n                              <Container>\r\n                                 <Form.Label\r\n                                    as='p'\r\n                                    className='mb-1'\r\n                                    style={{ fontSize: '1rem' }}\r\n                                 >\r\n                                    Tên danh mục con\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    className='border border-grey rounded-pill'\r\n                                    type='name'\r\n                                    size='normal'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                 ></Form.Control>\r\n                                 <Form.Group>\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1'\r\n                                       style={{ fontSize: '1rem' }}\r\n                                    >\r\n                                       Tên danh mục\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='text'\r\n                                       as='select'\r\n                                       size='normal'\r\n                                       placeholder='Enter name'\r\n                                       value={selectCategory}\r\n                                       onChange={(e) =>\r\n                                          setSelectCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option>Vui lòng chọn danh mục</option>\r\n\r\n                                       {category &&\r\n                                          category?.map((cat, index) => (\r\n                                             <option\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Container>\r\n                           </Form.Group>\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Cập nhật\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </Col>\r\n                  </Row>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default SubCategoryEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\saleReducer.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\saleConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SaleListScreen.js",["645","646","647"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { createSale, deleteSale, listSale } from '../../actions/saleAction'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport '../../notisfied.css'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: true, disablePadding: false, label: 'GIÁ TRỊ' },\r\n   {\r\n      id: 'create',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN TẠO',\r\n   },\r\n   {\r\n      id: 'update',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN CẬP NHẬT',\r\n   },\r\n\r\n   { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nconst SaleListScreen = ({ history }) => {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = sale.map((cat) => cat._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const [open, setOpen] = useState(false)\r\n   const [name, setName] = useState('')\r\n\r\n   const handleClickOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   // const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n   // const { loading, error, category } = categoriesListAdm\r\n\r\n   const saleList = useSelector((state) => state.saleList)\r\n   const { loading, error, sale } = saleList\r\n\r\n   const saleDelete = useSelector((state) => state.saleDelete)\r\n   const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n   } = saleDelete\r\n\r\n   const saleCreate = useSelector((state) => state.saleCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n      sale: createdProduct,\r\n   } = saleCreate\r\n\r\n   const emptyRows =\r\n      sale !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, sale.length - page * rowsPerPage)\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('You are sure?')) {\r\n         dispatch(deleteSale(id))\r\n         setSelected([])\r\n      }\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      const did = sale.find((cat) => cat._id)\r\n\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               >\r\n                  <h2>DANH SÁCH MỤC GIẢM GIÁ</h2>\r\n               </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (userInfo) {\r\n         dispatch(listSale())\r\n      }\r\n   }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(createSale(name))\r\n      setOpen(false)\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingDelete && (\r\n                     <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n                  ) && <SkeletonEffect />}\r\n               {errorDelete && <Message>{errorDelete}</Message>}\r\n               {loadingCreate && (\r\n                  <MessageSuccess\r\n                     variant={'Đã thêm ' + name + ' thành công'}\r\n                  ></MessageSuccess>\r\n               )}\r\n               {errorCreate && <Message>{errorCreate}</Message>}\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <>\r\n                     <div>\r\n                        <Dialog\r\n                           disableBackdropClick\r\n                           disableEscapeKeyDown\r\n                           open={open}\r\n                           onClose={handleClose}\r\n                           aria-labelledby='form-dialog-title'\r\n                           maxWidth='xl'\r\n                        >\r\n                           <div className='d-flex justify-content-end'>\r\n                              <Button\r\n                                 onClick={handleClose}\r\n                                 className='p-1 m-1 rounded-pill'\r\n                                 variant='light'\r\n                              >\r\n                                 <Close />\r\n                              </Button>\r\n                           </div>\r\n\r\n                           <DialogContent style={{ width: '30rem' }}>\r\n                              <h4 className='text-center'>Tạo mục giảm giá</h4>\r\n                              <Form onSubmit={submitHandler}>\r\n                                 <Form.Group>\r\n                                    <Form.Label as='p' className='mb-1'>\r\n                                       Giá trị\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='name'\r\n                                       size='normal'\r\n                                       placeholder='Enter name'\r\n                                       value={name}\r\n                                       onChange={(e) => setName(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                                 <div className='pl-3 pr-3 text-center'>\r\n                                    <Button\r\n                                       type='submit'\r\n                                       size='sm'\r\n                                       variant='outline-light'\r\n                                       className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                                       style={{\r\n                                          fontSize: '1rem',\r\n                                          letterSpacing: '0.25rem',\r\n                                       }}\r\n                                    >\r\n                                       Tạo\r\n                                    </Button>\r\n                                 </div>\r\n                              </Form>\r\n                           </DialogContent>\r\n                        </Dialog>\r\n                     </div>\r\n                     <div className={classes.root}>\r\n                        <div className='d-flex justify-content-end'>\r\n                           <Button\r\n                              variant='outline-light'\r\n                              className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                              onClick={handleClickOpen}\r\n                              size='normal'\r\n                           >\r\n                              <i className='fas fa-plus'></i> Tạo mục giảm giá\r\n                           </Button>\r\n                        </div>\r\n                        <Paper\r\n                           className={classes.paper + 'shadow'}\r\n                           // style={{\r\n                           //   borderRadius: '1rem',\r\n                           //   border: '0.25px solid #ddd',\r\n                           // }}\r\n                        >\r\n                           <TableContainer\r\n                              className='text-center p-5'\r\n                              style={{\r\n                                 borderRadius: '1rem',\r\n                              }}\r\n                           >\r\n                              <EnhancedTableToolbar\r\n                                 numSelected={selected.length}\r\n                              />\r\n                              <Table\r\n                                 className={classes.table}\r\n                                 aria-labelledby='tableTitle'\r\n                                 size={dense ? 'small' : 'medium'}\r\n                                 aria-label='enhanced table'\r\n                              >\r\n                                 <EnhancedTableHead\r\n                                    classes={classes}\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={sale.length}\r\n                                 />\r\n                                 <TableBody>\r\n                                    {stableSort(\r\n                                       sale,\r\n                                       getComparator(order, orderBy)\r\n                                    )\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((cat, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             cat._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(event, cat._id)\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={cat._id}\r\n                                                selected={isItemSelected}\r\n                                             >\r\n                                                <TableCell padding='checkbox'>\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   component='th'\r\n                                                   id={labelId}\r\n                                                   scope='row'\r\n                                                   padding='none'\r\n                                                   align='center'\r\n                                                >\r\n                                                   {cat._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center'\r\n                                                >\r\n                                                   {cat.name}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         cat.createdAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         cat.updatedAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - MM/dd/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align='center'>\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/sale/${cat._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='outline-light'\r\n                                                         className='btn-sm rounded-pill btn_color_details'\r\n                                                      >\r\n                                                         CHI TIẾT\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                    {emptyRows > 0 && (\r\n                                       <TableRow\r\n                                          style={{\r\n                                             height:\r\n                                                (dense ? 33 : 53) * emptyRows,\r\n                                          }}\r\n                                       >\r\n                                          <TableCell colSpan={6} />\r\n                                       </TableRow>\r\n                                    )}\r\n                                 </TableBody>\r\n                              </Table>\r\n                           </TableContainer>\r\n                           <TablePagination\r\n                              rowsPerPageOptions={[10, 15, 25]}\r\n                              component='div'\r\n                              count={sale.length}\r\n                              rowsPerPage={rowsPerPage}\r\n                              page={page}\r\n                              onChangePage={handleChangePage}\r\n                              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                           />\r\n                        </Paper>\r\n                        <FormControlLabel\r\n                           control={\r\n                              <Switch\r\n                                 checked={dense}\r\n                                 onChange={handleChangeDense}\r\n                              />\r\n                           }\r\n                           label='Dense padding'\r\n                        />\r\n                     </div>\r\n                  </>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default SaleListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\saleAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SaleEditScreen.js",["648","649","650","651","652"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport {\r\n   getCategoryDetails,\r\n   updateCategory,\r\n} from '../../actions/categoryAction'\r\nimport Message from '../../components/Message'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../../constants/categoriesConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\nimport { getSaleDetails, updateSale } from '../../actions/saleAction'\r\n\r\nconst SaleEditScreen = ({ match, history }) => {\r\n   const catId = match.params.id\r\n\r\n   const [name, setName] = useState('')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const saleDetails = useSelector((state) => state.saleDetails)\r\n   const { loading, error, sale } = saleDetails\r\n\r\n   const saleUpdate = useSelector((state) => state.saleUpdate)\r\n   const {\r\n      loading: loadingUpdate,\r\n      error: errorUpdate,\r\n      success: successUpdate,\r\n   } = saleUpdate\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateSale({ _id: catId, name }))\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successUpdate) {\r\n         dispatch({ type: CATEGORY_UPDATE_RESET })\r\n         history.push('/admin/salelist')\r\n      } else {\r\n         if (!sale.name || sale._id !== catId) {\r\n            dispatch(getSaleDetails(catId))\r\n         } else {\r\n            setName(sale.name)\r\n         }\r\n      }\r\n   }, [dispatch, history, catId, sale, successUpdate])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 mt-3'>\r\n               {loadingUpdate && (\r\n                  <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n               )}\r\n               {errorUpdate && <Message>{errorUpdate}</Message>}\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : (\r\n                  <Row className='justify-content-center'>\r\n                     <Col md={6}>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='p-4 bg-light shadow card_color'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>\r\n                              Chỉnh sửa mục giảm giá\r\n                           </h2>\r\n                           <Form.Group>\r\n                              <Container>\r\n                                 <Form.Label\r\n                                    as='p'\r\n                                    className='mb-1'\r\n                                    style={{ fontSize: '1.5rem' }}\r\n                                 >\r\n                                    Giá trị\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    style={{ fontSize: '1.2rem' }}\r\n                                    className='border border-grey rounded-pill'\r\n                                    type='name'\r\n                                    size='normal'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                 ></Form.Control>\r\n                              </Container>\r\n                           </Form.Group>\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Cập nhật\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </Col>\r\n                  </Row>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default SaleEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\codeReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\codeConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CodeListScreen.js",["653","654","655"],"import DateFnsUtils from '@date-io/date-fns'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport {\r\n   KeyboardDatePicker,\r\n   MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { createCode, deleteCode, listCode } from '../../actions/codeAction'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport '../../notisfied.css'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: true, disablePadding: false, label: 'MÃ' },\r\n   {\r\n      id: 'discount',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'SỐ TIỀN GIẢM',\r\n   },\r\n   { id: 'date', numeric: true, disablePadding: false, label: 'NGÀY HẾT HẠN' },\r\n   {\r\n      id: 'create',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN TẠO',\r\n   },\r\n   {\r\n      id: 'update',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN CẬP NHẬT',\r\n   },\r\n\r\n   { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nconst CodeListScreen = ({ history }) => {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n\r\n   const [selectedDate, setSelectedDate] = useState(\r\n      new Date('2021-03-22T21:11:54')\r\n   )\r\n\r\n   const handleDateChange = (date) => {\r\n      setSelectedDate(date)\r\n   }\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = code.map((cat) => cat._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const [open, setOpen] = useState(false)\r\n   const [name, setName] = useState('')\r\n   const [discount, setDiscount] = useState('')\r\n\r\n   const handleClickOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   // const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n   // const { loading, error, category } = categoriesListAdm\r\n\r\n   const codeList = useSelector((state) => state.codeList)\r\n   const { loading, error, code } = codeList\r\n\r\n   const codeDelete = useSelector((state) => state.codeDelete)\r\n   const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n   } = codeDelete\r\n\r\n   const codeCreate = useSelector((state) => state.codeCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n      code: createdCode,\r\n   } = codeCreate\r\n\r\n   const emptyRows =\r\n      code !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, code.length - page * rowsPerPage)\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('You are sure?')) {\r\n         dispatch(deleteCode(id))\r\n         setSelected([])\r\n      }\r\n   }\r\n\r\n   function formatMoney(n, currency) {\r\n      return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      const did = code.find((cat) => cat._id)\r\n\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               >\r\n                  <h2>DANH SÁCH MÃ GIẢM GIÁ</h2>\r\n               </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (userInfo) {\r\n         dispatch(listCode())\r\n      }\r\n   }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(\r\n         createCode({ name: name, discount: discount, date: selectedDate })\r\n      )\r\n      setOpen(false)\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingDelete && (\r\n                     <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n                  ) && <SkeletonEffect />}\r\n               {errorDelete && <Message>{errorDelete}</Message>}\r\n               {loadingCreate && (\r\n                  <MessageSuccess\r\n                     variant={'Đã thêm ' + name + ' thành công'}\r\n                  ></MessageSuccess>\r\n               )}\r\n               {errorCreate && <Message>{errorCreate}</Message>}\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <>\r\n                     <div>\r\n                        <Dialog\r\n                           disableBackdropClick\r\n                           disableEscapeKeyDown\r\n                           open={open}\r\n                           onClose={handleClose}\r\n                           aria-labelledby='form-dialog-title'\r\n                           maxWidth='xl'\r\n                        >\r\n                           <div className='d-flex justify-content-end'>\r\n                              <Button\r\n                                 onClick={handleClose}\r\n                                 className='p-1 m-1 rounded-pill'\r\n                                 variant='light'\r\n                              >\r\n                                 <Close />\r\n                              </Button>\r\n                           </div>\r\n\r\n                           <DialogContent style={{ width: '30rem' }}>\r\n                              <h4 className='text-center'>Tạo mã giảm giá</h4>\r\n                              <Form onSubmit={submitHandler}>\r\n                                 <Form.Group>\r\n                                    <Form.Label as='p' className='mb-1'>\r\n                                       Tên mã giảm giá\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='name'\r\n                                       size='normal'\r\n                                       placeholder='Tên mã giảm giá'\r\n                                       value={name}\r\n                                       onChange={(e) => setName(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                                 <Form.Group>\r\n                                    <Form.Label as='p' className='mb-1'>\r\n                                       Số tiền giảm giá\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='number'\r\n                                       size='normal'\r\n                                       placeholder='Số tiền giảm giá'\r\n                                       value={discount}\r\n                                       onChange={(e) =>\r\n                                          setDiscount(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                                 <Form.Group>\r\n                                    <Form.Label as='p' className='mb-1'>\r\n                                       Ngày hết hạn\r\n                                    </Form.Label>\r\n                                    <MuiPickersUtilsProvider\r\n                                       utils={DateFnsUtils}\r\n                                    >\r\n                                       <Grid container justify='space-between'>\r\n                                          <KeyboardDatePicker\r\n                                             className='m-0'\r\n                                             margin='normal'\r\n                                             id='date-picker-dialog'\r\n                                             format='MM/dd/yyyy'\r\n                                             value={selectedDate}\r\n                                             onChange={handleDateChange}\r\n                                             KeyboardButtonProps={{\r\n                                                'aria-label': 'change date',\r\n                                             }}\r\n                                          />\r\n                                       </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                 </Form.Group>\r\n                                 <div className='pl-3 pr-3 text-center'>\r\n                                    <Button\r\n                                       type='submit'\r\n                                       size='sm'\r\n                                       variant='outline-light'\r\n                                       className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                                       style={{\r\n                                          fontSize: '1rem',\r\n                                          letterSpacing: '0.25rem',\r\n                                       }}\r\n                                    >\r\n                                       Tạo\r\n                                    </Button>\r\n                                 </div>\r\n                              </Form>\r\n                           </DialogContent>\r\n                        </Dialog>\r\n                     </div>\r\n                     <div className={classes.root}>\r\n                        <div className='d-flex justify-content-end'>\r\n                           <Button\r\n                              variant='outline-light'\r\n                              className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                              onClick={handleClickOpen}\r\n                              size='normal'\r\n                           >\r\n                              <i className='fas fa-plus'></i> Tạo mã giảm giá\r\n                           </Button>\r\n                        </div>\r\n                        <Paper\r\n                           className={classes.paper + 'shadow'}\r\n                           // style={{\r\n                           //   borderRadius: '1rem',\r\n                           //   border: '0.25px solid #ddd',\r\n                           // }}\r\n                        >\r\n                           <TableContainer\r\n                              className='text-center p-5'\r\n                              style={{\r\n                                 borderRadius: '1rem',\r\n                              }}\r\n                           >\r\n                              <EnhancedTableToolbar\r\n                                 numSelected={selected.length}\r\n                              />\r\n                              <Table\r\n                                 className={classes.table}\r\n                                 aria-labelledby='tableTitle'\r\n                                 size={dense ? 'small' : 'medium'}\r\n                                 aria-label='enhanced table'\r\n                              >\r\n                                 <EnhancedTableHead\r\n                                    classes={classes}\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={code.length}\r\n                                 />\r\n                                 <TableBody>\r\n                                    {stableSort(\r\n                                       code,\r\n                                       getComparator(order, orderBy)\r\n                                    )\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((cat, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             cat._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(event, cat._id)\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={cat._id}\r\n                                                selected={isItemSelected}\r\n                                             >\r\n                                                <TableCell padding='checkbox'>\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   component='th'\r\n                                                   id={labelId}\r\n                                                   scope='row'\r\n                                                   padding='none'\r\n                                                   align='center'\r\n                                                >\r\n                                                   {cat._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center'\r\n                                                >\r\n                                                   {cat.name}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center text-lowecase'\r\n                                                >\r\n                                                   {formatMoney(\r\n                                                      cat.discount,\r\n                                                      'đ'\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         cat.date,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         cat.createdAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         cat.updatedAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - MM/dd/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align='center'>\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/code/${cat._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='outline-light'\r\n                                                         className='btn-sm rounded-pill btn_color_details'\r\n                                                      >\r\n                                                         <i\r\n                                                            class='fas fa-qrcode'\r\n                                                            style={{\r\n                                                               fontSize:\r\n                                                                  '1.2rem',\r\n                                                            }}\r\n                                                         ></i>\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                    {emptyRows > 0 && (\r\n                                       <TableRow\r\n                                          style={{\r\n                                             height:\r\n                                                (dense ? 33 : 53) * emptyRows,\r\n                                          }}\r\n                                       >\r\n                                          <TableCell colSpan={6} />\r\n                                       </TableRow>\r\n                                    )}\r\n                                 </TableBody>\r\n                              </Table>\r\n                           </TableContainer>\r\n                           <TablePagination\r\n                              rowsPerPageOptions={[10, 15, 25]}\r\n                              component='div'\r\n                              count={code.length}\r\n                              rowsPerPage={rowsPerPage}\r\n                              page={page}\r\n                              onChangePage={handleChangePage}\r\n                              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                           />\r\n                        </Paper>\r\n                        <FormControlLabel\r\n                           control={\r\n                              <Switch\r\n                                 checked={dense}\r\n                                 onChange={handleChangeDense}\r\n                              />\r\n                           }\r\n                           label='Dense padding'\r\n                        />\r\n                     </div>\r\n                  </>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default CodeListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\codeAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CodeEditScreen.js",["656","657"],"import DateFnsUtils from '@date-io/date-fns'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {\r\n   KeyboardDatePicker,\r\n   MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCodeDetails } from '../../actions/codeAction'\r\nimport { updateSale } from '../../actions/saleAction'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport Loader from '../../components/Loader'\r\nimport { CODE_UPDATE_RESET } from '../../constants/codeConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\n\r\nconst CodeEditScreen = ({ match, history }) => {\r\n   const catId = match.params.id\r\n\r\n   const [name, setName] = useState('')\r\n   const [discount, setDiscount] = useState('')\r\n   const [selectedDate, setSelectedDate] = useState(\r\n      new Date('2021-03-22T21:11:54')\r\n   )\r\n\r\n   const handleDateChange = (date) => {\r\n      setSelectedDate(date)\r\n   }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const codeDetails = useSelector((state) => state.codeDetails)\r\n   const { loading, error, code } = codeDetails\r\n\r\n   const codeUpdate = useSelector((state) => state.codeUpdate)\r\n   const {\r\n      loading: loadingUpdate,\r\n      error: errorUpdate,\r\n      success: successUpdate,\r\n   } = codeUpdate\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(\r\n         updateSale({\r\n            _id: catId,\r\n            name: name,\r\n            discount: discount,\r\n            date: selectedDate,\r\n         })\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successUpdate) {\r\n         dispatch({ type: CODE_UPDATE_RESET })\r\n         history.push('/admin/salelist')\r\n      } else {\r\n         if (!code.name || code._id !== catId) {\r\n            dispatch(getCodeDetails(catId))\r\n         } else {\r\n            setName(code.name)\r\n            setDiscount(code.discount)\r\n            setSelectedDate(code.date)\r\n         }\r\n      }\r\n   }, [dispatch, history, catId, code, successUpdate])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 mt-3'>\r\n               {loadingUpdate && (\r\n                  <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n               )}\r\n               {errorUpdate && <Message>{errorUpdate}</Message>}\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : (\r\n                  <Row className='justify-content-center'>\r\n                     <Col md={6}>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='p-4 bg-light shadow card_color'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>\r\n                              Chỉnh sửa mã giảm giá\r\n                           </h2>\r\n                           <Form.Group>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Mã giảm giá\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='name'\r\n                                 size='normal'\r\n                                 placeholder='Mã giảm giá'\r\n                                 value={name}\r\n                                 onChange={(e) => setName(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n                           <Form.Group>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Số tiền giảm giá\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='number'\r\n                                 size='normal'\r\n                                 placeholder='Số tiền giảm giá'\r\n                                 value={discount}\r\n                                 onChange={(e) => setDiscount(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n                           <Form.Group>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Ngày hết hạn\r\n                              </Form.Label>\r\n                              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                 <Grid container justify='space-between'>\r\n                                    <KeyboardDatePicker\r\n                                       className='m-0'\r\n                                       margin='normal'\r\n                                       id='date-picker-dialog'\r\n                                       format='MM/dd/yyyy'\r\n                                       value={selectedDate}\r\n                                       onChange={handleDateChange}\r\n                                       KeyboardButtonProps={{\r\n                                          'aria-label': 'change date',\r\n                                       }}\r\n                                    />\r\n                                 </Grid>\r\n                              </MuiPickersUtilsProvider>\r\n                           </Form.Group>\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Cập nhật\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </Col>\r\n                  </Row>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default CodeEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\SearchScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ChatScreen.js",["658","659"],"import { FormControl, IconButton, Input } from '@material-ui/core'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport FlipMove from 'react-flip-move'\r\nimport { useSelector } from 'react-redux'\r\nimport MessageChat from '../components/MessageChat'\r\nimport db from '../firebase'\r\n\r\nconst ChatScreen = () => {\r\n   const [input, setInput] = useState('')\r\n   const [messages, setMessages] = useState([])\r\n   const [username, setUsername] = useState('')\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const user = userInfo && userInfo.email\r\n\r\n   function buildDockey(user) {\r\n      return ['admin@example.com', user].sort().join(':')\r\n   }\r\n\r\n   console.log('userInfo', messages)\r\n   const docKey = buildDockey(user)\r\n\r\n   useEffect(() => {\r\n      db.collection('chats')\r\n         .doc(docKey)\r\n         .onSnapshot((snapshot) => {\r\n            setMessages(snapshot.data()?.messages)\r\n         })\r\n   }, [])\r\n\r\n   useEffect(() => {\r\n      setUsername(user)\r\n   }, [])\r\n\r\n   const sendMessage = (e) => {\r\n      e.preventDefault()\r\n\r\n      db.collection('chats')\r\n         .doc(docKey)\r\n         .update({\r\n            messages: firebase.firestore.FieldValue.arrayUnion({\r\n               message: input,\r\n               sender: user,\r\n               timestamp: Date.now(),\r\n            }),\r\n            is_read: false,\r\n            users: ['admin@example.com', user],\r\n         })\r\n\r\n      // db.collection('chats')\r\n      //    .doc(docKey)\r\n      //    .set({\r\n      //       messages: firebase.firestore.FieldValue.arrayUnion({\r\n      //          message: input,\r\n      //          sender: user,\r\n      //          timestamp: Date.now(),\r\n      //       }),\r\n      //       is_read: false,\r\n      //       users: ['admin@example.com', user],\r\n      //    })\r\n      setInput('')\r\n   }\r\n\r\n   return (\r\n      <div className='text-center'>\r\n         <h1>Chat</h1>\r\n         <h2>Welcome {username}</h2>\r\n         <form className='app__form'>\r\n            <FormControl className='app__formControl'>\r\n               <Input\r\n                  className='app__input'\r\n                  placeholder='Bạn có điều muốn nói '\r\n                  value={input}\r\n                  onChange={(e) => setInput(e.target.value)}\r\n               />\r\n               <IconButton\r\n                  className='app__iconButton'\r\n                  disabled={!input}\r\n                  variant='contained'\r\n                  color='primary'\r\n                  type='submit'\r\n                  onClick={sendMessage}\r\n               >\r\n                  <SendIcon />\r\n               </IconButton>\r\n            </FormControl>\r\n         </form>\r\n\r\n         <FlipMove>\r\n            {messages?.map(({ id, message, sender }) => (\r\n               <MessageChat\r\n                  key={id}\r\n                  username={user}\r\n                  message={message}\r\n                  sender={sender}\r\n               />\r\n            ))}\r\n         </FlipMove>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ChatScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\MessageChat.js",[],"F:\\Code\\shopPro\\frontend\\src\\firebase.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminChatScreen.js",["660","661","662","663","664"],"import { FormControl, IconButton, Input } from '@material-ui/core'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport FlipMove from 'react-flip-move'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listUsers } from '../../actions/userActions'\r\nimport db from '../../firebase'\r\nimport MessageChat from './components/AdminMessageChat'\r\n\r\nconst AdminChatScreen = () => {\r\n   const [input, setInput] = useState('')\r\n   const [messages, setMessages] = useState([])\r\n   const [username, setUsername] = useState('')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userList = useSelector((state) => state.userList)\r\n   const { loading, error, users } = userList\r\n\r\n   const user = userInfo && userInfo.email\r\n\r\n   function buildDockey(user) {\r\n      return ['admin@example.com', 'DTK@example.com'].sort().join(':')\r\n   }\r\n\r\n   const docKey = buildDockey(user)\r\n\r\n   useEffect(() => {\r\n      db.collection('chats')\r\n         .doc(docKey)\r\n         .onSnapshot((snapshot) => {\r\n            setMessages(snapshot.data()?.messages)\r\n         })\r\n   }, [])\r\n\r\n   useEffect(() => {\r\n      dispatch(listUsers())\r\n      setUsername(user)\r\n   }, [])\r\n\r\n   const sendMessage = (e) => {\r\n      e.preventDefault()\r\n\r\n      db.collection('chats')\r\n         .doc(docKey)\r\n         .update({\r\n            messages: firebase.firestore.FieldValue.arrayUnion({\r\n               message: input,\r\n               sender: user,\r\n               timestamp: Date.now(),\r\n            }),\r\n            is_read: false,\r\n            users: ['admin@example.com', 'DTK@example.com'],\r\n         })\r\n\r\n      // db.collection('chats')\r\n      //    .doc(docKey)\r\n      //    .set({\r\n      //       messages: firebase.firestore.FieldValue.arrayUnion({\r\n      //          message: input,\r\n      //          sender: user,\r\n      //          timestamp: Date.now(),\r\n      //       }),\r\n      //       is_read: false,\r\n      //       users: ['admin@example.com', user],\r\n      //    })\r\n      setInput('')\r\n   }\r\n\r\n   return (\r\n      <div className='text-center'>\r\n         <h1>Chat</h1>\r\n         <h2>Welcome {username}</h2>\r\n         <form className='app__form'>\r\n            <FormControl className='app__formControl'>\r\n               <Input\r\n                  className='app__input'\r\n                  placeholder='Bạn có điều muốn nói '\r\n                  value={input}\r\n                  onChange={(e) => setInput(e.target.value)}\r\n               />\r\n               <IconButton\r\n                  className='app__iconButton'\r\n                  disabled={!input}\r\n                  variant='contained'\r\n                  color='primary'\r\n                  type='submit'\r\n                  onClick={sendMessage}\r\n               >\r\n                  <SendIcon />\r\n               </IconButton>\r\n            </FormControl>\r\n         </form>\r\n\r\n         <FlipMove>\r\n            {messages?.map(({ id, message, sender }) => (\r\n               <MessageChat\r\n                  key={id}\r\n                  username={user}\r\n                  message={message}\r\n                  sender={sender}\r\n               />\r\n            ))}\r\n         </FlipMove>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default AdminChatScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\AdminMessageChat.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\KonChat.js",["665"],"import React, { Component } from 'react'\r\n\r\nclass KonmunicateChat extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n   }\r\n\r\n   componentDidMount() {\r\n      ;(function (d, m) {\r\n         var kommunicateSettings = {\r\n            appId: '3fad0724690f6b81d0f04de73722bb4b3',\r\n            popupWidget: true,\r\n            automaticChatOpenOnNavigation: true,\r\n         }\r\n         var s = document.createElement('script')\r\n         s.type = 'text/javascript'\r\n         s.async = true\r\n         s.src = 'https://widget.kommunicate.io/v2/kommunicate.app'\r\n         var h = document.getElementsByTagName('head')[0]\r\n         h.appendChild(s)\r\n         window.kommunicate = m\r\n         m._globals = kommunicateSettings\r\n      })(document, window.kommunicate || {})\r\n   }\r\n\r\n   render() {\r\n      return <div></div>\r\n   }\r\n}\r\n\r\nexport default KonmunicateChat\r\n",{"ruleId":"666","replacedBy":"667"},{"ruleId":"668","replacedBy":"669"},{"ruleId":"670","severity":1,"message":"671","line":58,"column":12,"nodeType":"672","messageId":"673","endLine":58,"endColumn":16},{"ruleId":"670","severity":1,"message":"674","line":22,"column":41,"nodeType":"672","messageId":"673","endLine":22,"endColumn":52},{"ruleId":"670","severity":1,"message":"675","line":32,"column":7,"nodeType":"672","messageId":"673","endLine":32,"endColumn":17},{"ruleId":"670","severity":1,"message":"676","line":52,"column":7,"nodeType":"672","messageId":"673","endLine":52,"endColumn":21},{"ruleId":"670","severity":1,"message":"677","line":107,"column":10,"nodeType":"672","messageId":"673","endLine":107,"endColumn":20},{"ruleId":"670","severity":1,"message":"678","line":109,"column":11,"nodeType":"672","messageId":"673","endLine":109,"endColumn":19},{"ruleId":"670","severity":1,"message":"679","line":112,"column":10,"nodeType":"672","messageId":"673","endLine":112,"endColumn":21},{"ruleId":"670","severity":1,"message":"680","line":116,"column":10,"nodeType":"672","messageId":"673","endLine":116,"endColumn":14},{"ruleId":"681","severity":1,"message":"682","line":119,"column":13,"nodeType":"683","endLine":119,"endColumn":46},{"ruleId":"681","severity":1,"message":"682","line":122,"column":13,"nodeType":"683","endLine":122,"endColumn":44},{"ruleId":"684","severity":1,"message":"685","line":183,"column":7,"nodeType":"686","endLine":183,"endColumn":29,"suggestions":"687"},{"ruleId":"670","severity":1,"message":"688","line":3,"column":15,"nodeType":"672","messageId":"673","endLine":3,"endColumn":24},{"ruleId":"670","severity":1,"message":"689","line":4,"column":10,"nodeType":"672","messageId":"673","endLine":4,"endColumn":23},{"ruleId":"670","severity":1,"message":"690","line":5,"column":22,"nodeType":"672","messageId":"673","endLine":5,"endColumn":32},{"ruleId":"670","severity":1,"message":"691","line":41,"column":7,"nodeType":"672","messageId":"673","endLine":41,"endColumn":18},{"ruleId":"670","severity":1,"message":"692","line":65,"column":7,"nodeType":"672","messageId":"673","endLine":65,"endColumn":20},{"ruleId":"670","severity":1,"message":"693","line":75,"column":10,"nodeType":"672","messageId":"673","endLine":75,"endColumn":25},{"ruleId":"670","severity":1,"message":"671","line":109,"column":12,"nodeType":"672","messageId":"673","endLine":109,"endColumn":16},{"ruleId":"670","severity":1,"message":"671","line":90,"column":12,"nodeType":"672","messageId":"673","endLine":90,"endColumn":16},{"ruleId":"670","severity":1,"message":"694","line":99,"column":12,"nodeType":"672","messageId":"673","endLine":99,"endColumn":16},{"ruleId":"670","severity":1,"message":"695","line":112,"column":8,"nodeType":"672","messageId":"673","endLine":112,"endColumn":16},{"ruleId":"670","severity":1,"message":"696","line":125,"column":13,"nodeType":"672","messageId":"673","endLine":125,"endColumn":21},{"ruleId":"670","severity":1,"message":"697","line":12,"column":17,"nodeType":"672","messageId":"673","endLine":12,"endColumn":27},{"ruleId":"670","severity":1,"message":"698","line":13,"column":15,"nodeType":"672","messageId":"673","endLine":13,"endColumn":23},{"ruleId":"670","severity":1,"message":"699","line":1,"column":10,"nodeType":"672","messageId":"673","endLine":1,"endColumn":14},{"ruleId":"670","severity":1,"message":"700","line":52,"column":12,"nodeType":"672","messageId":"673","endLine":52,"endColumn":19},{"ruleId":"670","severity":1,"message":"701","line":52,"column":21,"nodeType":"672","messageId":"673","endLine":52,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":52,"column":28,"nodeType":"672","messageId":"673","endLine":52,"endColumn":32},{"ruleId":"670","severity":1,"message":"702","line":60,"column":11,"nodeType":"672","messageId":"673","endLine":60,"endColumn":16},{"ruleId":"670","severity":1,"message":"703","line":60,"column":18,"nodeType":"672","messageId":"673","endLine":60,"endColumn":26},{"ruleId":"670","severity":1,"message":"704","line":13,"column":7,"nodeType":"672","messageId":"673","endLine":13,"endColumn":18},{"ruleId":"670","severity":1,"message":"705","line":20,"column":11,"nodeType":"672","messageId":"673","endLine":20,"endColumn":15},{"ruleId":"670","severity":1,"message":"706","line":21,"column":11,"nodeType":"672","messageId":"673","endLine":21,"endColumn":15},{"ruleId":"670","severity":1,"message":"707","line":22,"column":11,"nodeType":"672","messageId":"673","endLine":22,"endColumn":17},{"ruleId":"670","severity":1,"message":"708","line":33,"column":17,"nodeType":"672","messageId":"673","endLine":33,"endColumn":22},{"ruleId":"709","severity":1,"message":"710","line":175,"column":10,"nodeType":"711","messageId":"712","endLine":175,"endColumn":14},{"ruleId":"709","severity":1,"message":"710","line":176,"column":10,"nodeType":"711","messageId":"712","endLine":176,"endColumn":14},{"ruleId":"670","severity":1,"message":"713","line":29,"column":10,"nodeType":"672","messageId":"673","endLine":29,"endColumn":17},{"ruleId":"670","severity":1,"message":"714","line":37,"column":11,"nodeType":"672","messageId":"673","endLine":37,"endColumn":20},{"ruleId":"670","severity":1,"message":"715","line":70,"column":20,"nodeType":"672","messageId":"673","endLine":70,"endColumn":30},{"ruleId":"670","severity":1,"message":"716","line":78,"column":10,"nodeType":"672","messageId":"673","endLine":78,"endColumn":17},{"ruleId":"670","severity":1,"message":"717","line":86,"column":21,"nodeType":"672","messageId":"673","endLine":86,"endColumn":34},{"ruleId":"718","severity":1,"message":"719","line":200,"column":13,"nodeType":"720","messageId":"721","endLine":210,"endColumn":14},{"ruleId":"684","severity":1,"message":"722","line":216,"column":7,"nodeType":"686","endLine":216,"endColumn":41,"suggestions":"723"},{"ruleId":"670","severity":1,"message":"724","line":6,"column":8,"nodeType":"672","messageId":"673","endLine":6,"endColumn":21},{"ruleId":"670","severity":1,"message":"725","line":9,"column":8,"nodeType":"672","messageId":"673","endLine":9,"endColumn":12},{"ruleId":"670","severity":1,"message":"726","line":14,"column":8,"nodeType":"672","messageId":"673","endLine":14,"endColumn":21},{"ruleId":"670","severity":1,"message":"700","line":34,"column":29,"nodeType":"672","messageId":"673","endLine":34,"endColumn":36},{"ruleId":"670","severity":1,"message":"727","line":37,"column":40,"nodeType":"672","messageId":"673","endLine":37,"endColumn":47},{"ruleId":"670","severity":1,"message":"728","line":48,"column":16,"nodeType":"672","messageId":"673","endLine":48,"endColumn":22},{"ruleId":"670","severity":1,"message":"729","line":49,"column":10,"nodeType":"672","messageId":"673","endLine":49,"endColumn":34},{"ruleId":"718","severity":1,"message":"719","line":93,"column":13,"nodeType":"720","messageId":"721","endLine":103,"endColumn":14},{"ruleId":"684","severity":1,"message":"722","line":107,"column":7,"nodeType":"686","endLine":107,"endColumn":32,"suggestions":"730"},{"ruleId":"666","replacedBy":"731"},{"ruleId":"668","replacedBy":"732"},{"ruleId":"670","severity":1,"message":"724","line":8,"column":8,"nodeType":"672","messageId":"673","endLine":8,"endColumn":21},{"ruleId":"670","severity":1,"message":"733","line":15,"column":4,"nodeType":"672","messageId":"673","endLine":15,"endColumn":22},{"ruleId":"670","severity":1,"message":"734","line":17,"column":8,"nodeType":"672","messageId":"673","endLine":17,"endColumn":24},{"ruleId":"670","severity":1,"message":"735","line":18,"column":10,"nodeType":"672","messageId":"673","endLine":18,"endColumn":15},{"ruleId":"684","severity":1,"message":"736","line":128,"column":7,"nodeType":"686","endLine":128,"endColumn":25,"suggestions":"737"},{"ruleId":"670","severity":1,"message":"738","line":56,"column":24,"nodeType":"672","messageId":"673","endLine":56,"endColumn":38},{"ruleId":"670","severity":1,"message":"739","line":68,"column":21,"nodeType":"672","messageId":"673","endLine":68,"endColumn":32},{"ruleId":"670","severity":1,"message":"740","line":68,"column":43,"nodeType":"672","messageId":"673","endLine":68,"endColumn":54},{"ruleId":"670","severity":1,"message":"741","line":71,"column":21,"nodeType":"672","messageId":"673","endLine":71,"endColumn":36},{"ruleId":"684","severity":1,"message":"742","line":125,"column":7,"nodeType":"686","endLine":125,"endColumn":78,"suggestions":"743"},{"ruleId":"670","severity":1,"message":"744","line":2,"column":24,"nodeType":"672","messageId":"673","endLine":2,"endColumn":29},{"ruleId":"670","severity":1,"message":"745","line":2,"column":31,"nodeType":"672","messageId":"673","endLine":2,"endColumn":41},{"ruleId":"670","severity":1,"message":"746","line":4,"column":10,"nodeType":"672","messageId":"673","endLine":4,"endColumn":20},{"ruleId":"670","severity":1,"message":"747","line":4,"column":22,"nodeType":"672","messageId":"673","endLine":4,"endColumn":31},{"ruleId":"670","severity":1,"message":"748","line":4,"column":33,"nodeType":"672","messageId":"673","endLine":4,"endColumn":38},{"ruleId":"666","replacedBy":"749"},{"ruleId":"668","replacedBy":"750"},{"ruleId":"670","severity":1,"message":"751","line":1,"column":8,"nodeType":"672","messageId":"673","endLine":1,"endColumn":30},{"ruleId":"670","severity":1,"message":"734","line":2,"column":8,"nodeType":"672","messageId":"673","endLine":2,"endColumn":24},{"ruleId":"670","severity":1,"message":"744","line":4,"column":23,"nodeType":"672","messageId":"673","endLine":4,"endColumn":28},{"ruleId":"670","severity":1,"message":"735","line":7,"column":10,"nodeType":"672","messageId":"673","endLine":7,"endColumn":15},{"ruleId":"670","severity":1,"message":"752","line":10,"column":10,"nodeType":"672","messageId":"673","endLine":10,"endColumn":24},{"ruleId":"670","severity":1,"message":"753","line":10,"column":26,"nodeType":"672","messageId":"673","endLine":10,"endColumn":43},{"ruleId":"670","severity":1,"message":"754","line":31,"column":8,"nodeType":"672","messageId":"673","endLine":31,"endColumn":16},{"ruleId":"670","severity":1,"message":"755","line":32,"column":8,"nodeType":"672","messageId":"673","endLine":32,"endColumn":18},{"ruleId":"670","severity":1,"message":"756","line":33,"column":8,"nodeType":"672","messageId":"673","endLine":33,"endColumn":15},{"ruleId":"670","severity":1,"message":"757","line":36,"column":8,"nodeType":"672","messageId":"673","endLine":36,"endColumn":18},{"ruleId":"670","severity":1,"message":"758","line":37,"column":8,"nodeType":"672","messageId":"673","endLine":37,"endColumn":22},{"ruleId":"670","severity":1,"message":"759","line":97,"column":7,"nodeType":"672","messageId":"673","endLine":97,"endColumn":23},{"ruleId":"670","severity":1,"message":"760","line":100,"column":7,"nodeType":"672","messageId":"673","endLine":100,"endColumn":18},{"ruleId":"670","severity":1,"message":"761","line":101,"column":7,"nodeType":"672","messageId":"673","endLine":101,"endColumn":15},{"ruleId":"670","severity":1,"message":"705","line":232,"column":11,"nodeType":"672","messageId":"673","endLine":232,"endColumn":15},{"ruleId":"670","severity":1,"message":"762","line":232,"column":17,"nodeType":"672","messageId":"673","endLine":232,"endColumn":24},{"ruleId":"670","severity":1,"message":"763","line":233,"column":11,"nodeType":"672","messageId":"673","endLine":233,"endColumn":16},{"ruleId":"670","severity":1,"message":"764","line":233,"column":18,"nodeType":"672","messageId":"673","endLine":233,"endColumn":26},{"ruleId":"670","severity":1,"message":"765","line":234,"column":11,"nodeType":"672","messageId":"673","endLine":234,"endColumn":19},{"ruleId":"670","severity":1,"message":"766","line":234,"column":21,"nodeType":"672","messageId":"673","endLine":234,"endColumn":32},{"ruleId":"670","severity":1,"message":"767","line":235,"column":11,"nodeType":"672","messageId":"673","endLine":235,"endColumn":26},{"ruleId":"670","severity":1,"message":"768","line":235,"column":28,"nodeType":"672","messageId":"673","endLine":235,"endColumn":46},{"ruleId":"670","severity":1,"message":"769","line":236,"column":11,"nodeType":"672","messageId":"673","endLine":236,"endColumn":18},{"ruleId":"670","severity":1,"message":"715","line":236,"column":20,"nodeType":"672","messageId":"673","endLine":236,"endColumn":30},{"ruleId":"670","severity":1,"message":"700","line":298,"column":12,"nodeType":"672","messageId":"673","endLine":298,"endColumn":19},{"ruleId":"670","severity":1,"message":"701","line":298,"column":21,"nodeType":"672","messageId":"673","endLine":298,"endColumn":26},{"ruleId":"670","severity":1,"message":"727","line":304,"column":12,"nodeType":"672","messageId":"673","endLine":304,"endColumn":19},{"ruleId":"670","severity":1,"message":"770","line":7,"column":8,"nodeType":"672","messageId":"673","endLine":7,"endColumn":20},{"ruleId":"670","severity":1,"message":"771","line":8,"column":8,"nodeType":"672","messageId":"673","endLine":8,"endColumn":20},{"ruleId":"670","severity":1,"message":"772","line":9,"column":8,"nodeType":"672","messageId":"673","endLine":9,"endColumn":22},{"ruleId":"670","severity":1,"message":"773","line":13,"column":17,"nodeType":"672","messageId":"673","endLine":13,"endColumn":26},{"ruleId":"670","severity":1,"message":"774","line":14,"column":10,"nodeType":"672","messageId":"673","endLine":14,"endColumn":21},{"ruleId":"670","severity":1,"message":"775","line":15,"column":10,"nodeType":"672","messageId":"673","endLine":15,"endColumn":13},{"ruleId":"670","severity":1,"message":"744","line":15,"column":15,"nodeType":"672","messageId":"673","endLine":15,"endColumn":20},{"ruleId":"670","severity":1,"message":"776","line":15,"column":22,"nodeType":"672","messageId":"673","endLine":15,"endColumn":31},{"ruleId":"670","severity":1,"message":"777","line":15,"column":33,"nodeType":"672","messageId":"673","endLine":15,"endColumn":36},{"ruleId":"670","severity":1,"message":"778","line":15,"column":38,"nodeType":"672","messageId":"673","endLine":15,"endColumn":44},{"ruleId":"670","severity":1,"message":"779","line":15,"column":46,"nodeType":"672","messageId":"673","endLine":15,"endColumn":50},{"ruleId":"670","severity":1,"message":"780","line":168,"column":10,"nodeType":"672","messageId":"673","endLine":168,"endColumn":20},{"ruleId":"670","severity":1,"message":"700","line":171,"column":18,"nodeType":"672","messageId":"673","endLine":171,"endColumn":25},{"ruleId":"670","severity":1,"message":"701","line":171,"column":27,"nodeType":"672","messageId":"673","endLine":171,"endColumn":32},{"ruleId":"670","severity":1,"message":"699","line":1,"column":8,"nodeType":"672","messageId":"673","endLine":1,"endColumn":12},{"ruleId":"670","severity":1,"message":"781","line":15,"column":8,"nodeType":"672","messageId":"673","endLine":15,"endColumn":15},{"ruleId":"670","severity":1,"message":"782","line":22,"column":4,"nodeType":"672","messageId":"673","endLine":22,"endColumn":33},{"ruleId":"670","severity":1,"message":"783","line":37,"column":10,"nodeType":"672","messageId":"673","endLine":37,"endColumn":17},{"ruleId":"670","severity":1,"message":"784","line":38,"column":10,"nodeType":"672","messageId":"673","endLine":38,"endColumn":20},{"ruleId":"670","severity":1,"message":"713","line":41,"column":10,"nodeType":"672","messageId":"673","endLine":41,"endColumn":17},{"ruleId":"670","severity":1,"message":"785","line":43,"column":10,"nodeType":"672","messageId":"673","endLine":43,"endColumn":22},{"ruleId":"670","severity":1,"message":"679","line":47,"column":10,"nodeType":"672","messageId":"673","endLine":47,"endColumn":21},{"ruleId":"670","severity":1,"message":"701","line":54,"column":21,"nodeType":"672","messageId":"673","endLine":54,"endColumn":26},{"ruleId":"670","severity":1,"message":"786","line":61,"column":14,"nodeType":"672","messageId":"673","endLine":61,"endColumn":22},{"ruleId":"670","severity":1,"message":"787","line":67,"column":16,"nodeType":"672","messageId":"673","endLine":67,"endColumn":26},{"ruleId":"670","severity":1,"message":"788","line":68,"column":16,"nodeType":"672","messageId":"673","endLine":68,"endColumn":26},{"ruleId":"670","severity":1,"message":"789","line":69,"column":7,"nodeType":"672","messageId":"673","endLine":69,"endColumn":15},{"ruleId":"670","severity":1,"message":"790","line":73,"column":12,"nodeType":"672","messageId":"673","endLine":73,"endColumn":18},{"ruleId":"670","severity":1,"message":"791","line":81,"column":16,"nodeType":"672","messageId":"673","endLine":81,"endColumn":29},{"ruleId":"670","severity":1,"message":"792","line":88,"column":16,"nodeType":"672","messageId":"673","endLine":88,"endColumn":32},{"ruleId":"670","severity":1,"message":"793","line":95,"column":16,"nodeType":"672","messageId":"673","endLine":95,"endColumn":34},{"ruleId":"684","severity":1,"message":"794","line":117,"column":7,"nodeType":"686","endLine":117,"endColumn":34,"suggestions":"795"},{"ruleId":"670","severity":1,"message":"713","line":70,"column":10,"nodeType":"672","messageId":"673","endLine":70,"endColumn":17},{"ruleId":"670","severity":1,"message":"796","line":123,"column":21,"nodeType":"672","messageId":"673","endLine":123,"endColumn":40},{"ruleId":"670","severity":1,"message":"797","line":22,"column":10,"nodeType":"672","messageId":"673","endLine":22,"endColumn":16},{"ruleId":"670","severity":1,"message":"675","line":40,"column":7,"nodeType":"672","messageId":"673","endLine":40,"endColumn":17},{"ruleId":"670","severity":1,"message":"676","line":60,"column":7,"nodeType":"672","messageId":"673","endLine":60,"endColumn":21},{"ruleId":"670","severity":1,"message":"678","line":121,"column":11,"nodeType":"672","messageId":"673","endLine":121,"endColumn":19},{"ruleId":"670","severity":1,"message":"798","line":122,"column":11,"nodeType":"672","messageId":"673","endLine":122,"endColumn":20},{"ruleId":"670","severity":1,"message":"799","line":122,"column":22,"nodeType":"672","messageId":"673","endLine":122,"endColumn":34},{"ruleId":"670","severity":1,"message":"800","line":125,"column":11,"nodeType":"672","messageId":"673","endLine":125,"endColumn":31},{"ruleId":"670","severity":1,"message":"801","line":126,"column":11,"nodeType":"672","messageId":"673","endLine":126,"endColumn":24},{"ruleId":"670","severity":1,"message":"802","line":127,"column":26,"nodeType":"672","messageId":"673","endLine":127,"endColumn":42},{"ruleId":"670","severity":1,"message":"679","line":130,"column":10,"nodeType":"672","messageId":"673","endLine":130,"endColumn":21},{"ruleId":"670","severity":1,"message":"803","line":143,"column":32,"nodeType":"672","messageId":"673","endLine":143,"endColumn":40},{"ruleId":"670","severity":1,"message":"804","line":208,"column":16,"nodeType":"672","messageId":"673","endLine":208,"endColumn":19},{"ruleId":"684","severity":1,"message":"805","line":239,"column":7,"nodeType":"686","endLine":239,"endColumn":14,"suggestions":"806"},{"ruleId":"684","severity":1,"message":"807","line":272,"column":7,"nodeType":"686","endLine":272,"endColumn":43,"suggestions":"808"},{"ruleId":"670","severity":1,"message":"809","line":290,"column":10,"nodeType":"672","messageId":"673","endLine":290,"endColumn":27},{"ruleId":"670","severity":1,"message":"810","line":264,"column":11,"nodeType":"672","messageId":"673","endLine":264,"endColumn":14},{"ruleId":"670","severity":1,"message":"811","line":292,"column":15,"nodeType":"672","messageId":"673","endLine":292,"endColumn":29},{"ruleId":"670","severity":1,"message":"810","line":310,"column":11,"nodeType":"672","messageId":"673","endLine":310,"endColumn":14},{"ruleId":"670","severity":1,"message":"784","line":251,"column":10,"nodeType":"672","messageId":"673","endLine":251,"endColumn":20},{"ruleId":"684","severity":1,"message":"812","line":293,"column":7,"nodeType":"686","endLine":293,"endColumn":66,"suggestions":"813"},{"ruleId":"670","severity":1,"message":"814","line":1,"column":8,"nodeType":"672","messageId":"673","endLine":1,"endColumn":13},{"ruleId":"670","severity":1,"message":"815","line":7,"column":10,"nodeType":"672","messageId":"673","endLine":7,"endColumn":26},{"ruleId":"670","severity":1,"message":"816","line":8,"column":25,"nodeType":"672","messageId":"673","endLine":8,"endColumn":35},{"ruleId":"670","severity":1,"message":"817","line":10,"column":8,"nodeType":"672","messageId":"673","endLine":10,"endColumn":14},{"ruleId":"670","severity":1,"message":"818","line":20,"column":10,"nodeType":"672","messageId":"673","endLine":20,"endColumn":21},{"ruleId":"670","severity":1,"message":"819","line":28,"column":18,"nodeType":"672","messageId":"673","endLine":28,"endColumn":26},{"ruleId":"670","severity":1,"message":"820","line":38,"column":11,"nodeType":"672","messageId":"673","endLine":38,"endColumn":24},{"ruleId":"670","severity":1,"message":"821","line":38,"column":26,"nodeType":"672","messageId":"673","endLine":38,"endColumn":42},{"ruleId":"670","severity":1,"message":"817","line":37,"column":8,"nodeType":"672","messageId":"673","endLine":37,"endColumn":14},{"ruleId":"670","severity":1,"message":"811","line":293,"column":17,"nodeType":"672","messageId":"673","endLine":293,"endColumn":31},{"ruleId":"670","severity":1,"message":"810","line":311,"column":13,"nodeType":"672","messageId":"673","endLine":311,"endColumn":16},{"ruleId":"670","severity":1,"message":"822","line":373,"column":10,"nodeType":"672","messageId":"673","endLine":373,"endColumn":30},{"ruleId":"670","severity":1,"message":"823","line":57,"column":10,"nodeType":"672","messageId":"673","endLine":57,"endColumn":23},{"ruleId":"670","severity":1,"message":"824","line":63,"column":10,"nodeType":"672","messageId":"673","endLine":63,"endColumn":20},{"ruleId":"670","severity":1,"message":"713","line":102,"column":7,"nodeType":"672","messageId":"673","endLine":102,"endColumn":14},{"ruleId":"670","severity":1,"message":"776","line":2,"column":40,"nodeType":"672","messageId":"673","endLine":2,"endColumn":49},{"ruleId":"670","severity":1,"message":"817","line":4,"column":8,"nodeType":"672","messageId":"673","endLine":4,"endColumn":14},{"ruleId":"670","severity":1,"message":"701","line":24,"column":21,"nodeType":"672","messageId":"673","endLine":24,"endColumn":26},{"ruleId":"670","severity":1,"message":"825","line":76,"column":21,"nodeType":"672","messageId":"673","endLine":76,"endColumn":31},{"ruleId":"670","severity":1,"message":"826","line":76,"column":42,"nodeType":"672","messageId":"673","endLine":76,"endColumn":52},{"ruleId":"684","severity":1,"message":"722","line":96,"column":7,"nodeType":"686","endLine":96,"endColumn":41,"suggestions":"827"},{"ruleId":"670","severity":1,"message":"814","line":1,"column":8,"nodeType":"672","messageId":"673","endLine":1,"endColumn":13},{"ruleId":"670","severity":1,"message":"828","line":5,"column":10,"nodeType":"672","messageId":"673","endLine":5,"endColumn":14},{"ruleId":"670","severity":1,"message":"815","line":16,"column":10,"nodeType":"672","messageId":"673","endLine":16,"endColumn":26},{"ruleId":"670","severity":1,"message":"817","line":9,"column":8,"nodeType":"672","messageId":"673","endLine":9,"endColumn":14},{"ruleId":"670","severity":1,"message":"701","line":25,"column":20,"nodeType":"672","messageId":"673","endLine":25,"endColumn":25},{"ruleId":"670","severity":1,"message":"828","line":5,"column":10,"nodeType":"672","messageId":"673","endLine":5,"endColumn":14},{"ruleId":"670","severity":1,"message":"724","line":7,"column":8,"nodeType":"672","messageId":"673","endLine":7,"endColumn":21},{"ruleId":"670","severity":1,"message":"701","line":33,"column":21,"nodeType":"672","messageId":"673","endLine":33,"endColumn":26},{"ruleId":"670","severity":1,"message":"829","line":6,"column":26,"nodeType":"672","messageId":"673","endLine":6,"endColumn":38},{"ruleId":"670","severity":1,"message":"830","line":20,"column":12,"nodeType":"672","messageId":"673","endLine":20,"endColumn":17},{"ruleId":"670","severity":1,"message":"831","line":23,"column":12,"nodeType":"672","messageId":"673","endLine":23,"endColumn":20},{"ruleId":"832","severity":1,"message":"833","line":33,"column":27,"nodeType":"834","messageId":"835","endLine":33,"endColumn":29},{"ruleId":"836","severity":1,"message":"837","line":34,"column":32,"nodeType":"838","messageId":"712","endLine":34,"endColumn":34},{"ruleId":"666","replacedBy":"839"},{"ruleId":"668","replacedBy":"840"},{"ruleId":"684","severity":1,"message":"722","line":112,"column":7,"nodeType":"686","endLine":119,"endColumn":5,"suggestions":"841"},{"ruleId":"670","severity":1,"message":"842","line":32,"column":4,"nodeType":"672","messageId":"673","endLine":32,"endColumn":18},{"ruleId":"670","severity":1,"message":"843","line":33,"column":4,"nodeType":"672","messageId":"673","endLine":33,"endColumn":18},{"ruleId":"670","severity":1,"message":"817","line":37,"column":8,"nodeType":"672","messageId":"673","endLine":37,"endColumn":14},{"ruleId":"670","severity":1,"message":"810","line":321,"column":13,"nodeType":"672","messageId":"673","endLine":321,"endColumn":16},{"ruleId":"670","severity":1,"message":"776","line":2,"column":40,"nodeType":"672","messageId":"673","endLine":2,"endColumn":49},{"ruleId":"670","severity":1,"message":"817","line":4,"column":8,"nodeType":"672","messageId":"673","endLine":4,"endColumn":14},{"ruleId":"670","severity":1,"message":"844","line":6,"column":4,"nodeType":"672","messageId":"673","endLine":6,"endColumn":22},{"ruleId":"670","severity":1,"message":"845","line":8,"column":4,"nodeType":"672","messageId":"673","endLine":8,"endColumn":18},{"ruleId":"670","severity":1,"message":"701","line":30,"column":21,"nodeType":"672","messageId":"673","endLine":30,"endColumn":26},{"ruleId":"670","severity":1,"message":"817","line":32,"column":8,"nodeType":"672","messageId":"673","endLine":32,"endColumn":14},{"ruleId":"670","severity":1,"message":"811","line":294,"column":13,"nodeType":"672","messageId":"673","endLine":294,"endColumn":27},{"ruleId":"670","severity":1,"message":"810","line":312,"column":13,"nodeType":"672","messageId":"673","endLine":312,"endColumn":16},{"ruleId":"670","severity":1,"message":"776","line":2,"column":40,"nodeType":"672","messageId":"673","endLine":2,"endColumn":49},{"ruleId":"670","severity":1,"message":"817","line":4,"column":8,"nodeType":"672","messageId":"673","endLine":4,"endColumn":14},{"ruleId":"670","severity":1,"message":"844","line":6,"column":4,"nodeType":"672","messageId":"673","endLine":6,"endColumn":22},{"ruleId":"670","severity":1,"message":"845","line":7,"column":4,"nodeType":"672","messageId":"673","endLine":7,"endColumn":18},{"ruleId":"670","severity":1,"message":"701","line":25,"column":21,"nodeType":"672","messageId":"673","endLine":25,"endColumn":26},{"ruleId":"670","severity":1,"message":"817","line":38,"column":8,"nodeType":"672","messageId":"673","endLine":38,"endColumn":14},{"ruleId":"670","severity":1,"message":"846","line":316,"column":13,"nodeType":"672","messageId":"673","endLine":316,"endColumn":24},{"ruleId":"670","severity":1,"message":"810","line":338,"column":13,"nodeType":"672","messageId":"673","endLine":338,"endColumn":16},{"ruleId":"670","severity":1,"message":"817","line":14,"column":8,"nodeType":"672","messageId":"673","endLine":14,"endColumn":14},{"ruleId":"670","severity":1,"message":"701","line":36,"column":21,"nodeType":"672","messageId":"673","endLine":36,"endColumn":26},{"ruleId":"684","severity":1,"message":"847","line":33,"column":7,"nodeType":"686","endLine":33,"endColumn":9,"suggestions":"848"},{"ruleId":"684","severity":1,"message":"849","line":37,"column":7,"nodeType":"686","endLine":37,"endColumn":9,"suggestions":"850"},{"ruleId":"670","severity":1,"message":"700","line":22,"column":12,"nodeType":"672","messageId":"673","endLine":22,"endColumn":19},{"ruleId":"670","severity":1,"message":"701","line":22,"column":21,"nodeType":"672","messageId":"673","endLine":22,"endColumn":26},{"ruleId":"670","severity":1,"message":"851","line":22,"column":28,"nodeType":"672","messageId":"673","endLine":22,"endColumn":33},{"ruleId":"684","severity":1,"message":"847","line":38,"column":7,"nodeType":"686","endLine":38,"endColumn":9,"suggestions":"852"},{"ruleId":"684","severity":1,"message":"853","line":43,"column":7,"nodeType":"686","endLine":43,"endColumn":9,"suggestions":"854"},{"ruleId":"855","severity":1,"message":"856","line":4,"column":4,"nodeType":"857","messageId":"858","endLine":6,"endColumn":5},"no-native-reassign",["859"],"no-negated-in-lhs",["860"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'NavDropdown' is defined but never used.","'StyledMenu' is assigned a value but never used.","'StyledMenuItem' is assigned a value but never used.","'anchorReff' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'menu' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["861"],"'Container' is defined but never used.","'LinkContainer' is defined but never used.","'withStyles' is defined but never used.","'DialogTitle' is assigned a value but never used.","'DialogActions' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'sale' is assigned a value but never used.","'settings' is assigned a value but never used.","'onChange' is defined but never used.","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","'Chip' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","'firebaseApp' is assigned a value but never used.","'name' is assigned a value but never used.","'mail' is assigned a value but never used.","'avatar' is assigned a value but never used.","'token' is assigned a value but never used.","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","'classes' is assigned a value but never used.","'uploading' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'address' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["862"],"'FormContainer' is defined but never used.","'data' is defined but never used.","'DialogActions' is defined but never used.","'success' is assigned a value but never used.","'setAdd' is assigned a value but never used.","'updateInformationAddress' is assigned a value but never used.",["863"],["859"],["860"],"'ORDER_DETAIL_RESET' is defined but never used.","'ErrorOutlineIcon' is defined but never used.","'toast' is defined but never used.","React Hook useEffect has missing dependencies: 'cart.cartItems', 'dispatch', and 'order._id'. Either include them or remove the dependency array.",["864"],"'setOrderStatus' is assigned a value but never used.","'loadingCash' is assigned a value but never used.","'successCash' is assigned a value but never used.","'loadingByMember' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["865"],"'Image' is defined but never used.","'InputGroup' is defined but never used.","'ButtonBase' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.",["859"],["860"],"'CheckCircleOutlineIcon' is defined but never used.","'getUserDetails' is defined but never used.","'updateUserProfile' is defined but never used.","'Checkbox' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'DeleteIcon' is defined but never used.","'FilterListIcon' is defined but never used.","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'setName' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'message' is assigned a value but never used.","'GroupAddIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'VideoLabelIcon' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'activeStep' is assigned a value but never used.","'Message' is defined but never used.","'PRODUCT_OF_SUB_CATEGORY_RESET' is defined but never used.","'keyword' is assigned a value but never used.","'pageNumber' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'errorSub' is assigned a value but never used.","'loadingCat' is assigned a value but never used.","'successCat' is assigned a value but never used.","'category' is assigned a value but never used.","'subcat' is assigned a value but never used.","'successFilter' is assigned a value but never used.","'successSubFilter' is assigned a value but never used.","'successFilterPrice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'products.length'. Either include it or remove the dependency array.",["866"],"'productsFilterPrice' is assigned a value but never used.","'format' is defined but never used.","'anchorEl1' is assigned a value but never used.","'setAnchorEl1' is assigned a value but never used.","'loadingNotifications' is assigned a value but never used.","'notifications' is assigned a value but never used.","'setHasFirstFetch' is assigned a value but never used.","'userData' is assigned a value but never used.","'url' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.",["867"],"React Hook useEffect has missing dependencies: 'open', 'open1', and 'openNotification'. Either include them or remove the dependency array.",["868"],"'markAsReadHandler' is assigned a value but never used.","'did' is assigned a value but never used.","'createdProduct' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categoryCat' and 'createdProduct._id'. Either include them or remove the dependency array.",["869"],"'axios' is defined but never used.","'deleteFileImages' is defined but never used.","'newProduct' is defined but never used.","'Loader' is defined but never used.","'formatPrice' is defined but never used.","'setBrand' is assigned a value but never used.","'imagesPreview' is assigned a value but never used.","'setImagesPreview' is assigned a value but never used.","'submitHandlerDetails' is assigned a value but never used.","'getComparator' is defined but never used.","'stableSort' is defined but never used.","'loadingPay' is assigned a value but never used.","'successPay' is assigned a value but never used.",["870"],"'Link' is defined but never used.","'listProducts' is defined but never used.","'order' is assigned a value but never used.","'supplier' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["859"],["860"],["871"],"'createCategory' is defined but never used.","'deleteCategory' is defined but never used.","'getCategoryDetails' is defined but never used.","'updateCategory' is defined but never used.","'createdCode' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'docKey'. Either include it or remove the dependency array.",["872"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["873"],"'users' is assigned a value but never used.",["874"],"React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.",["875"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation",{"desc":"876","fix":"877"},{"desc":"878","fix":"879"},{"desc":"880","fix":"881"},{"desc":"882","fix":"883"},{"desc":"884","fix":"885"},{"desc":"886","fix":"887"},{"desc":"888","fix":"889"},{"desc":"890","fix":"891"},{"desc":"892","fix":"893"},{"desc":"894","fix":"895"},{"desc":"896","fix":"897"},{"desc":"898","fix":"899"},{"desc":"900","fix":"901"},{"desc":"898","fix":"902"},{"desc":"903","fix":"904"},"Update the dependencies array to be: [open, userInfo, user, dispatch]",{"range":"905","text":"906"},"Update the dependencies array to be: [dispatch, history, success, user, userInfo]",{"range":"907","text":"908"},"Update the dependencies array to be: [dispatch, history, user, userInfo]",{"range":"909","text":"910"},"Update the dependencies array to be: [cart.cartItems, dispatch, history, order._id, success]",{"range":"911","text":"912"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",{"range":"913","text":"914"},"Update the dependencies array to be: [dispatch, userInfo, catId, products.length]",{"range":"915","text":"916"},"Update the dependencies array to be: [history]",{"range":"917","text":"918"},"Update the dependencies array to be: [dispatch, notificationsCount, open, open1, openNotification, user]",{"range":"919","text":"920"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id]",{"range":"921","text":"922"},"Update the dependencies array to be: [dispatch, orderId, successUpdate, userInfo]",{"range":"923","text":"924"},"Update the dependencies array to be: [history, dispatch, successDeleteAddress, successCreateAddress, successSelectRole, successUpdateAddress, userInfo]",{"range":"925","text":"926"},"Update the dependencies array to be: [docKey]",{"range":"927","text":"928"},"Update the dependencies array to be: [user]",{"range":"929","text":"930"},{"range":"931","text":"928"},"Update the dependencies array to be: [dispatch, user]",{"range":"932","text":"933"},[5343,5365],"[open, userInfo, user, dispatch]",[7030,7064],"[dispatch, history, success, user, userInfo]",[3345,3370],"[dispatch, history, user, userInfo]",[4085,4103],"[cart.cartItems, dispatch, history, order._id, success]",[3984,4055],"[dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",[3579,3606],"[dispatch, userInfo, catId, products.length]",[7099,7106],"[history]",[7867,7903],"[dispatch, notificationsCount, open, open1, openNotification, user]",[9646,9705],"[dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id]",[3057,3091],"[dispatch, orderId, successUpdate, userInfo]",[3468,3621],"[history, dispatch, successDeleteAddress, successCreateAddress, successSelectRole, successUpdateAddress, userInfo]",[1046,1048],"[docKey]",[1106,1108],"[user]",[1247,1249],[1336,1338],"[dispatch, user]"]