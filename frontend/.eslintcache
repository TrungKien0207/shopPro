[{"F:\\Code\\shopPro\\frontend\\src\\index.js":"1","F:\\Code\\shopPro\\frontend\\src\\App.js":"2","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js":"3","F:\\Code\\shopPro\\frontend\\src\\components\\Header.js":"4","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js":"5","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js":"6","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js":"7","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js":"8","F:\\Code\\shopPro\\frontend\\src\\store.js":"9","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js":"10","F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js":"11","F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js":"12","F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js":"13","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js":"14","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js":"15","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js":"16","F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js":"17","F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js":"18","F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js":"19","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js":"20","F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js":"21","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js":"22","F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js":"23","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js":"24","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js":"25","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js":"26","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js":"27","F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js":"28","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js":"29","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js":"30","F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js":"31","F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js":"32","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js":"33","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js":"34","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js":"35","F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js":"36","F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js":"37","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js":"38","F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js":"39","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js":"40","F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js":"41","F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js":"42","F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js":"43","F:\\Code\\shopPro\\frontend\\src\\configAuth.js":"44","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js":"45","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js":"46","F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js":"47","F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js":"48","F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js":"49","F:\\Code\\shopPro\\frontend\\src\\components\\test.js":"50","F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js":"51","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js":"52","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js":"53","F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js":"54","F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js":"55","F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js":"56","F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js":"57","F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js":"58","F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js":"59","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js":"60","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js":"61","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js":"62","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js":"63","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js":"64","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js":"65","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js":"66","F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js":"67","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js":"68","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js":"69","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js":"70","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js":"71","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js":"72","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js":"73","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js":"74","F:\\Code\\shopPro\\frontend\\src\\actions\\cloudinary.js":"75","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\ListNumber.js":"76","F:\\Code\\shopPro\\frontend\\src\\actions\\notificationsAction.js":"77","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\NotificationsDropDown.js":"78","F:\\Code\\shopPro\\frontend\\src\\screens\\UsersAddressListScreen.js":"79"},{"size":629,"mtime":1620119595981,"results":"80","hashOfConfig":"81"},{"size":8397,"mtime":1621755798041,"results":"82","hashOfConfig":"81"},{"size":362,"mtime":499162500000,"results":"83","hashOfConfig":"81"},{"size":25815,"mtime":1621674700862,"results":"84","hashOfConfig":"81"},{"size":11268,"mtime":1620267385392,"results":"85","hashOfConfig":"81"},{"size":5518,"mtime":1621884651867,"results":"86","hashOfConfig":"81"},{"size":2003,"mtime":1621620316063,"results":"87","hashOfConfig":"81"},{"size":29824,"mtime":1621886087154,"results":"88","hashOfConfig":"81"},{"size":4612,"mtime":1622044312349,"results":"89","hashOfConfig":"81"},{"size":6950,"mtime":1621608711397,"results":"90","hashOfConfig":"81"},{"size":2688,"mtime":1621608624963,"results":"91","hashOfConfig":"81"},{"size":10691,"mtime":1621608715900,"results":"92","hashOfConfig":"81"},{"size":567,"mtime":1615791677731,"results":"93","hashOfConfig":"81"},{"size":689,"mtime":1619547659359,"results":"94","hashOfConfig":"81"},{"size":25338,"mtime":1621885995887,"results":"95","hashOfConfig":"81"},{"size":1184,"mtime":1615605660974,"results":"96","hashOfConfig":"81"},{"size":1339,"mtime":1621601801857,"results":"97","hashOfConfig":"81"},{"size":238,"mtime":1612540677571,"results":"98","hashOfConfig":"81"},{"size":8483,"mtime":1622044259440,"results":"99","hashOfConfig":"81"},{"size":3634,"mtime":1621830105112,"results":"100","hashOfConfig":"81"},{"size":8304,"mtime":1621884666421,"results":"101","hashOfConfig":"81"},{"size":402,"mtime":1612087628650,"results":"102","hashOfConfig":"81"},{"size":10424,"mtime":1621830196924,"results":"103","hashOfConfig":"81"},{"size":8747,"mtime":1621884794716,"results":"104","hashOfConfig":"81"},{"size":25919,"mtime":1621884784004,"results":"105","hashOfConfig":"81"},{"size":12376,"mtime":1621884803237,"results":"106","hashOfConfig":"81"},{"size":1643,"mtime":1612593111433,"results":"107","hashOfConfig":"81"},{"size":3351,"mtime":1621884746500,"results":"108","hashOfConfig":"81"},{"size":9925,"mtime":1621884753906,"results":"109","hashOfConfig":"81"},{"size":6305,"mtime":1621604683610,"results":"110","hashOfConfig":"81"},{"size":2222,"mtime":1621604665676,"results":"111","hashOfConfig":"81"},{"size":8961,"mtime":1621176581234,"results":"112","hashOfConfig":"81"},{"size":19932,"mtime":1621884691821,"results":"113","hashOfConfig":"81"},{"size":855,"mtime":1619547664611,"results":"114","hashOfConfig":"81"},{"size":311,"mtime":1619377332627,"results":"115","hashOfConfig":"81"},{"size":995,"mtime":1618210153490,"results":"116","hashOfConfig":"81"},{"size":1297,"mtime":1619197232259,"results":"117","hashOfConfig":"81"},{"size":3613,"mtime":1619707633985,"results":"118","hashOfConfig":"81"},{"size":2347,"mtime":1620526178345,"results":"119","hashOfConfig":"81"},{"size":2090,"mtime":1621262623606,"results":"120","hashOfConfig":"81"},{"size":1725,"mtime":1616170962837,"results":"121","hashOfConfig":"81"},{"size":514,"mtime":1615015305728,"results":"122","hashOfConfig":"81"},{"size":22347,"mtime":1621930436507,"results":"123","hashOfConfig":"81"},{"size":393,"mtime":1616226016215,"results":"124","hashOfConfig":"81"},{"size":5057,"mtime":1617288730631,"results":"125","hashOfConfig":"81"},{"size":514,"mtime":1617284362928,"results":"126","hashOfConfig":"81"},{"size":3079,"mtime":1617764918779,"results":"127","hashOfConfig":"81"},{"size":1148,"mtime":1617555469184,"results":"128","hashOfConfig":"81"},{"size":4859,"mtime":1617764862267,"results":"129","hashOfConfig":"81"},{"size":0,"mtime":1617780641945,"results":"130","hashOfConfig":"81"},{"size":251,"mtime":1617900546652,"results":"131","hashOfConfig":"81"},{"size":8084,"mtime":1621884761384,"results":"132","hashOfConfig":"81"},{"size":855,"mtime":1618203083711,"results":"133","hashOfConfig":"81"},{"size":1802,"mtime":1611471571179,"results":"134","hashOfConfig":"81"},{"size":6372,"mtime":1618852953383,"results":"135","hashOfConfig":"81"},{"size":1253,"mtime":1619890864238,"results":"136","hashOfConfig":"81"},{"size":4900,"mtime":1619943611553,"results":"137","hashOfConfig":"81"},{"size":1148,"mtime":1619935367616,"results":"138","hashOfConfig":"81"},{"size":3073,"mtime":1619936932800,"results":"139","hashOfConfig":"81"},{"size":4115,"mtime":1621235539884,"results":"140","hashOfConfig":"81"},{"size":22206,"mtime":1622043850506,"results":"141","hashOfConfig":"81"},{"size":4686,"mtime":1621347815999,"results":"142","hashOfConfig":"81"},{"size":16012,"mtime":1620183244605,"results":"143","hashOfConfig":"81"},{"size":20339,"mtime":1620183268367,"results":"144","hashOfConfig":"81"},{"size":22584,"mtime":1621925655918,"results":"145","hashOfConfig":"81"},{"size":21211,"mtime":1620843599260,"results":"146","hashOfConfig":"81"},{"size":815,"mtime":1620138964451,"results":"147","hashOfConfig":"81"},{"size":20200,"mtime":1620183235479,"results":"148","hashOfConfig":"81"},{"size":26072,"mtime":1621912902528,"results":"149","hashOfConfig":"81"},{"size":3935,"mtime":1620183263582,"results":"150","hashOfConfig":"81"},{"size":24731,"mtime":1621802900169,"results":"151","hashOfConfig":"81"},{"size":10449,"mtime":1620183249072,"results":"152","hashOfConfig":"81"},{"size":4009,"mtime":1620183231306,"results":"153","hashOfConfig":"81"},{"size":9043,"mtime":1620183240177,"results":"154","hashOfConfig":"81"},{"size":331,"mtime":1621665934913,"results":"155","hashOfConfig":"81"},{"size":8363,"mtime":1621444444445,"results":"156","hashOfConfig":"81"},{"size":1548,"mtime":1622040104300,"results":"157","hashOfConfig":"81"},{"size":2343,"mtime":1621398998177,"results":"158","hashOfConfig":"81"},{"size":24632,"mtime":1621885852086,"results":"159","hashOfConfig":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"1shtzj8",{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"162"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"162"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"162"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"162"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"162"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"249"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"162"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"162"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"162"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"162"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"162"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"162"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"304","messages":"305","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"162"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"162"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"314","messages":"315","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"162"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"162"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"162"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"162"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"162"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"162"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"162"},"F:\\Code\\shopPro\\frontend\\src\\index.js",[],["341","342"],"F:\\Code\\shopPro\\frontend\\src\\App.js",["343"],"F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Header.js",["344","345","346","347","348","349","350","351","352","353","354","355","356","357"],"F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js",["358","359","360"],"import { Link } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Col, Container, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport { black } from 'colors'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nFooter.propTypes = {}\r\n\r\nfunction Footer(props) {\r\n  const classes = useStyles()\r\n  return (\r\n    <footer style={{ backgroundColor: '#edfead' }}>\r\n      <div className='pl-5 pb-4  pr-5'>\r\n        <Row>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Hỗ trợ</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức giao hàng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức thanh toán\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách đổi trả\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách bảo hành\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Thông tin</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Tuyển dụng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Góp ý\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giải đáp thắc mắc\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={3}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Về Natural Food</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giới thiệu\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Liên hệ\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={5}>\r\n            <ListGroup>\r\n              <div className='d-flex justify-content-center'>\r\n                <Image\r\n                  src='/logo/logo_white.png'\r\n                  style={{ width: '9rem', height: '8rem', zIndex: '0' }}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex justify-content-evenly'>\r\n                <Link\r\n                  href='#'\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/gmail-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='#'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/facebook-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='#'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/twitter.png' />\r\n                </Link>\r\n              </div>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Địa chỉ: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      22 Lý Chiêu Hoàng, Phường 10, Quận 6, TP HCM\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Email: </strong>\r\n                    <p className='mb-0 pl-1'>tuvan_online@naturalfood.com.vn</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Số điện thoại: </strong>\r\n                    <p className='mb-0 pl-1'>(028) 38 753 443</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Hotline: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      19002126 ( cước phí: 3000đ/phút )\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <p className='mb-0'>\r\n                      Thời gian tư vấn: Từ 07h30 đến 12h15, 13h15 đến 21h30 các\r\n                      ngày trong tuần ( Trừ ngày Lễ, Tết)\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js",["361"],"F:\\Code\\shopPro\\frontend\\src\\components\\Product.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js",["362","363"],"F:\\Code\\shopPro\\frontend\\src\\store.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js",["364","365"],"import { useState } from 'react'\r\nimport { css } from '@emotion/core'\r\nimport ClipLoader from 'react-spinners/ClipLoader'\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n`\r\n\r\nfunction Loader() {\r\n  let [loading, setLoading] = useState(true)\r\n  let [color, setColor] = useState('orange')\r\n\r\n  return (\r\n    <div className='sweet-loading text-center'>\r\n      <ClipLoader color={color} loading={loading} css={override} size={60} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js",["366","367","368","369","370","371","372","373"],"F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js",["374","375","376","377","378"],"F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js",["379","380"],"import axios from 'axios'\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\nimport {\r\n   CLEAR_ERRORS,\r\n   USER_CREATE_ADDRESS_FAIL,\r\n   USER_CREATE_ADDRESS_REQUEST,\r\n   USER_CREATE_ADDRESS_SUCCESS,\r\n   USER_DELETE_ADDRESS_FAIL,\r\n   USER_DELETE_ADDRESS_REQUEST,\r\n   USER_DELETE_ADDRESS_SUCCESS,\r\n   USER_DELETE_FAIL,\r\n   USER_DELETE_REQUEST,\r\n   USER_DELETE_SUCCESS,\r\n   USER_DETAILS_FAIL,\r\n   USER_DETAILS_REQUEST,\r\n   USER_DETAILS_RESET,\r\n   USER_DETAILS_SUCCESS,\r\n   USER_EDIT_ADDRESS_FAIL,\r\n   USER_EDIT_ADDRESS_REQUEST,\r\n   USER_EDIT_ADDRESS_SUCCESS,\r\n   USER_LIST_FAIL,\r\n   USER_LIST_REQUEST,\r\n   USER_LIST_RESET,\r\n   USER_LIST_SUCCESS,\r\n   USER_LOGIN_FAIL,\r\n   USER_LOGIN_REQUEST,\r\n   USER_LOGIN_SUCCESS,\r\n   USER_LOGOUT,\r\n   USER_REGISTER_FAIL,\r\n   USER_REGISTER_REQUEST,\r\n   USER_REGISTER_SUCCESS,\r\n   USER_SELECT_ROLE_FAIL,\r\n   USER_SELECT_ROLE_REQUEST,\r\n   USER_SELECT_ROLE_SUCCESS,\r\n   USER_UPDATE_FAIL,\r\n   USER_UPDATE_PROFILE_FAIL,\r\n   USER_UPDATE_PROFILE_REQUEST,\r\n   USER_UPDATE_PROFILE_SUCCESS,\r\n   USER_UPDATE_REQUEST,\r\n   USER_UPDATE_SUCCESS,\r\n} from '../constants/userConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_LOGIN_REQUEST,\r\n      })\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.post(\r\n         '/api/users/login',\r\n         { email, password },\r\n         config\r\n      )\r\n\r\n      dispatch({\r\n         type: USER_LOGIN_SUCCESS,\r\n         payload: data,\r\n      })\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_LOGIN_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const register = (name, email, avatar, password) => async (dispatch) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_REGISTER_REQUEST,\r\n      })\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.post(\r\n         '/api/users',\r\n         { name, email, avatar, password },\r\n         config\r\n      )\r\n\r\n      dispatch({\r\n         type: USER_LOGIN_SUCCESS,\r\n         payload: data,\r\n      })\r\n\r\n      dispatch({\r\n         type: USER_REGISTER_SUCCESS,\r\n         payload: data,\r\n      })\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_REGISTER_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_DETAILS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.get(`/api/users/${id}`, config)\r\n\r\n      dispatch({\r\n         type: USER_DETAILS_SUCCESS,\r\n         payload: data,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_DETAILS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_UPDATE_PROFILE_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.put('/api/users/profile', user, config)\r\n\r\n      console.log('data post update profile', data)\r\n\r\n      dispatch({\r\n         type: USER_UPDATE_PROFILE_SUCCESS,\r\n         type: USER_LOGOUT,\r\n         type: USER_DETAILS_RESET,\r\n         payload: data,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_UPDATE_PROFILE_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n   localStorage.removeItem('userInfo')\r\n   dispatch({ type: USER_LOGOUT })\r\n   dispatch({ type: USER_DETAILS_RESET })\r\n   dispatch({ type: ORDER_LIST_MY_RESET })\r\n   dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_LIST_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.get('/api/users', config)\r\n\r\n      dispatch({\r\n         type: USER_LIST_SUCCESS,\r\n         payload: data,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_LIST_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_DELETE_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      await axios.delete(`/api/users/${id}`, config)\r\n\r\n      dispatch({\r\n         type: USER_DELETE_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_DELETE_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_UPDATE_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.put(`/api/users/${user._id}`, user, config)\r\n\r\n      dispatch({ type: USER_UPDATE_SUCCESS })\r\n      dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_UPDATE_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const deleteAddressUser = (id) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_DELETE_ADDRESS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      console.log('id address', id)\r\n\r\n      await axios.post('/api/users/deleteaddress', id, config)\r\n\r\n      dispatch({\r\n         type: USER_DELETE_ADDRESS_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_DELETE_ADDRESS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const createAddressUser = (address) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_CREATE_ADDRESS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      await axios.post('/api/users/createaddress', address, config)\r\n\r\n      dispatch({\r\n         type: USER_CREATE_ADDRESS_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_CREATE_ADDRESS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const updateAddressUser = (address) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_EDIT_ADDRESS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      await axios.post('/api/users/address', address, config)\r\n\r\n      dispatch({\r\n         type: USER_EDIT_ADDRESS_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_EDIT_ADDRESS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const selectRoleAddressUser =\r\n   (address) => async (dispatch, getState) => {\r\n      try {\r\n         dispatch({\r\n            type: USER_SELECT_ROLE_REQUEST,\r\n         })\r\n\r\n         const {\r\n            userLogin: { userInfo },\r\n         } = getState()\r\n\r\n         const config = {\r\n            headers: {\r\n               Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n         }\r\n\r\n         await axios.post('/api/users/roleaddress', address, config)\r\n\r\n         dispatch({\r\n            type: USER_SELECT_ROLE_SUCCESS,\r\n         })\r\n      } catch (error) {\r\n         dispatch({\r\n            type: USER_SELECT_ROLE_FAIL,\r\n            payload:\r\n               error.response && error.response.data.message\r\n                  ? error.response.data.message\r\n                  : error.message,\r\n         })\r\n      }\r\n   }\r\n\r\nexport const clearErrors = () => async (dispatch) => {\r\n   dispatch({\r\n      type: CLEAR_ERRORS,\r\n   })\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js",["381"],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js",["382","383","384","385","386","387","388"],"F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js",["389","390","391","392","393","394","395","396","397"],"F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js",[],["398","399"],"F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js",["400"],"F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js",["401","402"],"F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js",["403","404","405"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n   deliverOrder,\r\n   getOrderDetails,\r\n   payOrder,\r\n   updateOrderByMember,\r\n} from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nimport ImagePay from '../components/ImagePay'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport ProgressShipping from '../components/ProgressShipping'\r\nimport {\r\n   ORDER_DELIVER_RESET,\r\n   ORDER_PAY_RESET,\r\n   ORDER_UPDATE_BY_MEMBER_RESET,\r\n} from '../constants/orderConstants'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport Header from '../components/Header'\r\nimport Footer from '../components/Footer'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst OrderScreen = ({ match, history }) => {\r\n   const orderId = match.params.id\r\n\r\n   const [sdkReady, setSdkReady] = useState(false)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const [orderStatus, setOrderStatus] = useState('Huỷ')\r\n\r\n   const orderDetails = useSelector((state) => state.orderDetails)\r\n   const { order, loading, error } = orderDetails\r\n\r\n   const orderPay = useSelector((state) => state.orderPay)\r\n   const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n   const orderDeliver = useSelector((state) => state.orderDeliver)\r\n   const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n   const orderUpdateByMember = useSelector((state) => state.orderUpdateByMember)\r\n   const { loading: loadingByMember, success: successByMember } =\r\n      orderUpdateByMember\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   if (!loading) {\r\n      //   Calculate prices\r\n      const addDecimals = (num) => {\r\n         return Math.round(num)\r\n      }\r\n\r\n      order.itemsPrice = addDecimals(\r\n         order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push('/login')\r\n      }\r\n\r\n      const addPayPalScript = async () => {\r\n         const { data: clientId } = await axios.get('/api/config/paypal')\r\n         const script = document.createElement('script')\r\n         script.type = 'text/javascript'\r\n         script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n         script.async = true\r\n         script.onload = () => {\r\n            setSdkReady(true)\r\n         }\r\n         document.body.appendChild(script)\r\n      }\r\n\r\n      if (!order || successPay || successDeliver || successByMember) {\r\n         dispatch({ type: ORDER_PAY_RESET })\r\n         dispatch({ type: ORDER_DELIVER_RESET })\r\n         dispatch({ type: ORDER_UPDATE_BY_MEMBER_RESET })\r\n         dispatch(getOrderDetails(orderId))\r\n      } else if (!order.isPaid) {\r\n         if (!window.paypal) {\r\n            addPayPalScript()\r\n         } else {\r\n            setSdkReady(true)\r\n         }\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, orderId, successPay, successDeliver, successByMember, order])\r\n\r\n   const successPaymentHandler = (paymentResult) => {\r\n      console.log(paymentResult)\r\n      dispatch(payOrder(orderId, paymentResult))\r\n   }\r\n\r\n   const deliverHandler = () => {\r\n      dispatch(deliverOrder(order))\r\n   }\r\n\r\n   const cancelOrder = () => {\r\n      dispatch(updateOrderByMember({ _id: orderId, orderStatus }))\r\n   }\r\n\r\n   // console.log('Trạng thái: ', order)\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {loading ? (\r\n            <Loader />\r\n         ) : error ? (\r\n            <Message>{error}</Message>\r\n         ) : (\r\n            <>\r\n               <Row className='m-4'>\r\n                  <Col md={8}>\r\n                     <ListGroup\r\n                        variant='flush'\r\n                        className='shadow mt-3 card_color p-1 border-order'\r\n                     >\r\n                        <ListGroup.Item>\r\n                           <h3\r\n                              className='text-center'\r\n                              style={{ color: '#7563c8' }}\r\n                           >\r\n                              Đơn hàng {order._id}\r\n                           </h3>\r\n                           <Row>\r\n                              <Col md={6} className='d-flex align-items-center'>\r\n                                 <h5 className='text-uppercase mb-0'>\r\n                                    Trạng thái đơn hàng\r\n                                 </h5>\r\n                              </Col>\r\n                              <Col\r\n                                 md={6}\r\n                                 className='d-flex justify-content-end mb-3'\r\n                              >\r\n                                 <div>\r\n                                    {order.orderStatus === 'Chờ xác nhận' ? (\r\n                                       <Button\r\n                                          variant='outline-light'\r\n                                          className='p-1 pl-3 pr-3 btn_color_cancel rounded-pill '\r\n                                          onClick={cancelOrder}\r\n                                       >\r\n                                          <div className='d-flex justify-content-end'>\r\n                                             Huỷ\r\n                                             <ClearIcon\r\n                                                fontSize='small'\r\n                                                style={{ marginTop: '0.2rem' }}\r\n                                             />\r\n                                          </div>\r\n                                       </Button>\r\n                                    ) : (\r\n                                       <Button\r\n                                          disabled\r\n                                          className='p-1 pl-3 pr-3 rounded-pill'\r\n                                       >\r\n                                          <div className='d-flex justify-content-end'>\r\n                                             Huỷ\r\n                                             <ClearIcon\r\n                                                fontSize='small'\r\n                                                style={{ marginTop: '0.2rem' }}\r\n                                             />\r\n                                          </div>\r\n                                       </Button>\r\n                                    )}\r\n                                 </div>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           {order.orderStatus !== 'Huỷ' ? (\r\n                              <ProgressShipping />\r\n                           ) : (\r\n                              <Announcement variant='warning'>\r\n                                 Đơn hàng đã được huỷ\r\n                              </Announcement>\r\n                           )}\r\n\r\n                           <h5 className='text-uppercase'>\r\n                              Thông tin giao hàng\r\n                           </h5>\r\n                           <div className='pl-4 pr-4 border-1 border-gray rounded pt-3 mb-2'>\r\n                              <Row>\r\n                                 <Col md={6}>\r\n                                    <p>\r\n                                       <strong>Tên khách hàng: </strong>{' '}\r\n                                       {order.user.name}\r\n                                    </p>\r\n                                 </Col>\r\n                                 <Col md={6}>\r\n                                    <p>\r\n                                       <strong>Địa chỉ email: </strong>\r\n                                       <a\r\n                                          className='link-product'\r\n                                          href={`mailto: ${order.user.email}`}\r\n                                       >\r\n                                          {order.user.email}\r\n                                       </a>\r\n                                    </p>\r\n                                 </Col>\r\n                              </Row>\r\n                              <p>\r\n                                 <strong>Số điện thoại: </strong>\r\n                                 {formatPhoneNumber(\r\n                                    order.shippingAddress.numberPhone\r\n                                 )}\r\n                              </p>\r\n                              <p className='mb-3'>\r\n                                 <strong>Địa chỉ: </strong>\r\n                                 {order.shippingAddress.diaChi}\r\n                                 {' - '}\r\n                                 {order.shippingAddress.xa}\r\n                                 {' - '}\r\n                                 {order.shippingAddress.huyen}\r\n                                 {' - '}\r\n                                 {order.shippingAddress.thanhPho}.\r\n                              </p>\r\n                           </div>\r\n                           {\r\n                              order.isDelivered && (\r\n                                 <Announcement variant='success'>\r\n                                    Đã giao hàng vào lúc{' '}\r\n                                    {format(\r\n                                       new utcToZonedTime(\r\n                                          order.deliveredAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                       ),\r\n                                       'HH:mm:ss - dd/MM/yyyy',\r\n                                       { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                    )}\r\n                                 </Announcement>\r\n                              )\r\n                              // : (\r\n                              //   <Announcement variant='danger'>No Delivered</Announcement>\r\n                              // )}\r\n                           }\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                           <h5 className='text-uppercase'>\r\n                              Phương thức thanh toán\r\n                           </h5>\r\n                           <p className='pl-4'>\r\n                              <strong>Phương thức: </strong>\r\n                              {order.paymentMethod}\r\n                           </p>\r\n\r\n                           {\r\n                              order.isPaid && (\r\n                                 <Announcement\r\n                                    variant='success'\r\n                                    className='rounded-pill'\r\n                                 >\r\n                                    Đã thanh toán vào lúc{' '}\r\n                                    {format(\r\n                                       new utcToZonedTime(\r\n                                          order.paidAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                       ),\r\n                                       'HH:mm:ss - dd/MM/yyyy',\r\n                                       { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                    )}\r\n                                 </Announcement>\r\n                              )\r\n                              // : (\r\n                              //   <Announcement variant='danger'>No Paid</Announcement>\r\n                              // )\r\n                           }\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                           <h5 className='text-uppercase'>Giỏ hàng</h5>\r\n                           {order.orderItems.length === 0 ? (\r\n                              <Message>Giỏ hàng rỗng</Message>\r\n                           ) : (\r\n                              <ListGroup variant='flush'>\r\n                                 {order.orderItems.map((item, index) => (\r\n                                    <ListGroup.Item key={index}>\r\n                                       <Row>\r\n                                          <Col md={2}>\r\n                                             <Link\r\n                                                to={`/product/${item.product}`}\r\n                                                className='link-product'\r\n                                             >\r\n                                                <Image\r\n                                                   src={item.images[0].url}\r\n                                                   alt={item.name}\r\n                                                   fluid\r\n                                                   rounded\r\n                                                   className='border border-gray'\r\n                                                />\r\n                                             </Link>\r\n                                          </Col>\r\n\r\n                                          <Col\r\n                                             className='d-flex align-items-center'\r\n                                             md={4}\r\n                                          >\r\n                                             <Link\r\n                                                to={`/product/${item.product}`}\r\n                                                className='text-decoration-none d-flex align-items-center'\r\n                                             >\r\n                                                <p className='mb-0'>\r\n                                                   {item.name}\r\n                                                </p>\r\n                                             </Link>\r\n                                          </Col>\r\n\r\n                                          <Col\r\n                                             md={6}\r\n                                             className='d-flex align-items-center justify-content-center'\r\n                                          >\r\n                                             <h5 className='text-lowercase'>\r\n                                                {item.qty} x{' '}\r\n                                                {formatMoney(item.price, 'đ')}{' '}\r\n                                                {' = '}\r\n                                                {formatMoney(\r\n                                                   item.qty * item.price,\r\n                                                   'đ'\r\n                                                )}\r\n                                             </h5>\r\n                                          </Col>\r\n                                       </Row>\r\n                                    </ListGroup.Item>\r\n                                 ))}\r\n                              </ListGroup>\r\n                           )}\r\n                        </ListGroup.Item>\r\n                     </ListGroup>\r\n                  </Col>\r\n                  <Col md={4} style={{ zIndex: '1' }}>\r\n                     <Card className='border-0'>\r\n                        <ListGroup\r\n                           variant='flush'\r\n                           className='shadow mt-3 card_color p-1 border-order'\r\n                        >\r\n                           <ListGroup.Item>\r\n                              <h4 className='text-uppercase text-center'>\r\n                                 Chi tiết hoá đơn\r\n                              </h4>\r\n                              <Row className='mt-3'>\r\n                                 <Col md={8}>Tổng tiền sản phẩm</Col>\r\n                                 <Col md={4}>\r\n                                    <p className='mb-0'>\r\n                                       {formatMoney(order.itemsPrice, 'đ')}\r\n                                    </p>\r\n                                 </Col>\r\n                              </Row>\r\n                           </ListGroup.Item>\r\n                           <ListGroup.Item>\r\n                              <Row>\r\n                                 <Col md={8}>Phí vận chuyển</Col>\r\n                                 <Col md={4}>\r\n                                    <p className='mb-0'>\r\n                                       {formatMoney(order.shippingPrice, 'đ')}\r\n                                    </p>\r\n                                 </Col>\r\n                              </Row>\r\n                           </ListGroup.Item>\r\n\r\n                           <ListGroup.Item>\r\n                              <Row>\r\n                                 <Col md={8} className='text-danger'>\r\n                                    <h5 className='mb-0'>Tổng cộng</h5>\r\n                                 </Col>\r\n                                 <Col md={4}>\r\n                                    <h5 className='mb-0 text-danger text-lowercase'>\r\n                                       {formatMoney(order.totalPrice, 'đ')}\r\n                                    </h5>\r\n                                 </Col>\r\n                              </Row>\r\n                           </ListGroup.Item>\r\n\r\n                           {!order.isPaid &&\r\n                              order.orderStatus !== 'Huỷ' &&\r\n                              order.paymentMethod !==\r\n                                 'Thanh toán bằng tiền mặt' && (\r\n                                 <ListGroup.Item className='border-0'>\r\n                                    {loadingPay && <Loader />}\r\n                                    {!sdkReady ? (\r\n                                       <Loader />\r\n                                    ) : (\r\n                                       <PayPalButton\r\n                                          amount={order.totalPrice / 100}\r\n                                          onSuccess={successPaymentHandler}\r\n                                          className='rounded-pill'\r\n                                       />\r\n                                    )}\r\n                                 </ListGroup.Item>\r\n                              )}\r\n\r\n                           {loadingDeliver && <Loader />}\r\n                           {userInfo &&\r\n                              !order.isDelivered &&\r\n                              order.orderStatus === 'Đã giao hàng' && (\r\n                                 <ListGroup.Item className='border-0'>\r\n                                    <Button\r\n                                       type='button'\r\n                                       className='btn_color btn-block rounded-pill'\r\n                                       onClick={deliverHandler}\r\n                                    >\r\n                                       Đã giao hàng\r\n                                    </Button>\r\n                                 </ListGroup.Item>\r\n                              )}\r\n\r\n                           <ListGroup.Item className='border-0 p-0'>\r\n                              <ImagePay />\r\n                           </ListGroup.Item>\r\n                        </ListGroup>\r\n                     </Card>\r\n                  </Col>\r\n               </Row>\r\n            </>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default OrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Step.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js",["406","407","408","409","410"],"import { React, useState } from 'react'\r\nimport { Form, Button, Image, InputGroup } from 'react-bootstrap'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { ButtonBase, FormGroup, Input } from '@material-ui/core'\r\nimport SpeechRecognition, {\r\n  useSpeechRecognition,\r\n} from 'react-speech-recognition'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\n\r\nconst SearchBox = ({ history }) => {\r\n  const [keyword, setKeyword] = useState('')\r\n\r\n  const submitHandle = (e) => {\r\n    // setKeyword(transcript)\r\n    e.preventDefault()\r\n    if (keyword.trim()) {\r\n      if (keyword) {\r\n        history.push(`/search/${keyword}`)\r\n      } else {\r\n        history.push(`/search/${transcript}`)\r\n      }\r\n    } else {\r\n      history.push('/')\r\n    }\r\n  }\r\n\r\n  const { transcript, resetTranscript } = useSpeechRecognition()\r\n\r\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n    return null\r\n  }\r\n\r\n  const click = () => {\r\n    if (transcript) {\r\n      setKeyword(transcript)\r\n    }\r\n  }\r\n\r\n  const clear = () => {\r\n    setKeyword(' ')\r\n    resetTranscript()\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={submitHandle} inline>\r\n      <div className='d-flex align-items-center'>\r\n        <Form.Control\r\n          type='text'\r\n          name='q'\r\n          placeholder='Tìm kiếm sản phẩm.'\r\n          className='mr-sm-2 ml-sm-5 rounded-pill'\r\n          onChange={(e) => setKeyword(e.target.value)}\r\n          value={transcript ? transcript : keyword}\r\n          style={{ width: '30rem' }}\r\n        ></Form.Control>\r\n        <Button\r\n          variant='outline-light'\r\n          className='p-1 text-dark border-0'\r\n          style={{ marginLeft: '-14%', height: '2rem' }}\r\n          onClick={clear}\r\n        >\r\n          <ClearIcon />\r\n        </Button>\r\n\r\n        <Button\r\n          variant='outline-light'\r\n          onClick={SpeechRecognition.startListening}\r\n          className='p-1 text-dark border-0'\r\n          style={{ marginLeft: '-10%', fontSize: '1rem' }}\r\n        >\r\n          <i className='fa fa-microphone' />\r\n        </Button>\r\n      </div>\r\n\r\n      <Button\r\n        type='submit'\r\n        className='p-2 btn_color rounded-circle'\r\n        style={{ fontSize: '0.7rem', marginLeft: '-15%' }}\r\n        onClick={click}\r\n      >\r\n        <SearchIcon />\r\n      </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js",[],["411","412"],"F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js",["413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439"],"F:\\Code\\shopPro\\frontend\\src\\configAuth.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js",["440","441","442","443","444","445","446","447","448","449","450","451","452","453"],"import Step from '@material-ui/core/Step'\r\nimport StepConnector from '@material-ui/core/StepConnector'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Check from '@material-ui/icons/Check'\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport VideoLabelIcon from '@material-ui/icons/VideoLabel'\r\nimport CachedIcon from '@material-ui/icons/Cached'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping'\r\nimport EventAvailableIcon from '@material-ui/icons/EventAvailable'\r\n\r\nconst useQontoStepIconStyles = makeStyles({\r\n  root: {\r\n    color: '#eaeaf0',\r\n    display: 'flex',\r\n    height: 22,\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    color: '#784af4',\r\n  },\r\n  circle: {\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: '50%',\r\n    backgroundColor: 'currentColor',\r\n  },\r\n  completed: {\r\n    color: '#784af4',\r\n    zIndex: 1,\r\n    fontSize: 18,\r\n  },\r\n})\r\n\r\nfunction QontoStepIcon(props) {\r\n  const classes = useQontoStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n      })}\r\n    >\r\n      {completed ? (\r\n        <Check className={classes.completed} />\r\n      ) : (\r\n        <div className={classes.circle} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n}\r\n\r\nconst ColorlibConnector = withStyles({\r\n  alternativeLabel: {\r\n    top: 22,\r\n  },\r\n  active: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  completed: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  line: {\r\n    height: 3,\r\n    border: 0,\r\n    backgroundColor: '#eaeaf0',\r\n    borderRadius: 1,\r\n  },\r\n})(StepConnector)\r\n\r\nconst useColorlibStepIconStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: '#ccc',\r\n    zIndex: 1,\r\n    color: '#fff',\r\n    width: 50,\r\n    height: 50,\r\n    display: 'flex',\r\n    borderRadius: '50%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n  completed: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n})\r\n\r\nfunction ColorlibStepIcon(props) {\r\n  const classes = useColorlibStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  const icons = {\r\n    1: <CachedIcon style={{ fontSize: '1.8rem' }} />,\r\n    2: <LocalShippingIcon style={{ fontSize: '1.8rem' }} />,\r\n    3: <EventAvailableIcon style={{ fontSize: '1.8rem' }} />,\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n        [classes.completed]: completed,\r\n      })}\r\n    >\r\n      {icons[String(props.icon)]}\r\n    </div>\r\n  )\r\n}\r\n\r\nColorlibStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n  /**\r\n   * The label displayed in the step icon.\r\n   */\r\n  icon: PropTypes.node,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst ProgressShipping = () => {\r\n  const classes = useStyles()\r\n  const [activeStep, setActiveStep] = useState(0)\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  // const steps = getSteps()\r\n\r\n  const steps = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng']\r\n\r\n  const stepHandler = () => {\r\n    setActiveStep(1)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper\r\n        alternativeLabel\r\n        activeStep={steps.indexOf(order.orderStatus)}\r\n        connector={<ColorlibConnector />}\r\n      >\r\n        {steps.map((label) => (\r\n          <Step key={label} onChange={stepHandler}>\r\n            {order.orderStatus === label ? (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            ) : (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            )}\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressShipping\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\test.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js",["454","455","456","457","458","459","460","461","462","463","464","465","466","467"],"F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js",["468","469","470","471","472","473"],"import { BookOutlined, DollarOutlined } from '@ant-design/icons'\r\nimport Slider from '@material-ui/core/Slider'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { Menu } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listCategories } from '../actions/categoryAction'\r\nimport { Checkbox } from 'antd'\r\nimport { Col, Image, Row, Button, Form } from 'react-bootstrap'\r\nimport { filterPriceProduct, filterProduct } from '../actions/productActions'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nconst rootSubmenuKeys = ['sub1', 'sub2', 'sub4']\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 300,\r\n  },\r\n})\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    color: '#52af77',\r\n    height: 8,\r\n  },\r\n  thumb: {\r\n    height: 24,\r\n    width: 24,\r\n    backgroundColor: '#fff',\r\n    border: '2px solid currentColor',\r\n    marginTop: -8,\r\n    marginLeft: -12,\r\n    '&:focus, &:hover, &$active': {\r\n      boxShadow: 'inherit',\r\n    },\r\n  },\r\n  active: {},\r\n  valueLabel: {\r\n    left: 'calc(-50% + 4px)',\r\n  },\r\n  track: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n  rail: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n})(Slider)\r\n\r\nfunction valuetext(value) {\r\n  return `${value}`\r\n}\r\n\r\nconst FilterNav = () => {\r\n  const classes = useStyles()\r\n  const [value, setValue] = useState([0, 5000000])\r\n  const [cat, setCat] = useState([])\r\n  const [start, setStart] = useState('')\r\n  const [end, setEnd] = useState('')\r\n  const [openKeys, setOpenKeys] = React.useState(['sub1'])\r\n\r\n  const onOpenChange = (keys) => {\r\n    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1)\r\n    if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\r\n      setOpenKeys(keys)\r\n    } else {\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : [])\r\n    }\r\n  }\r\n  function ValueLabelComponent(props) {\r\n    const { children, open, value } = props\r\n\r\n    props.index === 1 ? setEnd(props.value) : setStart(props.value)\r\n\r\n    return (\r\n      <Tooltip\r\n        open={open}\r\n        enterTouchDelay={0}\r\n        placement='bottom'\r\n        title={value.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n      >\r\n        {children}\r\n      </Tooltip>\r\n    )\r\n  }\r\n\r\n  // console.log('end', end)\r\n  // console.log('start', start)\r\n\r\n  ValueLabelComponent.propTypes = {\r\n    children: PropTypes.element.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n  }\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue)\r\n  }\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const { loading, success, category } = categoriesList\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  function onChange(checkedValues) {\r\n    if (checkedValues.target.checked === true) {\r\n      setCat([...cat, checkedValues.target.value])\r\n    } else {\r\n      cat.map(\r\n        (e) => e === checkedValues.target.value && cat.splice(cat.indexOf(e), 1)\r\n      )\r\n      setCat([...cat])\r\n    }\r\n  }\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(filterProduct(cat))\r\n    dispatch(filterPriceProduct([start, end]))\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(listCategories())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={submitHandler}>\r\n        <div className='m-3 mb-0'>\r\n          <h5 className='justify-content-center mt-2 d-flex align-items-center'>\r\n            <Image\r\n              className='mr-2'\r\n              src='https://img.icons8.com/material-outlined/20/000000/filter--v1.png'\r\n            />\r\n            Bộ lọc tìm kiếm\r\n          </h5>\r\n\r\n          <Form.Group>\r\n            <strong className='mb-1 justify-content-center d-flex align-items-center mt-3 '>\r\n              <Image\r\n                className='pl-1 pr-1'\r\n                src='https://img.icons8.com/fluent/24/000000/us-dollar.png'\r\n              />\r\n              Tìm kiếm theo giá\r\n            </strong>\r\n            <div className='d-flex align-items-center justify-content-center mb-1'>\r\n              <p className='pr-1 mb-0'> Giá từ:</p>\r\n              <strong className='mb-0' style={{ letterSpacing: '0.08rem' }}>\r\n                {start.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'}\r\n                {\r\n                  <Image\r\n                    className='pl-1 pr-1'\r\n                    src='https://img.icons8.com/fluent/24/000000/resize-horizontal.png'\r\n                  />\r\n                }\r\n                {end.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'}\r\n              </strong>\r\n            </div>\r\n            <PrettoSlider\r\n              value={value}\r\n              onChange={handleChange}\r\n              ValueLabelComponent={ValueLabelComponent}\r\n              aria-labelledby='range-slider'\r\n              getAriaValueText={valuetext}\r\n              valueLabelDisplay='auto'\r\n              aria-label='pretto slider'\r\n              min={0}\r\n              step={50000}\r\n              max={5000000}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Menu\r\n              mode='inline'\r\n              openKeys={openKeys}\r\n              onOpenChange={onOpenChange}\r\n              style={{ width: 270 }}\r\n              className='border-0'\r\n            >\r\n              <SubMenu\r\n                key='sub2'\r\n                icon={<BookOutlined />}\r\n                title='Tìm kiếm theo danh mục'\r\n              >\r\n                {category &&\r\n                  category.map((cate, key) => (\r\n                    <Menu.Item key={key}>\r\n                      <Checkbox value={cate._id} onChange={onChange}>\r\n                        {cate.name}\r\n                      </Checkbox>\r\n                    </Menu.Item>\r\n                  ))}\r\n              </SubMenu>\r\n            </Menu>\r\n          </Form.Group>\r\n          <Form.Group className='text-center '>\r\n            <Button\r\n              type='submit'\r\n              size='normal'\r\n              variant='outline-dark rounded-pill p-1 pl-4 pr-4'\r\n              style={{ letterSpacing: '0.08rem', fontSize: '0.85rem' }}\r\n            >\r\n              Tìm kiếm\r\n            </Button>\r\n          </Form.Group>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FilterNav\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js",["474"],"import FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useState } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Bar, BarChart, CartesianGrid, Tooltip, XAxis, YAxis } from 'recharts'\r\nimport { consultOrder } from '../../actions/orderActions'\r\nimport Header from './components/Header'\r\nimport ListNumbers from './components/ListNumber'\r\nimport SideBar from './components/SideBar'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 150,\r\n   },\r\n}))\r\n\r\nfunction format(n, currency) {\r\n   return n?.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst AdminScreen = ({ history }) => {\r\n   const classes = useStyles()\r\n   const dispatch = useDispatch()\r\n\r\n   const [consult, setConsult] = useState('')\r\n\r\n   const orderConsult = useSelector((state) => state.orderConsult)\r\n   const { order } = orderConsult\r\n\r\n   const handleChange = (event) => {\r\n      setConsult(event.target.value)\r\n      dispatch(consultOrder({ values: event.target.value }))\r\n   }\r\n\r\n   const data = order?.orderFilters.map((cn) => ({\r\n      name: cn._id,\r\n      'Số đơn hàng': cn.count,\r\n      'Tổng doanh thu': cn.total,\r\n   }))\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col\r\n               md={10}\r\n               className='pl-0 pt-4'\r\n               style={{ backgroundColor: '#fff' }}\r\n            >\r\n               <h3 className='text-center'>Thống kê</h3>\r\n               <ListNumbers />\r\n               <div className='d-flex justify-content-end mr-4'>\r\n                  <FormControl\r\n                     className={classes.formControl}\r\n                     style={{ zIndex: '4' }}\r\n                  >\r\n                     <InputLabel id='demo-simple-select-label'>\r\n                        Xem theo:\r\n                     </InputLabel>\r\n                     <Select\r\n                        labelId='demo-simple-select-label'\r\n                        id='demo-simple-select'\r\n                        value={consult}\r\n                        onChange={handleChange}\r\n                        align='center'\r\n                        type='submit'\r\n                     >\r\n                        <MenuItem value={'day7Ago'}>7 ngày trước</MenuItem>\r\n                        <MenuItem value={'currentWeek'}>Tuần này</MenuItem>\r\n                        <MenuItem value={'monthAgo'}>Tháng trước</MenuItem>\r\n                        <MenuItem value={'currentMonth'}>Tháng này</MenuItem>\r\n                        <MenuItem value={'year'}>Cả năm</MenuItem>\r\n                     </Select>\r\n                  </FormControl>\r\n               </div>\r\n               <BarChart width={1100} height={500} data={data}>\r\n                  <XAxis\r\n                     dataKey='name'\r\n                     stroke='#334443'\r\n                     style={{ fontWeight: '700' }}\r\n                  />\r\n                  <YAxis />\r\n                  <Tooltip\r\n                     wrapperStyle={{\r\n                        width: 220,\r\n                        backgroundColor: '#ccc',\r\n                        fontSize: '0.9rem',\r\n                        fontWeight: '700',\r\n                     }}\r\n                  />\r\n\r\n                  <CartesianGrid\r\n                     stroke='#2e5a1c'\r\n                     // strokeDasharray='5 5'\r\n                     type='monotone'\r\n                  />\r\n                  <Bar dataKey={'Tổng doanh thu'} fill='#4e9525' barSize={20} />\r\n                  <Bar dataKey={'Số đơn hàng'} fill='#4e9525' barSize={1} />\r\n               </BarChart>\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default AdminScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js",["475","476","477","478","479","480","481","482","483","484","485","486","487"],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js",["488"],"import React, { useEffect, useState } from 'react'\r\nimport { Menu, Button } from 'antd'\r\nimport {\r\n   AppstoreOutlined,\r\n   MenuUnfoldOutlined,\r\n   MenuFoldOutlined,\r\n   PieChartOutlined,\r\n   DesktopOutlined,\r\n   ContainerOutlined,\r\n   MailOutlined,\r\n} from '@ant-design/icons'\r\nimport { Link } from '@material-ui/core'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nconst SideBar = () => {\r\n   const location = useLocation()\r\n\r\n   const [state, setState] = useState(false)\r\n   const [selectedKey, setSelectedKey] = useState('/')\r\n\r\n   useEffect(() => {\r\n      let path = location.pathname\r\n      if (path === '/') {\r\n         path = '/home'\r\n      }\r\n      setSelectedKey(path)\r\n   }, [location])\r\n\r\n   const toggleCollapsed = () => {\r\n      setState(!state)\r\n   }\r\n\r\n   console.log(selectedKey)\r\n\r\n   return (\r\n      <>\r\n         <div>\r\n            <Button\r\n               type='primary'\r\n               onClick={toggleCollapsed}\r\n               // style={{ marginBottom: 16 }}\r\n            >\r\n               {React.createElement(\r\n                  state ? MenuUnfoldOutlined : MenuFoldOutlined\r\n               )}\r\n            </Button>\r\n            <Menu\r\n               // defaultSelectedKeys={selectedKey}\r\n               defaultOpenKeys={['sub1', 'sub2', 'sub3']}\r\n               mode='inline'\r\n               theme='dark'\r\n               inlineCollapsed={state}\r\n               selectedKeys={selectedKey}\r\n               style={{ height: '100vh', backgroundColor: '#b68973' }}\r\n            >\r\n               <Menu.Item key='/admin' icon={<PieChartOutlined />}>\r\n                  <Link href='/admin' className='text-decoration-none '>\r\n                     Thống kê\r\n                  </Link>\r\n               </Menu.Item>\r\n               <Menu.Item key='/admin/userlist' icon={<DesktopOutlined />}>\r\n                  <Link href='/admin/userlist' className='text-decoration-none'>\r\n                     Người dùng\r\n                  </Link>\r\n               </Menu.Item>\r\n               <Menu.Item\r\n                  key='/admin/categorieslist'\r\n                  icon={<ContainerOutlined />}\r\n               >\r\n                  <Link\r\n                     href='/admin/categorieslist'\r\n                     className='text-decoration-none'\r\n                  >\r\n                     Danh mục\r\n                  </Link>\r\n               </Menu.Item>\r\n               <Menu.Item\r\n                  key='/admin/supplierlist'\r\n                  icon={<ContainerOutlined />}\r\n               >\r\n                  <Link\r\n                     href='/admin/supplierlist'\r\n                     className='text-decoration-none'\r\n                  >\r\n                     Nhà cung cấp\r\n                  </Link>\r\n               </Menu.Item>\r\n               <Menu.Item key='/admin/orderlist' icon={<ContainerOutlined />}>\r\n                  <Link\r\n                     href='/admin/orderlist'\r\n                     className='text-decoration-none'\r\n                  >\r\n                     Đơn hàng\r\n                  </Link>\r\n               </Menu.Item>\r\n               <SubMenu key='sub1' icon={<MailOutlined />} title='Sản phẩm'>\r\n                  <Menu.Item\r\n                     key='/admin/productlist'\r\n                     className='m-0 pb-2'\r\n                     // style={{ backgroundColor: '#587B7F' }}\r\n                  >\r\n                     <Link\r\n                        href='/admin/productlist'\r\n                        className='text-decoration-none'\r\n                     >\r\n                        Danh sách\r\n                     </Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                     key='/admin/product/create'\r\n                     className='m-0  pb-4'\r\n                     // style={{ backgroundColor: '#587B7F' }}\r\n                  >\r\n                     <Link\r\n                        href='/admin/product/create'\r\n                        className='text-decoration-none'\r\n                     >\r\n                        Thêm\r\n                     </Link>\r\n                  </Menu.Item>\r\n               </SubMenu>\r\n               {/* <SubMenu\r\n            key='sub2'\r\n            icon={<AppstoreOutlined />}\r\n            title='Navigation Two'\r\n          >\r\n            <Menu.Item key='9'>Option 9</Menu.Item>\r\n            <Menu.Item key='10'>Option 10</Menu.Item>\r\n            <SubMenu key='sub3' title='Submenu'>\r\n              <Menu.Item key='11'>Option 11</Menu.Item>\r\n              <Menu.Item key='12'>Option 12</Menu.Item>\r\n            </SubMenu>\r\n          </SubMenu> */}\r\n            </Menu>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default SideBar\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js",["489"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport { deleteUser, listUsers } from '../../actions/userActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  { id: 'email', numeric: true, disablePadding: false, label: 'ĐỊA CHỈ EMAIL' },\r\n  { id: 'isAdmin', numeric: true, disablePadding: false, label: 'ADMIN' },\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction UserListScreen({ history }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((user) => user._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userList = useSelector((state) => state.userList)\r\n  const { loading, error, users } = userList\r\n\r\n  const emptyRows =\r\n    users !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage)\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDelete = useSelector((state) => state.userDelete)\r\n  const { success: successDelete } = userDelete\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteUser(id))\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = users.find((user) => user._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>Danh sách tài khoản người dùng</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers())\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch, history, successDelete, userInfo])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 '>\r\n          {loading ? (\r\n            <Loader />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div className={classes.root}>\r\n                <Paper\r\n                  className={classes.paper}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={users.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(users, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((user, index) => {\r\n                            const isItemSelected = isSelected(user._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) =>\r\n                                  handleClick(event, user._id)\r\n                                }\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={user._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {user._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {user.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {user.email}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {' '}\r\n                                  {user.isAdmin ? (\r\n                                    <i\r\n                                      className='fas fa-check'\r\n                                      style={{ color: 'green' }}\r\n                                    ></i>\r\n                                  ) : (\r\n                                    <i\r\n                                      className='fas fa-times'\r\n                                      style={{ color: 'red' }}\r\n                                    ></i>\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/user/${user._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='info'\r\n                                      className='btn-sm rounded-pill'\r\n                                    >\r\n                                      <i className='far fa-edit'></i>\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={users.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js",["490","491"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n  createCategory,\r\n  deleteCategory,\r\n  listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst CategoriesListScreen = ({ history }) => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = category.map((cat) => cat._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n  const { loading, error, category } = categoriesListAdm\r\n\r\n  const categoryDelete = useSelector((state) => state.categoryDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = categoryDelete\r\n\r\n  const categoryCreate = useSelector((state) => state.categoryCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    category: createdProduct,\r\n  } = categoryCreate\r\n\r\n  const emptyRows =\r\n    category !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, category.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteCategory(id))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = category.find((cat) => cat._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH DANH MỤC</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listCategoriesAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createCategory(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingDelete && (\r\n              <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n            ) && <Loader />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n          {loadingCreate && (\r\n            <MessageSuccess\r\n              variant={'Đã thêm ' + name + ' thành công'}\r\n            ></MessageSuccess>\r\n          )}\r\n          {errorCreate && <Message>{errorCreate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Dialog\r\n                  disableBackdropClick\r\n                  disableEscapeKeyDown\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby='form-dialog-title'\r\n                  maxWidth='xl'\r\n                >\r\n                  <div className='d-flex justify-content-end'>\r\n                    <Button\r\n                      onClick={handleClose}\r\n                      className='p-1 m-1 rounded-pill'\r\n                      variant='light'\r\n                    >\r\n                      <Close />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <DialogContent style={{ width: '30rem' }}>\r\n                    <h4 className='text-center'>Tạo danh mục</h4>\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                          Tên danh mục\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='name'\r\n                          size='normal'\r\n                          placeholder='Enter name'\r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <div className='pl-3 pr-3 text-center'>\r\n                        <Button\r\n                          type='submit'\r\n                          size='sm'\r\n                          variant='outline-light'\r\n                          className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                          style={{\r\n                            fontSize: '1rem',\r\n                            letterSpacing: '0.25rem',\r\n                          }}\r\n                        >\r\n                          Tạo\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </DialogContent>\r\n                </Dialog>\r\n              </div>\r\n              <div className={classes.root}>\r\n                <div className='d-flex justify-content-end'>\r\n                  <Button\r\n                    variant='outline-light'\r\n                    className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                    onClick={handleClickOpen}\r\n                    size='normal'\r\n                  >\r\n                    <i className='fas fa-plus'></i> Tạo danh mục\r\n                  </Button>\r\n                </div>\r\n                <Paper\r\n                  className={classes.paper + 'shadow'}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={category.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(category, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((cat, index) => {\r\n                            const isItemSelected = isSelected(cat._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) => handleClick(event, cat._id)}\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={cat._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {cat._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {cat.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.createdAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.updatedAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - MM/dd/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/category/${cat._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-sm rounded-pill btn_color_details'\r\n                                    >\r\n                                      CHI TIẾT\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={category.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoriesListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js",["492","493"],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js",["494","495","496","497","498","499"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listCategoriesAdm } from '../../actions/categoryAction'\r\nimport { deleteFileImages, uploadFileImages } from '../../actions/cloudinary'\r\nimport { createProduct, newProduct } from '../../actions/productActions'\r\nimport { listSupplierAdm } from '../../actions/supplierActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { PRODUCT_CREATE_RESET } from '../../constants/productConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\nimport { CloseOutlined } from '@ant-design/icons'\r\n\r\nfunction formatPrice(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst ProductCreateScreen = () => {\r\n   const [name, setName] = useState('')\r\n   const [price, setPrice] = useState(0)\r\n   const [images, setImages] = useState([])\r\n   const [brand, setBrand] = useState('')\r\n   const [categoryy, setCategory] = useState('')\r\n   const [countInStock, setCountInStock] = useState(0)\r\n   const [description, setDescription] = useState('')\r\n   const [mass, setMass] = useState('')\r\n   const [hdsd, setHdsd] = useState('')\r\n   const [hdbq, setHdbq] = useState('')\r\n   const [supplierr, setSupplier] = useState('')\r\n   const [uploading, setUploading] = useState(false)\r\n   const [imagesPreview, setImagesPreview] = useState([])\r\n\r\n   const uploadFile = (e) => {\r\n      let files = e.target.files\r\n      let allImages = []\r\n      let preview = []\r\n      if (files) {\r\n         for (let i = 0; i < files.length; i++) {\r\n            preview.push(files[i].name)\r\n            Resizer.imageFileResizer(\r\n               files[i],\r\n               720,\r\n               720,\r\n               'JPEG',\r\n               100,\r\n               0,\r\n               (uri) => {\r\n                  try {\r\n                     uploadFileImages({ image: uri }).then((res) => {\r\n                        allImages.push(res.data)\r\n                        setImages(allImages)\r\n                     })\r\n                  } catch (error) {\r\n                     setUploading(false)\r\n                  }\r\n               }\r\n            )\r\n         }\r\n         console.log(allImages)\r\n      }\r\n   }\r\n\r\n   // const deleteFile = (e) => {\r\n   //    dispatch(deleteFileImages(e))\r\n   // }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const productCreate = useSelector((state) => state.productCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n   } = productCreate\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category } = categoriesList\r\n\r\n   const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n   const { supplier } = supplierListAdm\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n\r\n      dispatch(\r\n         createProduct({\r\n            name,\r\n            price,\r\n            description,\r\n            categoryy,\r\n            supplierr,\r\n            countInStock,\r\n            mass,\r\n            brand,\r\n            hdbq,\r\n            images,\r\n            hdsd,\r\n         })\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successCreate) {\r\n         dispatch({ type: PRODUCT_CREATE_RESET })\r\n      } else {\r\n         if (userInfo) {\r\n            dispatch(listCategoriesAdm())\r\n            dispatch(listSupplierAdm())\r\n         }\r\n      }\r\n   }, [dispatch, userInfo, successCreate])\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0 '>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 pr-4 '>\r\n               <>\r\n                  {/* {loadingCreate && (\r\n            <Announcement variant='success'> Thêm thành công</Announcement>\r\n          ) && <Loader />}\r\n        {errorCreate && <Announcement>{errorCreate}</Announcement>} */}\r\n                  {loadingCreate && (\r\n                     <MessageSuccess variant='Thêm thành công'></MessageSuccess>\r\n                  )}\r\n                  {loadingCreate ? (\r\n                     <Loader />\r\n                  ) : errorCreate ? (\r\n                     <Message>{errorCreate}</Message>\r\n                  ) : (\r\n                     <>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='bg-light border-0 pt-3 pb-3'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>Thêm sản phẩm</h2>\r\n\r\n                           <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Tên sản phẩm\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='name'\r\n                                 placeholder='Enter name'\r\n                                 value={name}\r\n                                 onChange={(e) => setName(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Ảnh\r\n                              </Form.Label>\r\n\r\n                              <Row>\r\n                                 <Col\r\n                                    md={6}\r\n                                    className='align-items-center d-flex'\r\n                                 >\r\n                                    <Form.File\r\n                                       className='border border-grey'\r\n                                       id='image-file'\r\n                                       label='Choose File'\r\n                                       custom\r\n                                       onChange={uploadFile}\r\n                                       multiple\r\n                                    ></Form.File>\r\n                                 </Col>\r\n                                 <Col md={6}>\r\n                                    <Row>\r\n                                       {images &&\r\n                                          images.map((img) => (\r\n                                             <Col md={3}>\r\n                                                <div>\r\n                                                   <Button\r\n                                                      className=''\r\n                                                      style={{\r\n                                                         // marginBottom: '-35%',\r\n                                                         zIndex: '5',\r\n                                                         color: 'black',\r\n                                                      }}\r\n                                                      size='sm'\r\n                                                      variant='outline-light'\r\n                                                      // onClick={deleteFile(\r\n                                                      //    images.public_id\r\n                                                      // )}\r\n                                                   >\r\n                                                      <CloseOutlined\r\n                                                         style={{\r\n                                                            fontSize: '1rem',\r\n                                                         }}\r\n                                                      />\r\n                                                   </Button>\r\n\r\n                                                   <Image\r\n                                                      src={img.url}\r\n                                                      className='rounded avatar_img'\r\n                                                      fluid\r\n                                                   />\r\n                                                </div>\r\n                                             </Col>\r\n                                          ))}\r\n                                    </Row>\r\n                                 </Col>\r\n                              </Row>\r\n                              {uploading && <Loader />}\r\n                           </Form.Group>\r\n\r\n                           <Row>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='brand'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Thể loại\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='text'\r\n                                       placeholder='Enter brand'\r\n                                       value={brand}\r\n                                       onChange={(e) =>\r\n                                          setBrand(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Số lượng trong kho\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={countInStock}\r\n                                       onChange={(e) =>\r\n                                          setCountInStock(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Danh mục\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={categoryy}\r\n                                       onChange={(e) =>\r\n                                          setCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {category &&\r\n                                          category.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='price'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Giá\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter price'\r\n                                       value={price}\r\n                                       onChange={(e) =>\r\n                                          setPrice(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Row>\r\n                              <Col md={6}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Khối lượng\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='text'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={mass}\r\n                                       onChange={(e) => setMass(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Nhà cung cấp\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={supplierr}\r\n                                       onChange={(e) =>\r\n                                          setSupplier(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {supplier &&\r\n                                          supplier.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Nội dung\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={description}\r\n                                 onChange={(e) =>\r\n                                    setDescription(e.target.value)\r\n                                 }\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn sử dụng\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdsd}\r\n                                 onChange={(e) => setHdsd(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn bảo quản\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdbq}\r\n                                 onChange={(e) => setHdbq(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Tạo\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </>\r\n                  )}\r\n               </>\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductCreateScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js",["500","501","502"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n  createSupplier,\r\n  deleteSupplier,\r\n  listSupplierAdm,\r\n} from '../../actions/supplierActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst SupplierListScreen = () => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = supplier.map((sup) => sup._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n  const { loading, error, supplier } = supplierListAdm\r\n\r\n  const supplierDelete = useSelector((state) => state.supplierDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = supplierDelete\r\n\r\n  const supplierCreate = useSelector((state) => state.supplierCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    supplier: createdProduct,\r\n  } = supplierCreate\r\n\r\n  const emptyRows =\r\n    supplier !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, supplier.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('Bạn có chắc?')) {\r\n      dispatch(deleteSupplier({ id }))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = supplier.find((cat) => cat._id)\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH NHÀ CUNG CẤP</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listSupplierAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  const submitHandlerDetails = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingDelete && (\r\n              <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n            ) && <Loader />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n          {loadingCreate && (\r\n            <MessageSuccess\r\n              variant={'Đã thêm ' + name + ' thành công'}\r\n            ></MessageSuccess>\r\n          )}\r\n          {errorCreate && <Message>{errorCreate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Dialog\r\n                  disableBackdropClick\r\n                  disableEscapeKeyDown\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby='form-dialog-title'\r\n                  maxWidth='xl'\r\n                >\r\n                  <div className='d-flex justify-content-end'>\r\n                    <Button\r\n                      onClick={handleClose}\r\n                      className='p-1 m-1 rounded-pill'\r\n                      variant='light'\r\n                    >\r\n                      <Close />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <DialogContent style={{ width: '30rem' }}>\r\n                    <h4 className='text-center'>Thêm nhà cung cấp</h4>\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                          Tên nhà cung cấp\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='name'\r\n                          size='normal'\r\n                          placeholder='Enter name'\r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <div className='pl-3 pr-3 text-center'>\r\n                        <Button\r\n                          type='submit'\r\n                          size='sm'\r\n                          variant='outline-light'\r\n                          className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                          style={{\r\n                            fontSize: '1rem',\r\n                            letterSpacing: '0.25rem',\r\n                          }}\r\n                        >\r\n                          Tạo\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </DialogContent>\r\n                </Dialog>\r\n              </div>\r\n\r\n              <div className={classes.root}>\r\n                <div className='d-flex justify-content-end'>\r\n                  <Button\r\n                    variant='outline-dark'\r\n                    className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                    onClick={handleClickOpen}\r\n                    size='normal'\r\n                  >\r\n                    <i className='fas fa-plus'></i> Thêm nhà cung cấp\r\n                  </Button>\r\n                </div>\r\n                <Paper className={classes.paper}>\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={supplier.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(supplier, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((sup, index) => {\r\n                            const isItemSelected = isSelected(sup._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) => handleClick(event, sup._id)}\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={sup._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {sup._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {sup.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      sup.createdAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      sup.updatedAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - MM/dd/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/supplier/${sup._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-sm rounded-pill btn_color_details'\r\n                                    >\r\n                                      CHI TIẾT\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={supplier.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js",["503","504","505"],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js",["506","507"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport {\r\n  getCategoryDetails,\r\n  updateCategory,\r\n} from '../../actions/categoryAction'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../../constants/categoriesConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nconst CategoryEditScreen = ({ match, history }) => {\r\n  const catId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const categoryDetails = useSelector((state) => state.categoryDetails)\r\n  const { loading, error, category } = categoryDetails\r\n\r\n  const categoryUpdate = useSelector((state) => state.categoryUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = categoryUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateCategory({ _id: catId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: CATEGORY_UPDATE_RESET })\r\n      history.push('/admin/categorieslist')\r\n    } else {\r\n      if (!category.name || category._id !== catId) {\r\n        dispatch(getCategoryDetails(catId))\r\n      } else {\r\n        setName(category.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, catId, category, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Row className='justify-content-center'>\r\n              <Col md={6}>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h2 className='text-center mb-4'>Chỉnh sửa danh mục</h2>\r\n                  <Form.Group>\r\n                    <Container>\r\n                      <Form.Label\r\n                        as='p'\r\n                        className='mb-1'\r\n                        style={{ fontSize: '1.5rem' }}\r\n                      >\r\n                        Tên danh mục\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        style={{ fontSize: '1.2rem' }}\r\n                        className='border border-grey rounded-pill'\r\n                        type='name'\r\n                        size='normal'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                      ></Form.Control>\r\n                    </Container>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn_color_created'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Cập nhật\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js",["508","509","510"],"import Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getOrderDetails, updateOrder } from '../../actions/orderActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport { ORDER_UPDATE_RESET } from '../../constants/orderConstants'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 500,\r\n   },\r\n}))\r\n\r\nconst OrderEditScreen = ({ match, history }) => {\r\n   const classes = useStyles()\r\n   const [open, setOpen] = React.useState(false)\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const handleOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const orderId = match.params.id\r\n\r\n   const orderDetails = useSelector((state) => state.orderDetails)\r\n   const { order, loading } = orderDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const orderUpdate = useSelector((state) => state.orderUpdate)\r\n   const {\r\n      loading: loadingUpdate,\r\n      error: errorUpdate,\r\n      success: successUpdate,\r\n   } = orderUpdate\r\n\r\n   const orderPay = useSelector((state) => state.orderPay)\r\n   const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n   const stateOrder = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng', 'Huỷ']\r\n   const [orderStatus, setOrderStatus] = useState('')\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateOrder({ _id: orderId, orderStatus }))\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successUpdate) {\r\n         dispatch({ type: ORDER_UPDATE_RESET })\r\n      } else {\r\n         dispatch(getOrderDetails(orderId))\r\n      }\r\n   }, [dispatch, orderId, successUpdate])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingUpdate && (\r\n                  <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n               )}\r\n               {errorUpdate && <Message>{errorUpdate}</Message>}\r\n               {loading ? (\r\n                  <Loader />\r\n               ) : (\r\n                  <Form onSubmit={submitHandler}>\r\n                     <ListGroup variant='flush' className='mt-3'>\r\n                        <ListGroup.Item className='border-0'>\r\n                           <div className='text-center'>\r\n                              <h3 className='pl-2'>CHI TIẾT ĐƠN HÀNG</h3>\r\n                           </div>\r\n                           <Row>\r\n                              <Col md={6}>\r\n                                 <p className='text-start'>\r\n                                    Mã đơn hàng: <strong>{order._id}</strong>\r\n                                 </p>\r\n                                 <p className='text-start'>\r\n                                    Tổng tiền:{' '}\r\n                                    <strong>{order.totalPrice}đ</strong>\r\n                                 </p>\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <FormControl className={classes.formControl}>\r\n                                    <InputLabel\r\n                                       id='demo-controlled-open-select-label'\r\n                                       style={{ fontSize: '1.2rem' }}\r\n                                    >\r\n                                       Trạng thái đơn hàng\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                       labelId='demo-controlled-open-select-label'\r\n                                       id='demo-controlled-open-select'\r\n                                       open={open}\r\n                                       onClose={handleClose}\r\n                                       onOpen={handleOpen}\r\n                                       value={\r\n                                          order.orderStatus\r\n                                             ? orderStatus\r\n                                             : order.orderStatus\r\n                                       }\r\n                                       onChange={(e) =>\r\n                                          setOrderStatus(e.target.value)\r\n                                       }\r\n                                       className='text-danger text-center text-uppercase'\r\n                                    >\r\n                                       {stateOrder.map((t) => (\r\n                                          <MenuItem\r\n                                             className='justify-content-center'\r\n                                             value={t}\r\n                                          >\r\n                                             {t}\r\n                                          </MenuItem>\r\n                                       ))}\r\n                                    </Select>\r\n                                 </FormControl>\r\n                              </Col>\r\n                           </Row>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item className='border-0'>\r\n                           <Row>\r\n                              <Col md={6} className='border-0'>\r\n                                 <Card\r\n                                    className='rounded card_color'\r\n                                    style={{\r\n                                       height: '13rem',\r\n                                       backgroundColor: '#F8F8F8',\r\n                                    }}\r\n                                 >\r\n                                    <CardContent>\r\n                                       <h5 className='border-bottom border-info text-info pb-1'>\r\n                                          Thông tin người nhận\r\n                                       </h5>\r\n                                       <div>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={4}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Địa chỉ:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={8}>\r\n                                                <strong>\r\n                                                   {order.user?.name}\r\n                                                </strong>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={4}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Tên khách hàng:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={8}>\r\n                                                <p className='mb-1'>\r\n                                                   {\r\n                                                      order.shippingAddress\r\n                                                         .diaChi\r\n                                                   }\r\n                                                   {' - '}\r\n                                                   {order.shippingAddress.xa}\r\n                                                   {' - '}\r\n                                                   {order.shippingAddress.huyen}\r\n                                                   {' - '}\r\n                                                   {\r\n                                                      order.shippingAddress\r\n                                                         .thanhPho\r\n                                                   }\r\n                                                   .\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={4}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Số điện thoại:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={8}>\r\n                                                <p className='mb-1'>\r\n                                                   {formatPhoneNumber(\r\n                                                      order.shippingAddress\r\n                                                         .numberPhone\r\n                                                   )}\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={4}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Email:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={8}>\r\n                                                <p className='mb-1'>\r\n                                                   {order.user?.email}\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                       </div>\r\n                                    </CardContent>\r\n                                 </Card>\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <Card\r\n                                    className='rounded card_color'\r\n                                    style={{\r\n                                       height: '13rem',\r\n                                       backgroundColor: '#F8F8F8',\r\n                                    }}\r\n                                 >\r\n                                    <CardContent>\r\n                                       <h5 className='border-bottom border-info text-info pb-1'>\r\n                                          Phương thức thanh toán\r\n                                       </h5>\r\n                                       <div>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={5}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Phương thức:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={7} className='pt-1'>\r\n                                                <strong\r\n                                                   className='mb-0 text-capitalize'\r\n                                                   style={{\r\n                                                      letterSpacing: '0.1rem',\r\n                                                   }}\r\n                                                >\r\n                                                   {order.paymentMethod}\r\n                                                </strong>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={5}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Thời gian thanh toán:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={7}>\r\n                                                <p className='mb-1'>\r\n                                                   {order.paymentMethod ===\r\n                                                      'Thanh toán bằng tiền mặt' &&\r\n                                                   order.isDelivered ? (\r\n                                                      <strong className='mb-0'>\r\n                                                         {format(\r\n                                                            new utcToZonedTime(\r\n                                                               order.deliveredAt,\r\n                                                               'Asia/Ho_Chi_Minh'\r\n                                                            ),\r\n                                                            'HH:mm:ss - dd/MM/yyyy',\r\n                                                            {\r\n                                                               timeZone:\r\n                                                                  'Asia/Ho_Chi_Minh',\r\n                                                            }\r\n                                                         )}\r\n                                                      </strong>\r\n                                                   ) : order.paymentMethod ===\r\n                                                     'Thanh toán bằng PayPal' ? (\r\n                                                      <strong className='mb-0'>\r\n                                                         {format(\r\n                                                            new utcToZonedTime(\r\n                                                               order.paidAt,\r\n                                                               'Asia/Ho_Chi_Minh'\r\n                                                            ),\r\n                                                            'HH:mm:ss - dd/MM/yyyy',\r\n                                                            {\r\n                                                               timeZone:\r\n                                                                  'Asia/Ho_Chi_Minh',\r\n                                                            }\r\n                                                         )}\r\n                                                      </strong>\r\n                                                   ) : (\r\n                                                      <div className='d-flex'>\r\n                                                         <strong className='text-danger mb-0'>\r\n                                                            Chưa thanh toán\r\n                                                         </strong>\r\n                                                      </div>\r\n                                                   )}\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={5}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Thời gian nhận hàng:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={7}>\r\n                                                {order.isDelivered ? (\r\n                                                   <strong className='mb-0'>\r\n                                                      {format(\r\n                                                         new utcToZonedTime(\r\n                                                            order.deliveredAt,\r\n                                                            'Asia/Ho_Chi_Minh'\r\n                                                         ),\r\n                                                         'HH:mm:ss - dd/MM/yyyy',\r\n                                                         {\r\n                                                            timeZone:\r\n                                                               'Asia/Ho_Chi_Minh',\r\n                                                         }\r\n                                                      )}\r\n                                                   </strong>\r\n                                                ) : (\r\n                                                   <div className='d-flex'>\r\n                                                      {/* <Image\r\n                                  src='https://img.icons8.com/fluent/24/000000/only-cash.png'\r\n                                  className='pr-1'\r\n                                /> */}\r\n                                                      <strong className='text-danger mb-0'>\r\n                                                         Chưa nhận hàng\r\n                                                      </strong>\r\n                                                   </div>\r\n                                                )}\r\n                                             </Col>\r\n                                          </Row>\r\n                                       </div>\r\n                                    </CardContent>\r\n                                 </Card>\r\n                              </Col>\r\n                           </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item className='border-0'>\r\n                           <h5\r\n                              className='pb-1'\r\n                              style={{ borderBottom: '0.04rem solid #ddd' }}\r\n                           >\r\n                              Giỏ hàng\r\n                           </h5>\r\n\r\n                           <div className='rounded mt-3'>\r\n                              {order.orderItems.map((item, index) => (\r\n                                 <div\r\n                                    key={index}\r\n                                    className='p-3 card_color shadow border mb-1'\r\n                                    style={{ backgroundColor: '#F8F8F8' }}\r\n                                 >\r\n                                    <Row>\r\n                                       <Col md={1} className='img_container'>\r\n                                          <Image\r\n                                             className='img_color'\r\n                                             src={item.images[0].url}\r\n                                             alt={item.name}\r\n                                             fluid\r\n                                             rounded\r\n                                          />\r\n                                       </Col>\r\n\r\n                                       <Col md={7} className='text-center'>\r\n                                          <Link\r\n                                             to={`/product/${item.product}`}\r\n                                             className='link-product fst-italic'\r\n                                          >\r\n                                             <p\r\n                                                style={{ fontSize: '1.1rem' }}\r\n                                                className='pt-3'\r\n                                             >\r\n                                                {item.name}\r\n                                             </p>\r\n                                          </Link>\r\n                                       </Col>\r\n\r\n                                       <Col md={4} className='text-center'>\r\n                                          <p\r\n                                             style={{ fontSize: '1.1rem' }}\r\n                                             className='pt-3 fst-italic'\r\n                                          >\r\n                                             {item.qty} x{' '}\r\n                                             {formatMoney(item.price, 'đ')}\r\n                                             {' = '}\r\n                                             {formatMoney(\r\n                                                item.qty * item.price,\r\n                                                'đ'\r\n                                             )}\r\n                                          </p>\r\n                                       </Col>\r\n                                    </Row>\r\n                                 </div>\r\n                              ))}\r\n                           </div>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item className='border-0'>\r\n                           <div\r\n                              className='d-flex justify-content-end '\r\n                              style={{ borderTop: '0.04rem solid #ddd' }}\r\n                           >\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light rounded-pill mt-4 btn_color_pink'\r\n                                 size='normal'\r\n                                 style={{\r\n                                    width: '14rem',\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                 }}\r\n                              >\r\n                                 DUYỆT\r\n                              </Button>\r\n                           </div>\r\n                        </ListGroup.Item>\r\n                     </ListGroup>\r\n                  </Form>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default OrderEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js",["511","512","513"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { listCategoriesAdm } from '../../actions/categoryAction'\r\nimport { listProductDetails, updateProduct } from '../../actions/productActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { PRODUCT_UPDATE_RESET } from '../../constants/productConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const {\r\n    loading: loadingCat,\r\n    error: errorCat,\r\n    category: categoryCat,\r\n  } = categoriesList\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      // history.push('/admin/productlist')\r\n    } else {\r\n      if (!product.name || product._id !== productId) {\r\n        if (userInfo) {\r\n          dispatch(listProductDetails(productId))\r\n          dispatch(listCategoriesAdm())\r\n        }\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInStock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, userInfo, history, productId, product, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          <Container>\r\n            {loadingUpdate && (\r\n                <MessageSuccess variant='Đã cập nhật thành công'></MessageSuccess>\r\n              ) && <Loader />}\r\n            {errorUpdate && <Message>{errorUpdate}</Message>}\r\n            {loading ? (\r\n              <Loader />\r\n            ) : error ? (\r\n              <Message>{error}</Message>\r\n            ) : (\r\n              <>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h2 className='text-center mb-4'>Cập nhật sản phẩm</h2>\r\n\r\n                  <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Name\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='name'\r\n                      placeholder='Enter name'\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Image\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey'\r\n                      type='text'\r\n                      placeholder='Enter image url'\r\n                      value={image}\r\n                      onChange={(e) => setImage(e.target.value)}\r\n                    ></Form.Control>\r\n                    <Form.File\r\n                      className='border border-grey'\r\n                      id='image-file'\r\n                      label='Choose File'\r\n                      custom\r\n                      onChange={uploadFileHandler}\r\n                    ></Form.File>\r\n                    {uploading && <Loader />}\r\n                  </Form.Group>\r\n\r\n                  <Row>\r\n                    <Col md={3}>\r\n                      <Form.Group controlId='brand' className='pl-3 pr-3'>\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Brand\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='text'\r\n                          placeholder='Enter brand'\r\n                          value={brand}\r\n                          onChange={(e) => setBrand(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group\r\n                        controlId='countInStock'\r\n                        className='pl-3 pr-3'\r\n                      >\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Count In Stock\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill text-center'\r\n                          type='number'\r\n                          placeholder='Enter countInStock'\r\n                          value={countInStock}\r\n                          onChange={(e) => setCountInStock(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group controlId='category' className='pl-3 pr-3'>\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Category\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill '\r\n                          type='text'\r\n                          as='select'\r\n                          placeholder='Enter category'\r\n                          value={category}\r\n                          onChange={(e) => setCategory(e.target.value)}\r\n                        >\r\n                          <option></option>\r\n                          {categoryCat &&\r\n                            categoryCat.map((cat, index) => (\r\n                              <option\r\n                                style={{ color: 'black' }}\r\n                                key={index}\r\n                                value={cat._id}\r\n                              >\r\n                                {cat.name}\r\n                              </option>\r\n                            ))}\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group controlId='price' className='pl-3 pr-3'>\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Price\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill text-center'\r\n                          type='number'\r\n                          placeholder='Enter price'\r\n                          value={price}\r\n                          onChange={(e) => setPrice(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Form.Group controlId='description' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Description\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='text'\r\n                      rows={3}\r\n                      as='textarea'\r\n                      placeholder='Enter description'\r\n                      value={description}\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      variant='outline-success'\r\n                      className='rounded-pill'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Container>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js",["514"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {\r\n  getSupplierDetails,\r\n  updateSupplier,\r\n} from '../../actions/supplierActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { SUPPLIER_UPDATE_RESET } from '../../constants/supplierConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nconst SupplierEditScreen = ({ history, match }) => {\r\n  const supId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const supplierDetails = useSelector((state) => state.supplierDetails)\r\n  const { loading, error, supplier } = supplierDetails\r\n\r\n  const supplierUpdate = useSelector((state) => state.supplierUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = supplierUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateSupplier({ _id: supId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: SUPPLIER_UPDATE_RESET })\r\n      history.push('/admin/supplierlist')\r\n    } else {\r\n      if (!supplier.name || supplier._id !== supId) {\r\n        dispatch(getSupplierDetails(supId))\r\n      } else {\r\n        setName(supplier.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, supId, supplier, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Row className='justify-content-center'>\r\n              <Col md={6}>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h3 className='text-center mb-4'>\r\n                    Chỉnh sửa thông tin nhà cung cấp\r\n                  </h3>\r\n                  <Form.Group>\r\n                    <Container>\r\n                      <Form.Label\r\n                        as='p'\r\n                        className='mb-1'\r\n                        style={{ fontSize: '1rem' }}\r\n                      >\r\n                        Tên nhà cung cấp\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        style={{ fontSize: '1rem' }}\r\n                        className='border border-grey rounded-pill'\r\n                        type='name'\r\n                        size='sm'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                      ></Form.Control>\r\n                    </Container>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      size='sm'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn_color_created'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Cập nhật\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js",["515","516","517"],"import { Switch } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../../actions/userActions'\r\nimport FormContainer from '../../components/FormContainer'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { USER_UPDATE_RESET } from '../../constants/userConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const [state, setState] = useState(false)\r\n\r\n  const handleChange = () => {\r\n    setState(!state)\r\n  }\r\n\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin, password }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          <div className='d-flex justify-content-center'>\r\n            {loadingUpdate && <Loader /> && (\r\n              <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n            )}\r\n            {errorUpdate && <Message>{errorUpdate}</Message>}\r\n            {loading ? (\r\n              <Loader />\r\n            ) : (\r\n              <Form\r\n                onSubmit={submitHandler}\r\n                className='bg-light p-3 card_color '\r\n                style={{ width: '50rem' }}\r\n              >\r\n                <h2 className='mt-3 text-center'>Cập nhật người dùng</h2>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='name'>\r\n                      <Form.Label>\r\n                        <strong>Tên</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='name'\r\n                        placeholder='Nhập tên'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        className='rounded-pill border-1'\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='email'>\r\n                      <Form.Label>\r\n                        <strong>Địa chỉ email</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='email'\r\n                        placeholder='Enter email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        className='rounded-pill border-1'\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Form.Group\r\n                  controlId='idAdmin'\r\n                  className='d-flex justify-content-start'\r\n                >\r\n                  <Form.Check\r\n                    type='checkbox'\r\n                    label='Người quản lí'\r\n                    size='lg'\r\n                    checked={isAdmin}\r\n                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                  ></Form.Check>\r\n                </Form.Group>\r\n                <div className='d-flex align-items-center'>\r\n                  <Switch\r\n                    value={state}\r\n                    onChange={handleChange}\r\n                    color='secondary'\r\n                    name='checkedB'\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                  />\r\n                  {state === true ? (\r\n                    <p className='mb-0' style={{ opacity: '1' }}>\r\n                      <strong>Đổi mật khẩu</strong>\r\n                      <Image\r\n                        style={{ opacity: '1' }}\r\n                        src='https://img.icons8.com/fluent/32/000000/unlock-2.png'\r\n                      />\r\n                    </p>\r\n                  ) : (\r\n                    <p className='mb-0' style={{ opacity: '0.7' }}>\r\n                      Đổi mật khẩu\r\n                      <Image\r\n                        style={{ opacity: '1' }}\r\n                        src='https://img.icons8.com/fluent/32/000000/lock-2.png'\r\n                      />\r\n                    </p>\r\n                  )}\r\n                </div>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='password' fluid>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Mật khẩu mới</strong>\r\n                      </Form.Label>\r\n                      {state === true ? (\r\n                        <>\r\n                          <Form.Control\r\n                            className='border-1 border-grey rounded-pill '\r\n                            type='password'\r\n                            placeholder='Nhập mật khẩu mới'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                          ></Form.Control>\r\n                        </>\r\n                      ) : (\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill '\r\n                          type='password'\r\n                          placeholder='Nhập mật khẩu mới'\r\n                          value={password}\r\n                          onChange={(e) => setPassword(e.target.value)}\r\n                          disabled\r\n                          // style={{ visibility: 'hidden' }}\r\n                        ></Form.Control>\r\n                      )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='password'>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Nhập lại mật khẩu</strong>\r\n                      </Form.Label>\r\n                      {state === true ? (\r\n                        <>\r\n                          <Form.Control\r\n                            className='border-1 border-grey rounded-pill'\r\n                            type='password'\r\n                            placeholder='Nhập lại mật khẩu'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                          ></Form.Control>\r\n                        </>\r\n                      ) : (\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill'\r\n                          type='password'\r\n                          placeholder='Nhập lại mật khẩu'\r\n                          value={confirmPassword}\r\n                          onChange={(e) => setConfirmPassword(e.target.value)}\r\n                          disabled\r\n                          // style={{ visibility: 'hidden' }}\r\n                        ></Form.Control>\r\n                      )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n                <div className='pl-3 pr-3 text-center'>\r\n                  <Button\r\n                    type='submit'\r\n                    variant='outline-light'\r\n                    className='rounded-pill btn_color_created'\r\n                    style={{\r\n                      fontSize: '1rem',\r\n                      letterSpacing: '0.25rem',\r\n                      width: '15rem',\r\n                    }}\r\n                  >\r\n                    Cập nhật\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\cloudinary.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\ListNumber.js",["518","519","520","521","522"],"import { Button } from '@material-ui/core'\r\nimport React, { useEffect } from 'react'\r\nimport { Card, Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listOrders } from '../../../actions/orderActions'\r\nimport { listAllProduct, listProducts } from '../../../actions/productActions'\r\nimport { listSupplierAdm } from '../../../actions/supplierActions'\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst ListNumbers = ({ history }) => {\r\n   const dispatch = useDispatch()\r\n\r\n   const productListAll = useSelector((state) => state.productListAll)\r\n   const { products } = productListAll\r\n\r\n   const orderConsult = useSelector((state) => state.orderConsult)\r\n   const { order } = orderConsult\r\n\r\n   const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n   const { supplier } = supplierListAdm\r\n\r\n   const orderList = useSelector((state) => state.orderList)\r\n   const { ordersList } = orderList\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   let outOfStock = 0\r\n   let productOut = []\r\n   products.map((product) => {\r\n      if (product.countInStock == 0) {\r\n         productOut.push(product)\r\n         outOfStock += 1\r\n      }\r\n   })\r\n\r\n   useEffect(() => {\r\n      if (!userInfo.isAdmin) {\r\n         history.push('/login')\r\n      }\r\n\r\n      if (userInfo) {\r\n         dispatch(listOrders())\r\n         dispatch(listAllProduct())\r\n         dispatch(listSupplierAdm())\r\n      }\r\n   }, [dispatch, history, userInfo])\r\n\r\n   return (\r\n      <div>\r\n         <Row className='p-3 '>\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Tổng số đơn hàng</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className='mb-3  pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số đơn hàng đã được đặt\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>\r\n                           {ordersList && ordersList.orders?.length}\r\n                        </h1>\r\n                     </Card.Title>\r\n                     <Card.Subtitle className='mb-2 text-center'>\r\n                        <h5 className='text-secondary'>Đơn hàng</h5>\r\n                     </Card.Subtitle>\r\n                     <Card.Link\r\n                        href='/admin/orderlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>Chi tiết</strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Doanh thu</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className='mb-4 mt-4 pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số doanh thu từ các đơn hàng\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center mb-4'>\r\n                        <h2\r\n                           style={{ fontSize: '1.4rem' }}\r\n                           className='text-lowercase'\r\n                        >\r\n                           {ordersList?.totalAmount &&\r\n                              formatMoney(ordersList?.totalAmount, 'đ')}\r\n                        </h2>\r\n                     </Card.Title>\r\n\r\n                     <Card.Link\r\n                        href='/admin/orderlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>\r\n                              {' '}\r\n                              Chi tiết\r\n                           </strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Tổng số sản phẩm</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className=' pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số sản phẩm đang được bày bán\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>\r\n                           {products && products.length}\r\n                        </h1>\r\n                     </Card.Title>\r\n                     <Card.Subtitle className='mb-2 text-center'>\r\n                        <h5 className='text-secondary'>Sản phẩm</h5>\r\n                     </Card.Subtitle>\r\n                     <Card.Link\r\n                        href='/admin/productlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>Chi tiết</strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n                  text='light'\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Tổng số sản phẩm hết hàng</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className='mb-3 pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số sản phẩm hết hàng\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>{outOfStock}</h1>\r\n                     </Card.Title>\r\n                     <Card.Subtitle className='mb-1 text-center'>\r\n                        <h5 className='text-secondary'>Sản phẩm</h5>\r\n                     </Card.Subtitle>\r\n                     <Card.Link\r\n                        href='/admin/productlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>Chi tiết</strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </Row>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ListNumbers\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\notificationsAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\NotificationsDropDown.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UsersAddressListScreen.js",["523"],"import Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport Link from '@material-ui/core/Link'\r\nimport { Close } from '@material-ui/icons'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n   createAddressUser,\r\n   deleteAddressUser,\r\n   getUserDetails,\r\n   selectRoleAddressUser,\r\n   updateAddressUser,\r\n} from '../actions/userActions'\r\nimport Announcement from '../components/Announcement.js'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Message from '../components/Message'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport data from '../data.json'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nconst UsersAddressListScreen = ({ history }) => {\r\n   const [thanhPho, setThanhPho] = useState('')\r\n   const [huyen, setHuyen] = useState('')\r\n   const [xa, setXa] = useState('')\r\n   const [diaChi, setDiachi] = useState('')\r\n   const [numberPhone, setNumberPhone] = useState('')\r\n   const [open, setOpen] = useState(false)\r\n   const [openEdit, setOpenEdit] = useState(false)\r\n   const [idAddress, setIdAddress] = useState('')\r\n\r\n   const addressUser = { thanhPho, huyen, xa, diaChi, numberPhone }\r\n   const updateInformationAddress = {\r\n      idAddress,\r\n      thanhPho,\r\n      huyen,\r\n      xa,\r\n      diaChi,\r\n      numberPhone,\r\n   }\r\n\r\n   const handleClickOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const handleClickOpenEdit = (id) => {\r\n      setOpenEdit(true)\r\n      setIdAddress(id)\r\n   }\r\n\r\n   const handleCloseEdit = () => {\r\n      setOpenEdit(false)\r\n   }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   const userDeleteAddress = useSelector((state) => state.userDeleteAddress)\r\n   const { success: successDeleteAddress } = userDeleteAddress\r\n\r\n   const userCreateAddress = useSelector((state) => state.userCreateAddress)\r\n   const { success: successCreateAddress } = userCreateAddress\r\n\r\n   const userSelectRole = useSelector((state) => state.userSelectRole)\r\n   const { success: successSelectRole } = userSelectRole\r\n\r\n   const userUpdateAddress = useSelector((state) => state.userUpdateAddress)\r\n   const { success: successUpdateAddress } = userUpdateAddress\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push('/login')\r\n      } else {\r\n         if (\r\n            successDeleteAddress ||\r\n            successCreateAddress ||\r\n            successSelectRole ||\r\n            successUpdateAddress\r\n         ) {\r\n            setOpen(false)\r\n            setOpenEdit(false)\r\n\r\n            dispatch(getUserDetails('profile'))\r\n         }\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [\r\n      history,\r\n      dispatch,\r\n      successDeleteAddress,\r\n      successCreateAddress,\r\n      successSelectRole,\r\n      successUpdateAddress,\r\n   ])\r\n\r\n   const deleteAddress = (id) => {\r\n      dispatch(deleteAddressUser({ id: id }))\r\n   }\r\n\r\n   const createAddress = (e) => {\r\n      e.preventDefault()\r\n      dispatch(createAddressUser(addressUser))\r\n   }\r\n\r\n   const selectRole = (id, role) => {\r\n      dispatch(selectRoleAddressUser({ id: id, role: role }))\r\n   }\r\n\r\n   const updateAddress = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateAddressUser(updateInformationAddress))\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n\r\n         {loading ? (\r\n            <SkeletonEffect />\r\n         ) : error ? (\r\n            <Message variant='danger'>{error}</Message>\r\n         ) : (\r\n            <>\r\n               <div>\r\n                  <Dialog\r\n                     maxWidth='xl'\r\n                     open={open}\r\n                     onClose={handleClose}\r\n                     aria-labelledby='form-dialog-title'\r\n                  >\r\n                     <div className='d-flex justify-content-end'>\r\n                        <Button\r\n                           onClick={handleClose}\r\n                           className='p-1 m-1 rounded-pill'\r\n                           variant='light'\r\n                        >\r\n                           <Close />\r\n                        </Button>\r\n                     </div>\r\n                     <h4 id='form-dialog-title' className='text-center p-3'>\r\n                        Thêm địa chỉ mới\r\n                     </h4>\r\n                     <DialogContent style={{ width: '35rem' }}>\r\n                        <Form\r\n                           onSubmit={createAddress}\r\n                           className='mt-2 border-0 mb-2'\r\n                        >\r\n                           <Form.Group controlId='address'>\r\n                              <Form.Label as='p' className='mb-1 mt-2'>\r\n                                 <strong>Thành Phố / Tỉnh</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 placeholder='Enter address'\r\n                                 value={thanhPho}\r\n                                 onChange={(e) => setThanhPho(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>\r\n                                    Vui lòng chọn thành phố/tỉnh...\r\n                                 </option>\r\n                                 {data.map((tp) => (\r\n                                    <option\r\n                                       style={{ color: 'black' }}\r\n                                       key={tp.Id}\r\n                                       value={tp.Name}\r\n                                    >\r\n                                       {tp.Name}\r\n                                    </option>\r\n                                 ))}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='city'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong> Quận / Huyện</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 placeholder='Enter city'\r\n                                 value={huyen}\r\n                                 onChange={(e) => setHuyen(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>Vui lòng chọn quận/huyện...</option>\r\n                                 {data.map(\r\n                                    (a) =>\r\n                                       a.Name === thanhPho &&\r\n                                       a.Districts.map((b) => (\r\n                                          <option\r\n                                             key={b.Id}\r\n                                             style={{ color: 'black' }}\r\n                                             value={b.Name}\r\n                                          >\r\n                                             {b.Name}\r\n                                          </option>\r\n                                       ))\r\n                                 )}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='postalCode'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Phường / Xã</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 required\r\n                                 placeholder='Enter postalCode'\r\n                                 value={xa}\r\n                                 onChange={(e) => setXa(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>\r\n                                    Vui lòng chọn thành xã/phường...\r\n                                 </option>\r\n                                 {data.map(\r\n                                    (a) =>\r\n                                       a.Name === thanhPho &&\r\n                                       a.Districts.map(\r\n                                          (b) =>\r\n                                             b.Name === huyen &&\r\n                                             b.Wards.map((c) => (\r\n                                                <option\r\n                                                   style={{ color: 'black' }}\r\n                                                >\r\n                                                   {c.Name}\r\n                                                </option>\r\n                                             ))\r\n                                       )\r\n                                 )}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='country'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Địa chỉ chi tiết</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 placeholder='Enter country'\r\n                                 value={diaChi}\r\n                                 onChange={(e) => setDiachi(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='country'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Số điện thoại</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 placeholder='Enter country'\r\n                                 value={formatPhoneNumber(numberPhone)}\r\n                                 onChange={(e) =>\r\n                                    setNumberPhone(e.target.value)\r\n                                 }\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <div className='d-flex justify-content-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 className='btn_color rounded-pill text-center'\r\n                                 style={{ width: '15rem' }}\r\n                              >\r\n                                 Tạo\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </DialogContent>\r\n                  </Dialog>\r\n               </div>\r\n               <div>\r\n                  <Dialog\r\n                     maxWidth='xl'\r\n                     open={openEdit}\r\n                     onClose={handleCloseEdit}\r\n                     aria-labelledby='form-dialog-title'\r\n                  >\r\n                     <div className='d-flex justify-content-end'>\r\n                        <Button\r\n                           onClick={handleCloseEdit}\r\n                           className='p-1 m-1 rounded-pill'\r\n                           variant='light'\r\n                        >\r\n                           <Close />\r\n                        </Button>\r\n                     </div>\r\n                     <h4 id='form-dialog-title' className='text-center p-3'>\r\n                        Sửa thông tin địa chỉ\r\n                     </h4>\r\n                     <DialogContent style={{ width: '35rem' }}>\r\n                        <Form\r\n                           onSubmit={updateAddress}\r\n                           className='mt-2 border-0 mb-2'\r\n                        >\r\n                           <Form.Group controlId='address'>\r\n                              <Form.Label as='p' className='mb-1 mt-2'>\r\n                                 <strong>Thành Phố / Tỉnh</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 placeholder='Enter address'\r\n                                 value={thanhPho}\r\n                                 onChange={(e) => setThanhPho(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>\r\n                                    Vui lòng chọn thành phố/tỉnh...\r\n                                 </option>\r\n                                 {data.map((tp) => (\r\n                                    <option\r\n                                       style={{ color: 'black' }}\r\n                                       key={tp.Id}\r\n                                       value={tp.Name}\r\n                                    >\r\n                                       {tp.Name}\r\n                                    </option>\r\n                                 ))}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='city'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong> Quận / Huyện</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 placeholder='Enter city'\r\n                                 value={huyen}\r\n                                 onChange={(e) => setHuyen(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>Vui lòng chọn quận/huyện...</option>\r\n                                 {data.map(\r\n                                    (a) =>\r\n                                       a.Name === thanhPho &&\r\n                                       a.Districts.map((b) => (\r\n                                          <option\r\n                                             key={b.Id}\r\n                                             style={{ color: 'black' }}\r\n                                             value={b.Name}\r\n                                          >\r\n                                             {b.Name}\r\n                                          </option>\r\n                                       ))\r\n                                 )}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='postalCode'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Phường / Xã</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 required\r\n                                 placeholder='Enter postalCode'\r\n                                 value={xa}\r\n                                 onChange={(e) => setXa(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>\r\n                                    Vui lòng chọn thành xã/phường...\r\n                                 </option>\r\n                                 {data.map(\r\n                                    (a) =>\r\n                                       a.Name === thanhPho &&\r\n                                       a.Districts.map(\r\n                                          (b) =>\r\n                                             b.Name === huyen &&\r\n                                             b.Wards.map((c) => (\r\n                                                <option\r\n                                                   style={{ color: 'black' }}\r\n                                                >\r\n                                                   {c.Name}\r\n                                                </option>\r\n                                             ))\r\n                                       )\r\n                                 )}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='country'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Địa chỉ chi tiết</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 placeholder='Enter country'\r\n                                 value={diaChi}\r\n                                 onChange={(e) => setDiachi(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='country'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Số điện thoại</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 placeholder='Enter country'\r\n                                 value={formatPhoneNumber(numberPhone)}\r\n                                 onChange={(e) =>\r\n                                    setNumberPhone(e.target.value)\r\n                                 }\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <div className='d-flex justify-content-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 className='btn_color rounded-pill text-center'\r\n                                 style={{ width: '15rem' }}\r\n                              >\r\n                                 Cập nhật\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </DialogContent>\r\n                  </Dialog>\r\n               </div>\r\n               <Container className='mt-4 mb-4 card_color shadow p-4'>\r\n                  <div\r\n                     className='text-center pb-3 d-flex justify-content-between align-items-center'\r\n                     style={{ borderBottom: '0.1rem solid #ddd' }}\r\n                  >\r\n                     <h4>Danh sách địa chỉ</h4>\r\n                     <Button\r\n                        className='btn_color_created rounded-pill'\r\n                        variant='outline-light'\r\n                        size='sm'\r\n                        onClick={handleClickOpen}\r\n                        disabled={user.address && user?.address.length === 5}\r\n                     >\r\n                        <i className='fas fa-plus pr-1'></i>Thêm địa chỉ mới\r\n                     </Button>\r\n                  </div>\r\n                  {user.address && user?.address.length === 5 && (\r\n                     <Announcement\r\n                        variant='warning'\r\n                        className='d-flex justify-content-center'\r\n                     >\r\n                        Danh sách địa chỉ đã đầy. Nếu bạn muốn thêm một địa chỉ\r\n                        mới, xin vui lòng xoá địa chỉ không cần thiết. Xin cảm\r\n                        ơn!\r\n                     </Announcement>\r\n                  )}\r\n                  {user.address?.map((add) => (\r\n                     <div\r\n                        className='p-3 mt-1 mb-1'\r\n                        style={{ borderBottom: '0.1rem solid #ddd' }}\r\n                     >\r\n                        <Row className='mb-2'>\r\n                           <Col md={3} className='d-flex align-items-center '>\r\n                              <strong>Số điện thoại</strong>\r\n                           </Col>\r\n                           <Col\r\n                              md={7}\r\n                              style={{ fontSize: '0.9rem' }}\r\n                              className='d-flex align-items-center'\r\n                           >\r\n                              {formatPhoneNumber(add.numberPhone)}\r\n                           </Col>\r\n                           <Col md={1} className='d-flex align-items-center '>\r\n                              <Link>\r\n                                 <Button\r\n                                    variant='outline-warning'\r\n                                    size='sm'\r\n                                    className='rounded-pill'\r\n                                    onClick={() => handleClickOpenEdit(add._id)}\r\n                                 >\r\n                                    Sửa\r\n                                 </Button>\r\n                              </Link>\r\n                           </Col>\r\n                           <Col md={1}>\r\n                              <Button\r\n                                 variant='outline-danger'\r\n                                 size='sm'\r\n                                 className='rounded-pill'\r\n                                 onClick={() => deleteAddress(add._id)}\r\n                              >\r\n                                 Xoá\r\n                              </Button>\r\n                           </Col>\r\n                        </Row>\r\n                        <Row className='button_select_default'>\r\n                           <Col md={3} className='d-flex align-items-center'>\r\n                              <strong>Địa chỉ liên hệ</strong>\r\n                           </Col>\r\n                           <Col\r\n                              md={7}\r\n                              style={{ fontSize: '0.9rem' }}\r\n                              className='d-flex align-items-center'\r\n                           >\r\n                              {add.diaChi} {' - '} {add.xa} {' - '} {add.huyen}{' '}\r\n                              {' - '}\r\n                              {add.thanhPho}.\r\n                           </Col>\r\n                           <Col md={2} className='text-center'>\r\n                              <Button\r\n                                 size='sm'\r\n                                 variant='outline-dark'\r\n                                 className='rounded-pill btn-block select_default'\r\n                                 disabled={add.role === true}\r\n                                 onClick={() => selectRole(add._id, true)}\r\n                              >\r\n                                 Thiết lập mặc định\r\n                              </Button>\r\n                           </Col>\r\n                        </Row>\r\n                     </div>\r\n                  ))}\r\n               </Container>\r\n            </>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default UsersAddressListScreen\r\n",{"ruleId":"524","replacedBy":"525"},{"ruleId":"526","replacedBy":"527"},{"ruleId":"528","severity":1,"message":"529","line":48,"column":12,"nodeType":"530","messageId":"531","endLine":48,"endColumn":16},{"ruleId":"528","severity":1,"message":"532","line":22,"column":41,"nodeType":"530","messageId":"531","endLine":22,"endColumn":52},{"ruleId":"528","severity":1,"message":"533","line":31,"column":7,"nodeType":"530","messageId":"531","endLine":31,"endColumn":17},{"ruleId":"528","severity":1,"message":"534","line":51,"column":7,"nodeType":"530","messageId":"531","endLine":51,"endColumn":21},{"ruleId":"528","severity":1,"message":"535","line":106,"column":10,"nodeType":"530","messageId":"531","endLine":106,"endColumn":20},{"ruleId":"528","severity":1,"message":"536","line":108,"column":11,"nodeType":"530","messageId":"531","endLine":108,"endColumn":19},{"ruleId":"528","severity":1,"message":"537","line":111,"column":10,"nodeType":"530","messageId":"531","endLine":111,"endColumn":21},{"ruleId":"528","severity":1,"message":"538","line":115,"column":10,"nodeType":"530","messageId":"531","endLine":115,"endColumn":14},{"ruleId":"539","severity":1,"message":"540","line":118,"column":13,"nodeType":"541","endLine":118,"endColumn":46},{"ruleId":"539","severity":1,"message":"540","line":121,"column":13,"nodeType":"541","endLine":121,"endColumn":44},{"ruleId":"528","severity":1,"message":"542","line":132,"column":12,"nodeType":"530","messageId":"531","endLine":132,"endColumn":19},{"ruleId":"528","severity":1,"message":"543","line":132,"column":21,"nodeType":"530","messageId":"531","endLine":132,"endColumn":28},{"ruleId":"544","severity":1,"message":"545","line":178,"column":7,"nodeType":"546","endLine":178,"endColumn":29,"suggestions":"547"},{"ruleId":"539","severity":1,"message":"540","line":546,"column":46,"nodeType":"541","endLine":546,"endColumn":56},{"ruleId":"539","severity":1,"message":"540","line":549,"column":46,"nodeType":"541","endLine":549,"endColumn":56},{"ruleId":"528","severity":1,"message":"548","line":3,"column":15,"nodeType":"530","messageId":"531","endLine":3,"endColumn":24},{"ruleId":"528","severity":1,"message":"549","line":4,"column":10,"nodeType":"530","messageId":"531","endLine":4,"endColumn":23},{"ruleId":"528","severity":1,"message":"550","line":5,"column":22,"nodeType":"530","messageId":"531","endLine":5,"endColumn":32},{"ruleId":"528","severity":1,"message":"529","line":45,"column":12,"nodeType":"530","messageId":"531","endLine":45,"endColumn":16},{"ruleId":"528","severity":1,"message":"551","line":100,"column":8,"nodeType":"530","messageId":"531","endLine":100,"endColumn":16},{"ruleId":"528","severity":1,"message":"552","line":113,"column":13,"nodeType":"530","messageId":"531","endLine":113,"endColumn":21},{"ruleId":"528","severity":1,"message":"553","line":12,"column":17,"nodeType":"530","messageId":"531","endLine":12,"endColumn":27},{"ruleId":"528","severity":1,"message":"554","line":13,"column":15,"nodeType":"530","messageId":"531","endLine":13,"endColumn":23},{"ruleId":"528","severity":1,"message":"555","line":14,"column":4,"nodeType":"530","messageId":"531","endLine":14,"endColumn":17},{"ruleId":"528","severity":1,"message":"556","line":20,"column":10,"nodeType":"530","messageId":"531","endLine":20,"endColumn":24},{"ruleId":"528","severity":1,"message":"557","line":24,"column":8,"nodeType":"530","messageId":"531","endLine":24,"endColumn":15},{"ruleId":"528","severity":1,"message":"542","line":62,"column":12,"nodeType":"530","messageId":"531","endLine":62,"endColumn":19},{"ruleId":"528","severity":1,"message":"558","line":62,"column":21,"nodeType":"530","messageId":"531","endLine":62,"endColumn":26},{"ruleId":"528","severity":1,"message":"529","line":62,"column":28,"nodeType":"530","messageId":"531","endLine":62,"endColumn":32},{"ruleId":"528","severity":1,"message":"559","line":70,"column":11,"nodeType":"530","messageId":"531","endLine":70,"endColumn":16},{"ruleId":"528","severity":1,"message":"560","line":70,"column":18,"nodeType":"530","messageId":"531","endLine":70,"endColumn":26},{"ruleId":"528","severity":1,"message":"561","line":13,"column":7,"nodeType":"530","messageId":"531","endLine":13,"endColumn":18},{"ruleId":"528","severity":1,"message":"562","line":20,"column":11,"nodeType":"530","messageId":"531","endLine":20,"endColumn":15},{"ruleId":"528","severity":1,"message":"563","line":21,"column":11,"nodeType":"530","messageId":"531","endLine":21,"endColumn":15},{"ruleId":"528","severity":1,"message":"564","line":22,"column":11,"nodeType":"530","messageId":"531","endLine":22,"endColumn":17},{"ruleId":"528","severity":1,"message":"565","line":33,"column":17,"nodeType":"530","messageId":"531","endLine":33,"endColumn":22},{"ruleId":"566","severity":1,"message":"567","line":175,"column":10,"nodeType":"568","messageId":"569","endLine":175,"endColumn":14},{"ruleId":"566","severity":1,"message":"567","line":176,"column":10,"nodeType":"568","messageId":"569","endLine":176,"endColumn":14},{"ruleId":"528","severity":1,"message":"570","line":29,"column":10,"nodeType":"530","messageId":"531","endLine":29,"endColumn":17},{"ruleId":"528","severity":1,"message":"571","line":11,"column":8,"nodeType":"530","messageId":"531","endLine":11,"endColumn":30},{"ruleId":"528","severity":1,"message":"572","line":32,"column":8,"nodeType":"530","messageId":"531","endLine":32,"endColumn":12},{"ruleId":"528","severity":1,"message":"573","line":72,"column":20,"nodeType":"530","messageId":"531","endLine":72,"endColumn":30},{"ruleId":"528","severity":1,"message":"574","line":80,"column":10,"nodeType":"530","messageId":"531","endLine":80,"endColumn":17},{"ruleId":"528","severity":1,"message":"575","line":88,"column":21,"nodeType":"530","messageId":"531","endLine":88,"endColumn":34},{"ruleId":"576","severity":1,"message":"577","line":219,"column":13,"nodeType":"578","messageId":"579","endLine":229,"endColumn":14},{"ruleId":"544","severity":1,"message":"580","line":235,"column":7,"nodeType":"546","endLine":235,"endColumn":41,"suggestions":"581"},{"ruleId":"528","severity":1,"message":"582","line":6,"column":8,"nodeType":"530","messageId":"531","endLine":6,"endColumn":21},{"ruleId":"528","severity":1,"message":"572","line":9,"column":8,"nodeType":"530","messageId":"531","endLine":9,"endColumn":12},{"ruleId":"528","severity":1,"message":"583","line":14,"column":8,"nodeType":"530","messageId":"531","endLine":14,"endColumn":21},{"ruleId":"528","severity":1,"message":"542","line":34,"column":29,"nodeType":"530","messageId":"531","endLine":34,"endColumn":36},{"ruleId":"528","severity":1,"message":"543","line":37,"column":40,"nodeType":"530","messageId":"531","endLine":37,"endColumn":47},{"ruleId":"528","severity":1,"message":"584","line":48,"column":16,"nodeType":"530","messageId":"531","endLine":48,"endColumn":22},{"ruleId":"528","severity":1,"message":"585","line":49,"column":10,"nodeType":"530","messageId":"531","endLine":49,"endColumn":34},{"ruleId":"576","severity":1,"message":"577","line":93,"column":13,"nodeType":"578","messageId":"579","endLine":103,"endColumn":14},{"ruleId":"544","severity":1,"message":"580","line":107,"column":7,"nodeType":"546","endLine":107,"endColumn":32,"suggestions":"586"},{"ruleId":"524","replacedBy":"587"},{"ruleId":"526","replacedBy":"588"},{"ruleId":"528","severity":1,"message":"582","line":8,"column":8,"nodeType":"530","messageId":"531","endLine":8,"endColumn":21},{"ruleId":"528","severity":1,"message":"589","line":1,"column":28,"nodeType":"530","messageId":"531","endLine":1,"endColumn":36},{"ruleId":"544","severity":1,"message":"590","line":87,"column":7,"nodeType":"546","endLine":87,"endColumn":25,"suggestions":"591"},{"ruleId":"528","severity":1,"message":"592","line":54,"column":24,"nodeType":"530","messageId":"531","endLine":54,"endColumn":38},{"ruleId":"528","severity":1,"message":"593","line":66,"column":21,"nodeType":"530","messageId":"531","endLine":66,"endColumn":36},{"ruleId":"544","severity":1,"message":"594","line":113,"column":7,"nodeType":"546","endLine":113,"endColumn":78,"suggestions":"595"},{"ruleId":"528","severity":1,"message":"596","line":2,"column":24,"nodeType":"530","messageId":"531","endLine":2,"endColumn":29},{"ruleId":"528","severity":1,"message":"597","line":2,"column":31,"nodeType":"530","messageId":"531","endLine":2,"endColumn":41},{"ruleId":"528","severity":1,"message":"598","line":4,"column":10,"nodeType":"530","messageId":"531","endLine":4,"endColumn":20},{"ruleId":"528","severity":1,"message":"599","line":4,"column":22,"nodeType":"530","messageId":"531","endLine":4,"endColumn":31},{"ruleId":"528","severity":1,"message":"600","line":4,"column":33,"nodeType":"530","messageId":"531","endLine":4,"endColumn":38},{"ruleId":"524","replacedBy":"601"},{"ruleId":"526","replacedBy":"602"},{"ruleId":"528","severity":1,"message":"571","line":1,"column":8,"nodeType":"530","messageId":"531","endLine":1,"endColumn":30},{"ruleId":"528","severity":1,"message":"603","line":2,"column":8,"nodeType":"530","messageId":"531","endLine":2,"endColumn":24},{"ruleId":"528","severity":1,"message":"596","line":4,"column":23,"nodeType":"530","messageId":"531","endLine":4,"endColumn":28},{"ruleId":"528","severity":1,"message":"604","line":7,"column":10,"nodeType":"530","messageId":"531","endLine":7,"endColumn":15},{"ruleId":"528","severity":1,"message":"556","line":10,"column":10,"nodeType":"530","messageId":"531","endLine":10,"endColumn":24},{"ruleId":"528","severity":1,"message":"605","line":10,"column":26,"nodeType":"530","messageId":"531","endLine":10,"endColumn":43},{"ruleId":"528","severity":1,"message":"606","line":31,"column":8,"nodeType":"530","messageId":"531","endLine":31,"endColumn":16},{"ruleId":"528","severity":1,"message":"607","line":32,"column":8,"nodeType":"530","messageId":"531","endLine":32,"endColumn":18},{"ruleId":"528","severity":1,"message":"608","line":33,"column":8,"nodeType":"530","messageId":"531","endLine":33,"endColumn":15},{"ruleId":"528","severity":1,"message":"609","line":36,"column":8,"nodeType":"530","messageId":"531","endLine":36,"endColumn":18},{"ruleId":"528","severity":1,"message":"610","line":37,"column":8,"nodeType":"530","messageId":"531","endLine":37,"endColumn":22},{"ruleId":"528","severity":1,"message":"611","line":97,"column":7,"nodeType":"530","messageId":"531","endLine":97,"endColumn":23},{"ruleId":"528","severity":1,"message":"612","line":100,"column":7,"nodeType":"530","messageId":"531","endLine":100,"endColumn":18},{"ruleId":"528","severity":1,"message":"613","line":101,"column":7,"nodeType":"530","messageId":"531","endLine":101,"endColumn":15},{"ruleId":"528","severity":1,"message":"562","line":232,"column":11,"nodeType":"530","messageId":"531","endLine":232,"endColumn":15},{"ruleId":"528","severity":1,"message":"614","line":232,"column":17,"nodeType":"530","messageId":"531","endLine":232,"endColumn":24},{"ruleId":"528","severity":1,"message":"615","line":233,"column":11,"nodeType":"530","messageId":"531","endLine":233,"endColumn":16},{"ruleId":"528","severity":1,"message":"616","line":233,"column":18,"nodeType":"530","messageId":"531","endLine":233,"endColumn":26},{"ruleId":"528","severity":1,"message":"617","line":234,"column":11,"nodeType":"530","messageId":"531","endLine":234,"endColumn":19},{"ruleId":"528","severity":1,"message":"618","line":234,"column":21,"nodeType":"530","messageId":"531","endLine":234,"endColumn":32},{"ruleId":"528","severity":1,"message":"619","line":235,"column":11,"nodeType":"530","messageId":"531","endLine":235,"endColumn":26},{"ruleId":"528","severity":1,"message":"620","line":235,"column":28,"nodeType":"530","messageId":"531","endLine":235,"endColumn":46},{"ruleId":"528","severity":1,"message":"621","line":236,"column":11,"nodeType":"530","messageId":"531","endLine":236,"endColumn":18},{"ruleId":"528","severity":1,"message":"573","line":236,"column":20,"nodeType":"530","messageId":"531","endLine":236,"endColumn":30},{"ruleId":"528","severity":1,"message":"542","line":298,"column":12,"nodeType":"530","messageId":"531","endLine":298,"endColumn":19},{"ruleId":"528","severity":1,"message":"558","line":298,"column":21,"nodeType":"530","messageId":"531","endLine":298,"endColumn":26},{"ruleId":"528","severity":1,"message":"543","line":304,"column":12,"nodeType":"530","messageId":"531","endLine":304,"endColumn":19},{"ruleId":"528","severity":1,"message":"622","line":7,"column":8,"nodeType":"530","messageId":"531","endLine":7,"endColumn":20},{"ruleId":"528","severity":1,"message":"623","line":8,"column":8,"nodeType":"530","messageId":"531","endLine":8,"endColumn":20},{"ruleId":"528","severity":1,"message":"624","line":9,"column":8,"nodeType":"530","messageId":"531","endLine":9,"endColumn":22},{"ruleId":"528","severity":1,"message":"625","line":13,"column":17,"nodeType":"530","messageId":"531","endLine":13,"endColumn":26},{"ruleId":"528","severity":1,"message":"626","line":14,"column":10,"nodeType":"530","messageId":"531","endLine":14,"endColumn":21},{"ruleId":"528","severity":1,"message":"627","line":15,"column":10,"nodeType":"530","messageId":"531","endLine":15,"endColumn":13},{"ruleId":"528","severity":1,"message":"596","line":15,"column":15,"nodeType":"530","messageId":"531","endLine":15,"endColumn":20},{"ruleId":"528","severity":1,"message":"628","line":15,"column":22,"nodeType":"530","messageId":"531","endLine":15,"endColumn":31},{"ruleId":"528","severity":1,"message":"629","line":15,"column":33,"nodeType":"530","messageId":"531","endLine":15,"endColumn":36},{"ruleId":"528","severity":1,"message":"630","line":15,"column":38,"nodeType":"530","messageId":"531","endLine":15,"endColumn":44},{"ruleId":"528","severity":1,"message":"631","line":15,"column":46,"nodeType":"530","messageId":"531","endLine":15,"endColumn":50},{"ruleId":"528","severity":1,"message":"632","line":168,"column":10,"nodeType":"530","messageId":"531","endLine":168,"endColumn":20},{"ruleId":"528","severity":1,"message":"542","line":171,"column":18,"nodeType":"530","messageId":"531","endLine":171,"endColumn":25},{"ruleId":"528","severity":1,"message":"558","line":171,"column":27,"nodeType":"530","messageId":"531","endLine":171,"endColumn":32},{"ruleId":"528","severity":1,"message":"633","line":13,"column":8,"nodeType":"530","messageId":"531","endLine":13,"endColumn":14},{"ruleId":"528","severity":1,"message":"634","line":15,"column":8,"nodeType":"530","messageId":"531","endLine":15,"endColumn":16},{"ruleId":"528","severity":1,"message":"635","line":16,"column":8,"nodeType":"530","messageId":"531","endLine":16,"endColumn":16},{"ruleId":"528","severity":1,"message":"636","line":32,"column":10,"nodeType":"530","messageId":"531","endLine":32,"endColumn":17},{"ruleId":"528","severity":1,"message":"637","line":33,"column":10,"nodeType":"530","messageId":"531","endLine":33,"endColumn":20},{"ruleId":"528","severity":1,"message":"570","line":36,"column":10,"nodeType":"530","messageId":"531","endLine":36,"endColumn":17},{"ruleId":"528","severity":1,"message":"638","line":38,"column":10,"nodeType":"530","messageId":"531","endLine":38,"endColumn":22},{"ruleId":"528","severity":1,"message":"537","line":42,"column":10,"nodeType":"530","messageId":"531","endLine":42,"endColumn":21},{"ruleId":"528","severity":1,"message":"639","line":53,"column":16,"nodeType":"530","messageId":"531","endLine":53,"endColumn":26},{"ruleId":"528","severity":1,"message":"640","line":54,"column":16,"nodeType":"530","messageId":"531","endLine":54,"endColumn":26},{"ruleId":"528","severity":1,"message":"641","line":55,"column":7,"nodeType":"530","messageId":"531","endLine":55,"endColumn":15},{"ruleId":"528","severity":1,"message":"642","line":64,"column":16,"nodeType":"530","messageId":"531","endLine":64,"endColumn":29},{"ruleId":"528","severity":1,"message":"643","line":70,"column":16,"nodeType":"530","messageId":"531","endLine":70,"endColumn":34},{"ruleId":"528","severity":1,"message":"644","line":71,"column":16,"nodeType":"530","messageId":"531","endLine":71,"endColumn":34},{"ruleId":"528","severity":1,"message":"645","line":1,"column":24,"nodeType":"530","messageId":"531","endLine":1,"endColumn":38},{"ruleId":"528","severity":1,"message":"627","line":11,"column":10,"nodeType":"530","messageId":"531","endLine":11,"endColumn":13},{"ruleId":"528","severity":1,"message":"629","line":11,"column":22,"nodeType":"530","messageId":"531","endLine":11,"endColumn":25},{"ruleId":"528","severity":1,"message":"570","line":59,"column":9,"nodeType":"530","messageId":"531","endLine":59,"endColumn":16},{"ruleId":"528","severity":1,"message":"542","line":105,"column":11,"nodeType":"530","messageId":"531","endLine":105,"endColumn":18},{"ruleId":"528","severity":1,"message":"543","line":105,"column":20,"nodeType":"530","messageId":"531","endLine":105,"endColumn":27},{"ruleId":"528","severity":1,"message":"646","line":22,"column":10,"nodeType":"530","messageId":"531","endLine":22,"endColumn":16},{"ruleId":"528","severity":1,"message":"607","line":8,"column":8,"nodeType":"530","messageId":"531","endLine":8,"endColumn":18},{"ruleId":"528","severity":1,"message":"647","line":15,"column":8,"nodeType":"530","messageId":"531","endLine":15,"endColumn":25},{"ruleId":"528","severity":1,"message":"533","line":35,"column":7,"nodeType":"530","messageId":"531","endLine":35,"endColumn":17},{"ruleId":"528","severity":1,"message":"534","line":55,"column":7,"nodeType":"530","messageId":"531","endLine":55,"endColumn":21},{"ruleId":"528","severity":1,"message":"648","line":97,"column":7,"nodeType":"530","messageId":"531","endLine":97,"endColumn":18},{"ruleId":"528","severity":1,"message":"535","line":111,"column":10,"nodeType":"530","messageId":"531","endLine":111,"endColumn":20},{"ruleId":"528","severity":1,"message":"536","line":113,"column":11,"nodeType":"530","messageId":"531","endLine":113,"endColumn":19},{"ruleId":"528","severity":1,"message":"537","line":121,"column":10,"nodeType":"530","messageId":"531","endLine":121,"endColumn":21},{"ruleId":"528","severity":1,"message":"529","line":126,"column":12,"nodeType":"530","messageId":"531","endLine":126,"endColumn":16},{"ruleId":"528","severity":1,"message":"649","line":174,"column":16,"nodeType":"530","messageId":"531","endLine":174,"endColumn":19},{"ruleId":"544","severity":1,"message":"650","line":234,"column":7,"nodeType":"546","endLine":234,"endColumn":55,"suggestions":"651"},{"ruleId":"528","severity":1,"message":"652","line":268,"column":10,"nodeType":"530","messageId":"531","endLine":268,"endColumn":18},{"ruleId":"528","severity":1,"message":"565","line":272,"column":13,"nodeType":"530","messageId":"531","endLine":272,"endColumn":18},{"ruleId":"528","severity":1,"message":"653","line":4,"column":4,"nodeType":"530","messageId":"531","endLine":4,"endColumn":20},{"ruleId":"528","severity":1,"message":"654","line":264,"column":11,"nodeType":"530","messageId":"531","endLine":264,"endColumn":14},{"ruleId":"528","severity":1,"message":"655","line":293,"column":15,"nodeType":"530","messageId":"531","endLine":293,"endColumn":29},{"ruleId":"528","severity":1,"message":"654","line":311,"column":11,"nodeType":"530","messageId":"531","endLine":311,"endColumn":14},{"ruleId":"528","severity":1,"message":"637","line":251,"column":10,"nodeType":"530","messageId":"531","endLine":251,"endColumn":20},{"ruleId":"544","severity":1,"message":"656","line":293,"column":7,"nodeType":"546","endLine":293,"endColumn":66,"suggestions":"657"},{"ruleId":"528","severity":1,"message":"658","line":1,"column":8,"nodeType":"530","messageId":"531","endLine":1,"endColumn":13},{"ruleId":"528","severity":1,"message":"659","line":7,"column":10,"nodeType":"530","messageId":"531","endLine":7,"endColumn":26},{"ruleId":"528","severity":1,"message":"660","line":8,"column":25,"nodeType":"530","messageId":"531","endLine":8,"endColumn":35},{"ruleId":"528","severity":1,"message":"661","line":18,"column":10,"nodeType":"530","messageId":"531","endLine":18,"endColumn":21},{"ruleId":"528","severity":1,"message":"662","line":35,"column":11,"nodeType":"530","messageId":"531","endLine":35,"endColumn":24},{"ruleId":"528","severity":1,"message":"663","line":35,"column":26,"nodeType":"530","messageId":"531","endLine":35,"endColumn":42},{"ruleId":"528","severity":1,"message":"655","line":291,"column":15,"nodeType":"530","messageId":"531","endLine":291,"endColumn":29},{"ruleId":"528","severity":1,"message":"654","line":309,"column":11,"nodeType":"530","messageId":"531","endLine":309,"endColumn":14},{"ruleId":"528","severity":1,"message":"664","line":371,"column":9,"nodeType":"530","messageId":"531","endLine":371,"endColumn":29},{"ruleId":"528","severity":1,"message":"665","line":49,"column":10,"nodeType":"530","messageId":"531","endLine":49,"endColumn":23},{"ruleId":"528","severity":1,"message":"666","line":55,"column":10,"nodeType":"530","messageId":"531","endLine":55,"endColumn":20},{"ruleId":"528","severity":1,"message":"570","line":88,"column":7,"nodeType":"530","messageId":"531","endLine":88,"endColumn":14},{"ruleId":"528","severity":1,"message":"628","line":2,"column":40,"nodeType":"530","messageId":"531","endLine":2,"endColumn":49},{"ruleId":"528","severity":1,"message":"558","line":23,"column":20,"nodeType":"530","messageId":"531","endLine":23,"endColumn":25},{"ruleId":"528","severity":1,"message":"667","line":66,"column":12,"nodeType":"530","messageId":"531","endLine":66,"endColumn":20},{"ruleId":"528","severity":1,"message":"668","line":76,"column":21,"nodeType":"530","messageId":"531","endLine":76,"endColumn":31},{"ruleId":"528","severity":1,"message":"669","line":76,"column":42,"nodeType":"530","messageId":"531","endLine":76,"endColumn":52},{"ruleId":"528","severity":1,"message":"670","line":5,"column":10,"nodeType":"530","messageId":"531","endLine":5,"endColumn":14},{"ruleId":"528","severity":1,"message":"639","line":37,"column":14,"nodeType":"530","messageId":"531","endLine":37,"endColumn":24},{"ruleId":"528","severity":1,"message":"671","line":38,"column":12,"nodeType":"530","messageId":"531","endLine":38,"endColumn":20},{"ruleId":"528","severity":1,"message":"558","line":24,"column":20,"nodeType":"530","messageId":"531","endLine":24,"endColumn":25},{"ruleId":"528","severity":1,"message":"670","line":5,"column":10,"nodeType":"530","messageId":"531","endLine":5,"endColumn":14},{"ruleId":"528","severity":1,"message":"582","line":7,"column":8,"nodeType":"530","messageId":"531","endLine":7,"endColumn":21},{"ruleId":"528","severity":1,"message":"558","line":33,"column":20,"nodeType":"530","messageId":"531","endLine":33,"endColumn":25},{"ruleId":"528","severity":1,"message":"672","line":6,"column":26,"nodeType":"530","messageId":"531","endLine":6,"endColumn":38},{"ruleId":"528","severity":1,"message":"673","line":20,"column":12,"nodeType":"530","messageId":"531","endLine":20,"endColumn":17},{"ruleId":"528","severity":1,"message":"674","line":23,"column":12,"nodeType":"530","messageId":"531","endLine":23,"endColumn":20},{"ruleId":"675","severity":1,"message":"676","line":33,"column":27,"nodeType":"677","messageId":"678","endLine":33,"endColumn":29},{"ruleId":"679","severity":1,"message":"680","line":34,"column":32,"nodeType":"681","messageId":"569","endLine":34,"endColumn":34},{"ruleId":"544","severity":1,"message":"580","line":110,"column":7,"nodeType":"546","endLine":117,"endColumn":5,"suggestions":"682"},"no-native-reassign",["683"],"no-negated-in-lhs",["684"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'NavDropdown' is defined but never used.","'StyledMenu' is assigned a value but never used.","'StyledMenuItem' is assigned a value but never used.","'anchorReff' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'menu' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'loading' is assigned a value but never used.","'success' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["685"],"'Container' is defined but never used.","'LinkContainer' is defined but never used.","'withStyles' is defined but never used.","'settings' is assigned a value but never used.","'onChange' is defined but never used.","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","'ListGroupItem' is defined but never used.","'getUserDetails' is defined but never used.","'Message' is defined but never used.","'error' is assigned a value but never used.","'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","'firebaseApp' is assigned a value but never used.","'name' is assigned a value but never used.","'mail' is assigned a value but never used.","'avatar' is assigned a value but never used.","'token' is assigned a value but never used.","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","'classes' is assigned a value but never used.","'CheckCircleOutlineIcon' is defined but never used.","'data' is defined but never used.","'setMessage' is assigned a value but never used.","'address' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["686"],"'FormContainer' is defined but never used.","'DialogActions' is defined but never used.","'setAdd' is assigned a value but never used.","'updateInformationAddress' is assigned a value but never used.",["687"],["683"],["684"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'cart.cartItems', 'dispatch', and 'order._id'. Either include them or remove the dependency array.",["688"],"'setOrderStatus' is assigned a value but never used.","'loadingByMember' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["689"],"'Image' is defined but never used.","'InputGroup' is defined but never used.","'ButtonBase' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.",["683"],["684"],"'ErrorOutlineIcon' is defined but never used.","'toast' is defined but never used.","'updateUserProfile' is defined but never used.","'Checkbox' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'DeleteIcon' is defined but never used.","'FilterListIcon' is defined but never used.","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'setName' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'message' is assigned a value but never used.","'GroupAddIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'VideoLabelIcon' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'activeStep' is assigned a value but never used.","'Avatar' is defined but never used.","'FaceIcon' is defined but never used.","'DoneIcon' is defined but never used.","'keyword' is assigned a value but never used.","'pageNumber' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'loadingCat' is assigned a value but never used.","'successCat' is assigned a value but never used.","'category' is assigned a value but never used.","'successFilter' is assigned a value but never used.","'loadingFilterPrice' is assigned a value but never used.","'successFilterPrice' is assigned a value but never used.","'DollarOutlined' is defined but never used.","'format' is defined but never used.","'NotificationsIcon' is defined but never used.","'StyledBadge' is assigned a value but never used.","'url' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'open' and 'openNotification'. Either include them or remove the dependency array. Outer scope values like 'getNotifications' aren't valid dependencies because mutating them doesn't re-render the component.",["690"],"'notifyId' is assigned a value but never used.","'AppstoreOutlined' is defined but never used.","'did' is assigned a value but never used.","'createdProduct' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categoryCat' and 'createdProduct._id'. Either include them or remove the dependency array.",["691"],"'axios' is defined but never used.","'deleteFileImages' is defined but never used.","'newProduct' is defined but never used.","'formatPrice' is defined but never used.","'imagesPreview' is assigned a value but never used.","'setImagesPreview' is assigned a value but never used.","'submitHandlerDetails' is assigned a value but never used.","'getComparator' is defined but never used.","'stableSort' is defined but never used.","'userInfo' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'successPay' is assigned a value but never used.","'Link' is defined but never used.","'errorCat' is assigned a value but never used.","'listProducts' is defined but never used.","'order' is assigned a value but never used.","'supplier' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["692"],"no-global-assign","no-unsafe-negation",{"desc":"693","fix":"694"},{"desc":"695","fix":"696"},{"desc":"697","fix":"698"},{"desc":"699","fix":"700"},{"desc":"701","fix":"702"},{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"707","fix":"708"},"Update the dependencies array to be: [open, userInfo, user, dispatch]",{"range":"709","text":"710"},"Update the dependencies array to be: [dispatch, history, success, user, userInfo]",{"range":"711","text":"712"},"Update the dependencies array to be: [dispatch, history, user, userInfo]",{"range":"713","text":"714"},"Update the dependencies array to be: [cart.cartItems, dispatch, history, order._id, success]",{"range":"715","text":"716"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",{"range":"717","text":"718"},"Update the dependencies array to be: [dispatch, notificationsCount, open, openNotification]",{"range":"719","text":"720"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id]",{"range":"721","text":"722"},"Update the dependencies array to be: [history, dispatch, successDeleteAddress, successCreateAddress, successSelectRole, successUpdateAddress, userInfo]",{"range":"723","text":"724"},[5150,5172],"[open, userInfo, user, dispatch]",[7807,7841],"[dispatch, history, success, user, userInfo]",[3345,3370],"[dispatch, history, user, userInfo]",[2870,2888],"[cart.cartItems, dispatch, history, order._id, success]",[3696,3767],"[dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",[6823,6871],"[dispatch, notificationsCount, open, openNotification]",[9630,9689],"[dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id]",[3348,3501],"[history, dispatch, successDeleteAddress, successCreateAddress, successSelectRole, successUpdateAddress, userInfo]"]