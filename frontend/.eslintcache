[{"F:\\Code\\shopPro\\frontend\\src\\index.js":"1","F:\\Code\\shopPro\\frontend\\src\\App.js":"2","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js":"3","F:\\Code\\shopPro\\frontend\\src\\components\\Header.js":"4","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js":"5","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js":"6","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js":"7","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js":"8","F:\\Code\\shopPro\\frontend\\src\\store.js":"9","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js":"10","F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js":"11","F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js":"12","F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js":"13","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js":"14","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js":"15","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js":"16","F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js":"17","F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js":"18","F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js":"19","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js":"20","F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js":"21","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js":"22","F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js":"23","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js":"24","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js":"25","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js":"26","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js":"27","F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js":"28","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js":"29","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js":"30","F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js":"31","F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js":"32","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js":"33","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js":"34","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js":"35","F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js":"36","F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js":"37","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js":"38","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js":"39","F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js":"40","F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js":"41","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js":"42","F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js":"43","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js":"44","F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js":"45","F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js":"46","F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js":"47","F:\\Code\\shopPro\\frontend\\src\\configAuth.js":"48","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderEditScreen.js":"49","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js":"50","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js":"51","F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js":"52","F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js":"53","F:\\Code\\shopPro\\frontend\\src\\screens\\CategoriesListScreen.js":"54","F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js":"55","F:\\Code\\shopPro\\frontend\\src\\screens\\CategoryEditScreen.js":"56","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductCreateScreen.js":"57","F:\\Code\\shopPro\\frontend\\src\\components\\test.js":"58","F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js":"59","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js":"60","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js":"61","F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js":"62","F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js":"63","F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js":"64","F:\\Code\\shopPro\\frontend\\src\\screens\\SupplierListScreen.js":"65","F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js":"66","F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js":"67","F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js":"68","F:\\Code\\shopPro\\frontend\\src\\screens\\SupplierEditScreen.js":"69","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js":"70","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js":"71","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js":"72","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js":"73","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js":"74","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js":"75","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js":"76","F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js":"77","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js":"78","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js":"79","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js":"80","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js":"81","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js":"82","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js":"83","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js":"84","F:\\Code\\shopPro\\frontend\\src\\actions\\cloudinary.js":"85"},{"size":629,"mtime":1620119595981,"results":"86","hashOfConfig":"87"},{"size":6306,"mtime":1620241744524,"results":"88","hashOfConfig":"87"},{"size":362,"mtime":499162500000,"results":"89","hashOfConfig":"87"},{"size":20338,"mtime":1620205814356,"results":"90","hashOfConfig":"87"},{"size":11268,"mtime":1620267385392,"results":"91","hashOfConfig":"87"},{"size":2307,"mtime":1620205206588,"results":"92","hashOfConfig":"87"},{"size":1725,"mtime":1620710268454,"results":"93","hashOfConfig":"87"},{"size":28005,"mtime":1620718020515,"results":"94","hashOfConfig":"87"},{"size":4035,"mtime":1621173980185,"results":"95","hashOfConfig":"87"},{"size":6580,"mtime":1620709193415,"results":"96","hashOfConfig":"87"},{"size":2288,"mtime":1618733779615,"results":"97","hashOfConfig":"87"},{"size":9067,"mtime":1620743571406,"results":"98","hashOfConfig":"87"},{"size":567,"mtime":1615791677731,"results":"99","hashOfConfig":"87"},{"size":689,"mtime":1619547659359,"results":"100","hashOfConfig":"87"},{"size":25246,"mtime":1620848241477,"results":"101","hashOfConfig":"87"},{"size":1184,"mtime":1615605660974,"results":"102","hashOfConfig":"87"},{"size":1399,"mtime":1620847118133,"results":"103","hashOfConfig":"87"},{"size":238,"mtime":1612540677571,"results":"104","hashOfConfig":"87"},{"size":5024,"mtime":1620134822303,"results":"105","hashOfConfig":"87"},{"size":2376,"mtime":1620134067531,"results":"106","hashOfConfig":"87"},{"size":7114,"mtime":1620241320969,"results":"107","hashOfConfig":"87"},{"size":402,"mtime":1612087628650,"results":"108","hashOfConfig":"87"},{"size":6446,"mtime":1620156653042,"results":"109","hashOfConfig":"87"},{"size":7475,"mtime":1620241649126,"results":"110","hashOfConfig":"87"},{"size":24319,"mtime":1620241600764,"results":"111","hashOfConfig":"87"},{"size":7150,"mtime":1620241936464,"results":"112","hashOfConfig":"87"},{"size":1643,"mtime":1612593111433,"results":"113","hashOfConfig":"87"},{"size":2763,"mtime":1620243566664,"results":"114","hashOfConfig":"87"},{"size":9744,"mtime":1620874537143,"results":"115","hashOfConfig":"87"},{"size":6225,"mtime":1621176501120,"results":"116","hashOfConfig":"87"},{"size":2166,"mtime":1621173713028,"results":"117","hashOfConfig":"87"},{"size":8961,"mtime":1621176581234,"results":"118","hashOfConfig":"87"},{"size":19903,"mtime":1620874517280,"results":"119","hashOfConfig":"87"},{"size":855,"mtime":1619547664611,"results":"120","hashOfConfig":"87"},{"size":311,"mtime":1619377332627,"results":"121","hashOfConfig":"87"},{"size":14956,"mtime":1617434431370,"results":"122","hashOfConfig":"87"},{"size":3358,"mtime":1614437771361,"results":"123","hashOfConfig":"87"},{"size":9647,"mtime":1619575870525,"results":"124","hashOfConfig":"87"},{"size":16538,"mtime":1620150058105,"results":"125","hashOfConfig":"87"},{"size":995,"mtime":1618210153490,"results":"126","hashOfConfig":"87"},{"size":1297,"mtime":1619197232259,"results":"127","hashOfConfig":"87"},{"size":3613,"mtime":1619707633985,"results":"128","hashOfConfig":"87"},{"size":2347,"mtime":1620526178345,"results":"129","hashOfConfig":"87"},{"size":778,"mtime":1614826321511,"results":"130","hashOfConfig":"87"},{"size":1725,"mtime":1616170962837,"results":"131","hashOfConfig":"87"},{"size":514,"mtime":1615015305728,"results":"132","hashOfConfig":"87"},{"size":6842,"mtime":1620241371188,"results":"133","hashOfConfig":"87"},{"size":393,"mtime":1616226016215,"results":"134","hashOfConfig":"87"},{"size":15863,"mtime":1619882842548,"results":"135","hashOfConfig":"87"},{"size":5057,"mtime":1617288730631,"results":"136","hashOfConfig":"87"},{"size":514,"mtime":1617284362928,"results":"137","hashOfConfig":"87"},{"size":3079,"mtime":1617764918779,"results":"138","hashOfConfig":"87"},{"size":1148,"mtime":1617555469184,"results":"139","hashOfConfig":"87"},{"size":19132,"mtime":1619936106264,"results":"140","hashOfConfig":"87"},{"size":4859,"mtime":1617764862267,"results":"141","hashOfConfig":"87"},{"size":3395,"mtime":1617534903289,"results":"142","hashOfConfig":"87"},{"size":9117,"mtime":1617763767260,"results":"143","hashOfConfig":"87"},{"size":0,"mtime":1617780641945,"results":"144","hashOfConfig":"87"},{"size":251,"mtime":1617900546652,"results":"145","hashOfConfig":"87"},{"size":6097,"mtime":1620241503062,"results":"146","hashOfConfig":"87"},{"size":855,"mtime":1618203083711,"results":"147","hashOfConfig":"87"},{"size":1802,"mtime":1611471571179,"results":"148","hashOfConfig":"87"},{"size":6372,"mtime":1618852953383,"results":"149","hashOfConfig":"87"},{"size":1253,"mtime":1619890864238,"results":"150","hashOfConfig":"87"},{"size":19197,"mtime":1619960414835,"results":"151","hashOfConfig":"87"},{"size":4900,"mtime":1619943611553,"results":"152","hashOfConfig":"87"},{"size":1148,"mtime":1619935367616,"results":"153","hashOfConfig":"87"},{"size":3073,"mtime":1619936932800,"results":"154","hashOfConfig":"87"},{"size":3454,"mtime":1619960650161,"results":"155","hashOfConfig":"87"},{"size":5200,"mtime":1621213612098,"results":"156","hashOfConfig":"87"},{"size":13837,"mtime":1620205969215,"results":"157","hashOfConfig":"87"},{"size":4684,"mtime":1621004188973,"results":"158","hashOfConfig":"87"},{"size":16012,"mtime":1620183244605,"results":"159","hashOfConfig":"87"},{"size":20339,"mtime":1620183268367,"results":"160","hashOfConfig":"87"},{"size":23000,"mtime":1620869616891,"results":"161","hashOfConfig":"87"},{"size":21211,"mtime":1620843599260,"results":"162","hashOfConfig":"87"},{"size":815,"mtime":1620138964451,"results":"163","hashOfConfig":"87"},{"size":20200,"mtime":1620183235479,"results":"164","hashOfConfig":"87"},{"size":25084,"mtime":1621145752707,"results":"165","hashOfConfig":"87"},{"size":3935,"mtime":1620183263582,"results":"166","hashOfConfig":"87"},{"size":17410,"mtime":1620183259816,"results":"167","hashOfConfig":"87"},{"size":10449,"mtime":1620183249072,"results":"168","hashOfConfig":"87"},{"size":4009,"mtime":1620183231306,"results":"169","hashOfConfig":"87"},{"size":9043,"mtime":1620183240177,"results":"170","hashOfConfig":"87"},{"size":225,"mtime":1620838618046,"results":"171","hashOfConfig":"87"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"1shtzj8",{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"174"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"174"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"174"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"174"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"174"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"174"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"174"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"174"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"174"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"174"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"174"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"174"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"174"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"240"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"174"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"174"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"174"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"263"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"263"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"174"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"174"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"263"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"174"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"263"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"263"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"263"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"174"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"174"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"263"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"263"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"345","messages":"346","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"174"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"174"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"174"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"174"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"174"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"174"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"369","messages":"370","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"174"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"174"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"174"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"174"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"174"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"F:\\Code\\shopPro\\frontend\\src\\index.js",[],["386","387"],"F:\\Code\\shopPro\\frontend\\src\\App.js",["388"],"import { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles'\nimport { BackTop } from 'antd'\nimport React, { Fragment, useEffect } from 'react'\nimport { Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { getUserDetails } from './actions/userActions'\nimport ProtectedRoute from './components/ProtectedRoute'\nimport AdminScreen from './screens/admin/AdminScreen'\nimport CategoriesListScreen from './screens/admin/CategoriesListScreen'\nimport CategoryEditScreen from './screens/admin/CategoryEditScreen'\nimport OrderEditScreen from './screens/admin/OrderEditScreen'\nimport OrderListScreen from './screens/admin/OrderListScreen'\nimport ProductCreateScreen from './screens/admin/ProductCreateScreen'\nimport ProductEditScreen from './screens/admin/ProductEditScreen'\nimport ProductListScreen from './screens/admin/ProductListScreen'\nimport SupplierEditScreen from './screens/admin/SupplierEditScreen'\nimport SupplierListScreen from './screens/admin/SupplierListScreen'\nimport UserEditScreen from './screens/admin/UserEditScreen'\nimport UserListScreen from './screens/admin/UserListScreen'\nimport CartScreen from './screens/CartScreen.js'\nimport HomeScreen from './screens/HomeScreen'\nimport LoginScreen from './screens/LoginScreen'\nimport MyOrdersScreen from './screens/MyOrdersScreen'\nimport OrderScreen from './screens/OrderScreen.js'\nimport { PaymentScreen } from './screens/PaymentScreen'\nimport PlaceOrderScreen from './screens/PlaceOrderScreen'\nimport ProductOfCategoryScreen from './screens/ProductOfCategoryScreen'\nimport ProductScreen from './screens/ProductScreen.js'\nimport ProfileScreen from './screens/ProfileScreen'\nimport RegisterScreen from './screens/RegisterScreen.js'\nimport { ShippingScreen } from './screens/ShippingScreen'\n\nconst THEME = createMuiTheme({\n  typography: {\n    fontFamily: `\"Quicksand\", \"Roboto\", \"Arial\", sans-serif`,\n  },\n})\n\nconst App = () => {\n  const dispatch = useDispatch()\n  const userLogin = useSelector((state) => state.userLogin)\n  const { userInfo } = userLogin\n\n  const userDetails = useSelector((state) => state.userDetails)\n  const { user } = userDetails\n\n  useEffect(() => {\n    if (userInfo) {\n      dispatch(getUserDetails(userInfo._id))\n    }\n  }, [dispatch, userInfo])\n\n  return (\n    <>\n      <BackTop />\n\n      <Router>\n        <div>\n          <ThemeProvider theme={THEME}>\n            {/* <Header /> */}\n\n            <Fragment className='mb-4'>\n              <Route path='/' component={HomeScreen} exact />\n              <Route path='/search/:keyword' component={HomeScreen} exact />\n\n              <div>\n                <Route path='/profile' component={ProfileScreen} exact />\n\n                <Route path='/cart/:id?' component={CartScreen} exact />\n\n                <Route\n                  path='/product/:id/category'\n                  component={ProductOfCategoryScreen}\n                  exact\n                />\n\n                <Route path='/product/:id' component={ProductScreen} exact />\n                <Route path='/order/:id' component={OrderScreen} exact />\n                <Route path='/myorders' component={MyOrdersScreen} exact />\n                <Route path='/register' component={RegisterScreen} exact />\n                <Route path='/shipping' component={ShippingScreen} exact />\n                <Route path='/login' component={LoginScreen} exact />\n                <Route path='/placeorder' component={PlaceOrderScreen} exact />\n                <Route path='/payment' component={PaymentScreen} exact />\n              </div>\n\n              <Container>\n                <Route\n                  path='/admin/productlist/:pageNumber'\n                  component={ProductListScreen}\n                  exact\n                />\n\n                <Route path='/page/:pageNumber' component={HomeScreen} exact />\n                <Route\n                  path='/search/:keyword/page/:pageNumber'\n                  component={HomeScreen}\n                  exact\n                />\n              </Container>\n            </Fragment>\n            {/* <Footer /> */}\n            <Route path='/admin' component={AdminScreen} exact />\n\n            <ProtectedRoute\n              path='/admin/userlist'\n              isAdmin={true}\n              component={UserListScreen}\n              exact\n            />\n\n            <ProtectedRoute\n              isAdmin={true}\n              path='/admin/categorieslist'\n              component={CategoriesListScreen}\n              exact\n            />\n\n            <ProtectedRoute\n              isAdmin={true}\n              path='/admin/productlist'\n              component={ProductListScreen}\n              exact\n            />\n\n            <ProtectedRoute\n              isAdmin={true}\n              path='/admin/product/create'\n              component={ProductCreateScreen}\n              exact\n            />\n\n            <ProtectedRoute\n              isAdmin={true}\n              path='/admin/supplierlist'\n              component={SupplierListScreen}\n              exact\n            />\n\n            <ProtectedRoute\n              isAdmin={true}\n              path='/admin/orderlist'\n              component={OrderListScreen}\n              exact\n            />\n\n            <ProtectedRoute\n              isAdmin={true}\n              path='/admin/category/:id/edit'\n              component={CategoryEditScreen}\n              exact\n            />\n\n            <ProtectedRoute\n              isAdmin={true}\n              path='/admin/order/:id/edit'\n              component={OrderEditScreen}\n              exact\n            />\n\n            <ProtectedRoute\n              isAdmin={true}\n              path='/admin/product/:id/edit'\n              component={ProductEditScreen}\n              exact\n            />\n\n            <ProtectedRoute\n              isAdmin={true}\n              path='/admin/supplier/:id/edit'\n              component={SupplierEditScreen}\n              exact\n            />\n\n            <Route\n              isAdmin={true}\n              path='/admin/user/:id/edit'\n              component={UserEditScreen}\n              exact\n            />\n          </ThemeProvider>\n        </div>\n      </Router>\n    </>\n  )\n}\n\nexport default App\n","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Header.js",["389","390","391","392","393","394","395","396","397","398","399","400","401","402"],"// import { Menu } from '@material-ui/core'\r\n// import { Link } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Button from '@material-ui/core/Button'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport { Menu } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport { black } from 'colors'\r\nimport firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Container, Image, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Route, useHistory } from 'react-router-dom'\r\nimport { listCategories } from '../actions/categoryAction'\r\nimport { logout } from '../actions/userActions'\r\nimport SearchBox from './SearchBox'\r\n\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n})((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'center',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    {...props}\r\n  />\r\n))\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n  root: {\r\n    '&:focus': {\r\n      backgroundColor: theme.palette.primary.main,\r\n      '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n        color: theme.palette.common.white,\r\n      },\r\n    },\r\n  },\r\n}))(MenuItem)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  paper: {\r\n    marginRight: theme.spacing(1),\r\n    zIndex: '7 !important',\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n  },\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: -3,\r\n    top: 13,\r\n    border: `2px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n  },\r\n}))(Badge)\r\n\r\nfunction Header(props) {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = React.useState(false)\r\n  const anchorRef = React.useRef(null)\r\n  const anchorReff = React.useRef(null)\r\n  const history = useHistory()\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n  // const [menu, setMenu] = useState(false)\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const menu = (\r\n    <Menu>\r\n      <Menu.Item key='0'>\r\n        <a to='https://www.antgroup.com'>1st menu item</a>\r\n      </Menu.Item>\r\n      <Menu.Item key='1'>\r\n        <a to='https://www.aliyun.com'>2nd menu item</a>\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key='3'>3rd menu item</Menu.Item>\r\n    </Menu>\r\n  )\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { user } = userDetails\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const { loading, success, category } = categoriesList\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  const logoutHandler = () => {\r\n    firebase.auth().signOut()\r\n    dispatch(logout())\r\n    history.push('/')\r\n  }\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen)\r\n  }\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return\r\n    }\r\n\r\n    setOpen(false)\r\n  }\r\n\r\n  function handleListKeyDown(event) {\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault()\r\n      setOpen(false)\r\n    }\r\n  }\r\n\r\n  // return focus to the button when we transitioned from !open -> open\r\n  const prevOpen = React.useRef(open)\r\n  useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      anchorRef.current.focus()\r\n    }\r\n\r\n    dispatch(listCategories())\r\n\r\n    prevOpen.current = open\r\n  }, [open, userInfo, user])\r\n\r\n  return (\r\n    <>\r\n      <Navbar\r\n        expand='lg'\r\n        collapseOnSelect\r\n        className='p-0 pl-5 pr-5 m-0 shadow'\r\n        style={{ backgroundColor: '#edfead', height: '4rem' }}\r\n      >\r\n        <Container fluid>\r\n          <LinkContainer to='/'>\r\n            <Navbar.Brand className='text-uppercase font-weight-bold flex-grow-1 '>\r\n              {/* <h2>ProShop</h2> */}\r\n              <Image\r\n                className='border-bottom border-danger'\r\n                src='/logo/logo_white.png'\r\n                style={{ width: '6rem', height: '5rem', zIndex: '0' }}\r\n              />\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\r\n          <Route render={({ history }) => <SearchBox history={history} />} />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='ml-auto' inline>\r\n              <LinkContainer to='/cart'>\r\n                <Nav.Link className='text-uppercase'>\r\n                  <IconButton aria-label='cart'>\r\n                    <StyledBadge\r\n                      badgeContent={cartItems.length}\r\n                      color='secondary'\r\n                    >\r\n                      <ShoppingCartIcon />\r\n                    </StyledBadge>\r\n                  </IconButton>\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n\r\n              {userInfo ? (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2  mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    {userInfo ? (\r\n                      <Image\r\n                        className='rounded-circle border border-grey'\r\n                        src={userDetails.user && userDetails.user.avatar}\r\n                        alt={userDetails.user && userDetails.user.avatar}\r\n                        style={{ width: '2.5rem', height: '2.5rem' }}\r\n                        fluid\r\n                      />\r\n                    ) : (\r\n                      <Avatar className={classes.orange}>\r\n                        {userInfo.name.substring(0, 1)}\r\n                      </Avatar>\r\n                    )}\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '2' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                          transformOrigin:\r\n                            placement === 'bottom'\r\n                              ? 'center top'\r\n                              : 'center bottom',\r\n                        }}\r\n                      >\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              {userInfo && userInfo.isAdmin && (\r\n                                <MenuItem onClick={handleClose}>\r\n                                  <Link\r\n                                    to='/admin'\r\n                                    className={classes.link}\r\n                                    style={{\r\n                                      color: 'black',\r\n                                      fontSize: '0.8rem',\r\n                                      letterSpacing: '0.05rem',\r\n                                    }}\r\n                                  >\r\n                                    <Image\r\n                                      src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                      className='pr-1'\r\n                                    />\r\n                                    <strong className='text-capitalize'>\r\n                                      Quản lí\r\n                                    </strong>\r\n                                  </Link>\r\n                                </MenuItem>\r\n                              )}\r\n                              <MenuItem onClick={handleClose}>\r\n                                <Link\r\n                                  to='/profile'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                    className='pr-1'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Thông tin cá nhân\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem onClick={handleClose}>\r\n                                <Link\r\n                                  to='/myorders'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    src='https://img.icons8.com/fluent/24/000000/receipt-dollar.png'\r\n                                    className='pr-1'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đơn hàng của tôi\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem\r\n                                onClick={logoutHandler}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link\r\n                                  to='/'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/exit.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Xuất\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2 mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    <Image src='https://img.icons8.com/fluent/30/000000/circled-menu.png' />\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '2' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                          transformOrigin:\r\n                            placement === 'bottom'\r\n                              ? 'center top'\r\n                              : 'center bottom',\r\n                        }}\r\n                      >\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link to='/login' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/key.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Nhập\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link to='/register' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/new-contact.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Kí\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      <Navbar\r\n        expand='lg'\r\n        collapseOnSelect\r\n        className='p-0 pl-5 pr-5'\r\n        style={{ backgroundColor: '#edfead' }}\r\n        variant='tabs'\r\n      >\r\n        {/* <Row>\r\n          <Col md={12} className='pl-5'> */}\r\n        {/* <div className='d-flex justify-content-around'>\r\n            {category &&\r\n              category.map((cat) => (\r\n                <div className='container_link_color'>\r\n                  <Dropdown overlay={menu}>\r\n                    <Link\r\n                      to='/product'\r\n                      className='ant-dropdown-link text-decoration-none link_color'\r\n                      onClick={(e) => e.preventDefault()}\r\n                      style={{ fontSize: '1rem' }}\r\n                    >\r\n                      {cat.name}\r\n                      <DownOutlined\r\n                        className='pl-1'\r\n                        style={{ fontSize: '0.5rem' }}\r\n                      />\r\n                    </Link>\r\n                  </Dropdown>\r\n                </div>\r\n              ))}\r\n          </div> */}\r\n        <div class='collapse navbar-collapse pl-2 pr-2' id='main_nav'>\r\n          <ul className='navbar-nav'>\r\n            <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n              <Link className='nav-link' to='/'>\r\n                Trang chủ\r\n              </Link>\r\n            </li>\r\n\r\n            <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n              <Link className='nav-link' to='/'>\r\n                Giới thiệu\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className='nav-item dropdown has-megamenu'\r\n              style={{ fontSize: '0.85rem' }}\r\n            >\r\n              <Link\r\n                className='nav-link dropdown-toggle'\r\n                to='#'\r\n                data-bs-toggle='dropdown'\r\n              >\r\n                Danh mục\r\n              </Link>\r\n              <div\r\n                className='dropdown-menu megamenu border border-secondary shadow'\r\n                style={{ borderRadius: '2rem' }}\r\n                role='menu'\r\n              >\r\n                <div className='row g-6' style={{ width: '70rem' }}>\r\n                  {category &&\r\n                    category.map((cat) => (\r\n                      <div className='col-lg-2 col-8 text-center pt-2 pb-2'>\r\n                        <div className='col-megamenu container_link_color'>\r\n                          <LinkContainer\r\n                            to={`/product/${cat._id}/category`}\r\n                            className='link_color'\r\n                          >\r\n                            <h6\r\n                              className='title'\r\n                              style={{ fontSize: '0.85rem' }}\r\n                            >\r\n                              {cat.name}\r\n                            </h6>\r\n                          </LinkContainer>\r\n                          <ul className='list-unstyled'>\r\n                            <li>\r\n                              <a to='#'>Custom Menu</a>\r\n                            </li>\r\n                            <li>\r\n                              <a to='#'>Custom Menu</a>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            </li>\r\n\r\n            <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n              <Link className='nav-link' to='/'>\r\n                Liên hệ\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        {/* </Col>\r\n        </Row> */}\r\n      </Navbar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js",["403","404","405"],"import { Link } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Col, Container, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport { black } from 'colors'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nFooter.propTypes = {}\r\n\r\nfunction Footer(props) {\r\n  const classes = useStyles()\r\n  return (\r\n    <footer style={{ backgroundColor: '#edfead' }}>\r\n      <div className='pl-5 pb-4  pr-5'>\r\n        <Row>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Hỗ trợ</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức giao hàng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức thanh toán\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách đổi trả\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách bảo hành\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Thông tin</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Tuyển dụng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Góp ý\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giải đáp thắc mắc\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={3}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Về Natural Food</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giới thiệu\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Liên hệ\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={5}>\r\n            <ListGroup>\r\n              <div className='d-flex justify-content-center'>\r\n                <Image\r\n                  src='/logo/logo_white.png'\r\n                  style={{ width: '9rem', height: '8rem', zIndex: '0' }}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex justify-content-evenly'>\r\n                <Link\r\n                  href='#'\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/gmail-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='#'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/facebook-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='#'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/twitter.png' />\r\n                </Link>\r\n              </div>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Địa chỉ: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      22 Lý Chiêu Hoàng, Phường 10, Quận 6, TP HCM\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Email: </strong>\r\n                    <p className='mb-0 pl-1'>tuvan_online@naturalfood.com.vn</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Số điện thoại: </strong>\r\n                    <p className='mb-0 pl-1'>(028) 38 753 443</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Hotline: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      19002126 ( cước phí: 3000đ/phút )\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <p className='mb-0'>\r\n                      Thời gian tư vấn: Từ 07h30 đến 12h15, 13h15 đến 21h30 các\r\n                      ngày trong tuần ( Trừ ngày Lễ, Tết)\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js",["406","407"],"import React, { useEffect } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listProducts } from '../actions/productActions'\r\nimport Banner from '../components/Banner'\r\nimport Footer from '../components/Footer'\r\nimport Header from '../components/Header'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Meta from '../components/Meta'\r\nimport Paginate from '../components/Paginate'\r\nimport Product from '../components/Product'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\n\r\nfunction HomeScreen({ match, history }) {\r\n  const keyword = match.params.keyword\r\n  const pageNumber = match.params.pageNumber || 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products, pages, page } = productList\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { user } = userDetails\r\n\r\n  useEffect(() => {\r\n    // dispatch(getUserDetails(userInfo._id))\r\n    dispatch(listProducts(keyword, pageNumber))\r\n  }, [dispatch, keyword, pageNumber, userInfo])\r\n\r\n  return (\r\n    <>\r\n      <Meta />\r\n      <Header />\r\n      {/* {!keyword && (\r\n        <ProductCarousel className='m-0' style={{ width: '100vh' }} />\r\n      )} */}\r\n      {!keyword && <Banner />}\r\n\r\n      <h3 className='ml-5 mt-4 mb-0'>Sản phẩm</h3>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <>\r\n          <Row className='ml-5 mr-5'>\r\n            {products?.map((\r\n              product // phai co ? de kiem tra product === null\r\n            ) => (\r\n              <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                <Product product={product} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <div className='d-flex justify-content-center'>\r\n            <Paginate\r\n              pages={pages}\r\n              page={page}\r\n              keyword={keyword ? keyword : ''}\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js",["408","409"],"import Avatar from '@material-ui/core/Avatar'\r\nimport Buttonn from '@material-ui/core/Button'\r\nimport ButtonGroupp from '@material-ui/core/ButtonGroup'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport { Carousel, Image, Skeleton } from 'antd'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport {\r\n   createProductReview,\r\n   listProductDetails,\r\n} from '../actions/productActions.js'\r\nimport ActiveRating from '../components/ActiveRating'\r\nimport Announcement from '../components/Announcement.js'\r\nimport ButtonComponent from '../components/ButtonComponent'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Meta from '../components/Meta'\r\nimport ProgressLine from '../components/ProgressLine.js'\r\nimport Rating from '../components/Rating'\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants.js'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      '& .MuiTextField-root': {\r\n         margin: theme.spacing(1),\r\n      },\r\n\r\n      '& .MuiInputBase-input': {\r\n         padding: theme.spacing(1),\r\n      },\r\n\r\n      '& .MuiFilledInput-input': {\r\n         padding: theme.spacing(1),\r\n      },\r\n\r\n      '& .MuiFilledInput-inputMarginDense': {\r\n         padding: theme.spacing(1),\r\n         textAlign: 'center',\r\n      },\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(4),\r\n      height: theme.spacing(4),\r\n      textAlign: 'center',\r\n   },\r\n   form: {\r\n      width: 1150,\r\n   },\r\n}))\r\n\r\nfunction formatPrice(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction ProductScreen({ history, match }) {\r\n   const classes = useStyles()\r\n   const [qty, setQty] = useState(1)\r\n   const [rating, setRating] = useState(0)\r\n   const [comment, setComment] = useState('')\r\n   const [hover, setHover] = React.useState(-1)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const productDetails = useSelector((state) => state.productDetails)\r\n   const { loading, error, product } = productDetails\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const productReviewCreate = useSelector((state) => state.productReviewCreate)\r\n   const {\r\n      loading: loadingProductReview,\r\n      success: successProductReview,\r\n      error: errorProductReview,\r\n   } = productReviewCreate\r\n\r\n   var settings = {\r\n      className: 'slider variable-width',\r\n      dots: true,\r\n      infinite: true,\r\n      speed: 700,\r\n      slidesToShow: 1,\r\n      slidesToScroll: 1,\r\n      adaptiveHeight: true,\r\n      autoplaySpeed: 2500,\r\n      cssEase: 'linear',\r\n      autoplay: true,\r\n   }\r\n\r\n   function onChange(a, b, c) {\r\n      console.log(a, b, c)\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successProductReview) {\r\n         setRating(0)\r\n         setComment(' ')\r\n         dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n      }\r\n\r\n      dispatch(listProductDetails(match.params.id))\r\n   }, [dispatch, match, successProductReview])\r\n\r\n   const submitHandle = (e) => {\r\n      e.preventDefault()\r\n      dispatch(\r\n         createProductReview(match.params.id, {\r\n            rating,\r\n            comment,\r\n         })\r\n      )\r\n      toast.success(\r\n         <div>\r\n            <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n            Đã đánh giá thành công\r\n         </div>,\r\n         {\r\n            className: 'Toastify__toast--success',\r\n            position: 'top-right',\r\n            autoClose: 2500,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n         }\r\n      )\r\n   }\r\n\r\n   const addToCartHandler = () => {\r\n      if (qty <= product.countInStock && qty > 0) {\r\n         history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n      } else if (qty <= 0) {\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' />\r\n               Phải có ít nhất 1 sản phẩm\r\n            </div>,\r\n            {\r\n               className: 'Toastify__toast--success',\r\n               position: 'top-right',\r\n               autoClose: 3000,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n      } else {\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' />\r\n               {`Số lượng không được vượt quá ${product.countInStock}`}\r\n            </div>,\r\n            {\r\n               className: 'Toastify__toast--success',\r\n               position: 'top-right',\r\n               autoClose: 3000,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n         {/* {successProductReview && <MessageSuccess variant='Success' />} */}\r\n         <Header />\r\n         <div className='ml-4 mr-4 mb-4'>\r\n            <Link className='btn btn-light my-3 rounded-pill' to='/'>\r\n               <i className='fas fa-arrow-left pr-2'></i>\r\n               Quay lại\r\n            </Link>\r\n            {loading ? (\r\n               <Loader />\r\n            ) : error ? (\r\n               <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n               <>\r\n                  <Meta title={product.name} />\r\n                  <Row className='container-productGreen mb-2 rounded shadow card_color'>\r\n                     <Col md={6} className='p-3 img-productGreen'>\r\n                        <Carousel vertical fade dots>\r\n                           {product.images &&\r\n                              product.images.map((img) => (\r\n                                 <Image\r\n                                    width={650}\r\n                                    height={650}\r\n                                    src={img.url}\r\n                                 />\r\n                              ))}\r\n                        </Carousel>\r\n\r\n                        {/* <Image.PreviewGroup>\r\n                           {product.images &&\r\n                              product.images.map((img) => (\r\n                                 <Image src={img.url} />\r\n                              ))}\r\n                        </Image.PreviewGroup> */}\r\n                     </Col>\r\n\r\n                     <Col md={6} className='text-left p-1'>\r\n                        <Row className='pl-4 pr-2'>\r\n                           <ListGroup variant='flush' className='pr-3'>\r\n                              <ListGroup.Item className='border-0 pb-0'>\r\n                                 <strong>\r\n                                    <h3 className='border-0 pb-0'>\r\n                                       {product.name}\r\n                                    </h3>\r\n                                 </strong>\r\n                              </ListGroup.Item>\r\n\r\n                              <ListGroup.Item className='border-0 pb-0'>\r\n                                 <Rating\r\n                                    value={product.rating}\r\n                                    text={`(${product.numReviews} đánh giá)`}\r\n                                 />\r\n                              </ListGroup.Item>\r\n\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <p className='mb-0'>{product.description}</p>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <Row>\r\n                                    <Col\r\n                                       md={6}\r\n                                       className='d-flex align-items-center'\r\n                                    >\r\n                                       <h6 className='mb-0 pr-2'>Khối lượng</h6>\r\n                                       <p className='mb-0'>{product.mass}</p>\r\n                                    </Col>\r\n                                 </Row>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <h6 className='mb-0'>Hướng dẫn sử dụng</h6>\r\n                                 <p className='mb-0'>{product.hdsd}</p>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify border-bottom mb-2'>\r\n                                 <h6 className='mb-0'>Bảo quản</h6>\r\n                                 <p className='mb-0'>{product.hdbq}</p>\r\n                              </ListGroup.Item>\r\n                           </ListGroup>\r\n\r\n                           <ListGroup\r\n                              variant='flush'\r\n                              className='border-0 pt-0 mb-4'\r\n                           >\r\n                              <div className='group-items pt-2 pb-2 ml-4 mr-4 rounded shadow'>\r\n                                 <ListGroup.Item className='border-0 pt-0 pb-0 mb-0 pr-0 group-items'>\r\n                                    <h2 className='text-lowercase'>\r\n                                       {product.price &&\r\n                                          formatPrice(product.price, 'đ')}\r\n                                    </h2>\r\n                                 </ListGroup.Item>\r\n\r\n                                 <ListGroup.Item className='border-0 group-items'>\r\n                                    {product.countInStock > 0 ? (\r\n                                       <div>\r\n                                          <Row>\r\n                                             <Col md={5}>\r\n                                                <p className='mb-0'>\r\n                                                   Trạng thái:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={7}>\r\n                                                <p className='mb-0 fw-bold ml-2 text-success'>\r\n                                                   {product?.countInStock} sản\r\n                                                   phẩm\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                       </div>\r\n                                    ) : (\r\n                                       <div className='d-flex justify-content-start align-items-center'>\r\n                                          <p className='mb-0'>Trạng thái:</p>\r\n                                          <Image src='https://img.icons8.com/fluent/35/000000/close-sign.png' />\r\n                                          <p className='mb-0 fw-bold ml-2 danger'>\r\n                                             Hết hàng\r\n                                          </p>\r\n                                       </div>\r\n                                    )}\r\n                                 </ListGroup.Item>\r\n\r\n                                 {product.countInStock > 0 && (\r\n                                    <ListGroup.Item className='border-0 pt-0 pb-0 group-items '>\r\n                                       <Row>\r\n                                          <Col\r\n                                             md={4}\r\n                                             className='d-flex align-items-center'\r\n                                          >\r\n                                             <p className='mb-0'>Số lượng:</p>\r\n                                          </Col>\r\n                                          <Col md={7} className='d-flex'>\r\n                                             <ButtonGroupp\r\n                                                size='small'\r\n                                                aria-label='small '\r\n                                             >\r\n                                                <Buttonn\r\n                                                   aria-label='reduce'\r\n                                                   size='small'\r\n                                                   color='primary'\r\n                                                   onClick={() => {\r\n                                                      setQty(\r\n                                                         Math.max(qty - 1, 1)\r\n                                                      )\r\n                                                   }}\r\n                                                   variant='contained'\r\n                                                >\r\n                                                   <RemoveIcon fontSize='small' />\r\n                                                </Buttonn>\r\n                                                {/* {qty === 0 ? (\r\n                                <Buttonn variant='contained'>1</Buttonn>\r\n                              ) : (\r\n                                <Buttonn variant='contained'>{qty}</Buttonn>\r\n                              )} */}\r\n                                                <div>\r\n                                                   <TextField\r\n                                                      className={classes.root}\r\n                                                      id='filled-size-small'\r\n                                                      value={qty}\r\n                                                      variant='filled'\r\n                                                      size='small'\r\n                                                      onChange={(e) =>\r\n                                                         setQty(e.target.value)\r\n                                                      }\r\n                                                   />\r\n                                                </div>\r\n                                                <Buttonn\r\n                                                   aria-label='increase'\r\n                                                   size='small'\r\n                                                   onClick={() => {\r\n                                                      setQty(Number(qty) + 1)\r\n                                                   }}\r\n                                                   variant='contained'\r\n                                                   color='primary'\r\n                                                >\r\n                                                   <AddIcon fontSize='small' />\r\n                                                </Buttonn>\r\n                                             </ButtonGroupp>\r\n                                          </Col>\r\n                                       </Row>\r\n                                    </ListGroup.Item>\r\n                                 )}\r\n                              </div>\r\n\r\n                              <ListGroup.Item className='ml-4 pl-0 pr-0 pb-0 mr-4'>\r\n                                 <Button\r\n                                    onClick={addToCartHandler}\r\n                                    className='btn-block btn_color rounded-pill'\r\n                                    type='button'\r\n                                    disabled={product.countInStock === 0}\r\n                                    style={{ fontSize: '1em', width: '20rem' }}\r\n                                 >\r\n                                    <AddShoppingCartIcon />\r\n                                    <strong className='pl-1 '>\r\n                                       Thêm vào giỏ hàng\r\n                                    </strong>\r\n                                    <div className='wave'></div>\r\n                                 </Button>\r\n                              </ListGroup.Item>\r\n                           </ListGroup>\r\n                        </Row>\r\n                     </Col>\r\n                  </Row>\r\n\r\n                  {loading ? (\r\n                     <Loader />\r\n                  ) : (\r\n                     <Row>\r\n                        <Col className='mt-3 p-3 pl-5 pr-5 background-light rounded shadow card_color'>\r\n                           <h5 className='text-uppercase'>Đánh giá sản phẩm</h5>\r\n                           {product.reviews.length === 0 && (\r\n                              <Row>\r\n                                 <Col md={4}>\r\n                                    <Announcement variant='warning'>\r\n                                       Không có đánh giá{' '}\r\n                                       <Image src='https://img.icons8.com/fluent/24/000000/box-important.png' />\r\n                                    </Announcement>\r\n                                 </Col>\r\n                              </Row>\r\n                           )}\r\n                           <div\r\n                              className=' rounded text-center circle-rate pt-2 pb-1 ml-3 mb-2'\r\n                              style={{ width: '14rem' }}\r\n                           >\r\n                              <h5 className=''>Điểm</h5>\r\n                              <h4 className='mb-0'>\r\n                                 {product.rating + ' trên 5'}\r\n                              </h4>\r\n                           </div>\r\n\r\n                           <ListGroup variant='flush'>\r\n                              {loadingProductReview ? (\r\n                                 <>\r\n                                    {/* <MessageSuccess variant='Success' /> */}\r\n                                    <Skeleton avatar paragraph={{ rows: 1 }} />\r\n                                 </>\r\n                              ) : (\r\n                                 product.reviews.map((review) => (\r\n                                    <ListGroup.Item key={review._id}>\r\n                                       <div className='d-flex justify-content-start'>\r\n                                          {/* <Row>\r\n                        <Col md={1} className=''> */}\r\n                                          <div className='pr-2'>\r\n                                             {review ? (\r\n                                                <Image\r\n                                                   className='rounded-circle'\r\n                                                   src={user.avatar}\r\n                                                   style={{\r\n                                                      height: '2rem',\r\n                                                      width: '2rem',\r\n                                                   }}\r\n                                                />\r\n                                             ) : (\r\n                                                <Avatar\r\n                                                   className={classes.orange}\r\n                                                >\r\n                                                   {review.name.substring(0, 1)}\r\n                                                </Avatar>\r\n                                             )}\r\n                                          </div>\r\n                                          {/* </Col>\r\n                        <Col> */}\r\n                                          <div>\r\n                                             <div className='d-flex'>\r\n                                                <h5 className='mb-0 text-capitalize'>\r\n                                                   {review.name}\r\n                                                </h5>\r\n                                                <span className='pl-2'>\r\n                                                   <Rating\r\n                                                      value={review.rating}\r\n                                                   />\r\n                                                </span>\r\n                                             </div>\r\n                                             <div\r\n                                                style={{\r\n                                                   fontWeight: '200',\r\n                                                   color: 'gray',\r\n                                                   fontSize: '0.65rem',\r\n                                                }}\r\n                                             >\r\n                                                <p className='mb-1'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         review.createdAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - MM/dd/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </p>\r\n                                             </div>\r\n                                          </div>\r\n                                          {/* </Col>\r\n                      </Row> */}\r\n                                       </div>\r\n                                       <strong\r\n                                          className='ml-3'\r\n                                          style={{\r\n                                             fontWeight: '500',\r\n                                             color: 'black',\r\n                                          }}\r\n                                       >\r\n                                          {review.comment}\r\n                                       </strong>\r\n                                    </ListGroup.Item>\r\n                                 ))\r\n                              )}\r\n\r\n                              <ListGroup.Item shadow>\r\n                                 {loadingProductReview && <ProgressLine />}\r\n                                 <h5>\r\n                                    ĐÁNH GIÁ VÀ BÌNH LUẬN{' '}\r\n                                    <Image src='https://img.icons8.com/fluent/24/000000/favorite-chat.png' />\r\n                                 </h5>\r\n\r\n                                 {errorProductReview && (\r\n                                    <Message>{errorProductReview}</Message>\r\n                                 )}\r\n                                 {userInfo ? (\r\n                                    <Form onSubmit={submitHandle}>\r\n                                       <Form.Group controlId='rating'>\r\n                                          <Form.Label\r\n                                             as='h5'\r\n                                             className='text-capitalize'\r\n                                          >\r\n                                             Đánh giá\r\n                                          </Form.Label>\r\n                                          <ActiveRating\r\n                                             value={rating}\r\n                                             hover={hover}\r\n                                             setValue={setRating}\r\n                                             setHover={setHover}\r\n                                             size='large'\r\n                                          />\r\n                                       </Form.Group>\r\n\r\n                                       <Form.Group\r\n                                          controlId='comment'\r\n                                          className={classes.root}\r\n                                       >\r\n                                          <TextField\r\n                                             className={classes.form}\r\n                                             id='outlined-multiline-static'\r\n                                             label='Bình luận'\r\n                                             multiline\r\n                                             rows={2}\r\n                                             value={comment}\r\n                                             // defaultValue='Default Value'\r\n                                             // variant='outlined'\r\n                                             onChange={(e) =>\r\n                                                setComment(e.target.value)\r\n                                             }\r\n                                          />\r\n                                       </Form.Group>\r\n                                       <ButtonComponent\r\n                                          type='submit'\r\n                                          color='secondary'\r\n                                          size='large'\r\n                                          value='GỬI'\r\n                                          disabled={loadingProductReview}\r\n                                          endIcon={<SendIcon />}\r\n                                       ></ButtonComponent>\r\n                                       <ToastContainer />\r\n                                    </Form>\r\n                                 ) : (\r\n                                    <Announcement\r\n                                       variant='dark'\r\n                                       style={{ color: '#82FF9E' }}\r\n                                    >\r\n                                       Vui lòng{' '}\r\n                                       <Link\r\n                                          to='/login'\r\n                                          style={{\r\n                                             color: '#5FAD41',\r\n                                             textDecoration: 'none',\r\n                                             fontWeight: '700',\r\n                                          }}\r\n                                       >\r\n                                          Đăng nhập\r\n                                       </Link>{' '}\r\n                                       để đánh giá\r\n                                    </Announcement>\r\n                                 )}\r\n                              </ListGroup.Item>\r\n                           </ListGroup>\r\n                        </Col>\r\n                     </Row>\r\n                  )}\r\n               </>\r\n            )}\r\n         </div>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\store.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js",["410","411"],"import { useState } from 'react'\r\nimport { css } from '@emotion/core'\r\nimport ClipLoader from 'react-spinners/ClipLoader'\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n`\r\n\r\nfunction Loader() {\r\n  let [loading, setLoading] = useState(true)\r\n  let [color, setColor] = useState('orange')\r\n\r\n  return (\r\n    <div className='sweet-loading text-center'>\r\n      <ClipLoader color={color} loading={loading} css={override} size={60} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js",["412","413","414","415","416","417","418","419"],"import Buttonn from '@material-ui/core/Button'\r\nimport ButtonGroupp from '@material-ui/core/ButtonGroup'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n   Button,\r\n   Card,\r\n   Col,\r\n   Image,\r\n   ListGroup,\r\n   ListGroupItem,\r\n   Row,\r\n} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions.js'\r\nimport { getUserDetails } from '../actions/userActions.js'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport Message from '../components/Message'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Chip } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      '& .MuiTextField-root': {\r\n         margin: theme.spacing(0),\r\n      },\r\n\r\n      '& .MuiInputBase-input': {\r\n         padding: theme.spacing(2),\r\n      },\r\n\r\n      '& .MuiFilledInput-input': {\r\n         padding: theme.spacing(2),\r\n      },\r\n\r\n      '& .MuiFilledInput-inputMarginDense': {\r\n         padding: theme.spacing(1),\r\n         textAlign: 'center',\r\n      },\r\n   },\r\n}))\r\n\r\nfunction format(n) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'\r\n}\r\n\r\nexport const CartScreen = ({ match, location, history }) => {\r\n   const classes = useStyles()\r\n   const productId = match.params.id\r\n   const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const cart = useSelector((state) => state.cart)\r\n   const { cartItems } = cart\r\n\r\n   const [items, setItems] = useState(cartItems.map((c) => c.qty))\r\n\r\n   useEffect(() => {\r\n      if (productId) {\r\n         dispatch(addToCart(productId, qty))\r\n      }\r\n   }, [dispatch, productId, qty, userInfo])\r\n\r\n   const removeFromCartHandler = (id) => {\r\n      dispatch(removeFromCart(id))\r\n   }\r\n\r\n   const checkoutHandler = () => {\r\n      history.push('/login?redirect=shipping')\r\n   }\r\n\r\n   // const test = (e) => {\r\n   //   const value = e.target.value\r\n   //   if (parseInt(value) === 0) {\r\n   //     alert('sai')\r\n   //   }\r\n   //   console.log(value)\r\n   // }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {/* <Link className='btn btn-light my-3 rounded-pill' to='/'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link> */}\r\n\r\n         <Row className='m-4' style={{ height: '100vh' }}>\r\n            <Col md={8} className='p-0 pr-4 mt-3 text-uppercase'>\r\n               {cartItems.length === 0 ? (\r\n                  // <Announcement variant='danger'>\r\n                  <>\r\n                     {/* <Row>\r\n                <Col className='mb-2'> */}\r\n                     <div className='mb-1'>\r\n                        <Link to='/'>\r\n                           <Button className='text-uppercase btn_color rounded-pill'>\r\n                              Mua hàng\r\n                           </Button>\r\n                        </Link>\r\n                     </div>\r\n                     {/* </Col>\r\n                <Col md={12}> */}\r\n                     <div>\r\n                        <Image\r\n                           className=' p-5'\r\n                           src='/images/cart_empty.png'\r\n                           fluid\r\n                        />\r\n                     </div>\r\n                     {/* </Col>\r\n              </Row> */}\r\n                  </>\r\n               ) : (\r\n                  // </Announcement>\r\n                  <ListGroup variant='flush'>\r\n                     <h3>Giỏ hàng</h3>\r\n                     {cartItems.map((item) => (\r\n                        <ListGroup.Item\r\n                           key={item.product}\r\n                           className='border-0 mt-1 shadow card_color'\r\n                           rounded\r\n                        >\r\n                           <div className='mb-2'>\r\n                              <Chip label={item.brand} variant='outlined' />\r\n                           </div>\r\n                           <Row>\r\n                              <Col md={2}>\r\n                                 <Link\r\n                                    to={`/product/${item.product}`}\r\n                                    className='text-decoration-none  product-card-green'\r\n                                 >\r\n                                    <Image\r\n                                       src={item.images[0].url}\r\n                                       alt={item.name}\r\n                                       fluid\r\n                                    />\r\n                                 </Link>\r\n                              </Col>\r\n\r\n                              <Col\r\n                                 md={3}\r\n                                 className='text-lowercase text-capitalize d-flex align-items-center'\r\n                              >\r\n                                 <Link\r\n                                    to={`/product/${item.product}`}\r\n                                    className='text-decoration-none'\r\n                                 >\r\n                                    <p\r\n                                       className='mb-0'\r\n                                       style={{ color: '#343a40' }}\r\n                                    >\r\n                                       {item.name}\r\n                                    </p>\r\n                                 </Link>\r\n                              </Col>\r\n\r\n                              <Col\r\n                                 md={3}\r\n                                 className='text-lowercase d-flex align-items-center'\r\n                              >\r\n                                 <h4 className='text-lowercase'>\r\n                                    {format(item.price)}\r\n                                 </h4>\r\n                              </Col>\r\n\r\n                              <Col md={3} className='d-flex align-items-center'>\r\n                                 <ButtonGroupp size='small' aria-label='small '>\r\n                                    <Buttonn\r\n                                       aria-label='reduce'\r\n                                       size='small'\r\n                                       color='primary'\r\n                                       onClick={() =>\r\n                                          Number(item.qty) - 1 === 0\r\n                                             ? toast.error(\r\n                                                  <div>\r\n                                                     <ErrorOutlineIcon\r\n                                                        className='pr-1'\r\n                                                        fontSize='large'\r\n                                                     />\r\n                                                     {`Phải có ít nhất 1 sản phẩm`}\r\n                                                  </div>,\r\n                                                  {\r\n                                                     className:\r\n                                                        'Toastify__toast--success',\r\n                                                     position: 'top-right',\r\n                                                     autoClose: 3000,\r\n                                                     hideProgressBar: true,\r\n                                                     closeOnClick: true,\r\n                                                     pauseOnHover: true,\r\n                                                     draggable: true,\r\n                                                     progress: undefined,\r\n                                                  }\r\n                                               )\r\n                                             : item.qty > 0 &&\r\n                                               dispatch(\r\n                                                  addToCart(\r\n                                                     item.product,\r\n                                                     Math.min(item.qty - 1, 1)\r\n                                                  )\r\n                                               )\r\n                                       }\r\n                                       variant='contained'\r\n                                    >\r\n                                       <RemoveIcon fontSize='small' />\r\n                                    </Buttonn>\r\n\r\n                                    {/* <Buttonn variant='contained'>{item.qty}</Buttonn> */}\r\n                                    <div>\r\n                                       {item.qty === 0 ? (\r\n                                          <TextField\r\n                                             error\r\n                                             className={classes.root}\r\n                                             id='filled-size-small'\r\n                                             value={item.qty}\r\n                                             variant='filled'\r\n                                             size='small'\r\n                                             onChange={(e) =>\r\n                                                // Number(e.target.value) === 0\r\n                                                //   ? toast.error(\r\n                                                //       <div>\r\n                                                //         <ErrorOutlineIcon\r\n                                                //           className='pr-1'\r\n                                                //           fontSize='large'\r\n                                                //         />\r\n                                                //         Phải có ít nhất 1 sản phẩm\r\n                                                //       </div>,\r\n                                                //       {\r\n                                                //         className: 'Toastify__toast--success',\r\n                                                //         position: 'top-right',\r\n                                                //         autoClose: 3000,\r\n                                                //         hideProgressBar: true,\r\n                                                //         closeOnClick: true,\r\n                                                //         pauseOnHover: true,\r\n                                                //         draggable: true,\r\n                                                //         progress: undefined,\r\n                                                //       }\r\n                                                //     )\r\n                                                //   :\r\n                                                Number(e.target.value) >\r\n                                                item.countInStock\r\n                                                   ? toast.error(\r\n                                                        <div>\r\n                                                           <ErrorOutlineIcon\r\n                                                              className='pr-1'\r\n                                                              fontSize='large'\r\n                                                           />\r\n                                                           {`Số lượng không được vượt quá ${item.countInStock}`}\r\n                                                        </div>,\r\n                                                        {\r\n                                                           className:\r\n                                                              'Toastify__toast--success',\r\n                                                           position:\r\n                                                              'top-right',\r\n                                                           autoClose: 3000,\r\n                                                           hideProgressBar: true,\r\n                                                           closeOnClick: true,\r\n                                                           pauseOnHover: true,\r\n                                                           draggable: true,\r\n                                                           progress: undefined,\r\n                                                        }\r\n                                                     )\r\n                                                   : Number(e.target.value) <=\r\n                                                        item.countInStock &&\r\n                                                     dispatch(\r\n                                                        addToCart(\r\n                                                           item.product,\r\n                                                           Math.max(\r\n                                                              Number(\r\n                                                                 e.target.value\r\n                                                              ),\r\n                                                              0\r\n                                                           )\r\n                                                        )\r\n                                                     )\r\n                                             }\r\n                                          />\r\n                                       ) : (\r\n                                          <TextField\r\n                                             className={classes.root}\r\n                                             id='filled-size-small'\r\n                                             value={item.qty}\r\n                                             variant='filled'\r\n                                             size='small'\r\n                                             onChange={(e) =>\r\n                                                // Number(e.target.value) === 0\r\n                                                //   ? toast.error(\r\n                                                //       <div>\r\n                                                //         <ErrorOutlineIcon\r\n                                                //           className='pr-1'\r\n                                                //           fontSize='large'\r\n                                                //         />\r\n                                                //         Phải có ít nhất 1 sản phẩm\r\n                                                //       </div>,\r\n                                                //       {\r\n                                                //         className: 'Toastify__toast--success',\r\n                                                //         position: 'top-right',\r\n                                                //         autoClose: 3000,\r\n                                                //         hideProgressBar: true,\r\n                                                //         closeOnClick: true,\r\n                                                //         pauseOnHover: true,\r\n                                                //         draggable: true,\r\n                                                //         progress: undefined,\r\n                                                //       }\r\n                                                //     )\r\n                                                //   :\r\n                                                Number(e.target.value) >\r\n                                                item.countInStock\r\n                                                   ? toast.error(\r\n                                                        <div>\r\n                                                           <ErrorOutlineIcon\r\n                                                              className='pr-1'\r\n                                                              fontSize='large'\r\n                                                           />\r\n                                                           {`Số lượng không được vượt quá ${item.countInStock}`}\r\n                                                        </div>,\r\n                                                        {\r\n                                                           className:\r\n                                                              'Toastify__toast--success',\r\n                                                           position:\r\n                                                              'top-right',\r\n                                                           autoClose: 3000,\r\n                                                           hideProgressBar: true,\r\n                                                           closeOnClick: true,\r\n                                                           pauseOnHover: true,\r\n                                                           draggable: true,\r\n                                                           progress: undefined,\r\n                                                        }\r\n                                                     )\r\n                                                   : Number(e.target.value) <=\r\n                                                        item.countInStock &&\r\n                                                     dispatch(\r\n                                                        addToCart(\r\n                                                           item.product,\r\n                                                           Math.max(\r\n                                                              Number(\r\n                                                                 e.target.value\r\n                                                              ),\r\n                                                              0\r\n                                                           )\r\n                                                        )\r\n                                                     )\r\n                                             }\r\n                                          />\r\n                                       )}\r\n                                    </div>\r\n                                    <Buttonn\r\n                                       aria-label='increase'\r\n                                       size='small'\r\n                                       onClick={() => {\r\n                                          item.qty < item.countInStock\r\n                                             ? dispatch(\r\n                                                  addToCart(\r\n                                                     item.product,\r\n                                                     Number(item.qty) + 1\r\n                                                  )\r\n                                               )\r\n                                             : Number(item.qty) >=\r\n                                                  item.countInStock &&\r\n                                               toast.error(\r\n                                                  <div>\r\n                                                     <ErrorOutlineIcon\r\n                                                        className='pr-1'\r\n                                                        fontSize='large'\r\n                                                     />\r\n                                                     {`Số lượng không được vượt quá  ${item.countInStock}`}\r\n                                                  </div>,\r\n                                                  {\r\n                                                     className:\r\n                                                        'Toastify__toast--success',\r\n                                                     position: 'top-right',\r\n                                                     autoClose: 3000,\r\n                                                     hideProgressBar: true,\r\n                                                     closeOnClick: true,\r\n                                                     pauseOnHover: true,\r\n                                                     draggable: true,\r\n                                                     progress: undefined,\r\n                                                  }\r\n                                               )\r\n                                       }}\r\n                                       variant='contained'\r\n                                       color='primary'\r\n                                    >\r\n                                       <AddIcon fontSize='small' />\r\n                                    </Buttonn>\r\n                                 </ButtonGroupp>\r\n                              </Col>\r\n\r\n                              <Col md={1} className='d-flex align-items-center'>\r\n                                 <Button\r\n                                    type='button'\r\n                                    className='p-1 rounded'\r\n                                    variant='light'\r\n                                    onClick={() =>\r\n                                       removeFromCartHandler(item.product)\r\n                                    }\r\n                                 >\r\n                                    <i\r\n                                       style={{ fontSize: '1.2rem' }}\r\n                                       class='far fa-trash-alt'\r\n                                    ></i>\r\n                                 </Button>\r\n                              </Col>\r\n                              <ToastContainer />\r\n                           </Row>\r\n                        </ListGroup.Item>\r\n                     ))}\r\n                  </ListGroup>\r\n               )}\r\n            </Col>\r\n\r\n            <Col md={4} className='p-0'>\r\n               <Card\r\n                  className='border-0 shadow mt-4 card_color p-3'\r\n                  style={{ zIndex: '1' }}\r\n               >\r\n                  <ListGroup variant='flush'>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill text-capitalize'>\r\n                                 Số lượng:{' '}\r\n                              </h5>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill-value text-lowercase pl-1'>\r\n                                 {cartItems.reduce(\r\n                                    (acc, item) => acc + item.qty,\r\n                                    0\r\n                                 )}{' '}\r\n                                 sản phẩm\r\n                              </h5>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill text-capitalize'>\r\n                                 Giá:{' '}\r\n                              </h5>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill-value text-lowercase pl-1'>\r\n                                 {format(\r\n                                    cartItems.reduce(\r\n                                       (acc, item) =>\r\n                                          acc + item.qty * item.price,\r\n                                       0\r\n                                    )\r\n                                 )}\r\n                              </h5>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                  </ListGroup>\r\n               </Card>\r\n               <Card className='mt-3 border-0'>\r\n                  <Button\r\n                     type='button'\r\n                     className='btn-block rounded-pill text-uppercase p-3 text-light'\r\n                     disabled={\r\n                        cartItems.length === 0 ||\r\n                        cartItems.reduce((acc, item) => acc + item.qty, 0) <\r\n                           cartItems.length\r\n                     }\r\n                     onClick={checkoutHandler}\r\n                     size='sm'\r\n                  >\r\n                     <h5 className='text-light m-0'>Đặt hàng</h5>\r\n                  </Button>\r\n               </Card>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default CartScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js",["420","421","422","423","424","425","426","427","428","429"],"import {\r\n  CLEAR_ERRORS,\r\n  LOAD_USER_FAIL,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_USER_FAIL,\r\n  REGISTER_USER_REQUEST,\r\n  REGISTER_USER_SUCCESS,\r\n  USER_DELETE_FAIL,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_RESET,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_RESET,\r\n  USER_LIST_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_RESET,\r\n  USER_UPDATE_SUCCESS,\r\n} from '../constants/userConstants'\r\n\r\nexport const userLoginReducer = (state = { products: [] }, action) => {\r\n  switch (action.type) {\r\n    case USER_LOGIN_REQUEST:\r\n      return { loading: true }\r\n    case USER_LOGIN_SUCCESS:\r\n      return { loading: false, userInfo: action.payload }\r\n    case USER_LOGIN_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case USER_LOGOUT:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userRegisterReducer = (state = { products: [] }, action) => {\r\n  switch (action.type) {\r\n    case USER_REGISTER_REQUEST:\r\n      return { loading: true }\r\n    case USER_REGISTER_SUCCESS:\r\n      return { loading: false, userInfo: action.payload }\r\n    case USER_REGISTER_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userDetailsReducer = (state = { user: {} }, action) => {\r\n  switch (action.type) {\r\n    case USER_DETAILS_REQUEST:\r\n      return { ...state, loading: true }\r\n    case USER_DETAILS_SUCCESS:\r\n      return { loading: false, user: action.payload }\r\n    case USER_DETAILS_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case USER_DETAILS_RESET:\r\n      return { user: {} }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userUpdateProfileReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_UPDATE_PROFILE_REQUEST:\r\n      return { loading: true }\r\n    case USER_UPDATE_PROFILE_SUCCESS:\r\n      return { loading: false, success: true, user: action.payload }\r\n    case USER_UPDATE_PROFILE_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userListReducer = (state = { users: [] }, action) => {\r\n  switch (action.type) {\r\n    case USER_LIST_REQUEST:\r\n      return { loading: true }\r\n    case USER_LIST_SUCCESS:\r\n      return { loading: false, users: action.payload }\r\n    case USER_LIST_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case USER_LIST_RESET:\r\n      return { users: [] }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userDeleteReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_DELETE_REQUEST:\r\n      return { loading: true }\r\n    case USER_DELETE_SUCCESS:\r\n      return { loading: false, success: true, s: action.payload }\r\n    case USER_DELETE_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userUpdateReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_UPDATE_REQUEST:\r\n      return { loading: true }\r\n    case USER_UPDATE_SUCCESS:\r\n      return { loading: false, success: true, s: action.payload }\r\n    case USER_UPDATE_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case USER_UPDATE_RESET:\r\n      return { users: [] }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const authReducer = (state = { user: {} }, action) => {\r\n  switch (action.type) {\r\n    case USER_LOGIN_REQUEST:\r\n    case USER_REGISTER_REQUEST:\r\n    case USER_DETAILS_REQUEST:\r\n      return {\r\n        loading: true,\r\n        isAuthenticated: false,\r\n      }\r\n\r\n    case USER_LOGIN_SUCCESS:\r\n    case REGISTER_USER_SUCCESS:\r\n    case USER_DETAILS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        isAuthenticated: true,\r\n        user: action.payload,\r\n      }\r\n\r\n    case USER_LOGOUT:\r\n      return {\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n      }\r\n\r\n    case USER_DETAILS_FAIL:\r\n      return {\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        error: action.payload,\r\n      }\r\n\r\n    // case LOGOUT_FAIL:\r\n    //   return {\r\n    //     ...state,\r\n    //     error: action.payload,\r\n    //   }\r\n\r\n    case USER_LOGIN_FAIL:\r\n    case USER_REGISTER_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        error: action.payload,\r\n      }\r\n\r\n    case CLEAR_ERRORS:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js",["430","431","432","433","434","435","436"],"import firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { login, register } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport ProgressLine from '../components/ProgressLine'\r\nimport Message from '../components/Message'\r\nimport configAuth from '../configAuth'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nconst firebaseApp = firebase.initializeApp(configAuth)\r\n\r\nfunction LoginScreen({ location, history }) {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  const [isLogin, setIsLogin] = useState(false)\r\n  const [name, setName] = useState('')\r\n  const [mail, setMail] = useState('')\r\n  const [photo, setPhoto] = useState('')\r\n\r\n  const onSubmit = () => {\r\n    var provider = new firebase.auth.GoogleAuthProvider()\r\n    firebase\r\n      .auth()\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        /** @type {firebase.auth.OAuthCredential} */\r\n        var credential = result.credential\r\n\r\n        var token = credential.accessToken\r\n\r\n        const { user } = result\r\n\r\n        const email = user.email\r\n        const name = user.displayName\r\n        const avatar = user.photoURL\r\n        const password = ''\r\n\r\n        dispatch(register(name, email, avatar, password))\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { loading, error, userInfo } = userLogin\r\n\r\n  const redirect = location.search ? location.search.split('=')[1] : '/'\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(login(email, password))\r\n  }\r\n\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        console.log('User signed in')\r\n        console.log(user.displayName + '\\n' + user.email)\r\n        setIsLogin(true)\r\n        setName(user.displayName)\r\n        setPhoto(user.photoURL)\r\n        setMail(user.email)\r\n        // history.push(redirect)\r\n      } else {\r\n        console.log('No User')\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(redirect)\r\n    }\r\n  }, [history, userInfo, redirect])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row className='shadow p-5 card_color ml-4 mr-4'>\r\n        <Col md={7}>\r\n          <div className='d-flex justify-content-center'>\r\n            <Image\r\n              style={{ zIndex: '2' }}\r\n              src='/background/Wavy_Gen-01_Single-07.jpg'\r\n              fluid\r\n            />\r\n          </div>\r\n        </Col>\r\n        <Col md={5}>\r\n          <div className='pt-5 mt-5'>\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <ProgressLine />}\r\n            <Form onSubmit={submitHandler}>\r\n              <h2 className='text-center'>Đăng nhập</h2>\r\n              <Form.Group controlId='email' className='pt-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Địa chỉ email\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='email'\r\n                  placeholder='Nhập địa chỉ email'\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='password'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Mật khẩu\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='password'\r\n                  placeholder='Nhập mật khẩu'\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <div className='mt-2'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-light'\r\n                  className='btn-block  rounded-pill mb-3 btn_color_created'\r\n                  style={{ fontSize: '0.875rem', letterSpacing: '0.25rem' }}\r\n                >\r\n                  Đăng nhập\r\n                </Button>\r\n                {isLogin === false ? (\r\n                  <Button\r\n                    variant='outline-light'\r\n                    className='btn-block shadow rounded-pill btn_gg'\r\n                    style={{\r\n                      fontSize: '0.8rem',\r\n                      letterSpacing: '0.05rem',\r\n                      border: '1px solid #ddd',\r\n                      color: '#1a1a1a',\r\n                    }}\r\n                    onClick={onSubmit}\r\n                  >\r\n                    <Image\r\n                      src='https://img.icons8.com/fluent/20/000000/google-logo.png'\r\n                      className='pr-1'\r\n                    />\r\n                    Đăng nhập bằng tài khoản Google\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    variant='outline-light'\r\n                    className='btn-block shadow rounded-pill btn_gg'\r\n                    style={{\r\n                      fontSize: '0.8rem',\r\n                      border: '1px solid #ddd',\r\n                      letterSpacing: '0.05rem',\r\n                      color: '#1a1a1a',\r\n                    }}\r\n                    onClick={onSubmit}\r\n                  >\r\n                    <Image\r\n                      src='https://img.icons8.com/fluent/20/000000/google-logo.png'\r\n                      className='pr-1'\r\n                    />\r\n                    Đăng nhập bằng tài khoản Google\r\n                  </Button>\r\n                )}\r\n              </div>\r\n\r\n              <Row className='py-3'>\r\n                <Col\r\n                  className='d-flex align-items-center justify-content-center'\r\n                  style={{\r\n                    fontSize: '0.8rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                >\r\n                  <div>\r\n                    Bạn là thành viên mới?{' '}\r\n                    <Link\r\n                      className='text-decoration-none text-info pl-1'\r\n                      to={\r\n                        redirect\r\n                          ? `/register?redirect=${redirect}`\r\n                          : '/register'\r\n                      }\r\n                      style={{ fontWeight: '700' }}\r\n                    >\r\n                      Đăng kí\r\n                    </Link>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LoginScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js",["437","438","439","440","441"],"import axios from 'axios'\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\nimport {\r\n  CLEAR_ERRORS,\r\n  USER_DELETE_FAIL,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_RESET,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_RESET,\r\n  USER_LIST_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_GOOGLE_FAIL,\r\n  USER_LOGIN_GOOGLE_REQUEST,\r\n  USER_LOGIN_GOOGLE_SUCCESS,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n} from '../constants/userConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LOGIN_REQUEST,\r\n    })\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.post(\r\n      '/api/users/login',\r\n      { email, password },\r\n      config\r\n    )\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const register = (name, email, avatar, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n    })\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.post(\r\n      '/api/users',\r\n      { name, email, avatar, password },\r\n      config\r\n    )\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    dispatch({\r\n      type: USER_REGISTER_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DETAILS_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get(`/api/users/${id}`, config)\r\n\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put('/api/users/profile', user, config)\r\n\r\n    console.log('data post update profile', data)\r\n\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_SUCCESS,\r\n      type: USER_LOGOUT,\r\n      type: USER_DETAILS_RESET,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('userInfo')\r\n  dispatch({ type: USER_LOGOUT })\r\n  dispatch({ type: USER_DETAILS_RESET })\r\n  dispatch({ type: ORDER_LIST_MY_RESET })\r\n  dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LIST_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get('/api/users', config)\r\n\r\n    dispatch({\r\n      type: USER_LIST_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DELETE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    await axios.delete(`/api/users/${id}`, config)\r\n\r\n    dispatch({\r\n      type: USER_DELETE_SUCCESS,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put(`/api/users/${user._id}`, user, config)\r\n\r\n    dispatch({ type: USER_UPDATE_SUCCESS })\r\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const clearErrors = () => async (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_ERRORS,\r\n  })\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js",["442","443","444","445","446","447","448"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { register } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport axios from 'axios'\r\nimport { Upload, message } from 'antd'\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    width: theme.spacing(8),\r\n    height: theme.spacing(8),\r\n    fontSize: '3rem',\r\n  },\r\n}))\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n  const classes = useStyles()\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [avatar, setAvatar] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userRegister = useSelector((state) => state.userRegister)\r\n  const { loading, error, userInfo } = userRegister\r\n\r\n  const redirect = location.search ? location.search.split('=')[1] : '/'\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    if (password !== confirmPassword) {\r\n      setMessage('Password do not match')\r\n    } else {\r\n      dispatch(register(name, email, avatar, password))\r\n    }\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setAvatar(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(redirect)\r\n    }\r\n  }, [history, userInfo, redirect])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row className='shadow p-5 card_color m-0'>\r\n        <Col md={7}>\r\n          <Image src='/background/3071357.jpg' fluid />\r\n        </Col>\r\n        <Col md={5}>\r\n          <div>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n              <h2 className='text-center'>Đăng kí</h2>\r\n              <Form.Group controlId='name'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Họ và tên\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type='name'\r\n                  placeholder='Nhập họ và tên'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  className='border border-grey rounded-pill'\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='email'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Địa chỉ email\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type='email'\r\n                  placeholder='Nhập địa chỉ email'\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  className='border border-grey rounded-pill'\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='password'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Mật khẩu\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type='password'\r\n                  placeholder='Nhập mật khẩu'\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className='border border-grey rounded-pill'\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='password'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Nhập lại mật khẩu\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type='password'\r\n                  placeholder=' Nhập lại mật khẩu'\r\n                  value={confirmPassword}\r\n                  onChange={(e) => setConfirmPassword(e.target.value)}\r\n                  className='border border-grey rounded-pill'\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='image'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Ảnh đại diện\r\n                </Form.Label>\r\n                <Row>\r\n                  <div className='d-flex align-items-center'>\r\n                    <Col md={6}>\r\n                      {avatar && (\r\n                        <Image\r\n                          src={avatar}\r\n                          className='rounded-circle avatar_img'\r\n                          fluid\r\n                        />\r\n                      )}\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <Form.File\r\n                        className='border border-grey'\r\n                        id='image-file'\r\n                        label='Chọn ảnh'\r\n                        custom\r\n                        onChange={uploadFileHandler}\r\n                      ></Form.File>\r\n                      {uploading && <Loader />}\r\n                    </Col>\r\n                  </div>\r\n                </Row>\r\n              </Form.Group>\r\n\r\n              <div>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-light'\r\n                  className='btn-block  rounded-pill btn_color_created'\r\n                  style={{ fontSize: '0.875rem', letterSpacing: '0.25rem' }}\r\n                >\r\n                  Đăng kí\r\n                </Button>\r\n              </div>\r\n\r\n              <Row className='py-3'>\r\n                <Col\r\n                  className='d-flex align-items-center justify-content-center'\r\n                  style={{ fontSize: '0.8rem', letterSpacing: '0.05rem' }}\r\n                >\r\n                  <div>\r\n                    Bạn đã có tài khoản?\r\n                    <Link\r\n                      className='text-decoration-none text-info pl-1 '\r\n                      to={redirect ? `/login?redirect=${redirect}` : '/login'}\r\n                      style={{ fontWeight: '700' }}\r\n                    >\r\n                      Đăng nhập\r\n                    </Link>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RegisterScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js",["449","450","451","452","453"],"import DateFnsUtils from '@date-io/date-fns'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Link from '@material-ui/core/Link'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Banner from '../components/Banner'\r\nimport Loader from '../components/Loader'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport data from '../data.json'\r\nimport '../toast.css'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    width: theme.spacing(48.8),\r\n    height: theme.spacing(50),\r\n    fontSize: '20rem',\r\n  },\r\n}))\r\n\r\nfunction ProfileScreen({ location, history }) {\r\n  const classes = useStyles()\r\n\r\n  const [state, setState] = useState(false)\r\n\r\n  const handleChange = () => {\r\n    setState(!state)\r\n  }\r\n\r\n  const [selectedDate, setSelectedDate] = useState(\r\n    new Date('2021-03-22T21:11:54')\r\n  )\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date)\r\n  }\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  // console.log('user', user)\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [avatar, setAvatar] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n  const [message, setMessage] = useState(null)\r\n  const [sex, setSex] = useState('')\r\n  const [thanhPho, setThanhPho] = useState('')\r\n  const [huyen, setHuyen] = useState('')\r\n  const [xa, setXa] = useState('')\r\n  const [diaChi, setDiachi] = useState('')\r\n  const [numberPhone, setNumberPhone] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n  const { loading: loadingUpdate, success } = userUpdateProfile\r\n\r\n  let formatPhoneNumber = (str) => {\r\n    //Filter only numbers from the input\r\n    let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n    //Check if the input is of correct length\r\n    let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n    if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  // console.log('length', numberPhone.length)\r\n\r\n  // console.log(\r\n  //   'length',\r\n  //   JSON.stringify(formatPhoneNumber(formatPhoneNumber)).length\r\n  // )\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    error &&\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> {error}\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n\r\n    if (password !== confirmPassword) {\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> Password is not\r\n          match\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    } else {\r\n      if (numberPhone.length === 14 || numberPhone.length === 10) {\r\n        dispatch(\r\n          updateUserProfile({\r\n            id: user._id,\r\n            email,\r\n            name,\r\n            avatar,\r\n            password,\r\n            sex,\r\n            numberPhone,\r\n            selectedDate,\r\n            diaChi,\r\n            xa,\r\n            huyen,\r\n            thanhPho,\r\n          })\r\n        )\r\n        toast.success(\r\n          <div>\r\n            <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n            Hồ sơ đã được cập nhật\r\n          </div>,\r\n          {\r\n            className: 'Toastify__toast--success',\r\n            position: 'top-right',\r\n            autoClose: 2500,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          }\r\n        )\r\n      } else {\r\n        toast.error(\r\n          <div>\r\n            <ErrorOutlineIcon className='pr-1' fontSize='large' /> Số điện thoại\r\n            phải có đúng 10 số\r\n          </div>,\r\n          {\r\n            position: 'top-right',\r\n            autoClose: 2500,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          }\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setAvatar(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login')\r\n    } else {\r\n      if (!user || !user.name || success) {\r\n        dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n        dispatch(getUserDetails('profile'))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setAvatar(user.avatar)\r\n        // setAddress(user.address)\r\n        setThanhPho(user.address.thanhPho)\r\n        setHuyen(user.address.huyen)\r\n        setXa(user.address.xa)\r\n        setDiachi(user.address.diaChi)\r\n        setSelectedDate(user.birthDay)\r\n        setSex(user.sex)\r\n        setNumberPhone(user.numberPhone)\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {message && <Announcement variant='danger'>{message}</Announcement>}\r\n      {error && <Announcement variant='danger'>{error}</Announcement>}\r\n      {/* {loading && <Loader />} */}\r\n\r\n      <div className='border-0'>\r\n        <Row className='justify-content-center  m-4'>\r\n          <Col\r\n            md={4}\r\n            className='pt-5 shadow'\r\n            style={{\r\n              backgroundColor: '#977bd5',\r\n              borderTopLeftRadius: '1rem',\r\n              borderBottomLeftRadius: '1rem',\r\n            }}\r\n          >\r\n            <div\r\n              className='text-center mt-5 m-auto'\r\n              style={{\r\n                border: '5px solid #55595c',\r\n                borderRadius: '50%',\r\n                width: '20rem',\r\n                height: '20.6rem',\r\n              }}\r\n            >\r\n              <div className='text-center mb-3 avatar_container'>\r\n                {user.avatar && user.avatar ? (\r\n                  <>\r\n                    <Image\r\n                      style={{\r\n                        width: '20rem',\r\n                        height: '20rem',\r\n                      }}\r\n                      src={avatar}\r\n                      className='rounded-circle avatar_img'\r\n                      fluid\r\n                    />\r\n                    <div className='avatar_upload'>\r\n                      <div className='avatar_edit'>\r\n                        {uploading && <Loader />}\r\n                        <Form.Group>\r\n                          <Image\r\n                            className='avatar_icon'\r\n                            src='https://img.icons8.com/fluent/40/000000/camera.png'\r\n                          />\r\n                          <Form.File\r\n                            id='image-file'\r\n                            custom\r\n                            onChange={uploadFileHandler}\r\n                            className='avatar_file'\r\n                          ></Form.File>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  <Avatar className={classes.orange}>\r\n                    {uploading && <Loader />}\r\n                    {userInfo.name.substring(0, 1)}\r\n                  </Avatar>\r\n                )}\r\n              </div>\r\n              <div className='text-center mt-5'>\r\n                <Link\r\n                  href='/myorders'\r\n                  style={{\r\n                    fontSize: '0.8rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className='text-decoration-none shadow'\r\n                >\r\n                  <Button\r\n                    variant='outline-light'\r\n                    className='rounded-pill shadow '\r\n                    style={{ fontSize: '1rem', letterSpacing: '0.25rem' }}\r\n                  >\r\n                    ĐƠN HÀNG CỦA TÔI\r\n                  </Button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col\r\n            md={8}\r\n            className='pt-4 pb-4  bg-light shadow border-0'\r\n            style={{\r\n              backgroundColor:\r\n                'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%);',\r\n              borderTopRightRadius: '1rem',\r\n              borderBottomRightRadius: '1rem',\r\n            }}\r\n          >\r\n            <h2 className='text-center'>Thông tin cá nhân</h2>\r\n            <Form onSubmit={submitHandler} className='pl-4 pr-4 pt-3'>\r\n              <Row>\r\n                <Col md={6}>\r\n                  <Form.Group controlId='name'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      <strong>Họ và tên</strong>\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border-1 border-grey rounded-pill'\r\n                      type='name'\r\n                      placeholder='Nhập họ và tên'\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                  <Form.Group controlId='email'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      <strong>Địa chỉ email</strong>\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border-1 border-grey rounded-pill'\r\n                      type='email'\r\n                      placeholder='Nhập địa chỉ email'\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <Form.Group>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <strong>Ngày sinh</strong>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <Grid container justify='space-between'>\r\n                        <KeyboardDatePicker\r\n                          className='m-0'\r\n                          margin='normal'\r\n                          id='date-picker-dialog'\r\n                          format='MM/dd/yyyy'\r\n                          value={selectedDate}\r\n                          onChange={handleDateChange}\r\n                          KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </MuiPickersUtilsProvider>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <strong>Giới tính:</strong>\r\n                    <RadioGroup\r\n                      value={sex}\r\n                      onChange={(e) => setSex(e.target.value)}\r\n                    >\r\n                      <div className='d-flex justify-content-evenly align-items-center'>\r\n                        <FormControlLabel\r\n                          value='Nam'\r\n                          control={<Radio size='small' />}\r\n                          label='Nam'\r\n                          size='medium'\r\n                        />\r\n                        <FormControlLabel\r\n                          value='Nữ'\r\n                          control={<Radio size='small' />}\r\n                          label='Nữ'\r\n                        />\r\n                      </div>\r\n                    </RadioGroup>\r\n                  </Col>\r\n                </Row>\r\n              </Form.Group>\r\n              <Row>\r\n                <Col md={8}>\r\n                  <Form.Group controlId='country'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      <strong>Địa chỉ chi tiết</strong>\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type='text'\r\n                      placeholder='Enter country'\r\n                      value={diaChi}\r\n                      onChange={(e) => setDiachi(e.target.value)}\r\n                      className='border-1 border-gray rounded-pill'\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <Form.Group controlId='country'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      <strong>Số điện thoại</strong>\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      type='string'\r\n                      placeholder='Nhập số điện thoại'\r\n                      value={formatPhoneNumber(numberPhone)}\r\n                      onChange={(e) => setNumberPhone(e.target.value)}\r\n                      className='border-1 border-gray rounded-pill'\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <Form.Group>\r\n                <Row>\r\n                  <Col md={4}>\r\n                    <Form.Group controlId='address'>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Thành Phố / Tỉnh</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='text'\r\n                        as='select'\r\n                        placeholder='Enter address'\r\n                        value={thanhPho}\r\n                        onChange={(e) => setThanhPho(e.target.value)}\r\n                        className='border-1 border-gray rounded-pill'\r\n                      >\r\n                        <option>Vui lòng chọn thành phố/tỉnh...</option>\r\n                        {data.map((tp) => (\r\n                          <option\r\n                            style={{ color: 'black' }}\r\n                            key={tp.Id}\r\n                            value={tp.Name}\r\n                          >\r\n                            {tp.Name}\r\n                          </option>\r\n                        ))}\r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <Form.Group controlId='city'>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Quận / Huyện</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='text'\r\n                        as='select'\r\n                        placeholder='Enter city'\r\n                        value={huyen}\r\n                        onChange={(e) => setHuyen(e.target.value)}\r\n                        className='border-1 border-gray rounded-pill'\r\n                      >\r\n                        <option>Vui lòng chọn quận/huyện...</option>\r\n                        {data.map(\r\n                          (a) =>\r\n                            a.Name === thanhPho &&\r\n                            a.Districts.map((b) => (\r\n                              <option\r\n                                key={b.Id}\r\n                                style={{ color: 'black' }}\r\n                                value={b.Name}\r\n                              >\r\n                                {b.Name}\r\n                              </option>\r\n                            ))\r\n                        )}\r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <Form.Group controlId='postalCode'>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Phường / Xã</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='text'\r\n                        as='select'\r\n                        placeholder='Enter postalCode'\r\n                        value={xa}\r\n                        onChange={(e) => setXa(e.target.value)}\r\n                        className='border-1 border-gray rounded-pill'\r\n                      >\r\n                        <option>Vui lòng chọn thành xã/phường...</option>\r\n                        {data.map(\r\n                          (a) =>\r\n                            a.Name === thanhPho &&\r\n                            a.Districts.map(\r\n                              (b) =>\r\n                                b.Name === huyen &&\r\n                                b.Wards.map((c) => (\r\n                                  <option style={{ color: 'black' }}>\r\n                                    {c.Name}\r\n                                  </option>\r\n                                ))\r\n                            )\r\n                        )}\r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n              </Form.Group>\r\n\r\n              {/* <Form.Group controlId='image'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Image\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter image url'\r\n                  value={avatar}\r\n                  onChange={(e) => setAvatar(e.target.value)}\r\n                ></Form.Control>\r\n                <Form.File\r\n                  className='border border-grey'\r\n                  id='image-file'\r\n                  label='Choose File'\r\n                  custom\r\n                  onChange={uploadFileHandler}\r\n                ></Form.File>\r\n                {uploading && <Loader />}\r\n              </Form.Group> */}\r\n              <div className='d-flex align-items-center'>\r\n                <Switch\r\n                  value={state}\r\n                  onChange={handleChange}\r\n                  color='secondary'\r\n                  name='checkedB'\r\n                  inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n                {state === true ? (\r\n                  <p className='mb-0' style={{ opacity: '1' }}>\r\n                    <strong>Đổi mật khẩu</strong>\r\n                    <Image\r\n                      style={{ opacity: '1' }}\r\n                      src='https://img.icons8.com/fluent/32/000000/unlock-2.png'\r\n                    />\r\n                  </p>\r\n                ) : (\r\n                  <p className='mb-0' style={{ opacity: '0.7' }}>\r\n                    Đổi mật khẩu\r\n                    <Image\r\n                      style={{ opacity: '1' }}\r\n                      src='https://img.icons8.com/fluent/32/000000/lock-2.png'\r\n                    />\r\n                  </p>\r\n                )}\r\n              </div>\r\n              <Row>\r\n                <Col md={6}>\r\n                  <Form.Group controlId='password' fluid>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      <strong>Mật khẩu mới</strong>\r\n                    </Form.Label>\r\n                    {state === true ? (\r\n                      <>\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill '\r\n                          type='password'\r\n                          placeholder='Nhập mật khẩu mới'\r\n                          value={password}\r\n                          onChange={(e) => setPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                      </>\r\n                    ) : (\r\n                      <Form.Control\r\n                        className='border-1 border-grey rounded-pill '\r\n                        type='password'\r\n                        placeholder='Nhập mật khẩu mới'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        disabled\r\n                        // style={{ visibility: 'hidden' }}\r\n                      ></Form.Control>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Group controlId='password'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      <strong>Nhập lại mật khẩu</strong>\r\n                    </Form.Label>\r\n                    {state === true ? (\r\n                      <>\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill'\r\n                          type='password'\r\n                          placeholder='Nhập lại mật khẩu'\r\n                          value={confirmPassword}\r\n                          onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                      </>\r\n                    ) : (\r\n                      <Form.Control\r\n                        className='border-1 border-grey rounded-pill'\r\n                        type='password'\r\n                        placeholder='Nhập lại mật khẩu'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        disabled\r\n                        // style={{ visibility: 'hidden' }}\r\n                      ></Form.Control>\r\n                    )}\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <div className='d-flex justify-content-center'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-light'\r\n                  className='rounded-pill btn_color_created'\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                    width: '10rem',\r\n                  }}\r\n                >\r\n                  Lưu\r\n                </Button>\r\n              </div>\r\n              <ToastContainer />\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfileScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js",["454","455","456"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport { getUserDetails } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport Step from '../components/Step'\r\nimport data from '../data.json'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nexport const ShippingScreen = ({ history }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const { shippingAddress, loading } = cart\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading: loadingUserDetail, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const [thanhPho, setThanhPho] = useState(shippingAddress.thanhPho)\r\n  const [huyen, setHuyen] = useState(shippingAddress.huyen)\r\n  const [xa, setXa] = useState(shippingAddress.xa)\r\n  const [diaChi, setDiachi] = useState(shippingAddress.diaChi)\r\n  const [numberPhone, setNumberPhone] = useState(shippingAddress.numberPhone)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(saveShippingAddress({ thanhPho, huyen, xa, diaChi, numberPhone }))\r\n    history.push('/payment')\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login')\r\n    } else {\r\n      if (!user || !user.name) {\r\n        dispatch(getUserDetails('profile'))\r\n      } else {\r\n        setThanhPho(user.address.thanhPho)\r\n        setHuyen(user.address.huyen)\r\n        setXa(user.address.xa)\r\n        setDiachi(user.address.diaChi)\r\n        setNumberPhone(user.numberPhone)\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {loadingUserDetail ? (\r\n        <SkeletonEffect />\r\n      ) : (\r\n        <Row className='shadow p-2 card_color m-4'>\r\n          <Col md={7} className='d-flex align-items-center'>\r\n            <Image src='/background/shipping.jpg' fluid />\r\n          </Col>\r\n          <Col md={5} className='mt-2 pr-4'>\r\n            <div>\r\n              <Step step1 step2 />\r\n\r\n              <Form onSubmit={submitHandler} className='mt-2 border-0 mb-2'>\r\n                <h3 className='pt-3 text-center'>Thông tin Vận chuyển</h3>\r\n                <Form.Group controlId='address'>\r\n                  <Form.Label as='p' className='mb-1 mt-2'>\r\n                    <strong>Thành Phố / Tỉnh</strong>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    as='select'\r\n                    placeholder='Enter address'\r\n                    value={thanhPho}\r\n                    onChange={(e) => setThanhPho(e.target.value)}\r\n                    className='border-1 border-gray rounded-pill'\r\n                  >\r\n                    {data.map((tp) => (\r\n                      <option\r\n                        style={{ color: 'black' }}\r\n                        key={tp.Id}\r\n                        value={tp.Name}\r\n                      >\r\n                        {tp.Name}\r\n                      </option>\r\n                    ))}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='city'>\r\n                  <Form.Label as='p' className='mb-1'>\r\n                    <strong> Quận / Huyện</strong>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    as='select'\r\n                    placeholder='Enter city'\r\n                    value={huyen}\r\n                    onChange={(e) => setHuyen(e.target.value)}\r\n                    className='border-1 border-gray rounded-pill'\r\n                  >\r\n                    {data.map(\r\n                      (a) =>\r\n                        a.Name === thanhPho &&\r\n                        a.Districts.map((b) => (\r\n                          <option\r\n                            key={b.Id}\r\n                            style={{ color: 'black' }}\r\n                            value={b.Name}\r\n                          >\r\n                            {b.Name}\r\n                          </option>\r\n                        ))\r\n                    )}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='postalCode'>\r\n                  <Form.Label as='p' className='mb-1'>\r\n                    <strong>Phường / Xã</strong>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    as='select'\r\n                    required\r\n                    placeholder='Enter postalCode'\r\n                    value={xa}\r\n                    onChange={(e) => setXa(e.target.value)}\r\n                    className='border-1 border-gray rounded-pill'\r\n                  >\r\n                    {data.map(\r\n                      (a) =>\r\n                        a.Name === thanhPho &&\r\n                        a.Districts.map(\r\n                          (b) =>\r\n                            b.Name === huyen &&\r\n                            b.Wards.map((c) => (\r\n                              <option style={{ color: 'black' }}>\r\n                                {c.Name}\r\n                              </option>\r\n                            ))\r\n                        )\r\n                    )}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='country'>\r\n                  <Form.Label as='p' className='mb-1'>\r\n                    <strong>Địa chỉ chi tiết</strong>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    placeholder='Enter country'\r\n                    value={diaChi}\r\n                    onChange={(e) => setDiachi(e.target.value)}\r\n                    className='border-1 border-gray rounded-pill'\r\n                  ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='country'>\r\n                  <Form.Label as='p' className='mb-1'>\r\n                    <strong>Số điện thoại</strong>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    placeholder='Enter country'\r\n                    value={numberPhone}\r\n                    onChange={(e) => setNumberPhone(e.target.value)}\r\n                    className='border-1 border-gray rounded-pill'\r\n                  ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <div>\r\n                  <Button\r\n                    type='submit'\r\n                    className='btn-block btn_color rounded-pill'\r\n                  >\r\n                    Tiếp tục\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js",[],["457","458"],"F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js",["459"],"import FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport React, { useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Step from '../components/Step'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nexport const PaymentScreen = ({ history }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const { shippingAddress } = cart\r\n\r\n  if (!shippingAddress) {\r\n    history.push('/shipping')\r\n  }\r\n\r\n  const [paymentMethod, setPaymentMethod] = useState('Thanh toán bằng PayPal')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(savePaymentMethod(paymentMethod))\r\n    history.push('/placeorder')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row className='shadow p-2 card_color m-4'>\r\n        <Col md={6} className='d-flex align-items-center'>\r\n          <Image src='/background/payment.jpg' fluid />\r\n        </Col>\r\n        <Col md={6} className='d-flex align-items-center'>\r\n          <div>\r\n            <Step step1 step2 step3 />\r\n            <Form onSubmit={submitHandler} className=' p-4 mt-2 text-center'>\r\n              <Form.Group>\r\n                <Form.Label as='legend'>\r\n                  <h3>Phương thức thanh toán</h3>\r\n                </Form.Label>\r\n\r\n                <Col>\r\n                  <div>\r\n                    <RadioGroup\r\n                      value={paymentMethod}\r\n                      onChange={(e) => setPaymentMethod(e.target.value)}\r\n                    >\r\n                      <FormControlLabel\r\n                        value='Thanh toán bằng PayPal'\r\n                        control={<Radio />}\r\n                        label='Thanh toán bằng PayPal'\r\n                      />\r\n                      <FormControlLabel\r\n                        value='Thanh toán bằng tiền mặt'\r\n                        control={<Radio />}\r\n                        label='Thanh toán bằng tiền mặt'\r\n                      />\r\n                    </RadioGroup>\r\n                  </div>\r\n                </Col>\r\n              </Form.Group>\r\n\r\n              <Button\r\n                type='submit'\r\n                variant='danger'\r\n                className='btn-block btn_color rounded-pill'\r\n              >\r\n                Tiếp Tục\r\n              </Button>\r\n            </Form>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js",["460","461","462"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { removeFromCart } from '../actions/cartActions'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Message from '../components/Message'\r\nimport Step from '../components/Step'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nPlaceOrderScreen.propTypes = {}\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nfunction format(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n   const dispatch = useDispatch()\r\n\r\n   const cart = useSelector((state) => state.cart)\r\n\r\n   // Calculate prices\r\n   cart.itemsPrice = cart.cartItems.reduce(\r\n      (acc, item) => acc + item.price * item.qty,\r\n      0\r\n   )\r\n\r\n   const addDecimals = (num) => {\r\n      return Math.round(num)\r\n   }\r\n\r\n   if (cart.shippingAddress.thanhPho === 'Thành phố Hà Nội') {\r\n      cart.shippingPrice = 25000\r\n   } else if (cart.shippingAddress.thanhPho === 'Thành phố Hồ Chí Minh') {\r\n      cart.shippingPrice = 15000\r\n   } else {\r\n      cart.shippingPrice = 35000\r\n   }\r\n\r\n   // cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n   cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\r\n   cart.totalPrice = Number(cart.itemsPrice) + Number(cart.shippingPrice)\r\n\r\n   const tempPrice = Number(cart.itemsPrice) + Number(cart.shippingPrice)\r\n\r\n   const orderCreate = useSelector((state) => state.orderCreate)\r\n   const { order, success, error } = orderCreate\r\n\r\n   const placeOrderHandler = () => {\r\n      dispatch(\r\n         createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice,\r\n         })\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (success) {\r\n         history.push(`/order/${order._id}`)\r\n         cart.cartItems.map((item) => dispatch(removeFromCart(item.product)))\r\n      }\r\n   }, [history, success])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row className='m-4'>\r\n            <Col md={8} className='mt-2'>\r\n               <Step step1 step2 step3 step4 />\r\n               <ListGroup\r\n                  variant='flush'\r\n                  className='shadow mt-3 card_color p-1 border-order'\r\n               >\r\n                  <ListGroup.Item className='pt-3'>\r\n                     <h4 className='text-uppercase'>Thông tin giao hàng</h4>\r\n                     <p className='mb-1 ml-2' style={{ fontSize: '0.9rem' }}>\r\n                        <strong>Địa chỉ: </strong>\r\n                        {cart.shippingAddress.diaChi} {' - '}{' '}\r\n                        {cart.shippingAddress.xa} {' - '}\r\n                        {cart.shippingAddress.huyen} {' - '}\r\n                        {cart.shippingAddress.thanhPho}.\r\n                     </p>\r\n                     <p className='mb-2 ml-2' style={{ fontSize: '0.9rem' }}>\r\n                        <strong>Số điện thoại: </strong>\r\n                        {formatPhoneNumber(cart.shippingAddress.numberPhone)}\r\n                     </p>\r\n                  </ListGroup.Item>\r\n\r\n                  <ListGroup.Item>\r\n                     <h4 className='text-uppercase mt-2'>\r\n                        Phương thức thanh toán\r\n                     </h4>\r\n                     <div\r\n                        className='d-flex mb-2 ml-2'\r\n                        style={{ fontSize: '0.9rem' }}\r\n                     >\r\n                        <strong className='pr-1'>Phương Thức: </strong>\r\n                        {cart.paymentMethod ? (\r\n                           cart.paymentMethod\r\n                        ) : (\r\n                           <strong className='text-danger'>\r\n                              Chưa chọn phương thức thanh toán\r\n                           </strong>\r\n                        )}\r\n                     </div>\r\n                  </ListGroup.Item>\r\n\r\n                  <ListGroup.Item>\r\n                     <h4 className='text-uppercase mt-2'>Giỏ hàng</h4>\r\n                     {cart.cartItems.length === 0 ? (\r\n                        <Message>Giỏ hàng của bạn trống</Message>\r\n                     ) : (\r\n                        <ListGroup variant='flush'>\r\n                           {cart.cartItems.map((item, index) => (\r\n                              <ListGroup.Item key={index}>\r\n                                 <Row>\r\n                                    <Col md={2}>\r\n                                       <Image\r\n                                          src={item.images[0].url}\r\n                                          alt={item.name}\r\n                                          fluid\r\n                                          rounded\r\n                                       />\r\n                                    </Col>\r\n\r\n                                    <Col\r\n                                       md={5}\r\n                                       className='d-flex align-items-center'\r\n                                    >\r\n                                       <Link\r\n                                          to={`/product/${item.product}`}\r\n                                          className='link-product'\r\n                                       >\r\n                                          {item.name}\r\n                                       </Link>\r\n                                    </Col>\r\n\r\n                                    <Col\r\n                                       md={5}\r\n                                       className='d-flex align-items-center'\r\n                                    >\r\n                                       <b style={{ fontSize: '1rem' }}>\r\n                                          {item.qty} x {format(item.price, 'đ')}\r\n                                          {' = '}\r\n                                          {format(item.qty * item.price, 'đ')}\r\n                                       </b>\r\n                                    </Col>\r\n                                 </Row>\r\n                              </ListGroup.Item>\r\n                           ))}\r\n                        </ListGroup>\r\n                     )}\r\n                  </ListGroup.Item>\r\n               </ListGroup>\r\n            </Col>\r\n            <Col md={4}>\r\n               <Card\r\n                  className='shadow mt-2 border-0 card_color p-1 border-order'\r\n                  style={{ zIndex: '1' }}\r\n               >\r\n                  <ListGroup variant='flush' className='card_color'>\r\n                     <ListGroup.Item>\r\n                        <h4 className='text-uppercase text-center'>\r\n                           Chi tiết hoá đơn\r\n                        </h4>\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={8}>Tổng tiền sản phẩm</Col>\r\n                           <Col md={4}>\r\n                              <strong>{format(cart.itemsPrice, 'đ')}</strong>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={8}>Phí vận chuyển</Col>\r\n                           <Col m={4}>\r\n                              <strong>{format(cart.shippingPrice, 'đ')}</strong>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={8}>\r\n                              <strong>Tổng cộng (bao gồm VAT):</strong>\r\n                           </Col>\r\n                           <Col md={4}>\r\n                              <strong>{format(cart.totalPrice, 'đ')}</strong>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        {error && (\r\n                           <Announcement variant='danger'>\r\n                              Vui lòng chọn phương thức thanh toán\r\n                           </Announcement>\r\n                        )}\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        <Button\r\n                           type='button'\r\n                           variant='outline-light'\r\n                           className='btn-block text-uppercase btn-apply btn_color_created pt-3 rounded-pill'\r\n                           disabled={cart.cartItems === 0}\r\n                           onClick={placeOrderHandler}\r\n                        >\r\n                           <h5>Đặt hàng</h5>\r\n                        </Button>\r\n                     </ListGroup.Item>\r\n                  </ListGroup>\r\n               </Card>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js",["463","464","465"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n   deliverOrder,\r\n   getOrderDetails,\r\n   payOrder,\r\n   updateOrderByMember,\r\n} from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nimport ImagePay from '../components/ImagePay'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport ProgressShipping from '../components/ProgressShipping'\r\nimport {\r\n   ORDER_DELIVER_RESET,\r\n   ORDER_PAY_RESET,\r\n   ORDER_UPDATE_BY_MEMBER_RESET,\r\n} from '../constants/orderConstants'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport Header from '../components/Header'\r\nimport Footer from '../components/Footer'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst OrderScreen = ({ match, history }) => {\r\n   const orderId = match.params.id\r\n\r\n   const [sdkReady, setSdkReady] = useState(false)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const [orderStatus, setOrderStatus] = useState('Huỷ')\r\n\r\n   const orderDetails = useSelector((state) => state.orderDetails)\r\n   const { order, loading, error } = orderDetails\r\n\r\n   const orderPay = useSelector((state) => state.orderPay)\r\n   const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n   const orderDeliver = useSelector((state) => state.orderDeliver)\r\n   const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n   const orderUpdateByMember = useSelector((state) => state.orderUpdateByMember)\r\n   const { loading: loadingByMember, success: successByMember } =\r\n      orderUpdateByMember\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   if (!loading) {\r\n      //   Calculate prices\r\n      const addDecimals = (num) => {\r\n         return Math.round(num)\r\n      }\r\n\r\n      order.itemsPrice = addDecimals(\r\n         order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push('/login')\r\n      }\r\n\r\n      const addPayPalScript = async () => {\r\n         const { data: clientId } = await axios.get('/api/config/paypal')\r\n         const script = document.createElement('script')\r\n         script.type = 'text/javascript'\r\n         script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n         script.async = true\r\n         script.onload = () => {\r\n            setSdkReady(true)\r\n         }\r\n         document.body.appendChild(script)\r\n      }\r\n\r\n      if (!order || successPay || successDeliver || successByMember) {\r\n         dispatch({ type: ORDER_PAY_RESET })\r\n         dispatch({ type: ORDER_DELIVER_RESET })\r\n         dispatch({ type: ORDER_UPDATE_BY_MEMBER_RESET })\r\n         dispatch(getOrderDetails(orderId))\r\n      } else if (!order.isPaid) {\r\n         if (!window.paypal) {\r\n            addPayPalScript()\r\n         } else {\r\n            setSdkReady(true)\r\n         }\r\n      }\r\n   }, [dispatch, orderId, successPay, successDeliver, successByMember, order])\r\n\r\n   const successPaymentHandler = (paymentResult) => {\r\n      console.log(paymentResult)\r\n      dispatch(payOrder(orderId, paymentResult))\r\n   }\r\n\r\n   const deliverHandler = () => {\r\n      dispatch(deliverOrder(order))\r\n   }\r\n\r\n   const cancelOrder = () => {\r\n      dispatch(updateOrderByMember({ _id: orderId, orderStatus }))\r\n   }\r\n\r\n   // console.log('Trạng thái: ', order)\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {loading ? (\r\n            <Loader />\r\n         ) : error ? (\r\n            <Message>{error}</Message>\r\n         ) : (\r\n            <>\r\n               <Row className='m-4'>\r\n                  <Col md={8}>\r\n                     <ListGroup\r\n                        variant='flush'\r\n                        className='shadow mt-3 card_color p-1 border-order'\r\n                     >\r\n                        <ListGroup.Item>\r\n                           <h3\r\n                              className='text-center'\r\n                              style={{ color: '#7563c8' }}\r\n                           >\r\n                              Đơn hàng {order._id}\r\n                           </h3>\r\n                           <Row>\r\n                              <Col md={6} className='d-flex align-items-center'>\r\n                                 <h5 className='text-uppercase mb-0'>\r\n                                    Trạng thái đơn hàng\r\n                                 </h5>\r\n                              </Col>\r\n                              <Col\r\n                                 md={6}\r\n                                 className='d-flex justify-content-end mb-3'\r\n                              >\r\n                                 <div>\r\n                                    {order.orderStatus === 'Chờ xác nhận' ? (\r\n                                       <Button\r\n                                          variant='outline-light'\r\n                                          className='p-1 pl-3 pr-3 btn_color_cancel rounded-pill '\r\n                                          onClick={cancelOrder}\r\n                                       >\r\n                                          <div className='d-flex justify-content-end'>\r\n                                             Huỷ\r\n                                             <ClearIcon\r\n                                                fontSize='small'\r\n                                                style={{ marginTop: '0.2rem' }}\r\n                                             />\r\n                                          </div>\r\n                                       </Button>\r\n                                    ) : (\r\n                                       <Button\r\n                                          disabled\r\n                                          className='p-1 pl-3 pr-3 rounded-pill'\r\n                                       >\r\n                                          <div className='d-flex justify-content-end'>\r\n                                             Huỷ\r\n                                             <ClearIcon\r\n                                                fontSize='small'\r\n                                                style={{ marginTop: '0.2rem' }}\r\n                                             />\r\n                                          </div>\r\n                                       </Button>\r\n                                    )}\r\n                                 </div>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           {order.orderStatus !== 'Huỷ' ? (\r\n                              <ProgressShipping />\r\n                           ) : (\r\n                              <Announcement variant='warning'>\r\n                                 Đơn hàng đã được huỷ\r\n                              </Announcement>\r\n                           )}\r\n\r\n                           <h5 className='text-uppercase'>\r\n                              Thông tin giao hàng\r\n                           </h5>\r\n                           <div className='pl-4 pr-4 border-1 border-gray rounded pt-3 mb-2'>\r\n                              <Row>\r\n                                 <Col md={6}>\r\n                                    <p>\r\n                                       <strong>Tên khách hàng: </strong>{' '}\r\n                                       {order.user.name}\r\n                                    </p>\r\n                                 </Col>\r\n                                 <Col md={6}>\r\n                                    <p>\r\n                                       <strong>Địa chỉ email: </strong>\r\n                                       <a\r\n                                          className='link-product'\r\n                                          href={`mailto: ${order.user.email}`}\r\n                                       >\r\n                                          {order.user.email}\r\n                                       </a>\r\n                                    </p>\r\n                                 </Col>\r\n                              </Row>\r\n                              <p>\r\n                                 <strong>Số điện thoại: </strong>\r\n                                 {formatPhoneNumber(\r\n                                    order.shippingAddress.numberPhone\r\n                                 )}\r\n                              </p>\r\n                              <p className='mb-3'>\r\n                                 <strong>Địa chỉ: </strong>\r\n                                 {order.shippingAddress.diaChi}\r\n                                 {' - '}\r\n                                 {order.shippingAddress.xa}\r\n                                 {' - '}\r\n                                 {order.shippingAddress.huyen}\r\n                                 {' - '}\r\n                                 {order.shippingAddress.thanhPho}.\r\n                              </p>\r\n                           </div>\r\n                           {\r\n                              order.isDelivered && (\r\n                                 <Announcement variant='success'>\r\n                                    Đã giao hàng vào lúc{' '}\r\n                                    {format(\r\n                                       new utcToZonedTime(\r\n                                          order.deliveredAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                       ),\r\n                                       'HH:mm:ss - dd/MM/yyyy',\r\n                                       { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                    )}\r\n                                 </Announcement>\r\n                              )\r\n                              // : (\r\n                              //   <Announcement variant='danger'>No Delivered</Announcement>\r\n                              // )}\r\n                           }\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                           <h5 className='text-uppercase'>\r\n                              Phương thức thanh toán\r\n                           </h5>\r\n                           <p className='pl-4'>\r\n                              <strong>Phương thức: </strong>\r\n                              {order.paymentMethod}\r\n                           </p>\r\n\r\n                           {\r\n                              order.isPaid && (\r\n                                 <Announcement\r\n                                    variant='success'\r\n                                    className='rounded-pill'\r\n                                 >\r\n                                    Đã thanh toán vào lúc{' '}\r\n                                    {format(\r\n                                       new utcToZonedTime(\r\n                                          order.paidAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                       ),\r\n                                       'HH:mm:ss - dd/MM/yyyy',\r\n                                       { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                    )}\r\n                                 </Announcement>\r\n                              )\r\n                              // : (\r\n                              //   <Announcement variant='danger'>No Paid</Announcement>\r\n                              // )\r\n                           }\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                           <h5 className='text-uppercase'>Giỏ hàng</h5>\r\n                           {order.orderItems.length === 0 ? (\r\n                              <Message>Giỏ hàng rỗng</Message>\r\n                           ) : (\r\n                              <ListGroup variant='flush'>\r\n                                 {order.orderItems.map((item, index) => (\r\n                                    <ListGroup.Item key={index}>\r\n                                       <Row>\r\n                                          <Col md={2}>\r\n                                             <Link\r\n                                                to={`/product/${item.product}`}\r\n                                                className='link-product'\r\n                                             >\r\n                                                <Image\r\n                                                   src={item.images[0].url}\r\n                                                   alt={item.name}\r\n                                                   fluid\r\n                                                   rounded\r\n                                                   className='border border-gray'\r\n                                                />\r\n                                             </Link>\r\n                                          </Col>\r\n\r\n                                          <Col\r\n                                             className='d-flex align-items-center'\r\n                                             md={4}\r\n                                          >\r\n                                             <Link\r\n                                                to={`/product/${item.product}`}\r\n                                                className='text-decoration-none d-flex align-items-center'\r\n                                             >\r\n                                                <p className='mb-0'>\r\n                                                   {item.name}\r\n                                                </p>\r\n                                             </Link>\r\n                                          </Col>\r\n\r\n                                          <Col\r\n                                             md={6}\r\n                                             className='d-flex align-items-center justify-content-center'\r\n                                          >\r\n                                             <h5 className='text-lowercase'>\r\n                                                {item.qty} x{' '}\r\n                                                {formatMoney(item.price, 'đ')}{' '}\r\n                                                {' = '}\r\n                                                {formatMoney(\r\n                                                   item.qty * item.price,\r\n                                                   'đ'\r\n                                                )}\r\n                                             </h5>\r\n                                          </Col>\r\n                                       </Row>\r\n                                    </ListGroup.Item>\r\n                                 ))}\r\n                              </ListGroup>\r\n                           )}\r\n                        </ListGroup.Item>\r\n                     </ListGroup>\r\n                  </Col>\r\n                  <Col md={4} style={{ zIndex: '1' }}>\r\n                     <Card className='border-0'>\r\n                        <ListGroup\r\n                           variant='flush'\r\n                           className='shadow mt-3 card_color p-1 border-order'\r\n                        >\r\n                           <ListGroup.Item>\r\n                              <h4 className='text-uppercase text-center'>\r\n                                 Chi tiết hoá đơn\r\n                              </h4>\r\n                              <Row className='mt-3'>\r\n                                 <Col md={8}>Tổng tiền sản phẩm</Col>\r\n                                 <Col md={4}>\r\n                                    <p className='mb-0'>\r\n                                       {formatMoney(order.itemsPrice, 'đ')}\r\n                                    </p>\r\n                                 </Col>\r\n                              </Row>\r\n                           </ListGroup.Item>\r\n                           <ListGroup.Item>\r\n                              <Row>\r\n                                 <Col md={8}>Phí vận chuyển</Col>\r\n                                 <Col md={4}>\r\n                                    <p className='mb-0'>\r\n                                       {formatMoney(order.shippingPrice, 'đ')}\r\n                                    </p>\r\n                                 </Col>\r\n                              </Row>\r\n                           </ListGroup.Item>\r\n\r\n                           <ListGroup.Item>\r\n                              <Row>\r\n                                 <Col md={8} className='text-danger'>\r\n                                    <h5 className='mb-0'>Tổng cộng</h5>\r\n                                 </Col>\r\n                                 <Col md={4}>\r\n                                    <h5 className='mb-0 text-danger text-lowercase'>\r\n                                       {formatMoney(order.totalPrice, 'đ')}\r\n                                    </h5>\r\n                                 </Col>\r\n                              </Row>\r\n                           </ListGroup.Item>\r\n\r\n                           {!order.isPaid &&\r\n                              order.orderStatus !== 'Huỷ' &&\r\n                              order.paymentMethod !==\r\n                                 'Thanh toán bằng tiền mặt' && (\r\n                                 <ListGroup.Item className='border-0'>\r\n                                    {loadingPay && <Loader />}\r\n                                    {!sdkReady ? (\r\n                                       <Loader />\r\n                                    ) : (\r\n                                       <PayPalButton\r\n                                          amount={order.totalPrice / 100}\r\n                                          onSuccess={successPaymentHandler}\r\n                                          className='rounded-pill'\r\n                                       />\r\n                                    )}\r\n                                 </ListGroup.Item>\r\n                              )}\r\n\r\n                           {loadingDeliver && <Loader />}\r\n                           {userInfo &&\r\n                              !order.isDelivered &&\r\n                              order.orderStatus === 'Đã giao hàng' && (\r\n                                 <ListGroup.Item className='border-0'>\r\n                                    <Button\r\n                                       type='button'\r\n                                       className='btn_color btn-block rounded-pill'\r\n                                       onClick={deliverHandler}\r\n                                    >\r\n                                       Đã giao hàng\r\n                                    </Button>\r\n                                 </ListGroup.Item>\r\n                              )}\r\n\r\n                           <ListGroup.Item className='border-0 p-0'>\r\n                              <ImagePay />\r\n                           </ListGroup.Item>\r\n                        </ListGroup>\r\n                     </Card>\r\n                  </Col>\r\n               </Row>\r\n            </>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default OrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js",["466"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport { deleteUser, listUsers } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'Name' },\r\n  { id: 'email', numeric: true, disablePadding: false, label: 'EMAIL' },\r\n  { id: 'isAdmin', numeric: true, disablePadding: false, label: 'ADMIN' },\r\n  { id: 'action', numeric: true, disablePadding: false, label: 'ACTION' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction UserListScreen({ history }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((user) => user._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userList = useSelector((state) => state.userList)\r\n  const { loading, error, users } = userList\r\n\r\n  const emptyRows =\r\n    users !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage)\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDelete = useSelector((state) => state.userDelete)\r\n  const { success: successDelete } = userDelete\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteUser(id))\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = users.find((user) => user._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>Users List</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers())\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch, history, successDelete, userInfo])\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <div className={classes.root}>\r\n            <Paper\r\n              className={classes.paper + 'shadow'}\r\n              style={{\r\n                borderRadius: '1rem',\r\n                border: '0.25px solid #ddd',\r\n              }}\r\n            >\r\n              <TableContainer\r\n                className='text-center p-5'\r\n                style={{\r\n                  borderRadius: '1rem',\r\n                }}\r\n              >\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby='tableTitle'\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label='enhanced table'\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={users.length}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(users, getComparator(order, orderBy))\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((user, index) => {\r\n                        const isItemSelected = isSelected(user._id)\r\n                        const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            onClick={(event) => handleClick(event, user._id)}\r\n                            role='checkbox'\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={user._id}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding='checkbox'>\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              component='th'\r\n                              id={labelId}\r\n                              scope='row'\r\n                              padding='none'\r\n                              align='center'\r\n                            >\r\n                              {user._id}\r\n                            </TableCell>\r\n                            <TableCell align='left' className='text-center'>\r\n                              {user.name}\r\n                            </TableCell>\r\n                            <TableCell align='center'>{user.email}</TableCell>\r\n                            <TableCell align='center'>\r\n                              {' '}\r\n                              {user.isAdmin ? (\r\n                                <i\r\n                                  className='fas fa-check'\r\n                                  style={{ color: 'green' }}\r\n                                ></i>\r\n                              ) : (\r\n                                <i\r\n                                  className='fas fa-times'\r\n                                  style={{ color: 'red' }}\r\n                                ></i>\r\n                              )}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              <LinkContainer\r\n                                to={`/admin/user/${user._id}/edit`}\r\n                              >\r\n                                <Button\r\n                                  variant='info'\r\n                                  className='btn-sm rounded-pill'\r\n                                >\r\n                                  <i className='far fa-edit'></i>\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                    {emptyRows > 0 && (\r\n                      <TableRow\r\n                        style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                      >\r\n                        <TableCell colSpan={6} />\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component='div'\r\n                count={users.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n            <FormControlLabel\r\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n              label='Dense padding'\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserListScreen\r\n",["467","468"],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js",["469","470"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport {\r\n  USER_UPDATE_RESET\r\n} from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n      history.push('/admin/userlist')\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link to='/admin/userlist' className='btn btn-light my-3 text-uppercase'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer sm>\r\n        <h2>Edit User</h2>\r\n        {loadingUpdate ? (\r\n          <Loader /> \r\n        ) && <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess> : errorUpdate ? (\r\n          <Message>{errorUpdate}</Message>\r\n        ) : loading ? (\r\n          <Loader />\r\n        ) : (\r\n          <Form onSubmit={submitHandler} md={10}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter email'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='idAdmin'>\r\n              <Form.Check\r\n                type='checkbox'\r\n                label='Is Admin'\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n            <Button type='submit' variant='warning'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js",["471","472"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { listCategoriesAdm } from '../actions/categoryAction'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const {\r\n    loading: loadingCat,\r\n    error: errorCat,\r\n    category: categoryCat,\r\n  } = categoriesList\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      // history.push('/admin/productlist')\r\n    } else {\r\n      if (!product.name || product._id !== productId) {\r\n        if (userInfo) {\r\n          dispatch(listProductDetails(productId))\r\n          dispatch(listCategoriesAdm())\r\n        }\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInStock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, userInfo, history, productId, product, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Link\r\n          to='/admin/productlist'\r\n          className='btn btn-light my-3 text-uppercase rounded-pill'\r\n        >\r\n          <i class='fas fa-arrow-left pr-2'></i>\r\n          Quay về\r\n        </Link>\r\n        {loadingUpdate && (\r\n            <MessageSuccess variant='Đã cập nhật thành công'></MessageSuccess>\r\n          ) && <Loader />}\r\n        {errorUpdate && <Message>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message>{error}</Message>\r\n        ) : (\r\n          <>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow card_color'\r\n              fluid\r\n            >\r\n              <h2 className='text-center mb-4'>Edit Product</h2>\r\n\r\n              <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='name'\r\n                  placeholder='Enter name'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Image\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter image url'\r\n                  value={image}\r\n                  onChange={(e) => setImage(e.target.value)}\r\n                ></Form.Control>\r\n                <Form.File\r\n                  className='border border-grey'\r\n                  id='image-file'\r\n                  label='Choose File'\r\n                  custom\r\n                  onChange={uploadFileHandler}\r\n                ></Form.File>\r\n                {uploading && <Loader />}\r\n              </Form.Group>\r\n\r\n              <Row>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='brand' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Brand\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='text'\r\n                      placeholder='Enter brand'\r\n                      value={brand}\r\n                      onChange={(e) => setBrand(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='countInStock' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Count In Stock\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill text-center'\r\n                      type='number'\r\n                      placeholder='Enter countInStock'\r\n                      value={countInStock}\r\n                      onChange={(e) => setCountInStock(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='category' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Category\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill '\r\n                      type='text'\r\n                      as='select'\r\n                      placeholder='Enter category'\r\n                      value={category}\r\n                      onChange={(e) => setCategory(e.target.value)}\r\n                    >\r\n                      <option></option>\r\n                      {categoryCat &&\r\n                        categoryCat.map((cat, index) => (\r\n                          <option\r\n                            style={{ color: 'black' }}\r\n                            key={index}\r\n                            value={cat._id}\r\n                          >\r\n                            {cat.name}\r\n                          </option>\r\n                        ))}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='price' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Price\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill text-center'\r\n                      type='number'\r\n                      placeholder='Enter price'\r\n                      value={price}\r\n                      onChange={(e) => setPrice(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Form.Group controlId='description' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='text'\r\n                  rows={3}\r\n                  as='textarea'\r\n                  placeholder='Enter description'\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <div className='pl-3 pr-3 text-center'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-success'\r\n                  className='rounded-pill'\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                    width: '20rem',\r\n                  }}\r\n                >\r\n                  Update\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Step.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js",["473","474","475","476","477"],"import { React, useState } from 'react'\r\nimport { Form, Button, Image, InputGroup } from 'react-bootstrap'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { ButtonBase, FormGroup, Input } from '@material-ui/core'\r\nimport SpeechRecognition, {\r\n  useSpeechRecognition,\r\n} from 'react-speech-recognition'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\n\r\nconst SearchBox = ({ history }) => {\r\n  const [keyword, setKeyword] = useState('')\r\n\r\n  const submitHandle = (e) => {\r\n    // setKeyword(transcript)\r\n    e.preventDefault()\r\n    if (keyword.trim()) {\r\n      if (keyword) {\r\n        history.push(`/search/${keyword}`)\r\n      } else {\r\n        history.push(`/search/${transcript}`)\r\n      }\r\n    } else {\r\n      history.push('/')\r\n    }\r\n  }\r\n\r\n  const { transcript, resetTranscript } = useSpeechRecognition()\r\n\r\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n    return null\r\n  }\r\n\r\n  const click = () => {\r\n    if (transcript) {\r\n      setKeyword(transcript)\r\n    }\r\n  }\r\n\r\n  const clear = () => {\r\n    setKeyword(' ')\r\n    resetTranscript()\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={submitHandle} inline>\r\n      <div className='d-flex align-items-center'>\r\n        <Form.Control\r\n          type='text'\r\n          name='q'\r\n          placeholder='Tìm kiếm sản phẩm.'\r\n          className='mr-sm-2 ml-sm-5 rounded-pill'\r\n          onChange={(e) => setKeyword(e.target.value)}\r\n          value={transcript ? transcript : keyword}\r\n          style={{ width: '30rem' }}\r\n        ></Form.Control>\r\n        <Button\r\n          variant='outline-light'\r\n          className='p-1 text-dark border-0'\r\n          style={{ marginLeft: '-14%', height: '2rem' }}\r\n          onClick={clear}\r\n        >\r\n          <ClearIcon />\r\n        </Button>\r\n\r\n        <Button\r\n          variant='outline-light'\r\n          onClick={SpeechRecognition.startListening}\r\n          className='p-1 text-dark border-0'\r\n          style={{ marginLeft: '-10%', fontSize: '1rem' }}\r\n        >\r\n          <i className='fa fa-microphone' />\r\n        </Button>\r\n      </div>\r\n\r\n      <Button\r\n        type='submit'\r\n        className='p-2 btn_color rounded-circle'\r\n        style={{ fontSize: '0.7rem', marginLeft: '-15%' }}\r\n        onClick={click}\r\n      >\r\n        <SearchIcon />\r\n      </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js",["478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496"],"import CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Image, Row, Table } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { listMyOrders } from '../actions/orderActions'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport '../toast.css'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nfunction formatMoney(n, currency) {\r\n  return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst MyOrdersScreen = ({ history }) => {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n  const { success } = userUpdateProfile\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy)\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push()\r\n    } else {\r\n      // dispatch(getUserDetails('profile'))\r\n      dispatch(listMyOrders())\r\n    }\r\n  }, [dispatch, history, userInfo, user])\r\n  return (\r\n    <>\r\n      <Header />\r\n      {loadingOrders ? (\r\n        <Loader />\r\n      ) : errorOrders ? (\r\n        <Announcement variant='danger'>{errorOrders}</Announcement>\r\n      ) : (\r\n        <>\r\n          <h3 className='text-center'>Đơn hàng của tôi</h3>\r\n          <Table\r\n            striped\r\n            bordered\r\n            hover\r\n            responsive\r\n            className='table-sm align-items-center  text-center rounded shadow bg-light '\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th style={{ fontSize: '0.85rem' }}>TÊN SẢN PHẨM</th>\r\n                {/* <th style={{ fontSize: '0.85rem' }}>HÌNH ẢNH</th> */}\r\n                <th style={{ fontSize: '0.85rem' }}>NGÀY ĐẶT</th>\r\n                <th style={{ fontSize: '0.85rem' }}>TỔNG CỘNG</th>\r\n                <th style={{ fontSize: '0.85rem' }}>ĐÃ THANH TOÁN</th>\r\n                <th style={{ fontSize: '0.85rem' }}>TRẠNG THÁI</th>\r\n                <th style={{ fontSize: '0.85rem' }}>THÔNG TIN</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <Row>\r\n                        <Col md={12}>\r\n                          <td key={index} className='border-0 pb-1 pt-3'>\r\n                            {item.name}\r\n                          </td>\r\n                        </Col>\r\n                      </Row>\r\n                    ))}\r\n                  </td>\r\n                  {/* <td style={{ width: '5rem', height: '5rem' }} className='p-0'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <Row>\r\n                        <Col md={12} className='d-flex align-items-center'>\r\n                          <td key={index} className='p-1 border-0'>\r\n                            <Image\r\n                              src={item.image}\r\n                              alt={item.name}\r\n                              fluid\r\n                              rounded\r\n                              className='border border-grey'\r\n                            />\r\n                          </td>\r\n                        </Col>\r\n                      </Row>\r\n                    ))}\r\n                  </td> */}\r\n                  <td>\r\n                    <div>\r\n                      <p>\r\n                        {format(\r\n                          new utcToZonedTime(\r\n                            order.createdAt,\r\n                            'Asia/Ho_Chi_Minh'\r\n                          ),\r\n                          'HH:mm:ss - dd/MM/yyyy',\r\n                          { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                        )}\r\n                      </p>\r\n                    </div>\r\n                  </td>\r\n                  <td>{formatMoney(order.totalPrice, 'đ')}</td>\r\n                  <td>\r\n                    {order.paymentMethod === 'Thanh toán bằng tiền mặt' &&\r\n                    order.isDelivered ? (\r\n                      <strong className='mb-0'>\r\n                        {format(\r\n                          new utcToZonedTime(\r\n                            order.deliveredAt,\r\n                            'Asia/Ho_Chi_Minh'\r\n                          ),\r\n                          'HH:mm:ss - dd/MM/yyyy',\r\n                          { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                        )}\r\n                      </strong>\r\n                    ) : order.paymentMethod === 'Thanh toán bằng PayPal' &&\r\n                      order.isPaid ? (\r\n                      <strong className='mb-0'>\r\n                        {format(\r\n                          new utcToZonedTime(order.paidAt, 'Asia/Ho_Chi_Minh'),\r\n                          'HH:mm:ss - dd/MM/yyyy',\r\n                          { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                        )}\r\n                      </strong>\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n\r\n                  <td>{order.orderStatus}</td>\r\n                  <td className='p-1 pt-2'>\r\n                    <LinkContainer to={`/order/${order._id}`}>\r\n                      <div>\r\n                        <Button\r\n                          variant='outline-light'\r\n                          className='text-uppercase p-2 pl-3 pr-3 btn_color_details rounded-pill'\r\n                        >\r\n                          Chi tiết\r\n                        </Button>\r\n                      </div>\r\n                    </LinkContainer>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </>\r\n      )}\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyOrdersScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\configAuth.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderEditScreen.js",["497","498","499"],"import Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getOrderDetails, updateOrder } from '../actions/orderActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { ORDER_UPDATE_RESET } from '../constants/orderConstants'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n  //Filter only numbers from the input\r\n  let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n  //Check if the input is of correct length\r\n  let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n  if (match) {\r\n    return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n  return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 560,\r\n  },\r\n}))\r\n\r\nconst OrderEditScreen = ({ match, history }) => {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const orderId = match.params.id\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading } = orderDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const orderUpdate = useSelector((state) => state.orderUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = orderUpdate\r\n\r\n  const orderPay = useSelector((state) => state.orderPay)\r\n  const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n  const stateOrder = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng', 'Huỷ']\r\n  const [orderStatus, setOrderStatus] = useState('')\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateOrder({ _id: orderId, orderStatus }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: ORDER_UPDATE_RESET })\r\n    } else {\r\n      dispatch(getOrderDetails(orderId))\r\n    }\r\n  }, [dispatch, orderId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      {loadingUpdate && (\r\n        <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n      )}\r\n      {errorUpdate && <Message>{errorUpdate}</Message>}\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Form onSubmit={submitHandler}>\r\n          <ListGroup\r\n            variant='flush'\r\n            className='shadow p-3 mt-3 card_color'\r\n            style={{ border: '0.4rem dashed #ffc1b6', borderRadius: '1rem' }}\r\n          >\r\n            <div className='text-center'>\r\n              <h3 className='pl-2'>CHI TIẾT ĐƠN HÀNG</h3>\r\n            </div>\r\n            <ListGroup.Item className='border-0'>\r\n              <Row>\r\n                <Col md={6}>\r\n                  <p className='text-start'>\r\n                    Mã đơn hàng: <strong>{order._id}</strong>\r\n                  </p>\r\n                  <p className='text-start'>\r\n                    Tổng tiền: <strong>{order.totalPrice}đ</strong>\r\n                  </p>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <FormControl className={classes.formControl}>\r\n                    <InputLabel\r\n                      id='demo-controlled-open-select-label'\r\n                      style={{ fontSize: '1.2rem' }}\r\n                    >\r\n                      Trạng thái đơn hàng\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId='demo-controlled-open-select-label'\r\n                      id='demo-controlled-open-select'\r\n                      open={open}\r\n                      onClose={handleClose}\r\n                      onOpen={handleOpen}\r\n                      value={\r\n                        order.orderStatus ? order.orderStatus : orderStatus\r\n                      }\r\n                      onChange={(e) => setOrderStatus(e.target.value)}\r\n                      className='text-danger text-center text-uppercase'\r\n                    >\r\n                      {stateOrder.map((t) => (\r\n                        <MenuItem className='justify-content-center' value={t}>\r\n                          {t}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Col>\r\n              </Row>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className='border-0'>\r\n              <Row>\r\n                <Col md={6} className='border-0'>\r\n                  <Card\r\n                    className='rounded card_color'\r\n                    style={{ height: '11rem', backgroundColor: '#F8F8F8' }}\r\n                  >\r\n                    <CardContent>\r\n                      <h5 className='border-bottom border-info text-info pb-1'>\r\n                        Thông tin người nhận\r\n                      </h5>\r\n                      <div>\r\n                        <Row className='m-0'>\r\n                          <Col md={4}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Địa chỉ:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={8}>\r\n                            <strong>{order.user.name}</strong>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={4}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Tên khách hàng:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={8}>\r\n                            <p className='mb-1'>\r\n                              {order.shippingAddress.diaChi}\r\n                              {' - '}\r\n                              {order.shippingAddress.xa}\r\n                              {' - '}\r\n                              {order.shippingAddress.huyen}\r\n                              {' - '}\r\n                              {order.shippingAddress.thanhPho}.\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={4}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Số điện thoại:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={8}>\r\n                            <p className='mb-1'>\r\n                              {formatPhoneNumber(\r\n                                order.shippingAddress.numberPhone\r\n                              )}\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={4}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Email:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={8}>\r\n                            <p className='mb-1'>{order.user.email}</p>\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Card\r\n                    className='rounded card_color'\r\n                    style={{ height: '11rem', backgroundColor: '#F8F8F8' }}\r\n                  >\r\n                    <CardContent>\r\n                      <h5 className='border-bottom border-info text-info pb-1'>\r\n                        Phương thức thanh toán\r\n                      </h5>\r\n                      <div>\r\n                        <Row className='m-0'>\r\n                          <Col md={5}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Phương thức:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={7} className='pt-1'>\r\n                            <strong\r\n                              className='mb-0 text-capitalize'\r\n                              style={{ letterSpacing: '0.1rem' }}\r\n                            >\r\n                              {order.paymentMethod}\r\n                            </strong>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={5}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Thời gian thanh toán:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={7}>\r\n                            <p className='mb-1'>\r\n                              {order.paymentMethod ===\r\n                                'Thanh toán bằng tiền mặt' &&\r\n                              order.isDelivered ? (\r\n                                <strong className='mb-0'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      order.deliveredAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </strong>\r\n                              ) : order.paymentMethod ===\r\n                                'Thanh toán bằng PayPal' ? (\r\n                                <strong className='mb-0'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      order.paidAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </strong>\r\n                              ) : (\r\n                                <div className='d-flex'>\r\n                                  <strong className='text-danger mb-0'>\r\n                                    Chưa thanh toán\r\n                                  </strong>\r\n                                </div>\r\n                              )}\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={5}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Thời gian nhận hàng:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={7}>\r\n                            {order.isDelivered ? (\r\n                              <strong className='mb-0'>\r\n                                {format(\r\n                                  new utcToZonedTime(\r\n                                    order.deliveredAt,\r\n                                    'Asia/Ho_Chi_Minh'\r\n                                  ),\r\n                                  'HH:mm:ss - dd/MM/yyyy',\r\n                                  { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                )}\r\n                              </strong>\r\n                            ) : (\r\n                              <div className='d-flex'>\r\n                                {/* <Image\r\n                                  src='https://img.icons8.com/fluent/24/000000/only-cash.png'\r\n                                  className='pr-1'\r\n                                /> */}\r\n                                <strong className='text-danger mb-0'>\r\n                                  Chưa nhận hàng\r\n                                </strong>\r\n                              </div>\r\n                            )}\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item className='border-0'>\r\n              <h5\r\n                className='pb-1'\r\n                style={{ borderBottom: '0.04rem solid #ddd' }}\r\n              >\r\n                Giỏ hàng\r\n              </h5>\r\n\r\n              <div className='rounded mt-3'>\r\n                {order.orderItems.map((item, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className='p-3 card_color shadow border mb-1'\r\n                    style={{ backgroundColor: '#F8F8F8' }}\r\n                  >\r\n                    <Row>\r\n                      <Col md={1} className='img_container'>\r\n                        <Image\r\n                          className='img_color'\r\n                          src={item.image}\r\n                          alt={item.name}\r\n                          fluid\r\n                          rounded\r\n                        />\r\n                      </Col>\r\n\r\n                      <Col md={7} className='text-center'>\r\n                        <Link\r\n                          to={`/product/${item.product}`}\r\n                          className='link-product fst-italic'\r\n                        >\r\n                          <p style={{ fontSize: '1.1rem' }} className='pt-3'>\r\n                            {item.name}\r\n                          </p>\r\n                        </Link>\r\n                      </Col>\r\n\r\n                      <Col md={4} className='text-center'>\r\n                        <p\r\n                          style={{ fontSize: '1.1rem' }}\r\n                          className='pt-3 fst-italic'\r\n                        >\r\n                          {item.qty} x {formatMoney(item.price, 'đ')}\r\n                          {' = '}\r\n                          {formatMoney(item.qty * item.price, 'đ')}\r\n                        </p>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item className='border-0'>\r\n              <div\r\n                className='d-flex justify-content-end '\r\n                style={{ borderTop: '0.04rem solid #ddd' }}\r\n              >\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-light rounded-pill mt-4 btn_color_pink'\r\n                  size='normal'\r\n                  style={{\r\n                    width: '14rem',\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                  }}\r\n                >\r\n                  DUYỆT\r\n                </Button>\r\n              </div>\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Form>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js",["500","501","502","503","504","505","506","507","508","509","510","511","512","513"],"import Step from '@material-ui/core/Step'\r\nimport StepConnector from '@material-ui/core/StepConnector'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Check from '@material-ui/icons/Check'\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport VideoLabelIcon from '@material-ui/icons/VideoLabel'\r\nimport CachedIcon from '@material-ui/icons/Cached'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping'\r\nimport EventAvailableIcon from '@material-ui/icons/EventAvailable'\r\n\r\nconst useQontoStepIconStyles = makeStyles({\r\n  root: {\r\n    color: '#eaeaf0',\r\n    display: 'flex',\r\n    height: 22,\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    color: '#784af4',\r\n  },\r\n  circle: {\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: '50%',\r\n    backgroundColor: 'currentColor',\r\n  },\r\n  completed: {\r\n    color: '#784af4',\r\n    zIndex: 1,\r\n    fontSize: 18,\r\n  },\r\n})\r\n\r\nfunction QontoStepIcon(props) {\r\n  const classes = useQontoStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n      })}\r\n    >\r\n      {completed ? (\r\n        <Check className={classes.completed} />\r\n      ) : (\r\n        <div className={classes.circle} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n}\r\n\r\nconst ColorlibConnector = withStyles({\r\n  alternativeLabel: {\r\n    top: 22,\r\n  },\r\n  active: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  completed: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  line: {\r\n    height: 3,\r\n    border: 0,\r\n    backgroundColor: '#eaeaf0',\r\n    borderRadius: 1,\r\n  },\r\n})(StepConnector)\r\n\r\nconst useColorlibStepIconStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: '#ccc',\r\n    zIndex: 1,\r\n    color: '#fff',\r\n    width: 50,\r\n    height: 50,\r\n    display: 'flex',\r\n    borderRadius: '50%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n  completed: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n})\r\n\r\nfunction ColorlibStepIcon(props) {\r\n  const classes = useColorlibStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  const icons = {\r\n    1: <CachedIcon style={{ fontSize: '1.8rem' }} />,\r\n    2: <LocalShippingIcon style={{ fontSize: '1.8rem' }} />,\r\n    3: <EventAvailableIcon style={{ fontSize: '1.8rem' }} />,\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n        [classes.completed]: completed,\r\n      })}\r\n    >\r\n      {icons[String(props.icon)]}\r\n    </div>\r\n  )\r\n}\r\n\r\nColorlibStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n  /**\r\n   * The label displayed in the step icon.\r\n   */\r\n  icon: PropTypes.node,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst ProgressShipping = () => {\r\n  const classes = useStyles()\r\n  const [activeStep, setActiveStep] = useState(0)\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  // const steps = getSteps()\r\n\r\n  const steps = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng']\r\n\r\n  const stepHandler = () => {\r\n    setActiveStep(1)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper\r\n        alternativeLabel\r\n        activeStep={steps.indexOf(order.orderStatus)}\r\n        connector={<ColorlibConnector />}\r\n      >\r\n        {steps.map((label) => (\r\n          <Step key={label} onChange={stepHandler}>\r\n            {order.orderStatus === label ? (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            ) : (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            )}\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressShipping\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CategoriesListScreen.js",["514","515"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  createCategory,\r\n  deleteCategory,\r\n  listCategoriesAdm,\r\n} from '../actions/categoryAction'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst CategoriesListScreen = ({ history }) => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = category.map((cat) => cat._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n  const { loading, error, category } = categoriesListAdm\r\n\r\n  const categoryDelete = useSelector((state) => state.categoryDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = categoryDelete\r\n\r\n  const categoryCreate = useSelector((state) => state.categoryCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    category: createdProduct,\r\n  } = categoryCreate\r\n\r\n  const emptyRows =\r\n    category !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, category.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteCategory(id))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = category.find((cat) => cat._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH DANH MỤC</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listCategoriesAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createCategory(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {loadingDelete && (\r\n          <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n        ) && <Loader />}\r\n      {errorDelete && <Message>{errorDelete}</Message>}\r\n      {loadingCreate && (\r\n        <MessageSuccess\r\n          variant={'Đã thêm ' + name + ' thành công'}\r\n        ></MessageSuccess>\r\n      )}\r\n      {errorCreate && <Message>{errorCreate}</Message>}\r\n      {loading ? (\r\n        <SkeletonEffect />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <div>\r\n            <Dialog\r\n              disableBackdropClick\r\n              disableEscapeKeyDown\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby='form-dialog-title'\r\n              maxWidth='xl'\r\n            >\r\n              <div className='d-flex justify-content-end'>\r\n                <Button\r\n                  onClick={handleClose}\r\n                  className='p-1 m-1 rounded-pill'\r\n                  variant='light'\r\n                >\r\n                  <Close />\r\n                </Button>\r\n              </div>\r\n\r\n              <DialogContent style={{ width: '30rem' }}>\r\n                <h4 className='text-center'>Tạo danh mục</h4>\r\n                <Form onSubmit={submitHandler}>\r\n                  <Form.Group>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Tên danh mục\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='name'\r\n                      size='normal'\r\n                      placeholder='Enter name'\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      size='sm'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                      }}\r\n                    >\r\n                      Tạo\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n          <div className={classes.root}>\r\n            <div className='d-flex justify-content-end'>\r\n              <Button\r\n                variant='outline-dark'\r\n                className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                onClick={handleClickOpen}\r\n                size='normal'\r\n              >\r\n                <i className='fas fa-plus'></i> Tạo danh mục\r\n              </Button>\r\n            </div>\r\n            <Paper\r\n              className={classes.paper + 'shadow'}\r\n              style={{\r\n                borderRadius: '1rem',\r\n                border: '0.25px solid #ddd',\r\n              }}\r\n            >\r\n              <TableContainer\r\n                className='text-center p-5'\r\n                style={{\r\n                  borderRadius: '1rem',\r\n                }}\r\n              >\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby='tableTitle'\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label='enhanced table'\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={category.length}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(category, getComparator(order, orderBy))\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((cat, index) => {\r\n                        const isItemSelected = isSelected(cat._id)\r\n                        const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            onClick={(event) => handleClick(event, cat._id)}\r\n                            role='checkbox'\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={cat._id}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding='checkbox'>\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              component='th'\r\n                              id={labelId}\r\n                              scope='row'\r\n                              padding='none'\r\n                              align='center'\r\n                            >\r\n                              {cat._id}\r\n                            </TableCell>\r\n                            <TableCell align='left' className='text-center'>\r\n                              {cat.name}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {format(\r\n                                new utcToZonedTime(\r\n                                  cat.createdAt,\r\n                                  'Asia/Ho_Chi_Minh'\r\n                                ),\r\n                                'HH:mm:ss - dd/MM/yyyy',\r\n                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                              )}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {format(\r\n                                new utcToZonedTime(\r\n                                  cat.updatedAt,\r\n                                  'Asia/Ho_Chi_Minh'\r\n                                ),\r\n                                'HH:mm:ss - MM/dd/yyyy',\r\n                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                              )}\r\n                            </TableCell>\r\n\r\n                            <TableCell align='center'>\r\n                              <LinkContainer\r\n                                to={`/admin/category/${cat._id}/edit`}\r\n                              >\r\n                                <Button\r\n                                  variant='outline-light'\r\n                                  className='btn-sm rounded-pill btn_color_details'\r\n                                >\r\n                                  CHI TIẾT\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                    {emptyRows > 0 && (\r\n                      <TableRow\r\n                        style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                      >\r\n                        <TableCell colSpan={6} />\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component='div'\r\n                count={category.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n            <FormControlLabel\r\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n              label='Dense padding'\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoriesListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CategoryEditScreen.js",["516","517"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport { getCategoryDetails, updateCategory } from '../actions/categoryAction'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../constants/categoriesConstants'\r\n\r\nconst CategoryEditScreen = ({ match, history }) => {\r\n  const catId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const categoryDetails = useSelector((state) => state.categoryDetails)\r\n  const { loading, error, category } = categoryDetails\r\n\r\n  const categoryUpdate = useSelector((state) => state.categoryUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = categoryUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateCategory({ _id: catId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: CATEGORY_UPDATE_RESET })\r\n      history.push('/admin/categorieslist')\r\n    } else {\r\n      if (!category.name || category._id !== catId) {\r\n        dispatch(getCategoryDetails(catId))\r\n      } else {\r\n        setName(category.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, catId, category, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      {loadingUpdate && (\r\n        <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n      )}\r\n      {errorUpdate && <Message>{errorUpdate}</Message>}\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Row className='justify-content-center'>\r\n          <Col md={6}>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow card_color'\r\n              fluid\r\n            >\r\n              <h2 className='text-center mb-4'>Chỉnh sửa danh mục</h2>\r\n              <Form.Group>\r\n                <Container>\r\n                  <Form.Label\r\n                    as='p'\r\n                    className='mb-1'\r\n                    style={{ fontSize: '1.5rem' }}\r\n                  >\r\n                    Tên danh mục\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    style={{ fontSize: '1.2rem' }}\r\n                    className='border border-grey rounded-pill'\r\n                    type='name'\r\n                    size='normal'\r\n                    placeholder='Enter name'\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  ></Form.Control>\r\n                </Container>\r\n              </Form.Group>\r\n              <div className='pl-3 pr-3 text-center'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-light'\r\n                  className='rounded-pill btn_color_created'\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                    width: '20rem',\r\n                  }}\r\n                >\r\n                  Cập nhật\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductCreateScreen.js",["518","519","520"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { listCategoriesAdm } from '../actions/categoryAction'\r\nimport { createProduct } from '../actions/productActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport Announcement from '../components/Announcement'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nconst ProductCreateScreen = () => {\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [categoryy, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const productCreate = useSelector((state) => state.productCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n  } = productCreate\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const { loading: loadingCat, error: errorCat, category } = categoriesList\r\n\r\n  console.log('hihi', category)\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(\r\n      createProduct({\r\n        name,\r\n        price,\r\n        description,\r\n        image,\r\n        brand,\r\n        categoryy,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successCreate) {\r\n      dispatch({ type: PRODUCT_CREATE_RESET })\r\n    } else {\r\n      if (userInfo) {\r\n        dispatch(listCategoriesAdm())\r\n      }\r\n    }\r\n  }, [dispatch, userInfo, successCreate])\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Link\r\n          to='/admin/productlist'\r\n          className='btn btn-light my-3 text-uppercase rounded-pill'\r\n        >\r\n          <i class='fas fa-arrow-left pr-2'></i>\r\n          Quay về\r\n        </Link>\r\n        {/* {loadingCreate && (\r\n            <Announcement variant='success'> Thêm thành công</Announcement>\r\n          ) && <Loader />}\r\n        {errorCreate && <Announcement>{errorCreate}</Announcement>} */}\r\n        {loadingCreate ? (\r\n          <Announcement> Thêm thành công</Announcement> && <Loader />\r\n        ) : errorCreate ? (\r\n          <Message>{errorCreate}</Message>\r\n        ) : (\r\n          <>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow card_color'\r\n              fluid\r\n            >\r\n              <h2 className='text-center mb-4'>Thêm sản phẩm</h2>\r\n\r\n              <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Tên sản phẩm\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='name'\r\n                  placeholder='Enter name'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Ảnh\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter image url'\r\n                  value={image}\r\n                  onChange={(e) => setImage(e.target.value)}\r\n                ></Form.Control>\r\n                <Form.File\r\n                  className='border border-grey'\r\n                  id='image-file'\r\n                  label='Choose File'\r\n                  custom\r\n                  onChange={uploadFileHandler}\r\n                ></Form.File>\r\n                {uploading && <Loader />}\r\n              </Form.Group>\r\n\r\n              <Row>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='brand' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Thể loại\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='text'\r\n                      placeholder='Enter brand'\r\n                      value={brand}\r\n                      onChange={(e) => setBrand(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='countInStock' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Số lượng trong kho\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill text-center'\r\n                      type='number'\r\n                      placeholder='Enter countInStock'\r\n                      value={countInStock}\r\n                      onChange={(e) => setCountInStock(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='category' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Danh mục\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill '\r\n                      type='text'\r\n                      as='select'\r\n                      placeholder='Enter category'\r\n                      value={categoryy}\r\n                      onChange={(e) => setCategory(e.target.value)}\r\n                    >\r\n                      <option></option>\r\n                      {category &&\r\n                        category.map((cat, index) => (\r\n                          <option\r\n                            style={{ color: 'black' }}\r\n                            key={index}\r\n                            value={cat._id}\r\n                          >\r\n                            {cat.name}\r\n                          </option>\r\n                        ))}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='price' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Giá\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill text-center'\r\n                      type='number'\r\n                      placeholder='Enter price'\r\n                      value={price}\r\n                      onChange={(e) => setPrice(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Form.Group controlId='description' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1 ml-5'>\r\n                  Nội dung\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='text'\r\n                  rows={3}\r\n                  as='textarea'\r\n                  placeholder='Enter description'\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <div className='pl-3 pr-3 text-center'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-light'\r\n                  className='rounded-pill btn_color_created'\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                    width: '20rem',\r\n                  }}\r\n                >\r\n                  Tạo\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductCreateScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\test.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js",["521","522","523","524","525","526","527","528","529","530","531","532","533","534"],"import React, { useEffect } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCategoryDetails } from '../actions/categoryAction'\r\nimport { getProductOfCategory } from '../actions/productActions'\r\nimport FilterNav from '../components/FilterNav'\r\nimport Message from '../components/Message'\r\nimport Meta from '../components/Meta'\r\nimport Paginate from '../components/Paginate'\r\nimport Product from '../components/Product'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport FaceIcon from '@material-ui/icons/Face'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexWrap: 'wrap',\r\n    '& > *': {\r\n      margin: theme.spacing(0.5),\r\n    },\r\n  },\r\n}))\r\n\r\nconst ProductOfCategoryScreen = ({ match }) => {\r\n  const keyword = match.params.keyword\r\n  const pageNumber = match.params.pageNumber || 1\r\n  const catId = match.params.id\r\n\r\n  const classes = useStyles()\r\n\r\n  const handleDelete = () => {\r\n    console.info('You clicked the delete icon.')\r\n  }\r\n\r\n  const handleClick = () => {\r\n    console.info('You clicked the Chip.')\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productOfCategory = useSelector((state) => state.productOfCategory)\r\n  const { loading, error, products, pages, page } = productOfCategory\r\n\r\n  const categoryDetails = useSelector((state) => state.categoryDetails)\r\n  const { loading: loadingCat, success: successCat, category } = categoryDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const productFilter = useSelector((state) => state.productFilter)\r\n  const {\r\n    loading: loadingFilter,\r\n    success: successFilter,\r\n    product: productsFilter,\r\n  } = productFilter\r\n\r\n  const productFilterPrice = useSelector((state) => state.productFilterPrice)\r\n  const {\r\n    loading: loadingFilterPrice,\r\n    success: successFilterPrice,\r\n    product: productsFilterPrice,\r\n  } = productFilterPrice\r\n\r\n  // console.log('product', product)\r\n\r\n  useEffect(() => {\r\n    dispatch(getProductOfCategory(catId))\r\n\r\n    if (userInfo) {\r\n      dispatch(getCategoryDetails(catId))\r\n    }\r\n  }, [dispatch, userInfo, catId])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className='pt-2'>\r\n        <Meta />\r\n\r\n        {loading ? (\r\n          <SkeletonEffect />\r\n        ) : error ? (\r\n          <Message variant='danger'>{error}</Message>\r\n        ) : (\r\n          <>\r\n            <Row\r\n              className='card_color shadow ml-2 mr-2'\r\n              style={{ minHeight: '105vh', backgroundColor: '#f8e4b7' }}\r\n            >\r\n              <Col md={3} className='border-right border-danger'>\r\n                <FilterNav />\r\n              </Col>\r\n              <Col md={9}>\r\n                <div className='pt-2 pl-3 pr-3 '>\r\n                  {/* <div className='text-center'>\r\n                    <h5>{category && category.name}</h5>\r\n                  </div> */}\r\n                  <Col md={12} className='d-flex justify-content-center '>\r\n                    {productsFilter &&\r\n                      productsFilter.map((prod) => (\r\n                        <Chip\r\n                          variant='outlined'\r\n                          color='primary'\r\n                          size='small'\r\n                          label={prod.category.name}\r\n                        />\r\n                      ))}\r\n                  </Col>\r\n                  <Row>\r\n                    {/* {loadingFilterPrice ? (\r\n                      <SkeletonEffect />\r\n                    ) : productsFilterPrice ? (\r\n                      productsFilterPrice.map((\r\n                        product // phai co ? de kiem tra product === null\r\n                      ) => (\r\n                        <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                          <Product product={product} />\r\n                        </Col>\r\n                      ))\r\n                    ) : */}\r\n                    {loadingFilter ? (\r\n                      <SkeletonEffect />\r\n                    ) : productsFilter ? (\r\n                      productsFilter.map((\r\n                        product // phai co ? de kiem tra product === null\r\n                      ) => (\r\n                        <>\r\n                          <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                            <Product product={product} />\r\n                          </Col>\r\n                        </>\r\n                      ))\r\n                    ) : productsFilterPrice ? (\r\n                      productsFilterPrice.map((\r\n                        product // phai co ? de kiem tra product === null\r\n                      ) => (\r\n                        <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                          <Product product={product} />\r\n                        </Col>\r\n                      ))\r\n                    ) : (\r\n                      products.map((\r\n                        product // phai co ? de kiem tra product === null\r\n                      ) => (\r\n                        <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                          <Product product={product} />\r\n                        </Col>\r\n                      ))\r\n                    )}\r\n                  </Row>\r\n                  <div className='d-flex justify-content-center'>\r\n                    <Paginate\r\n                      pages={pages}\r\n                      page={page}\r\n                      // keyword={keyword ? keyword : ''}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductOfCategoryScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js",["535","536","537","538","539","540"],"import { BookOutlined, DollarOutlined } from '@ant-design/icons'\r\nimport Slider from '@material-ui/core/Slider'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { Menu } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listCategories } from '../actions/categoryAction'\r\nimport { Checkbox } from 'antd'\r\nimport { Col, Image, Row, Button, Form } from 'react-bootstrap'\r\nimport { filterPriceProduct, filterProduct } from '../actions/productActions'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nconst rootSubmenuKeys = ['sub1', 'sub2', 'sub4']\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 300,\r\n  },\r\n})\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    color: '#52af77',\r\n    height: 8,\r\n  },\r\n  thumb: {\r\n    height: 24,\r\n    width: 24,\r\n    backgroundColor: '#fff',\r\n    border: '2px solid currentColor',\r\n    marginTop: -8,\r\n    marginLeft: -12,\r\n    '&:focus, &:hover, &$active': {\r\n      boxShadow: 'inherit',\r\n    },\r\n  },\r\n  active: {},\r\n  valueLabel: {\r\n    left: 'calc(-50% + 4px)',\r\n  },\r\n  track: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n  rail: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n})(Slider)\r\n\r\nfunction valuetext(value) {\r\n  return `${value}`\r\n}\r\n\r\nconst FilterNav = () => {\r\n  const classes = useStyles()\r\n  const [value, setValue] = useState([0, 5000000])\r\n  const [cat, setCat] = useState([])\r\n  const [start, setStart] = useState('')\r\n  const [end, setEnd] = useState('')\r\n  const [openKeys, setOpenKeys] = React.useState(['sub1'])\r\n\r\n  const onOpenChange = (keys) => {\r\n    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1)\r\n    if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\r\n      setOpenKeys(keys)\r\n    } else {\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : [])\r\n    }\r\n  }\r\n  function ValueLabelComponent(props) {\r\n    const { children, open, value } = props\r\n\r\n    props.index === 1 ? setEnd(props.value) : setStart(props.value)\r\n\r\n    return (\r\n      <Tooltip\r\n        open={open}\r\n        enterTouchDelay={0}\r\n        placement='bottom'\r\n        title={value.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n      >\r\n        {children}\r\n      </Tooltip>\r\n    )\r\n  }\r\n\r\n  // console.log('end', end)\r\n  // console.log('start', start)\r\n\r\n  ValueLabelComponent.propTypes = {\r\n    children: PropTypes.element.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n  }\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue)\r\n  }\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const { loading, success, category } = categoriesList\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  function onChange(checkedValues) {\r\n    if (checkedValues.target.checked === true) {\r\n      setCat([...cat, checkedValues.target.value])\r\n    } else {\r\n      cat.map(\r\n        (e) => e === checkedValues.target.value && cat.splice(cat.indexOf(e), 1)\r\n      )\r\n      setCat([...cat])\r\n    }\r\n  }\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(filterProduct(cat))\r\n    dispatch(filterPriceProduct([start, end]))\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(listCategories())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={submitHandler}>\r\n        <div className='m-3 mb-0'>\r\n          <h5 className='justify-content-center mt-2 d-flex align-items-center'>\r\n            <Image\r\n              className='mr-2'\r\n              src='https://img.icons8.com/material-outlined/20/000000/filter--v1.png'\r\n            />\r\n            Bộ lọc tìm kiếm\r\n          </h5>\r\n\r\n          <Form.Group>\r\n            <strong className='mb-1 justify-content-center d-flex align-items-center mt-3 '>\r\n              <Image\r\n                className='pl-1 pr-1'\r\n                src='https://img.icons8.com/fluent/24/000000/us-dollar.png'\r\n              />\r\n              Tìm kiếm theo giá\r\n            </strong>\r\n            <div className='d-flex align-items-center justify-content-center mb-1'>\r\n              <p className='pr-1 mb-0'> Giá từ:</p>\r\n              <strong className='mb-0' style={{ letterSpacing: '0.08rem' }}>\r\n                {start.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'}\r\n                {\r\n                  <Image\r\n                    className='pl-1 pr-1'\r\n                    src='https://img.icons8.com/fluent/24/000000/resize-horizontal.png'\r\n                  />\r\n                }\r\n                {end.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'}\r\n              </strong>\r\n            </div>\r\n            <PrettoSlider\r\n              value={value}\r\n              onChange={handleChange}\r\n              ValueLabelComponent={ValueLabelComponent}\r\n              aria-labelledby='range-slider'\r\n              getAriaValueText={valuetext}\r\n              valueLabelDisplay='auto'\r\n              aria-label='pretto slider'\r\n              min={0}\r\n              step={50000}\r\n              max={5000000}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Menu\r\n              mode='inline'\r\n              openKeys={openKeys}\r\n              onOpenChange={onOpenChange}\r\n              style={{ width: 270 }}\r\n              className='border-0'\r\n            >\r\n              <SubMenu\r\n                key='sub2'\r\n                icon={<BookOutlined />}\r\n                title='Tìm kiếm theo danh mục'\r\n              >\r\n                {category &&\r\n                  category.map((cate, key) => (\r\n                    <Menu.Item key={key}>\r\n                      <Checkbox value={cate._id} onChange={onChange}>\r\n                        {cate.name}\r\n                      </Checkbox>\r\n                    </Menu.Item>\r\n                  ))}\r\n              </SubMenu>\r\n            </Menu>\r\n          </Form.Group>\r\n          <Form.Group className='text-center '>\r\n            <Button\r\n              type='submit'\r\n              size='normal'\r\n              variant='outline-dark rounded-pill p-1 pl-4 pr-4'\r\n              style={{ letterSpacing: '0.08rem', fontSize: '0.85rem' }}\r\n            >\r\n              Tìm kiếm\r\n            </Button>\r\n          </Form.Group>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FilterNav\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\SupplierListScreen.js",["541","542","543"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  createSupplier,\r\n  deleteSupplier,\r\n  listSupplierAdm,\r\n} from '../actions/supplierActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst SupplierListScreen = () => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = supplier.map((sup) => sup._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n  const { loading, error, supplier } = supplierListAdm\r\n\r\n  const supplierDelete = useSelector((state) => state.supplierDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = supplierDelete\r\n\r\n  const supplierCreate = useSelector((state) => state.supplierCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    supplier: createdProduct,\r\n  } = supplierCreate\r\n\r\n  const emptyRows =\r\n    supplier !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, supplier.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('Bạn có chắc?')) {\r\n      dispatch(deleteSupplier({ id }))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = supplier.find((cat) => cat._id)\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH NHÀ CUNG CẤP</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listSupplierAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  const submitHandlerDetails = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {loadingDelete && (\r\n          <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n        ) && <Loader />}\r\n      {errorDelete && <Message>{errorDelete}</Message>}\r\n      {loadingCreate && (\r\n        <MessageSuccess\r\n          variant={'Đã thêm ' + name + ' thành công'}\r\n        ></MessageSuccess>\r\n      )}\r\n      {errorCreate && <Message>{errorCreate}</Message>}\r\n      {loading ? (\r\n        <SkeletonEffect />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <div>\r\n            <Dialog\r\n              disableBackdropClick\r\n              disableEscapeKeyDown\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby='form-dialog-title'\r\n              maxWidth='xl'\r\n            >\r\n              <div className='d-flex justify-content-end'>\r\n                <Button\r\n                  onClick={handleClose}\r\n                  className='p-1 m-1 rounded-pill'\r\n                  variant='light'\r\n                >\r\n                  <Close />\r\n                </Button>\r\n              </div>\r\n\r\n              <DialogContent style={{ width: '30rem' }}>\r\n                <h4 className='text-center'>Thêm nhà cung cấp</h4>\r\n                <Form onSubmit={submitHandler}>\r\n                  <Form.Group>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Tên nhà cung cấp\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='name'\r\n                      size='normal'\r\n                      placeholder='Enter name'\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      size='sm'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                      }}\r\n                    >\r\n                      Tạo\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n\r\n          <div className={classes.root}>\r\n            <div className='d-flex justify-content-end'>\r\n              <Button\r\n                variant='outline-dark'\r\n                className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                onClick={handleClickOpen}\r\n                size='normal'\r\n              >\r\n                <i className='fas fa-plus'></i> Thêm nhà cung cấp\r\n              </Button>\r\n            </div>\r\n            <Paper\r\n              className={classes.paper + 'shadow'}\r\n              style={{\r\n                borderRadius: '1rem',\r\n                border: '0.25px solid #ddd',\r\n              }}\r\n            >\r\n              <TableContainer\r\n                className='text-center p-5'\r\n                style={{\r\n                  borderRadius: '1rem',\r\n                }}\r\n              >\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby='tableTitle'\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label='enhanced table'\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={supplier.length}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(supplier, getComparator(order, orderBy))\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((sup, index) => {\r\n                        const isItemSelected = isSelected(sup._id)\r\n                        const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            onClick={(event) => handleClick(event, sup._id)}\r\n                            role='checkbox'\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={sup._id}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding='checkbox'>\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              component='th'\r\n                              id={labelId}\r\n                              scope='row'\r\n                              padding='none'\r\n                              align='center'\r\n                            >\r\n                              {sup._id}\r\n                            </TableCell>\r\n                            <TableCell align='left' className='text-center'>\r\n                              {sup.name}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {format(\r\n                                new utcToZonedTime(\r\n                                  sup.createdAt,\r\n                                  'Asia/Ho_Chi_Minh'\r\n                                ),\r\n                                'HH:mm:ss - dd/MM/yyyy',\r\n                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                              )}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {format(\r\n                                new utcToZonedTime(\r\n                                  sup.updatedAt,\r\n                                  'Asia/Ho_Chi_Minh'\r\n                                ),\r\n                                'HH:mm:ss - MM/dd/yyyy',\r\n                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                              )}\r\n                            </TableCell>\r\n\r\n                            <TableCell align='center'>\r\n                              <LinkContainer\r\n                                to={`/admin/supplier/${sup._id}/edit`}\r\n                              >\r\n                                <Button\r\n                                  variant='outline-light'\r\n                                  className='btn-sm rounded-pill btn_color_details'\r\n                                >\r\n                                  CHI TIẾT\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                    {emptyRows > 0 && (\r\n                      <TableRow\r\n                        style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                      >\r\n                        <TableCell colSpan={6} />\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component='div'\r\n                count={supplier.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n            <FormControlLabel\r\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n              label='Dense padding'\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\SupplierEditScreen.js",["544"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getSupplierDetails, updateSupplier } from '../actions/supplierActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { SUPPLIER_UPDATE_RESET } from '../constants/supplierConstants'\r\n\r\nconst SupplierEditScreen = ({ history, match }) => {\r\n  const supId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const supplierDetails = useSelector((state) => state.supplierDetails)\r\n  const { loading, error, supplier } = supplierDetails\r\n\r\n  const supplierUpdate = useSelector((state) => state.supplierUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = supplierUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateSupplier({ _id: supId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: SUPPLIER_UPDATE_RESET })\r\n      history.push('/admin/supplierlist')\r\n    } else {\r\n      if (!supplier.name || supplier._id !== supId) {\r\n        dispatch(getSupplierDetails(supId))\r\n      } else {\r\n        setName(supplier.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, supId, supplier, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      {loadingUpdate && (\r\n        <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n      )}\r\n      {errorUpdate && <Message>{errorUpdate}</Message>}\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Row className='justify-content-center'>\r\n          <Col md={6}>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow card_color'\r\n              fluid\r\n            >\r\n              <h3 className='text-center mb-4'>\r\n                Chỉnh sửa thông tin nhà cung cấp\r\n              </h3>\r\n              <Form.Group>\r\n                <Container>\r\n                  <Form.Label\r\n                    as='p'\r\n                    className='mb-1'\r\n                    style={{ fontSize: '1rem' }}\r\n                  >\r\n                    Tên nhà cung cấp\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    style={{ fontSize: '1rem' }}\r\n                    className='border border-grey rounded-pill'\r\n                    type='name'\r\n                    size='sm'\r\n                    placeholder='Enter name'\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  ></Form.Control>\r\n                </Container>\r\n              </Form.Group>\r\n              <div className='pl-3 pr-3 text-center'>\r\n                <Button\r\n                  type='submit'\r\n                  size='sm'\r\n                  variant='outline-light'\r\n                  className='rounded-pill btn_color_created'\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                    width: '20rem',\r\n                  }}\r\n                >\r\n                  Cập nhật\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js",["545","546","547","548","549","550","551","552","553","554"],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js",["555","556","557","558","559","560","561","562","563","564"],"// import { Menu } from '@material-ui/core'\r\n// import { Link } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Button from '@material-ui/core/Button'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport { Menu } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport { black } from 'colors'\r\nimport firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Container, Image, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Route, useHistory } from 'react-router-dom'\r\nimport { listCategories } from '../../../actions/categoryAction'\r\nimport { logout } from '../../../actions/userActions'\r\nimport SearchBox from '../../../components/SearchBox'\r\n\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n})((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    {...props}\r\n  />\r\n))\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n  root: {\r\n    '&:focus': {\r\n      backgroundColor: theme.palette.primary.main,\r\n      '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n        color: theme.palette.common.white,\r\n      },\r\n    },\r\n  },\r\n}))(MenuItem)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  paper: {\r\n    marginRight: theme.spacing(1),\r\n    zIndex: '7 !important',\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n  },\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: -3,\r\n    top: 13,\r\n    border: `2px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n  },\r\n}))(Badge)\r\n\r\nfunction Header(props) {\r\n  const classes = useStyles()\r\n\r\n  const [open, setOpen] = React.useState(false)\r\n  const anchorRef = React.useRef(null)\r\n  const anchorReff = React.useRef(null)\r\n  const history = useHistory()\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n  // const [menu, setMenu] = useState(false)\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { user } = userDetails\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const { loading, success, category } = categoriesList\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  const logoutHandler = () => {\r\n    firebase.auth().signOut()\r\n    dispatch(logout())\r\n    history.push('/')\r\n  }\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen)\r\n  }\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return\r\n    }\r\n\r\n    setOpen(false)\r\n  }\r\n\r\n  function handleListKeyDown(event) {\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault()\r\n      setOpen(false)\r\n    }\r\n  }\r\n\r\n  // return focus to the button when we transitioned from !open -> open\r\n  const prevOpen = React.useRef(open)\r\n  useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      anchorRef.current.focus()\r\n    }\r\n\r\n    dispatch(listCategories())\r\n\r\n    prevOpen.current = open\r\n  }, [open, userInfo, user])\r\n\r\n  return (\r\n    <>\r\n      <Navbar\r\n        expand='lg'\r\n        collapseOnSelect\r\n        className='p-0 pl-5 pr-5 m-0 shadow'\r\n        style={{ backgroundColor: '#edfead', height: '4rem' }}\r\n      >\r\n        <Container fluid>\r\n          <LinkContainer to='/'>\r\n            <Navbar.Brand className='text-uppercase font-weight-bold flex-grow-1 '>\r\n              {/* <h2>ProShop</h2> */}\r\n              <Image\r\n                src='/logo/logo_white.png'\r\n                style={{ width: '5rem', height: '4rem', zIndex: '0' }}\r\n              />\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\r\n          <Route render={({ history }) => <SearchBox history={history} />} />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='ml-auto' inline>\r\n              <LinkContainer to='/cart'>\r\n                <Nav.Link className='text-uppercase'>\r\n                  <IconButton aria-label='cart'>\r\n                    <StyledBadge\r\n                      badgeContent={cartItems.length}\r\n                      color='secondary'\r\n                    >\r\n                      <ShoppingCartIcon />\r\n                    </StyledBadge>\r\n                  </IconButton>\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n\r\n              {userInfo ? (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2  mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    {userInfo ? (\r\n                      <Image\r\n                        className='rounded-circle border border-grey'\r\n                        src={userDetails.user && userDetails.user.avatar}\r\n                        alt={userDetails.user && userDetails.user.avatar}\r\n                        style={{ width: '2.5rem', height: '2.5rem' }}\r\n                        fluid\r\n                      />\r\n                    ) : (\r\n                      <Avatar className={classes.orange}>\r\n                        {userInfo.name.substring(0, 1)}\r\n                      </Avatar>\r\n                    )}\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '5' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow {...TransitionProps}>\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              <MenuItem onClick={handleClose}>\r\n                                <Link\r\n                                  to='/profile'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                    className='pr-1'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Hồ sơ\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem\r\n                                onClick={logoutHandler}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link\r\n                                  to='/'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/exit.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Xuất\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2 mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    <Image src='https://img.icons8.com/fluent/30/000000/circled-menu.png' />\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '2' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                          transformOrigin:\r\n                            placement === 'bottom'\r\n                              ? 'center top'\r\n                              : 'center bottom',\r\n                        }}\r\n                      >\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link to='/login' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/key.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Nhập\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link to='/register' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/new-contact.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Kí\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js",["565"],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js",["566"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport { deleteUser, listUsers } from '../../actions/userActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  { id: 'email', numeric: true, disablePadding: false, label: 'ĐỊA CHỈ EMAIL' },\r\n  { id: 'isAdmin', numeric: true, disablePadding: false, label: 'ADMIN' },\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction UserListScreen({ history }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((user) => user._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userList = useSelector((state) => state.userList)\r\n  const { loading, error, users } = userList\r\n\r\n  const emptyRows =\r\n    users !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage)\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDelete = useSelector((state) => state.userDelete)\r\n  const { success: successDelete } = userDelete\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteUser(id))\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = users.find((user) => user._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>Danh sách tài khoản người dùng</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers())\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch, history, successDelete, userInfo])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 '>\r\n          {loading ? (\r\n            <Loader />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div className={classes.root}>\r\n                <Paper\r\n                  className={classes.paper}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={users.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(users, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((user, index) => {\r\n                            const isItemSelected = isSelected(user._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) =>\r\n                                  handleClick(event, user._id)\r\n                                }\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={user._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {user._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {user.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {user.email}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {' '}\r\n                                  {user.isAdmin ? (\r\n                                    <i\r\n                                      className='fas fa-check'\r\n                                      style={{ color: 'green' }}\r\n                                    ></i>\r\n                                  ) : (\r\n                                    <i\r\n                                      className='fas fa-times'\r\n                                      style={{ color: 'red' }}\r\n                                    ></i>\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/user/${user._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='info'\r\n                                      className='btn-sm rounded-pill'\r\n                                    >\r\n                                      <i className='far fa-edit'></i>\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={users.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js",["567","568"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n  createCategory,\r\n  deleteCategory,\r\n  listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst CategoriesListScreen = ({ history }) => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = category.map((cat) => cat._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n  const { loading, error, category } = categoriesListAdm\r\n\r\n  const categoryDelete = useSelector((state) => state.categoryDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = categoryDelete\r\n\r\n  const categoryCreate = useSelector((state) => state.categoryCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    category: createdProduct,\r\n  } = categoryCreate\r\n\r\n  const emptyRows =\r\n    category !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, category.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteCategory(id))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = category.find((cat) => cat._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH DANH MỤC</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listCategoriesAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createCategory(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingDelete && (\r\n              <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n            ) && <Loader />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n          {loadingCreate && (\r\n            <MessageSuccess\r\n              variant={'Đã thêm ' + name + ' thành công'}\r\n            ></MessageSuccess>\r\n          )}\r\n          {errorCreate && <Message>{errorCreate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Dialog\r\n                  disableBackdropClick\r\n                  disableEscapeKeyDown\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby='form-dialog-title'\r\n                  maxWidth='xl'\r\n                >\r\n                  <div className='d-flex justify-content-end'>\r\n                    <Button\r\n                      onClick={handleClose}\r\n                      className='p-1 m-1 rounded-pill'\r\n                      variant='light'\r\n                    >\r\n                      <Close />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <DialogContent style={{ width: '30rem' }}>\r\n                    <h4 className='text-center'>Tạo danh mục</h4>\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                          Tên danh mục\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='name'\r\n                          size='normal'\r\n                          placeholder='Enter name'\r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <div className='pl-3 pr-3 text-center'>\r\n                        <Button\r\n                          type='submit'\r\n                          size='sm'\r\n                          variant='outline-light'\r\n                          className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                          style={{\r\n                            fontSize: '1rem',\r\n                            letterSpacing: '0.25rem',\r\n                          }}\r\n                        >\r\n                          Tạo\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </DialogContent>\r\n                </Dialog>\r\n              </div>\r\n              <div className={classes.root}>\r\n                <div className='d-flex justify-content-end'>\r\n                  <Button\r\n                    variant='outline-light'\r\n                    className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                    onClick={handleClickOpen}\r\n                    size='normal'\r\n                  >\r\n                    <i className='fas fa-plus'></i> Tạo danh mục\r\n                  </Button>\r\n                </div>\r\n                <Paper\r\n                  className={classes.paper + 'shadow'}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={category.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(category, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((cat, index) => {\r\n                            const isItemSelected = isSelected(cat._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) => handleClick(event, cat._id)}\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={cat._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {cat._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {cat.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.createdAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.updatedAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - MM/dd/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/category/${cat._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-sm rounded-pill btn_color_details'\r\n                                    >\r\n                                      CHI TIẾT\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={category.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoriesListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js",["569","570","571","572","573","574","575","576"],"import { Link } from '@material-ui/core'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport { default as React, useEffect } from 'react'\r\nimport { Button, Col, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport '../../notisfied.css'\r\nimport {\r\n   getCategoryDetails,\r\n   listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport {\r\n   // createProduct,\r\n   deleteProduct,\r\n   listProducts,\r\n} from '../../actions/productActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: false, disablePadding: false, label: 'Tên' },\r\n   { id: 'image', numeric: false, disablePadding: false, label: 'Ảnh' },\r\n   { id: 'price', numeric: true, disablePadding: false, label: 'Giá' },\r\n   { id: 'category', numeric: false, disablePadding: false, label: 'Thể Loại' },\r\n   { id: 'quantity', numeric: true, disablePadding: false, label: 'Số lượng' },\r\n   { id: 'action', numeric: false, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = products.map((product) => product._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n   const pageNumber = match.params.pageNumber || 1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const {\r\n      loading: loadingCat,\r\n      error: errorCat,\r\n      category: categoryCat,\r\n   } = categoriesList\r\n\r\n   const productList = useSelector((state) => state.productList)\r\n   const { loading, error, products } = productList\r\n\r\n   const emptyRows =\r\n      products !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, products.length - page * rowsPerPage)\r\n\r\n   const productDelete = useSelector((state) => state.productDelete)\r\n   const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n   } = productDelete\r\n\r\n   const productCreate = useSelector((state) => state.productCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n      product: createdProduct,\r\n   } = productCreate\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const k = '6067d4b59f684c3fe0bd9def'\r\n\r\n   useEffect(() => {\r\n      if (!userInfo.isAdmin) {\r\n         history.push('/login')\r\n      }\r\n\r\n      if (userInfo) {\r\n         dispatch(listCategoriesAdm())\r\n         dispatch(getCategoryDetails(categoryCat.map((e) => e._id)))\r\n      }\r\n\r\n      if (successCreate) {\r\n         history.push(`/admin/product/${createdProduct._id}/edit`)\r\n      } else {\r\n         dispatch(listProducts('', pageNumber))\r\n      }\r\n   }, [dispatch, history, userInfo, successDelete, successCreate])\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('You are sure?')) {\r\n         dispatch(deleteProduct(id))\r\n         setSelected([])\r\n      }\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               ></Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 pr-4'>\r\n               <Row className='align-items-center'>\r\n                  <Col>\r\n                     <h4 className='text-uppercase'>Danh sách sản phẩm</h4>\r\n                  </Col>\r\n                  <Col className='text-right'>\r\n                     <LinkContainer to='/admin/product/create'>\r\n                        <Button\r\n                           variant='outline-light'\r\n                           className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                        >\r\n                           <i className='fas fa-plus'></i> Thêm sản phẩm\r\n                        </Button>\r\n                     </LinkContainer>\r\n                  </Col>\r\n               </Row>\r\n               {loadingDelete && <Loader />}\r\n               {errorDelete && <Message>{errorDelete}</Message>}\r\n\r\n               {loading ? (\r\n                  <Loader />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <>\r\n                     <div className={classes.root}>\r\n                        <Paper\r\n                           className={classes.paper}\r\n                           // style={{\r\n                           //   borderRadius: '1rem',\r\n                           //   border: '0.25px solid #ddd',\r\n                           // }}\r\n                        >\r\n                           <TableContainer\r\n                              className='text-center p-2'\r\n                              style={{\r\n                                 borderRadius: '1rem',\r\n                              }}\r\n                           >\r\n                              <EnhancedTableToolbar\r\n                                 numSelected={selected.length}\r\n                              />\r\n                              <Table\r\n                                 className={classes.table}\r\n                                 aria-labelledby='tableTitle'\r\n                                 size={dense ? 'small' : 'medium'}\r\n                                 aria-label='enhanced table'\r\n                              >\r\n                                 <EnhancedTableHead\r\n                                    classes={classes}\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={products.length}\r\n                                    colSpan={1}\r\n                                 />\r\n                                 <TableBody>\r\n                                    {stableSort(\r\n                                       products,\r\n                                       getComparator(order, orderBy)\r\n                                    )\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((product, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             product._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(\r\n                                                      event,\r\n                                                      product._id\r\n                                                   )\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={product._id}\r\n                                                selected={isItemSelected}\r\n                                             >\r\n                                                <TableCell padding='checkbox'>\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   component='th'\r\n                                                   id={labelId}\r\n                                                   scope='row'\r\n                                                   padding='none'\r\n                                                   align='center'\r\n                                                >\r\n                                                   {product._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center text-capitalize'\r\n                                                >\r\n                                                   <p className='text-capitalize'>\r\n                                                      {product.name}\r\n                                                   </p>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   <Image\r\n                                                      src={\r\n                                                         product.images[0].url\r\n                                                      }\r\n                                                      fluid\r\n                                                      className='rounded p-1'\r\n                                                   />\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align='center'>\r\n                                                   {formatMoney(\r\n                                                      product.price,\r\n                                                      'đ'\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {categoryCat &&\r\n                                                      categoryCat.map(\r\n                                                         (cat, index) =>\r\n                                                            cat._id ===\r\n                                                               product.category &&\r\n                                                            cat.name\r\n                                                      )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   style={{ padding: '1px' }}\r\n                                                >\r\n                                                   {product.countInStock}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/product/${product._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='outline-light'\r\n                                                         className='btn-block rounded-pill btn_color_details'\r\n                                                      >\r\n                                                         <i className='far fa-edit'></i>\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                    {emptyRows > 0 && (\r\n                                       <TableRow\r\n                                          style={{\r\n                                             height:\r\n                                                (dense ? 33 : 53) * emptyRows,\r\n                                          }}\r\n                                       >\r\n                                          <TableCell colSpan={6} />\r\n                                       </TableRow>\r\n                                    )}\r\n                                 </TableBody>\r\n                              </Table>\r\n                           </TableContainer>\r\n                           <TablePagination\r\n                              rowsPerPageOptions={[5, 10, 25]}\r\n                              component='div'\r\n                              count={products.length}\r\n                              rowsPerPage={rowsPerPage}\r\n                              page={page}\r\n                              onChangePage={handleChangePage}\r\n                              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                           />\r\n                        </Paper>\r\n                        <FormControlLabel\r\n                           control={\r\n                              <Switch\r\n                                 checked={dense}\r\n                                 onChange={handleChangeDense}\r\n                              />\r\n                           }\r\n                           label='Dense padding'\r\n                        />\r\n                     </div>\r\n                  </>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js",["577","578","579","580","581","582"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listCategoriesAdm } from '../../actions/categoryAction'\r\nimport { deleteFileImages, uploadFileImages } from '../../actions/cloudinary'\r\nimport { createProduct, newProduct } from '../../actions/productActions'\r\nimport { listSupplierAdm } from '../../actions/supplierActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { PRODUCT_CREATE_RESET } from '../../constants/productConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\nimport { CloseOutlined } from '@ant-design/icons'\r\n\r\nfunction formatPrice(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst ProductCreateScreen = () => {\r\n   const [name, setName] = useState('')\r\n   const [price, setPrice] = useState(0)\r\n   const [images, setImages] = useState([])\r\n   const [brand, setBrand] = useState('')\r\n   const [categoryy, setCategory] = useState('')\r\n   const [countInStock, setCountInStock] = useState(0)\r\n   const [description, setDescription] = useState('')\r\n   const [mass, setMass] = useState('')\r\n   const [hdsd, setHdsd] = useState('')\r\n   const [hdbq, setHdbq] = useState('')\r\n   const [supplierr, setSupplier] = useState('')\r\n   const [uploading, setUploading] = useState(false)\r\n   const [imagesPreview, setImagesPreview] = useState([])\r\n\r\n   const uploadFile = (e) => {\r\n      let files = e.target.files\r\n      let allImages = []\r\n      let preview = []\r\n      if (files) {\r\n         for (let i = 0; i < files.length; i++) {\r\n            preview.push(files[i].name)\r\n            Resizer.imageFileResizer(\r\n               files[i],\r\n               720,\r\n               720,\r\n               'JPEG',\r\n               100,\r\n               0,\r\n               (uri) => {\r\n                  try {\r\n                     uploadFileImages({ image: uri }).then((res) => {\r\n                        allImages.push(res.data)\r\n                        setImages(allImages)\r\n                     })\r\n                  } catch (error) {\r\n                     setUploading(false)\r\n                  }\r\n               }\r\n            )\r\n         }\r\n         console.log(allImages)\r\n      }\r\n   }\r\n\r\n   // const deleteFile = (e) => {\r\n   //    dispatch(deleteFileImages(e))\r\n   // }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const productCreate = useSelector((state) => state.productCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n   } = productCreate\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category } = categoriesList\r\n\r\n   const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n   const { supplier } = supplierListAdm\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n\r\n      dispatch(\r\n         createProduct({\r\n            name,\r\n            price,\r\n            description,\r\n            categoryy,\r\n            supplierr,\r\n            countInStock,\r\n            mass,\r\n            brand,\r\n            hdbq,\r\n            images,\r\n            hdsd,\r\n         })\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successCreate) {\r\n         dispatch({ type: PRODUCT_CREATE_RESET })\r\n      } else {\r\n         if (userInfo) {\r\n            dispatch(listCategoriesAdm())\r\n            dispatch(listSupplierAdm())\r\n         }\r\n      }\r\n   }, [dispatch, userInfo, successCreate])\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0 '>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 pr-4 '>\r\n               <>\r\n                  {/* {loadingCreate && (\r\n            <Announcement variant='success'> Thêm thành công</Announcement>\r\n          ) && <Loader />}\r\n        {errorCreate && <Announcement>{errorCreate}</Announcement>} */}\r\n                  {loadingCreate && (\r\n                     <MessageSuccess variant='Thêm thành công'></MessageSuccess>\r\n                  )}\r\n                  {loadingCreate ? (\r\n                     <Loader />\r\n                  ) : errorCreate ? (\r\n                     <Message>{errorCreate}</Message>\r\n                  ) : (\r\n                     <>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='bg-light border-0 pt-3 pb-3'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>Thêm sản phẩm</h2>\r\n\r\n                           <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Tên sản phẩm\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='name'\r\n                                 placeholder='Enter name'\r\n                                 value={name}\r\n                                 onChange={(e) => setName(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Ảnh\r\n                              </Form.Label>\r\n\r\n                              <Row>\r\n                                 <Col\r\n                                    md={6}\r\n                                    className='align-items-center d-flex'\r\n                                 >\r\n                                    <Form.File\r\n                                       className='border border-grey'\r\n                                       id='image-file'\r\n                                       label='Choose File'\r\n                                       custom\r\n                                       onChange={uploadFile}\r\n                                       multiple\r\n                                    ></Form.File>\r\n                                 </Col>\r\n                                 <Col md={6}>\r\n                                    <Row>\r\n                                       {images &&\r\n                                          images.map((img) => (\r\n                                             <Col md={3}>\r\n                                                <div>\r\n                                                   <Button\r\n                                                      className=''\r\n                                                      style={{\r\n                                                         // marginBottom: '-35%',\r\n                                                         zIndex: '5',\r\n                                                         color: 'black',\r\n                                                      }}\r\n                                                      size='sm'\r\n                                                      variant='outline-light'\r\n                                                      // onClick={deleteFile(\r\n                                                      //    images.public_id\r\n                                                      // )}\r\n                                                   >\r\n                                                      <CloseOutlined\r\n                                                         style={{\r\n                                                            fontSize: '1rem',\r\n                                                         }}\r\n                                                      />\r\n                                                   </Button>\r\n\r\n                                                   <Image\r\n                                                      src={img.url}\r\n                                                      className='rounded avatar_img'\r\n                                                      fluid\r\n                                                   />\r\n                                                </div>\r\n                                             </Col>\r\n                                          ))}\r\n                                    </Row>\r\n                                 </Col>\r\n                              </Row>\r\n                              {uploading && <Loader />}\r\n                           </Form.Group>\r\n\r\n                           <Row>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='brand'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Thể loại\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='text'\r\n                                       placeholder='Enter brand'\r\n                                       value={brand}\r\n                                       onChange={(e) =>\r\n                                          setBrand(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Số lượng trong kho\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={countInStock}\r\n                                       onChange={(e) =>\r\n                                          setCountInStock(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Danh mục\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={categoryy}\r\n                                       onChange={(e) =>\r\n                                          setCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {category &&\r\n                                          category.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='price'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Giá\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter price'\r\n                                       value={price}\r\n                                       onChange={(e) =>\r\n                                          setPrice(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Row>\r\n                              <Col md={6}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Khối lượng\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='text'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={mass}\r\n                                       onChange={(e) => setMass(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Nhà cung cấp\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={supplierr}\r\n                                       onChange={(e) =>\r\n                                          setSupplier(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {supplier &&\r\n                                          supplier.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Nội dung\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={description}\r\n                                 onChange={(e) =>\r\n                                    setDescription(e.target.value)\r\n                                 }\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn sử dụng\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdsd}\r\n                                 onChange={(e) => setHdsd(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn bảo quản\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdbq}\r\n                                 onChange={(e) => setHdbq(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Tạo\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </>\r\n                  )}\r\n               </>\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductCreateScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js",["583","584","585"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n  createSupplier,\r\n  deleteSupplier,\r\n  listSupplierAdm,\r\n} from '../../actions/supplierActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst SupplierListScreen = () => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = supplier.map((sup) => sup._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n  const { loading, error, supplier } = supplierListAdm\r\n\r\n  const supplierDelete = useSelector((state) => state.supplierDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = supplierDelete\r\n\r\n  const supplierCreate = useSelector((state) => state.supplierCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    supplier: createdProduct,\r\n  } = supplierCreate\r\n\r\n  const emptyRows =\r\n    supplier !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, supplier.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('Bạn có chắc?')) {\r\n      dispatch(deleteSupplier({ id }))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = supplier.find((cat) => cat._id)\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH NHÀ CUNG CẤP</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listSupplierAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  const submitHandlerDetails = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingDelete && (\r\n              <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n            ) && <Loader />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n          {loadingCreate && (\r\n            <MessageSuccess\r\n              variant={'Đã thêm ' + name + ' thành công'}\r\n            ></MessageSuccess>\r\n          )}\r\n          {errorCreate && <Message>{errorCreate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Dialog\r\n                  disableBackdropClick\r\n                  disableEscapeKeyDown\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby='form-dialog-title'\r\n                  maxWidth='xl'\r\n                >\r\n                  <div className='d-flex justify-content-end'>\r\n                    <Button\r\n                      onClick={handleClose}\r\n                      className='p-1 m-1 rounded-pill'\r\n                      variant='light'\r\n                    >\r\n                      <Close />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <DialogContent style={{ width: '30rem' }}>\r\n                    <h4 className='text-center'>Thêm nhà cung cấp</h4>\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                          Tên nhà cung cấp\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='name'\r\n                          size='normal'\r\n                          placeholder='Enter name'\r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <div className='pl-3 pr-3 text-center'>\r\n                        <Button\r\n                          type='submit'\r\n                          size='sm'\r\n                          variant='outline-light'\r\n                          className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                          style={{\r\n                            fontSize: '1rem',\r\n                            letterSpacing: '0.25rem',\r\n                          }}\r\n                        >\r\n                          Tạo\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </DialogContent>\r\n                </Dialog>\r\n              </div>\r\n\r\n              <div className={classes.root}>\r\n                <div className='d-flex justify-content-end'>\r\n                  <Button\r\n                    variant='outline-dark'\r\n                    className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                    onClick={handleClickOpen}\r\n                    size='normal'\r\n                  >\r\n                    <i className='fas fa-plus'></i> Thêm nhà cung cấp\r\n                  </Button>\r\n                </div>\r\n                <Paper className={classes.paper}>\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={supplier.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(supplier, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((sup, index) => {\r\n                            const isItemSelected = isSelected(sup._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) => handleClick(event, sup._id)}\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={sup._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {sup._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {sup.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      sup.createdAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      sup.updatedAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - MM/dd/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/supplier/${sup._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-sm rounded-pill btn_color_details'\r\n                                    >\r\n                                      CHI TIẾT\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={supplier.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js",["586"],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js",["587","588"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport {\r\n  getCategoryDetails,\r\n  updateCategory,\r\n} from '../../actions/categoryAction'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../../constants/categoriesConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nconst CategoryEditScreen = ({ match, history }) => {\r\n  const catId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const categoryDetails = useSelector((state) => state.categoryDetails)\r\n  const { loading, error, category } = categoryDetails\r\n\r\n  const categoryUpdate = useSelector((state) => state.categoryUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = categoryUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateCategory({ _id: catId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: CATEGORY_UPDATE_RESET })\r\n      history.push('/admin/categorieslist')\r\n    } else {\r\n      if (!category.name || category._id !== catId) {\r\n        dispatch(getCategoryDetails(catId))\r\n      } else {\r\n        setName(category.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, catId, category, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Row className='justify-content-center'>\r\n              <Col md={6}>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h2 className='text-center mb-4'>Chỉnh sửa danh mục</h2>\r\n                  <Form.Group>\r\n                    <Container>\r\n                      <Form.Label\r\n                        as='p'\r\n                        className='mb-1'\r\n                        style={{ fontSize: '1.5rem' }}\r\n                      >\r\n                        Tên danh mục\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        style={{ fontSize: '1.2rem' }}\r\n                        className='border border-grey rounded-pill'\r\n                        type='name'\r\n                        size='normal'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                      ></Form.Control>\r\n                    </Container>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn_color_created'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Cập nhật\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js",["589","590","591"],"import Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getOrderDetails, updateOrder } from '../../actions/orderActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport { ORDER_UPDATE_RESET } from '../../constants/orderConstants'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n  //Filter only numbers from the input\r\n  let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n  //Check if the input is of correct length\r\n  let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n  if (match) {\r\n    return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n  return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 500,\r\n  },\r\n}))\r\n\r\nconst OrderEditScreen = ({ match, history }) => {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const orderId = match.params.id\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading } = orderDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const orderUpdate = useSelector((state) => state.orderUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = orderUpdate\r\n\r\n  const orderPay = useSelector((state) => state.orderPay)\r\n  const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n  const stateOrder = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng', 'Huỷ']\r\n  const [orderStatus, setOrderStatus] = useState('')\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateOrder({ _id: orderId, orderStatus }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: ORDER_UPDATE_RESET })\r\n    } else {\r\n      dispatch(getOrderDetails(orderId))\r\n    }\r\n  }, [dispatch, orderId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Form onSubmit={submitHandler}>\r\n              <ListGroup variant='flush' className='mt-3'>\r\n                <ListGroup.Item className='border-0'>\r\n                  <div className='text-center'>\r\n                    <h3 className='pl-2'>CHI TIẾT ĐƠN HÀNG</h3>\r\n                  </div>\r\n                  <Row>\r\n                    <Col md={6}>\r\n                      <p className='text-start'>\r\n                        Mã đơn hàng: <strong>{order._id}</strong>\r\n                      </p>\r\n                      <p className='text-start'>\r\n                        Tổng tiền: <strong>{order.totalPrice}đ</strong>\r\n                      </p>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel\r\n                          id='demo-controlled-open-select-label'\r\n                          style={{ fontSize: '1.2rem' }}\r\n                        >\r\n                          Trạng thái đơn hàng\r\n                        </InputLabel>\r\n                        <Select\r\n                          labelId='demo-controlled-open-select-label'\r\n                          id='demo-controlled-open-select'\r\n                          open={open}\r\n                          onClose={handleClose}\r\n                          onOpen={handleOpen}\r\n                          value={\r\n                            order.orderStatus ? order.orderStatus : orderStatus\r\n                          }\r\n                          onChange={(e) => setOrderStatus(e.target.value)}\r\n                          className='text-danger text-center text-uppercase'\r\n                        >\r\n                          {stateOrder.map((t) => (\r\n                            <MenuItem\r\n                              className='justify-content-center'\r\n                              value={t}\r\n                            >\r\n                              {t}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item className='border-0'>\r\n                  <Row>\r\n                    <Col md={6} className='border-0'>\r\n                      <Card\r\n                        className='rounded card_color'\r\n                        style={{ height: '11rem', backgroundColor: '#F8F8F8' }}\r\n                      >\r\n                        <CardContent>\r\n                          <h5 className='border-bottom border-info text-info pb-1'>\r\n                            Thông tin người nhận\r\n                          </h5>\r\n                          <div>\r\n                            <Row className='m-0'>\r\n                              <Col md={4}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Địa chỉ:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={8}>\r\n                                <strong>{order.user.name}</strong>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={4}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Tên khách hàng:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={8}>\r\n                                <p className='mb-1'>\r\n                                  {order.shippingAddress.diaChi}\r\n                                  {' - '}\r\n                                  {order.shippingAddress.xa}\r\n                                  {' - '}\r\n                                  {order.shippingAddress.huyen}\r\n                                  {' - '}\r\n                                  {order.shippingAddress.thanhPho}.\r\n                                </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={4}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Số điện thoại:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={8}>\r\n                                <p className='mb-1'>\r\n                                  {formatPhoneNumber(\r\n                                    order.shippingAddress.numberPhone\r\n                                  )}\r\n                                </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={4}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Email:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={8}>\r\n                                <p className='mb-1'>{order.user.email}</p>\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <Card\r\n                        className='rounded card_color'\r\n                        style={{ height: '11rem', backgroundColor: '#F8F8F8' }}\r\n                      >\r\n                        <CardContent>\r\n                          <h5 className='border-bottom border-info text-info pb-1'>\r\n                            Phương thức thanh toán\r\n                          </h5>\r\n                          <div>\r\n                            <Row className='m-0'>\r\n                              <Col md={5}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Phương thức:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={7} className='pt-1'>\r\n                                <strong\r\n                                  className='mb-0 text-capitalize'\r\n                                  style={{ letterSpacing: '0.1rem' }}\r\n                                >\r\n                                  {order.paymentMethod}\r\n                                </strong>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={5}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Thời gian thanh toán:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={7}>\r\n                                <p className='mb-1'>\r\n                                  {order.paymentMethod ===\r\n                                    'Thanh toán bằng tiền mặt' &&\r\n                                  order.isDelivered ? (\r\n                                    <strong className='mb-0'>\r\n                                      {format(\r\n                                        new utcToZonedTime(\r\n                                          order.deliveredAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                        ),\r\n                                        'HH:mm:ss - dd/MM/yyyy',\r\n                                        { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                      )}\r\n                                    </strong>\r\n                                  ) : order.paymentMethod ===\r\n                                    'Thanh toán bằng PayPal' ? (\r\n                                    <strong className='mb-0'>\r\n                                      {format(\r\n                                        new utcToZonedTime(\r\n                                          order.paidAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                        ),\r\n                                        'HH:mm:ss - dd/MM/yyyy',\r\n                                        { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                      )}\r\n                                    </strong>\r\n                                  ) : (\r\n                                    <div className='d-flex'>\r\n                                      <strong className='text-danger mb-0'>\r\n                                        Chưa thanh toán\r\n                                      </strong>\r\n                                    </div>\r\n                                  )}\r\n                                </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={5}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Thời gian nhận hàng:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={7}>\r\n                                {order.isDelivered ? (\r\n                                  <strong className='mb-0'>\r\n                                    {format(\r\n                                      new utcToZonedTime(\r\n                                        order.deliveredAt,\r\n                                        'Asia/Ho_Chi_Minh'\r\n                                      ),\r\n                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                      { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                    )}\r\n                                  </strong>\r\n                                ) : (\r\n                                  <div className='d-flex'>\r\n                                    {/* <Image\r\n                                  src='https://img.icons8.com/fluent/24/000000/only-cash.png'\r\n                                  className='pr-1'\r\n                                /> */}\r\n                                    <strong className='text-danger mb-0'>\r\n                                      Chưa nhận hàng\r\n                                    </strong>\r\n                                  </div>\r\n                                )}\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item className='border-0'>\r\n                  <h5\r\n                    className='pb-1'\r\n                    style={{ borderBottom: '0.04rem solid #ddd' }}\r\n                  >\r\n                    Giỏ hàng\r\n                  </h5>\r\n\r\n                  <div className='rounded mt-3'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className='p-3 card_color shadow border mb-1'\r\n                        style={{ backgroundColor: '#F8F8F8' }}\r\n                      >\r\n                        <Row>\r\n                          <Col md={1} className='img_container'>\r\n                            <Image\r\n                              className='img_color'\r\n                              src={item.image}\r\n                              alt={item.name}\r\n                              fluid\r\n                              rounded\r\n                            />\r\n                          </Col>\r\n\r\n                          <Col md={7} className='text-center'>\r\n                            <Link\r\n                              to={`/product/${item.product}`}\r\n                              className='link-product fst-italic'\r\n                            >\r\n                              <p\r\n                                style={{ fontSize: '1.1rem' }}\r\n                                className='pt-3'\r\n                              >\r\n                                {item.name}\r\n                              </p>\r\n                            </Link>\r\n                          </Col>\r\n\r\n                          <Col md={4} className='text-center'>\r\n                            <p\r\n                              style={{ fontSize: '1.1rem' }}\r\n                              className='pt-3 fst-italic'\r\n                            >\r\n                              {item.qty} x {formatMoney(item.price, 'đ')}\r\n                              {' = '}\r\n                              {formatMoney(item.qty * item.price, 'đ')}\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item className='border-0'>\r\n                  <div\r\n                    className='d-flex justify-content-end '\r\n                    style={{ borderTop: '0.04rem solid #ddd' }}\r\n                  >\r\n                    <Button\r\n                      type='submit'\r\n                      variant='outline-light rounded-pill mt-4 btn_color_pink'\r\n                      size='normal'\r\n                      style={{\r\n                        width: '14rem',\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                      }}\r\n                    >\r\n                      DUYỆT\r\n                    </Button>\r\n                  </div>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Form>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js",["592","593","594"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { listCategoriesAdm } from '../../actions/categoryAction'\r\nimport { listProductDetails, updateProduct } from '../../actions/productActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { PRODUCT_UPDATE_RESET } from '../../constants/productConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const {\r\n    loading: loadingCat,\r\n    error: errorCat,\r\n    category: categoryCat,\r\n  } = categoriesList\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      // history.push('/admin/productlist')\r\n    } else {\r\n      if (!product.name || product._id !== productId) {\r\n        if (userInfo) {\r\n          dispatch(listProductDetails(productId))\r\n          dispatch(listCategoriesAdm())\r\n        }\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInStock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, userInfo, history, productId, product, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          <Container>\r\n            {loadingUpdate && (\r\n                <MessageSuccess variant='Đã cập nhật thành công'></MessageSuccess>\r\n              ) && <Loader />}\r\n            {errorUpdate && <Message>{errorUpdate}</Message>}\r\n            {loading ? (\r\n              <Loader />\r\n            ) : error ? (\r\n              <Message>{error}</Message>\r\n            ) : (\r\n              <>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h2 className='text-center mb-4'>Cập nhật sản phẩm</h2>\r\n\r\n                  <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Name\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='name'\r\n                      placeholder='Enter name'\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Image\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey'\r\n                      type='text'\r\n                      placeholder='Enter image url'\r\n                      value={image}\r\n                      onChange={(e) => setImage(e.target.value)}\r\n                    ></Form.Control>\r\n                    <Form.File\r\n                      className='border border-grey'\r\n                      id='image-file'\r\n                      label='Choose File'\r\n                      custom\r\n                      onChange={uploadFileHandler}\r\n                    ></Form.File>\r\n                    {uploading && <Loader />}\r\n                  </Form.Group>\r\n\r\n                  <Row>\r\n                    <Col md={3}>\r\n                      <Form.Group controlId='brand' className='pl-3 pr-3'>\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Brand\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='text'\r\n                          placeholder='Enter brand'\r\n                          value={brand}\r\n                          onChange={(e) => setBrand(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group\r\n                        controlId='countInStock'\r\n                        className='pl-3 pr-3'\r\n                      >\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Count In Stock\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill text-center'\r\n                          type='number'\r\n                          placeholder='Enter countInStock'\r\n                          value={countInStock}\r\n                          onChange={(e) => setCountInStock(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group controlId='category' className='pl-3 pr-3'>\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Category\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill '\r\n                          type='text'\r\n                          as='select'\r\n                          placeholder='Enter category'\r\n                          value={category}\r\n                          onChange={(e) => setCategory(e.target.value)}\r\n                        >\r\n                          <option></option>\r\n                          {categoryCat &&\r\n                            categoryCat.map((cat, index) => (\r\n                              <option\r\n                                style={{ color: 'black' }}\r\n                                key={index}\r\n                                value={cat._id}\r\n                              >\r\n                                {cat.name}\r\n                              </option>\r\n                            ))}\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group controlId='price' className='pl-3 pr-3'>\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Price\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill text-center'\r\n                          type='number'\r\n                          placeholder='Enter price'\r\n                          value={price}\r\n                          onChange={(e) => setPrice(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Form.Group controlId='description' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Description\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='text'\r\n                      rows={3}\r\n                      as='textarea'\r\n                      placeholder='Enter description'\r\n                      value={description}\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      variant='outline-success'\r\n                      className='rounded-pill'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Container>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js",["595"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {\r\n  getSupplierDetails,\r\n  updateSupplier,\r\n} from '../../actions/supplierActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { SUPPLIER_UPDATE_RESET } from '../../constants/supplierConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nconst SupplierEditScreen = ({ history, match }) => {\r\n  const supId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const supplierDetails = useSelector((state) => state.supplierDetails)\r\n  const { loading, error, supplier } = supplierDetails\r\n\r\n  const supplierUpdate = useSelector((state) => state.supplierUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = supplierUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateSupplier({ _id: supId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: SUPPLIER_UPDATE_RESET })\r\n      history.push('/admin/supplierlist')\r\n    } else {\r\n      if (!supplier.name || supplier._id !== supId) {\r\n        dispatch(getSupplierDetails(supId))\r\n      } else {\r\n        setName(supplier.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, supId, supplier, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Row className='justify-content-center'>\r\n              <Col md={6}>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h3 className='text-center mb-4'>\r\n                    Chỉnh sửa thông tin nhà cung cấp\r\n                  </h3>\r\n                  <Form.Group>\r\n                    <Container>\r\n                      <Form.Label\r\n                        as='p'\r\n                        className='mb-1'\r\n                        style={{ fontSize: '1rem' }}\r\n                      >\r\n                        Tên nhà cung cấp\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        style={{ fontSize: '1rem' }}\r\n                        className='border border-grey rounded-pill'\r\n                        type='name'\r\n                        size='sm'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                      ></Form.Control>\r\n                    </Container>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      size='sm'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn_color_created'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Cập nhật\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js",["596","597","598"],"import { Switch } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../../actions/userActions'\r\nimport FormContainer from '../../components/FormContainer'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { USER_UPDATE_RESET } from '../../constants/userConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const [state, setState] = useState(false)\r\n\r\n  const handleChange = () => {\r\n    setState(!state)\r\n  }\r\n\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin, password }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          <div className='d-flex justify-content-center'>\r\n            {loadingUpdate && <Loader /> && (\r\n              <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n            )}\r\n            {errorUpdate && <Message>{errorUpdate}</Message>}\r\n            {loading ? (\r\n              <Loader />\r\n            ) : (\r\n              <Form\r\n                onSubmit={submitHandler}\r\n                className='bg-light p-3 card_color '\r\n                style={{ width: '50rem' }}\r\n              >\r\n                <h2 className='mt-3 text-center'>Cập nhật người dùng</h2>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='name'>\r\n                      <Form.Label>\r\n                        <strong>Tên</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='name'\r\n                        placeholder='Nhập tên'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        className='rounded-pill border-1'\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='email'>\r\n                      <Form.Label>\r\n                        <strong>Địa chỉ email</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='email'\r\n                        placeholder='Enter email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        className='rounded-pill border-1'\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Form.Group\r\n                  controlId='idAdmin'\r\n                  className='d-flex justify-content-start'\r\n                >\r\n                  <Form.Check\r\n                    type='checkbox'\r\n                    label='Người quản lí'\r\n                    size='lg'\r\n                    checked={isAdmin}\r\n                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                  ></Form.Check>\r\n                </Form.Group>\r\n                <div className='d-flex align-items-center'>\r\n                  <Switch\r\n                    value={state}\r\n                    onChange={handleChange}\r\n                    color='secondary'\r\n                    name='checkedB'\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                  />\r\n                  {state === true ? (\r\n                    <p className='mb-0' style={{ opacity: '1' }}>\r\n                      <strong>Đổi mật khẩu</strong>\r\n                      <Image\r\n                        style={{ opacity: '1' }}\r\n                        src='https://img.icons8.com/fluent/32/000000/unlock-2.png'\r\n                      />\r\n                    </p>\r\n                  ) : (\r\n                    <p className='mb-0' style={{ opacity: '0.7' }}>\r\n                      Đổi mật khẩu\r\n                      <Image\r\n                        style={{ opacity: '1' }}\r\n                        src='https://img.icons8.com/fluent/32/000000/lock-2.png'\r\n                      />\r\n                    </p>\r\n                  )}\r\n                </div>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='password' fluid>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Mật khẩu mới</strong>\r\n                      </Form.Label>\r\n                      {state === true ? (\r\n                        <>\r\n                          <Form.Control\r\n                            className='border-1 border-grey rounded-pill '\r\n                            type='password'\r\n                            placeholder='Nhập mật khẩu mới'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                          ></Form.Control>\r\n                        </>\r\n                      ) : (\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill '\r\n                          type='password'\r\n                          placeholder='Nhập mật khẩu mới'\r\n                          value={password}\r\n                          onChange={(e) => setPassword(e.target.value)}\r\n                          disabled\r\n                          // style={{ visibility: 'hidden' }}\r\n                        ></Form.Control>\r\n                      )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='password'>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Nhập lại mật khẩu</strong>\r\n                      </Form.Label>\r\n                      {state === true ? (\r\n                        <>\r\n                          <Form.Control\r\n                            className='border-1 border-grey rounded-pill'\r\n                            type='password'\r\n                            placeholder='Nhập lại mật khẩu'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                          ></Form.Control>\r\n                        </>\r\n                      ) : (\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill'\r\n                          type='password'\r\n                          placeholder='Nhập lại mật khẩu'\r\n                          value={confirmPassword}\r\n                          onChange={(e) => setConfirmPassword(e.target.value)}\r\n                          disabled\r\n                          // style={{ visibility: 'hidden' }}\r\n                        ></Form.Control>\r\n                      )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n                <div className='pl-3 pr-3 text-center'>\r\n                  <Button\r\n                    type='submit'\r\n                    variant='outline-light'\r\n                    className='rounded-pill btn_color_created'\r\n                    style={{\r\n                      fontSize: '1rem',\r\n                      letterSpacing: '0.25rem',\r\n                      width: '15rem',\r\n                    }}\r\n                  >\r\n                    Cập nhật\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\cloudinary.js",[],{"ruleId":"599","replacedBy":"600"},{"ruleId":"601","replacedBy":"602"},{"ruleId":"603","severity":1,"message":"604","line":47,"column":11,"nodeType":"605","messageId":"606","endLine":47,"endColumn":15},{"ruleId":"603","severity":1,"message":"607","line":22,"column":41,"nodeType":"605","messageId":"606","endLine":22,"endColumn":52},{"ruleId":"603","severity":1,"message":"608","line":30,"column":7,"nodeType":"605","messageId":"606","endLine":30,"endColumn":17},{"ruleId":"603","severity":1,"message":"609","line":50,"column":7,"nodeType":"605","messageId":"606","endLine":50,"endColumn":21},{"ruleId":"603","severity":1,"message":"610","line":105,"column":9,"nodeType":"605","messageId":"606","endLine":105,"endColumn":19},{"ruleId":"603","severity":1,"message":"611","line":107,"column":10,"nodeType":"605","messageId":"606","endLine":107,"endColumn":18},{"ruleId":"603","severity":1,"message":"612","line":110,"column":9,"nodeType":"605","messageId":"606","endLine":110,"endColumn":20},{"ruleId":"603","severity":1,"message":"613","line":114,"column":9,"nodeType":"605","messageId":"606","endLine":114,"endColumn":13},{"ruleId":"614","severity":1,"message":"615","line":117,"column":9,"nodeType":"616","endLine":117,"endColumn":42},{"ruleId":"614","severity":1,"message":"615","line":120,"column":9,"nodeType":"616","endLine":120,"endColumn":40},{"ruleId":"603","severity":1,"message":"617","line":131,"column":11,"nodeType":"605","messageId":"606","endLine":131,"endColumn":18},{"ruleId":"603","severity":1,"message":"618","line":131,"column":20,"nodeType":"605","messageId":"606","endLine":131,"endColumn":27},{"ruleId":"619","severity":1,"message":"620","line":176,"column":6,"nodeType":"621","endLine":176,"endColumn":28,"suggestions":"622"},{"ruleId":"614","severity":1,"message":"615","line":518,"column":31,"nodeType":"616","endLine":518,"endColumn":41},{"ruleId":"614","severity":1,"message":"615","line":521,"column":31,"nodeType":"616","endLine":521,"endColumn":41},{"ruleId":"603","severity":1,"message":"623","line":3,"column":15,"nodeType":"605","messageId":"606","endLine":3,"endColumn":24},{"ruleId":"603","severity":1,"message":"624","line":4,"column":10,"nodeType":"605","messageId":"606","endLine":4,"endColumn":23},{"ruleId":"603","severity":1,"message":"625","line":5,"column":22,"nodeType":"605","messageId":"606","endLine":5,"endColumn":32},{"ruleId":"603","severity":1,"message":"626","line":13,"column":8,"nodeType":"605","messageId":"606","endLine":13,"endColumn":23},{"ruleId":"603","severity":1,"message":"604","line":28,"column":11,"nodeType":"605","messageId":"606","endLine":28,"endColumn":15},{"ruleId":"603","severity":1,"message":"627","line":99,"column":8,"nodeType":"605","messageId":"606","endLine":99,"endColumn":16},{"ruleId":"603","severity":1,"message":"628","line":112,"column":13,"nodeType":"605","messageId":"606","endLine":112,"endColumn":21},{"ruleId":"603","severity":1,"message":"629","line":12,"column":17,"nodeType":"605","messageId":"606","endLine":12,"endColumn":27},{"ruleId":"603","severity":1,"message":"630","line":13,"column":15,"nodeType":"605","messageId":"606","endLine":13,"endColumn":23},{"ruleId":"603","severity":1,"message":"631","line":14,"column":4,"nodeType":"605","messageId":"606","endLine":14,"endColumn":17},{"ruleId":"603","severity":1,"message":"632","line":20,"column":10,"nodeType":"605","messageId":"606","endLine":20,"endColumn":24},{"ruleId":"603","severity":1,"message":"633","line":24,"column":8,"nodeType":"605","messageId":"606","endLine":24,"endColumn":15},{"ruleId":"603","severity":1,"message":"617","line":62,"column":12,"nodeType":"605","messageId":"606","endLine":62,"endColumn":19},{"ruleId":"603","severity":1,"message":"634","line":62,"column":21,"nodeType":"605","messageId":"606","endLine":62,"endColumn":26},{"ruleId":"603","severity":1,"message":"604","line":62,"column":28,"nodeType":"605","messageId":"606","endLine":62,"endColumn":32},{"ruleId":"603","severity":1,"message":"635","line":70,"column":11,"nodeType":"605","messageId":"606","endLine":70,"endColumn":16},{"ruleId":"603","severity":1,"message":"636","line":70,"column":18,"nodeType":"605","messageId":"606","endLine":70,"endColumn":26},{"ruleId":"603","severity":1,"message":"637","line":3,"column":3,"nodeType":"605","messageId":"606","endLine":3,"endColumn":17},{"ruleId":"603","severity":1,"message":"638","line":4,"column":3,"nodeType":"605","messageId":"606","endLine":4,"endColumn":20},{"ruleId":"603","severity":1,"message":"639","line":5,"column":3,"nodeType":"605","messageId":"606","endLine":5,"endColumn":20},{"ruleId":"603","severity":1,"message":"640","line":6,"column":3,"nodeType":"605","messageId":"606","endLine":6,"endColumn":13},{"ruleId":"603","severity":1,"message":"641","line":7,"column":3,"nodeType":"605","messageId":"606","endLine":7,"endColumn":16},{"ruleId":"603","severity":1,"message":"642","line":8,"column":3,"nodeType":"605","messageId":"606","endLine":8,"endColumn":16},{"ruleId":"603","severity":1,"message":"643","line":9,"column":3,"nodeType":"605","messageId":"606","endLine":9,"endColumn":14},{"ruleId":"603","severity":1,"message":"644","line":10,"column":3,"nodeType":"605","messageId":"606","endLine":10,"endColumn":17},{"ruleId":"603","severity":1,"message":"645","line":11,"column":3,"nodeType":"605","messageId":"606","endLine":11,"endColumn":21},{"ruleId":"603","severity":1,"message":"646","line":12,"column":3,"nodeType":"605","messageId":"606","endLine":12,"endColumn":24},{"ruleId":"603","severity":1,"message":"647","line":7,"column":8,"nodeType":"605","messageId":"606","endLine":7,"endColumn":21},{"ruleId":"603","severity":1,"message":"648","line":8,"column":8,"nodeType":"605","messageId":"606","endLine":8,"endColumn":14},{"ruleId":"603","severity":1,"message":"649","line":15,"column":7,"nodeType":"605","messageId":"606","endLine":15,"endColumn":18},{"ruleId":"603","severity":1,"message":"650","line":22,"column":10,"nodeType":"605","messageId":"606","endLine":22,"endColumn":14},{"ruleId":"603","severity":1,"message":"651","line":23,"column":10,"nodeType":"605","messageId":"606","endLine":23,"endColumn":14},{"ruleId":"603","severity":1,"message":"652","line":24,"column":10,"nodeType":"605","messageId":"606","endLine":24,"endColumn":15},{"ruleId":"603","severity":1,"message":"653","line":35,"column":13,"nodeType":"605","messageId":"606","endLine":35,"endColumn":18},{"ruleId":"603","severity":1,"message":"654","line":17,"column":3,"nodeType":"605","messageId":"606","endLine":17,"endColumn":25},{"ruleId":"603","severity":1,"message":"655","line":18,"column":3,"nodeType":"605","messageId":"606","endLine":18,"endColumn":28},{"ruleId":"603","severity":1,"message":"656","line":19,"column":3,"nodeType":"605","messageId":"606","endLine":19,"endColumn":28},{"ruleId":"657","severity":1,"message":"658","line":166,"column":7,"nodeType":"659","messageId":"660","endLine":166,"endColumn":11},{"ruleId":"657","severity":1,"message":"658","line":167,"column":7,"nodeType":"659","messageId":"660","endLine":167,"endColumn":11},{"ruleId":"603","severity":1,"message":"647","line":6,"column":8,"nodeType":"605","messageId":"606","endLine":6,"endColumn":21},{"ruleId":"603","severity":1,"message":"661","line":10,"column":10,"nodeType":"605","messageId":"606","endLine":10,"endColumn":16},{"ruleId":"603","severity":1,"message":"662","line":10,"column":18,"nodeType":"605","messageId":"606","endLine":10,"endColumn":25},{"ruleId":"603","severity":1,"message":"663","line":11,"column":10,"nodeType":"605","messageId":"606","endLine":11,"endColumn":25},{"ruleId":"603","severity":1,"message":"664","line":11,"column":27,"nodeType":"605","messageId":"606","endLine":11,"endColumn":39},{"ruleId":"603","severity":1,"message":"665","line":12,"column":8,"nodeType":"605","messageId":"606","endLine":12,"endColumn":14},{"ruleId":"603","severity":1,"message":"666","line":32,"column":9,"nodeType":"605","messageId":"606","endLine":32,"endColumn":16},{"ruleId":"603","severity":1,"message":"667","line":25,"column":8,"nodeType":"605","messageId":"606","endLine":25,"endColumn":14},{"ruleId":"603","severity":1,"message":"617","line":64,"column":11,"nodeType":"605","messageId":"606","endLine":64,"endColumn":18},{"ruleId":"603","severity":1,"message":"668","line":74,"column":19,"nodeType":"605","messageId":"606","endLine":74,"endColumn":29},{"ruleId":"603","severity":1,"message":"669","line":88,"column":20,"nodeType":"605","messageId":"606","endLine":88,"endColumn":33},{"ruleId":"619","severity":1,"message":"670","line":243,"column":6,"nodeType":"621","endLine":243,"endColumn":41,"suggestions":"671"},{"ruleId":"603","severity":1,"message":"647","line":6,"column":8,"nodeType":"605","messageId":"606","endLine":6,"endColumn":21},{"ruleId":"603","severity":1,"message":"617","line":15,"column":28,"nodeType":"605","messageId":"606","endLine":15,"endColumn":35},{"ruleId":"603","severity":1,"message":"634","line":18,"column":39,"nodeType":"605","messageId":"606","endLine":18,"endColumn":44},{"ruleId":"599","replacedBy":"672"},{"ruleId":"601","replacedBy":"673"},{"ruleId":"603","severity":1,"message":"647","line":8,"column":8,"nodeType":"605","messageId":"606","endLine":8,"endColumn":21},{"ruleId":"603","severity":1,"message":"674","line":1,"column":28,"nodeType":"605","messageId":"606","endLine":1,"endColumn":36},{"ruleId":"603","severity":1,"message":"675","line":60,"column":10,"nodeType":"605","messageId":"606","endLine":60,"endColumn":19},{"ruleId":"619","severity":1,"message":"676","line":84,"column":7,"nodeType":"621","endLine":84,"endColumn":25,"suggestions":"677"},{"ruleId":"603","severity":1,"message":"678","line":54,"column":24,"nodeType":"605","messageId":"606","endLine":54,"endColumn":38},{"ruleId":"603","severity":1,"message":"679","line":66,"column":21,"nodeType":"605","messageId":"606","endLine":66,"endColumn":36},{"ruleId":"619","severity":1,"message":"680","line":112,"column":7,"nodeType":"621","endLine":112,"endColumn":78,"suggestions":"681"},{"ruleId":"603","severity":1,"message":"682","line":262,"column":11,"nodeType":"605","messageId":"606","endLine":262,"endColumn":14},{"ruleId":"599","replacedBy":"683"},{"ruleId":"601","replacedBy":"684"},{"ruleId":"603","severity":1,"message":"634","line":24,"column":20,"nodeType":"605","messageId":"606","endLine":24,"endColumn":25},{"ruleId":"619","severity":1,"message":"685","line":51,"column":6,"nodeType":"621","endLine":51,"endColumn":45,"suggestions":"686"},{"ruleId":"603","severity":1,"message":"687","line":35,"column":14,"nodeType":"605","messageId":"606","endLine":35,"endColumn":24},{"ruleId":"603","severity":1,"message":"688","line":36,"column":12,"nodeType":"605","messageId":"606","endLine":36,"endColumn":20},{"ruleId":"603","severity":1,"message":"689","line":2,"column":24,"nodeType":"605","messageId":"606","endLine":2,"endColumn":29},{"ruleId":"603","severity":1,"message":"690","line":2,"column":31,"nodeType":"605","messageId":"606","endLine":2,"endColumn":41},{"ruleId":"603","severity":1,"message":"691","line":4,"column":10,"nodeType":"605","messageId":"606","endLine":4,"endColumn":20},{"ruleId":"603","severity":1,"message":"692","line":4,"column":22,"nodeType":"605","messageId":"606","endLine":4,"endColumn":31},{"ruleId":"603","severity":1,"message":"693","line":4,"column":33,"nodeType":"605","messageId":"606","endLine":4,"endColumn":38},{"ruleId":"603","severity":1,"message":"694","line":1,"column":8,"nodeType":"605","messageId":"606","endLine":1,"endColumn":30},{"ruleId":"603","severity":1,"message":"695","line":2,"column":8,"nodeType":"605","messageId":"606","endLine":2,"endColumn":24},{"ruleId":"603","severity":1,"message":"689","line":4,"column":23,"nodeType":"605","messageId":"606","endLine":4,"endColumn":28},{"ruleId":"603","severity":1,"message":"696","line":7,"column":10,"nodeType":"605","messageId":"606","endLine":7,"endColumn":15},{"ruleId":"603","severity":1,"message":"632","line":10,"column":10,"nodeType":"605","messageId":"606","endLine":10,"endColumn":24},{"ruleId":"603","severity":1,"message":"697","line":10,"column":26,"nodeType":"605","messageId":"606","endLine":10,"endColumn":43},{"ruleId":"603","severity":1,"message":"650","line":23,"column":10,"nodeType":"605","messageId":"606","endLine":23,"endColumn":14},{"ruleId":"603","severity":1,"message":"698","line":23,"column":16,"nodeType":"605","messageId":"606","endLine":23,"endColumn":23},{"ruleId":"603","severity":1,"message":"699","line":24,"column":10,"nodeType":"605","messageId":"606","endLine":24,"endColumn":15},{"ruleId":"603","severity":1,"message":"700","line":24,"column":17,"nodeType":"605","messageId":"606","endLine":24,"endColumn":25},{"ruleId":"603","severity":1,"message":"701","line":25,"column":10,"nodeType":"605","messageId":"606","endLine":25,"endColumn":18},{"ruleId":"603","severity":1,"message":"702","line":25,"column":20,"nodeType":"605","messageId":"606","endLine":25,"endColumn":31},{"ruleId":"603","severity":1,"message":"703","line":26,"column":10,"nodeType":"605","messageId":"606","endLine":26,"endColumn":25},{"ruleId":"603","severity":1,"message":"704","line":26,"column":27,"nodeType":"605","messageId":"606","endLine":26,"endColumn":45},{"ruleId":"603","severity":1,"message":"705","line":27,"column":10,"nodeType":"605","messageId":"606","endLine":27,"endColumn":17},{"ruleId":"603","severity":1,"message":"668","line":27,"column":19,"nodeType":"605","messageId":"606","endLine":27,"endColumn":29},{"ruleId":"603","severity":1,"message":"617","line":32,"column":11,"nodeType":"605","messageId":"606","endLine":32,"endColumn":18},{"ruleId":"603","severity":1,"message":"634","line":32,"column":20,"nodeType":"605","messageId":"606","endLine":32,"endColumn":25},{"ruleId":"603","severity":1,"message":"618","line":38,"column":11,"nodeType":"605","messageId":"606","endLine":38,"endColumn":18},{"ruleId":"603","severity":1,"message":"706","line":64,"column":11,"nodeType":"605","messageId":"606","endLine":64,"endColumn":19},{"ruleId":"603","severity":1,"message":"707","line":74,"column":20,"nodeType":"605","messageId":"606","endLine":74,"endColumn":30},{"ruleId":"603","severity":1,"message":"708","line":74,"column":41,"nodeType":"605","messageId":"606","endLine":74,"endColumn":51},{"ruleId":"603","severity":1,"message":"709","line":7,"column":8,"nodeType":"605","messageId":"606","endLine":7,"endColumn":20},{"ruleId":"603","severity":1,"message":"710","line":8,"column":8,"nodeType":"605","messageId":"606","endLine":8,"endColumn":20},{"ruleId":"603","severity":1,"message":"711","line":9,"column":8,"nodeType":"605","messageId":"606","endLine":9,"endColumn":22},{"ruleId":"603","severity":1,"message":"712","line":13,"column":17,"nodeType":"605","messageId":"606","endLine":13,"endColumn":26},{"ruleId":"603","severity":1,"message":"713","line":14,"column":10,"nodeType":"605","messageId":"606","endLine":14,"endColumn":21},{"ruleId":"603","severity":1,"message":"714","line":15,"column":10,"nodeType":"605","messageId":"606","endLine":15,"endColumn":13},{"ruleId":"603","severity":1,"message":"689","line":15,"column":15,"nodeType":"605","messageId":"606","endLine":15,"endColumn":20},{"ruleId":"603","severity":1,"message":"715","line":15,"column":22,"nodeType":"605","messageId":"606","endLine":15,"endColumn":31},{"ruleId":"603","severity":1,"message":"716","line":15,"column":33,"nodeType":"605","messageId":"606","endLine":15,"endColumn":36},{"ruleId":"603","severity":1,"message":"717","line":15,"column":38,"nodeType":"605","messageId":"606","endLine":15,"endColumn":44},{"ruleId":"603","severity":1,"message":"718","line":15,"column":46,"nodeType":"605","messageId":"606","endLine":15,"endColumn":50},{"ruleId":"603","severity":1,"message":"719","line":168,"column":10,"nodeType":"605","messageId":"606","endLine":168,"endColumn":20},{"ruleId":"603","severity":1,"message":"617","line":171,"column":18,"nodeType":"605","messageId":"606","endLine":171,"endColumn":25},{"ruleId":"603","severity":1,"message":"634","line":171,"column":27,"nodeType":"605","messageId":"606","endLine":171,"endColumn":32},{"ruleId":"603","severity":1,"message":"720","line":291,"column":15,"nodeType":"605","messageId":"606","endLine":291,"endColumn":29},{"ruleId":"603","severity":1,"message":"682","line":309,"column":11,"nodeType":"605","messageId":"606","endLine":309,"endColumn":14},{"ruleId":"603","severity":1,"message":"715","line":2,"column":40,"nodeType":"605","messageId":"606","endLine":2,"endColumn":49},{"ruleId":"603","severity":1,"message":"634","line":18,"column":20,"nodeType":"605","messageId":"606","endLine":18,"endColumn":25},{"ruleId":"603","severity":1,"message":"721","line":10,"column":8,"nodeType":"605","messageId":"606","endLine":10,"endColumn":22},{"ruleId":"603","severity":1,"message":"687","line":37,"column":20,"nodeType":"605","messageId":"606","endLine":37,"endColumn":30},{"ruleId":"603","severity":1,"message":"688","line":37,"column":39,"nodeType":"605","messageId":"606","endLine":37,"endColumn":47},{"ruleId":"603","severity":1,"message":"665","line":13,"column":8,"nodeType":"605","messageId":"606","endLine":13,"endColumn":14},{"ruleId":"603","severity":1,"message":"722","line":15,"column":8,"nodeType":"605","messageId":"606","endLine":15,"endColumn":16},{"ruleId":"603","severity":1,"message":"723","line":16,"column":8,"nodeType":"605","messageId":"606","endLine":16,"endColumn":16},{"ruleId":"603","severity":1,"message":"724","line":32,"column":9,"nodeType":"605","messageId":"606","endLine":32,"endColumn":16},{"ruleId":"603","severity":1,"message":"725","line":33,"column":9,"nodeType":"605","messageId":"606","endLine":33,"endColumn":19},{"ruleId":"603","severity":1,"message":"666","line":36,"column":9,"nodeType":"605","messageId":"606","endLine":36,"endColumn":16},{"ruleId":"603","severity":1,"message":"726","line":38,"column":9,"nodeType":"605","messageId":"606","endLine":38,"endColumn":21},{"ruleId":"603","severity":1,"message":"612","line":42,"column":9,"nodeType":"605","messageId":"606","endLine":42,"endColumn":20},{"ruleId":"603","severity":1,"message":"687","line":52,"column":20,"nodeType":"605","messageId":"606","endLine":52,"endColumn":30},{"ruleId":"603","severity":1,"message":"727","line":52,"column":41,"nodeType":"605","messageId":"606","endLine":52,"endColumn":51},{"ruleId":"603","severity":1,"message":"728","line":52,"column":53,"nodeType":"605","messageId":"606","endLine":52,"endColumn":61},{"ruleId":"603","severity":1,"message":"729","line":60,"column":14,"nodeType":"605","messageId":"606","endLine":60,"endColumn":27},{"ruleId":"603","severity":1,"message":"730","line":66,"column":14,"nodeType":"605","messageId":"606","endLine":66,"endColumn":32},{"ruleId":"603","severity":1,"message":"731","line":67,"column":14,"nodeType":"605","messageId":"606","endLine":67,"endColumn":32},{"ruleId":"603","severity":1,"message":"732","line":1,"column":24,"nodeType":"605","messageId":"606","endLine":1,"endColumn":38},{"ruleId":"603","severity":1,"message":"714","line":11,"column":10,"nodeType":"605","messageId":"606","endLine":11,"endColumn":13},{"ruleId":"603","severity":1,"message":"716","line":11,"column":22,"nodeType":"605","messageId":"606","endLine":11,"endColumn":25},{"ruleId":"603","severity":1,"message":"666","line":59,"column":9,"nodeType":"605","messageId":"606","endLine":59,"endColumn":16},{"ruleId":"603","severity":1,"message":"617","line":105,"column":11,"nodeType":"605","messageId":"606","endLine":105,"endColumn":18},{"ruleId":"603","severity":1,"message":"618","line":105,"column":20,"nodeType":"605","messageId":"606","endLine":105,"endColumn":27},{"ruleId":"603","severity":1,"message":"720","line":289,"column":15,"nodeType":"605","messageId":"606","endLine":289,"endColumn":29},{"ruleId":"603","severity":1,"message":"682","line":307,"column":11,"nodeType":"605","messageId":"606","endLine":307,"endColumn":14},{"ruleId":"603","severity":1,"message":"733","line":369,"column":9,"nodeType":"605","messageId":"606","endLine":369,"endColumn":29},{"ruleId":"603","severity":1,"message":"634","line":19,"column":20,"nodeType":"605","messageId":"606","endLine":19,"endColumn":25},{"ruleId":"603","severity":1,"message":"717","line":1,"column":10,"nodeType":"605","messageId":"606","endLine":1,"endColumn":16},{"ruleId":"603","severity":1,"message":"734","line":3,"column":10,"nodeType":"605","messageId":"606","endLine":3,"endColumn":14},{"ruleId":"603","severity":1,"message":"735","line":16,"column":4,"nodeType":"605","messageId":"606","endLine":16,"endColumn":10},{"ruleId":"603","severity":1,"message":"736","line":22,"column":8,"nodeType":"605","messageId":"606","endLine":22,"endColumn":21},{"ruleId":"603","severity":1,"message":"737","line":33,"column":10,"nodeType":"605","messageId":"606","endLine":33,"endColumn":16},{"ruleId":"603","severity":1,"message":"738","line":50,"column":12,"nodeType":"605","messageId":"606","endLine":50,"endColumn":20},{"ruleId":"603","severity":1,"message":"739","line":53,"column":12,"nodeType":"605","messageId":"606","endLine":53,"endColumn":18},{"ruleId":"740","severity":1,"message":"741","line":60,"column":27,"nodeType":"742","messageId":"743","endLine":60,"endColumn":29},{"ruleId":"744","severity":1,"message":"745","line":61,"column":32,"nodeType":"746","messageId":"660","endLine":61,"endColumn":34},{"ruleId":"603","severity":1,"message":"747","line":63,"column":10,"nodeType":"605","messageId":"606","endLine":63,"endColumn":20},{"ruleId":"603","severity":1,"message":"607","line":22,"column":41,"nodeType":"605","messageId":"606","endLine":22,"endColumn":52},{"ruleId":"603","severity":1,"message":"608","line":30,"column":7,"nodeType":"605","messageId":"606","endLine":30,"endColumn":17},{"ruleId":"603","severity":1,"message":"609","line":50,"column":7,"nodeType":"605","messageId":"606","endLine":50,"endColumn":21},{"ruleId":"603","severity":1,"message":"610","line":106,"column":9,"nodeType":"605","messageId":"606","endLine":106,"endColumn":19},{"ruleId":"603","severity":1,"message":"611","line":108,"column":10,"nodeType":"605","messageId":"606","endLine":108,"endColumn":18},{"ruleId":"603","severity":1,"message":"612","line":111,"column":9,"nodeType":"605","messageId":"606","endLine":111,"endColumn":20},{"ruleId":"603","severity":1,"message":"617","line":119,"column":11,"nodeType":"605","messageId":"606","endLine":119,"endColumn":18},{"ruleId":"603","severity":1,"message":"618","line":119,"column":20,"nodeType":"605","messageId":"606","endLine":119,"endColumn":27},{"ruleId":"603","severity":1,"message":"728","line":119,"column":29,"nodeType":"605","messageId":"606","endLine":119,"endColumn":37},{"ruleId":"619","severity":1,"message":"620","line":164,"column":6,"nodeType":"621","endLine":164,"endColumn":28,"suggestions":"748"},{"ruleId":"603","severity":1,"message":"749","line":4,"column":4,"nodeType":"605","messageId":"606","endLine":4,"endColumn":20},{"ruleId":"603","severity":1,"message":"682","line":264,"column":11,"nodeType":"605","messageId":"606","endLine":264,"endColumn":14},{"ruleId":"603","severity":1,"message":"720","line":293,"column":15,"nodeType":"605","messageId":"606","endLine":293,"endColumn":29},{"ruleId":"603","severity":1,"message":"682","line":311,"column":11,"nodeType":"605","messageId":"606","endLine":311,"endColumn":14},{"ruleId":"603","severity":1,"message":"750","line":1,"column":10,"nodeType":"605","messageId":"606","endLine":1,"endColumn":14},{"ruleId":"603","severity":1,"message":"751","line":27,"column":8,"nodeType":"605","messageId":"606","endLine":27,"endColumn":16},{"ruleId":"603","severity":1,"message":"687","line":264,"column":16,"nodeType":"605","messageId":"606","endLine":264,"endColumn":26},{"ruleId":"603","severity":1,"message":"688","line":265,"column":14,"nodeType":"605","messageId":"606","endLine":265,"endColumn":22},{"ruleId":"603","severity":1,"message":"752","line":285,"column":16,"nodeType":"605","messageId":"606","endLine":285,"endColumn":29},{"ruleId":"603","severity":1,"message":"753","line":286,"column":14,"nodeType":"605","messageId":"606","endLine":286,"endColumn":25},{"ruleId":"603","severity":1,"message":"754","line":294,"column":10,"nodeType":"605","messageId":"606","endLine":294,"endColumn":11},{"ruleId":"619","severity":1,"message":"755","line":311,"column":7,"nodeType":"621","endLine":311,"endColumn":66,"suggestions":"756"},{"ruleId":"603","severity":1,"message":"757","line":1,"column":8,"nodeType":"605","messageId":"606","endLine":1,"endColumn":13},{"ruleId":"603","severity":1,"message":"758","line":7,"column":10,"nodeType":"605","messageId":"606","endLine":7,"endColumn":26},{"ruleId":"603","severity":1,"message":"759","line":8,"column":25,"nodeType":"605","messageId":"606","endLine":8,"endColumn":35},{"ruleId":"603","severity":1,"message":"760","line":18,"column":10,"nodeType":"605","messageId":"606","endLine":18,"endColumn":21},{"ruleId":"603","severity":1,"message":"761","line":35,"column":11,"nodeType":"605","messageId":"606","endLine":35,"endColumn":24},{"ruleId":"603","severity":1,"message":"762","line":35,"column":26,"nodeType":"605","messageId":"606","endLine":35,"endColumn":42},{"ruleId":"603","severity":1,"message":"720","line":291,"column":15,"nodeType":"605","messageId":"606","endLine":291,"endColumn":29},{"ruleId":"603","severity":1,"message":"682","line":309,"column":11,"nodeType":"605","messageId":"606","endLine":309,"endColumn":14},{"ruleId":"603","severity":1,"message":"733","line":371,"column":9,"nodeType":"605","messageId":"606","endLine":371,"endColumn":29},{"ruleId":"603","severity":1,"message":"666","line":88,"column":7,"nodeType":"605","messageId":"606","endLine":88,"endColumn":14},{"ruleId":"603","severity":1,"message":"715","line":2,"column":40,"nodeType":"605","messageId":"606","endLine":2,"endColumn":49},{"ruleId":"603","severity":1,"message":"634","line":23,"column":20,"nodeType":"605","messageId":"606","endLine":23,"endColumn":25},{"ruleId":"603","severity":1,"message":"706","line":66,"column":11,"nodeType":"605","messageId":"606","endLine":66,"endColumn":19},{"ruleId":"603","severity":1,"message":"707","line":76,"column":20,"nodeType":"605","messageId":"606","endLine":76,"endColumn":30},{"ruleId":"603","severity":1,"message":"708","line":76,"column":41,"nodeType":"605","messageId":"606","endLine":76,"endColumn":51},{"ruleId":"603","severity":1,"message":"750","line":5,"column":10,"nodeType":"605","messageId":"606","endLine":5,"endColumn":14},{"ruleId":"603","severity":1,"message":"687","line":37,"column":14,"nodeType":"605","messageId":"606","endLine":37,"endColumn":24},{"ruleId":"603","severity":1,"message":"688","line":38,"column":12,"nodeType":"605","messageId":"606","endLine":38,"endColumn":20},{"ruleId":"603","severity":1,"message":"634","line":24,"column":20,"nodeType":"605","messageId":"606","endLine":24,"endColumn":25},{"ruleId":"603","severity":1,"message":"750","line":5,"column":10,"nodeType":"605","messageId":"606","endLine":5,"endColumn":14},{"ruleId":"603","severity":1,"message":"647","line":7,"column":8,"nodeType":"605","messageId":"606","endLine":7,"endColumn":21},{"ruleId":"603","severity":1,"message":"634","line":33,"column":20,"nodeType":"605","messageId":"606","endLine":33,"endColumn":25},"no-native-reassign",["763"],"no-negated-in-lhs",["764"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'NavDropdown' is defined but never used.","'StyledMenu' is assigned a value but never used.","'StyledMenuItem' is assigned a value but never used.","'anchorReff' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'menu' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'loading' is assigned a value but never used.","'success' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["765"],"'Container' is defined but never used.","'LinkContainer' is defined but never used.","'withStyles' is defined but never used.","'ProductCarousel' is defined but never used.","'settings' is assigned a value but never used.","'onChange' is defined but never used.","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","'ListGroupItem' is defined but never used.","'getUserDetails' is defined but never used.","'Message' is defined but never used.","'error' is assigned a value but never used.","'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","'LOAD_USER_FAIL' is defined but never used.","'LOAD_USER_REQUEST' is defined but never used.","'LOAD_USER_SUCCESS' is defined but never used.","'LOGIN_FAIL' is defined but never used.","'LOGIN_REQUEST' is defined but never used.","'LOGIN_SUCCESS' is defined but never used.","'LOGOUT_FAIL' is defined but never used.","'LOGOUT_SUCCESS' is defined but never used.","'REGISTER_USER_FAIL' is defined but never used.","'REGISTER_USER_REQUEST' is defined but never used.","'FormContainer' is defined but never used.","'Loader' is defined but never used.","'firebaseApp' is assigned a value but never used.","'name' is assigned a value but never used.","'mail' is assigned a value but never used.","'photo' is assigned a value but never used.","'token' is assigned a value but never used.","'USER_LOGIN_GOOGLE_FAIL' is defined but never used.","'USER_LOGIN_GOOGLE_REQUEST' is defined but never used.","'USER_LOGIN_GOOGLE_SUCCESS' is defined but never used.","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","'Upload' is defined but never used.","'message' is defined but never used.","'LoadingOutlined' is defined but never used.","'PlusOutlined' is defined but never used.","'Avatar' is defined but never used.","'classes' is assigned a value but never used.","'Banner' is defined but never used.","'setMessage' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'success'. Either include it or remove the dependency array.",["766"],["763"],["764"],"'useState' is defined but never used.","'tempPrice' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cart.cartItems', 'dispatch', and 'order._id'. Either include them or remove the dependency array.",["767"],"'setOrderStatus' is assigned a value but never used.","'loadingByMember' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["768"],"'did' is assigned a value but never used.",["763"],["764"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["769"],"'loadingCat' is assigned a value but never used.","'errorCat' is assigned a value but never used.","'Image' is defined but never used.","'InputGroup' is defined but never used.","'ButtonBase' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'CheckCircleOutlineIcon' is defined but never used.","'ErrorOutlineIcon' is defined but never used.","'toast' is defined but never used.","'updateUserProfile' is defined but never used.","'setName' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'message' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'successPay' is assigned a value but never used.","'GroupAddIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'VideoLabelIcon' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'activeStep' is assigned a value but never used.","'createdProduct' is assigned a value but never used.","'MessageSuccess' is defined but never used.","'FaceIcon' is defined but never used.","'DoneIcon' is defined but never used.","'keyword' is assigned a value but never used.","'pageNumber' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'successCat' is assigned a value but never used.","'category' is assigned a value but never used.","'successFilter' is assigned a value but never used.","'loadingFilterPrice' is assigned a value but never used.","'successFilterPrice' is assigned a value but never used.","'DollarOutlined' is defined but never used.","'submitHandlerDetails' is assigned a value but never used.","'Card' is defined but never used.","'Legend' is defined but never used.","'ListSubheader' is defined but never used.","'format' is defined but never used.","'supplier' is assigned a value but never used.","'orders' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'outOfStock' is assigned a value but never used.",["770"],"'AppstoreOutlined' is defined but never used.","'Link' is defined but never used.","'Skeleton' is defined but never used.","'loadingCreate' is assigned a value but never used.","'errorCreate' is assigned a value but never used.","'k' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categoryCat', 'createdProduct._id', and 'pageNumber'. Either include them or remove the dependency array.",["771"],"'axios' is defined but never used.","'deleteFileImages' is defined but never used.","'newProduct' is defined but never used.","'formatPrice' is defined but never used.","'imagesPreview' is assigned a value but never used.","'setImagesPreview' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"776","fix":"777"},{"desc":"778","fix":"779"},{"desc":"780","fix":"781"},{"desc":"772","fix":"782"},{"desc":"783","fix":"784"},"Update the dependencies array to be: [open, userInfo, user, dispatch]",{"range":"785","text":"786"},"Update the dependencies array to be: [dispatch, history, userInfo, user, success]",{"range":"787","text":"788"},"Update the dependencies array to be: [cart.cartItems, dispatch, history, order._id, success]",{"range":"789","text":"790"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",{"range":"791","text":"792"},"Update the dependencies array to be: [dispatch, user, userId, successUpdate, history]",{"range":"793","text":"794"},{"range":"795","text":"786"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id, pageNumber]",{"range":"796","text":"797"},[4822,4844],"[open, userInfo, user, dispatch]",[7146,7181],"[dispatch, history, userInfo, user, success]",[2689,2707],"[cart.cartItems, dispatch, history, order._id, success]",[3668,3739],"[dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",[1578,1617],"[dispatch, user, userId, successUpdate, history]",[4513,4535],[9941,10000],"[dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id, pageNumber]"]