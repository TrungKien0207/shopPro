[{"F:\\Code\\shopPro\\frontend\\src\\index.js":"1","F:\\Code\\shopPro\\frontend\\src\\App.js":"2","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js":"3","F:\\Code\\shopPro\\frontend\\src\\components\\Header.js":"4","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js":"5","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js":"6","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js":"7","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js":"8","F:\\Code\\shopPro\\frontend\\src\\store.js":"9","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js":"10","F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js":"11","F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js":"12","F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js":"13","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js":"14","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js":"15","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js":"16","F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js":"17","F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js":"18","F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js":"19","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js":"20","F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js":"21","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js":"22","F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js":"23","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js":"24","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js":"25","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js":"26","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js":"27","F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js":"28","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js":"29","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js":"30","F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js":"31","F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js":"32","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js":"33","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js":"34","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js":"35","F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js":"36","F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js":"37","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js":"38","F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js":"39","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js":"40","F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js":"41","F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js":"42","F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js":"43","F:\\Code\\shopPro\\frontend\\src\\configAuth.js":"44","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js":"45","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js":"46","F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js":"47","F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js":"48","F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js":"49","F:\\Code\\shopPro\\frontend\\src\\components\\test.js":"50","F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js":"51","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js":"52","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js":"53","F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js":"54","F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js":"55","F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js":"56","F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js":"57","F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js":"58","F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js":"59","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js":"60","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js":"61","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js":"62","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js":"63","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js":"64","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js":"65","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js":"66","F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js":"67","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js":"68","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js":"69","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js":"70","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js":"71","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js":"72","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js":"73","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js":"74","F:\\Code\\shopPro\\frontend\\src\\actions\\cloudinary.js":"75","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\ListNumber.js":"76","F:\\Code\\shopPro\\frontend\\src\\actions\\notificationsAction.js":"77","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\NotificationsDropDown.js":"78","F:\\Code\\shopPro\\frontend\\src\\screens\\UsersAddressListScreen.js":"79","F:\\Code\\shopPro\\frontend\\src\\actions\\subCategoryAction.js":"80","F:\\Code\\shopPro\\frontend\\src\\constants\\subCategoryConstants.js":"81","F:\\Code\\shopPro\\frontend\\src\\reducers\\subCategoryReducers.js":"82","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SubCategoryListScreen.js":"83","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SubCategoryEditScreen.js":"84"},{"size":629,"mtime":1620119595981,"results":"85","hashOfConfig":"86"},{"size":9006,"mtime":1622220056338,"results":"87","hashOfConfig":"86"},{"size":362,"mtime":499162500000,"results":"88","hashOfConfig":"86"},{"size":26353,"mtime":1622270941054,"results":"89","hashOfConfig":"86"},{"size":11268,"mtime":1620267385392,"results":"90","hashOfConfig":"86"},{"size":5518,"mtime":1621884651867,"results":"91","hashOfConfig":"86"},{"size":2003,"mtime":1621620316063,"results":"92","hashOfConfig":"86"},{"size":29824,"mtime":1621886087154,"results":"93","hashOfConfig":"86"},{"size":5357,"mtime":1622296774548,"results":"94","hashOfConfig":"86"},{"size":8470,"mtime":1622273387536,"results":"95","hashOfConfig":"86"},{"size":3358,"mtime":1622273283293,"results":"96","hashOfConfig":"86"},{"size":12313,"mtime":1622273320752,"results":"97","hashOfConfig":"86"},{"size":567,"mtime":1615791677731,"results":"98","hashOfConfig":"86"},{"size":689,"mtime":1619547659359,"results":"99","hashOfConfig":"86"},{"size":25338,"mtime":1621885995887,"results":"100","hashOfConfig":"86"},{"size":1184,"mtime":1615605660974,"results":"101","hashOfConfig":"86"},{"size":1339,"mtime":1621601801857,"results":"102","hashOfConfig":"86"},{"size":238,"mtime":1612540677571,"results":"103","hashOfConfig":"86"},{"size":8565,"mtime":1622295495729,"results":"104","hashOfConfig":"86"},{"size":3634,"mtime":1621830105112,"results":"105","hashOfConfig":"86"},{"size":8304,"mtime":1621884666421,"results":"106","hashOfConfig":"86"},{"size":402,"mtime":1612087628650,"results":"107","hashOfConfig":"86"},{"size":10424,"mtime":1621830196924,"results":"108","hashOfConfig":"86"},{"size":8747,"mtime":1621884794716,"results":"109","hashOfConfig":"86"},{"size":25919,"mtime":1621884784004,"results":"110","hashOfConfig":"86"},{"size":12376,"mtime":1621884803237,"results":"111","hashOfConfig":"86"},{"size":1643,"mtime":1612593111433,"results":"112","hashOfConfig":"86"},{"size":3351,"mtime":1621884746500,"results":"113","hashOfConfig":"86"},{"size":9957,"mtime":1622056256225,"results":"114","hashOfConfig":"86"},{"size":6326,"mtime":1622059098076,"results":"115","hashOfConfig":"86"},{"size":2222,"mtime":1621604665676,"results":"116","hashOfConfig":"86"},{"size":8961,"mtime":1621176581234,"results":"117","hashOfConfig":"86"},{"size":20066,"mtime":1622073690763,"results":"118","hashOfConfig":"86"},{"size":855,"mtime":1619547664611,"results":"119","hashOfConfig":"86"},{"size":311,"mtime":1619377332627,"results":"120","hashOfConfig":"86"},{"size":995,"mtime":1618210153490,"results":"121","hashOfConfig":"86"},{"size":1297,"mtime":1619197232259,"results":"122","hashOfConfig":"86"},{"size":3613,"mtime":1619707633985,"results":"123","hashOfConfig":"86"},{"size":2347,"mtime":1620526178345,"results":"124","hashOfConfig":"86"},{"size":2090,"mtime":1621262623606,"results":"125","hashOfConfig":"86"},{"size":1725,"mtime":1616170962837,"results":"126","hashOfConfig":"86"},{"size":514,"mtime":1615015305728,"results":"127","hashOfConfig":"86"},{"size":22559,"mtime":1622073798354,"results":"128","hashOfConfig":"86"},{"size":393,"mtime":1616226016215,"results":"129","hashOfConfig":"86"},{"size":5057,"mtime":1617288730631,"results":"130","hashOfConfig":"86"},{"size":514,"mtime":1617284362928,"results":"131","hashOfConfig":"86"},{"size":3260,"mtime":1622184108559,"results":"132","hashOfConfig":"86"},{"size":1148,"mtime":1617555469184,"results":"133","hashOfConfig":"86"},{"size":4859,"mtime":1617764862267,"results":"134","hashOfConfig":"86"},{"size":0,"mtime":1617780641945,"results":"135","hashOfConfig":"86"},{"size":251,"mtime":1617900546652,"results":"136","hashOfConfig":"86"},{"size":10271,"mtime":1622273916012,"results":"137","hashOfConfig":"86"},{"size":855,"mtime":1618203083711,"results":"138","hashOfConfig":"86"},{"size":1802,"mtime":1611471571179,"results":"139","hashOfConfig":"86"},{"size":9840,"mtime":1622277496044,"results":"140","hashOfConfig":"86"},{"size":1253,"mtime":1619890864238,"results":"141","hashOfConfig":"86"},{"size":4900,"mtime":1619943611553,"results":"142","hashOfConfig":"86"},{"size":1148,"mtime":1619935367616,"results":"143","hashOfConfig":"86"},{"size":3073,"mtime":1619936932800,"results":"144","hashOfConfig":"86"},{"size":4115,"mtime":1621235539884,"results":"145","hashOfConfig":"86"},{"size":25964,"mtime":1622342461337,"results":"146","hashOfConfig":"86"},{"size":5077,"mtime":1622220544765,"results":"147","hashOfConfig":"86"},{"size":16012,"mtime":1620183244605,"results":"148","hashOfConfig":"86"},{"size":20339,"mtime":1620183268367,"results":"149","hashOfConfig":"86"},{"size":22584,"mtime":1621925655918,"results":"150","hashOfConfig":"86"},{"size":23433,"mtime":1622278856495,"results":"151","hashOfConfig":"86"},{"size":815,"mtime":1620138964451,"results":"152","hashOfConfig":"86"},{"size":20200,"mtime":1620183235479,"results":"153","hashOfConfig":"86"},{"size":26072,"mtime":1621912902528,"results":"154","hashOfConfig":"86"},{"size":3935,"mtime":1620183263582,"results":"155","hashOfConfig":"86"},{"size":24731,"mtime":1621802900169,"results":"156","hashOfConfig":"86"},{"size":23794,"mtime":1622279418436,"results":"157","hashOfConfig":"86"},{"size":4009,"mtime":1620183231306,"results":"158","hashOfConfig":"86"},{"size":9043,"mtime":1620183240177,"results":"159","hashOfConfig":"86"},{"size":331,"mtime":1621665934913,"results":"160","hashOfConfig":"86"},{"size":8363,"mtime":1621444444445,"results":"161","hashOfConfig":"86"},{"size":1638,"mtime":1622284180519,"results":"162","hashOfConfig":"86"},{"size":2309,"mtime":1622300352329,"results":"163","hashOfConfig":"86"},{"size":24632,"mtime":1621885852086,"results":"164","hashOfConfig":"86"},{"size":5609,"mtime":1622220915043,"results":"165","hashOfConfig":"86"},{"size":1292,"mtime":1622184210031,"results":"166","hashOfConfig":"86"},{"size":3369,"mtime":1622219738168,"results":"167","hashOfConfig":"86"},{"size":26947,"mtime":1622221040404,"results":"168","hashOfConfig":"86"},{"size":6675,"mtime":1622220403625,"results":"169","hashOfConfig":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},"1shtzj8",{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"172"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"172"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"172"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"172"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"172"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"172"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"172"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"172"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"172"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"172"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"172"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"172"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"172"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"172"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"172"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"172"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"172"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"271"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"172"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"172"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"172"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"172"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"172"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"172"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"172"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"172"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"172"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"172"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"172"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"172"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"172"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"172"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"172"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"172"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"172"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"172"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"172"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"172"},"F:\\Code\\shopPro\\frontend\\src\\index.js",[],["378","379"],"F:\\Code\\shopPro\\frontend\\src\\App.js",["380"],"import { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles'\nimport { BackTop } from 'antd'\nimport React, { Fragment, useEffect } from 'react'\nimport { Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { getUserDetails } from './actions/userActions'\nimport ProtectedRoute from './components/ProtectedRoute'\nimport AdminScreen from './screens/admin/AdminScreen'\nimport CategoriesListScreen from './screens/admin/CategoriesListScreen'\nimport CategoryEditScreen from './screens/admin/CategoryEditScreen'\nimport OrderEditScreen from './screens/admin/OrderEditScreen'\nimport OrderListScreen from './screens/admin/OrderListScreen'\nimport ProductCreateScreen from './screens/admin/ProductCreateScreen'\nimport ProductEditScreen from './screens/admin/ProductEditScreen'\nimport ProductListScreen from './screens/admin/ProductListScreen'\nimport SubCategoryEditScreen from './screens/admin/SubCategoryEditScreen'\nimport SubCategoriesListScreen from './screens/admin/SubCategoryListScreen'\nimport SupplierEditScreen from './screens/admin/SupplierEditScreen'\nimport SupplierListScreen from './screens/admin/SupplierListScreen'\nimport UserEditScreen from './screens/admin/UserEditScreen'\nimport UserListScreen from './screens/admin/UserListScreen'\nimport CartScreen from './screens/CartScreen.js'\nimport HomeScreen from './screens/HomeScreen'\nimport LoginScreen from './screens/LoginScreen'\nimport MyOrdersScreen from './screens/MyOrdersScreen'\nimport OrderScreen from './screens/OrderScreen.js'\nimport { PaymentScreen } from './screens/PaymentScreen'\nimport PlaceOrderScreen from './screens/PlaceOrderScreen'\nimport ProductOfCategoryScreen from './screens/ProductOfCategoryScreen'\nimport ProductScreen from './screens/ProductScreen.js'\nimport ProfileScreen from './screens/ProfileScreen'\nimport RegisterScreen from './screens/RegisterScreen.js'\nimport { ShippingScreen } from './screens/ShippingScreen'\nimport UsersAddressListScreen from './screens/UsersAddressListScreen'\n\nconst THEME = createMuiTheme({\n   typography: {\n      fontFamily: `\"Quicksand\", \"Roboto\", \"Arial\", sans-serif`,\n   },\n})\n\nconst App = () => {\n   const dispatch = useDispatch()\n   const userLogin = useSelector((state) => state.userLogin)\n   const { userInfo } = userLogin\n\n   const userDetails = useSelector((state) => state.userDetails)\n   const { user } = userDetails\n\n   useEffect(() => {\n      if (userInfo) {\n         dispatch(getUserDetails(userInfo._id))\n      }\n   }, [dispatch, userInfo])\n\n   return (\n      <>\n         <BackTop />\n\n         <Router>\n            <div>\n               <ThemeProvider theme={THEME}>\n                  {/* <Header /> */}\n\n                  <Fragment className='mb-4'>\n                     <Route path='/' component={HomeScreen} exact />\n                     <Route\n                        path='/search/:keyword'\n                        component={HomeScreen}\n                        exact\n                     />\n\n                     <div>\n                        <Route\n                           path='/profile'\n                           component={ProfileScreen}\n                           exact\n                        />\n\n                        <Route path='/cart/:id?' component={CartScreen} exact />\n\n                        <Route\n                           path='/product/:id/category'\n                           component={ProductOfCategoryScreen}\n                           exact\n                        />\n\n                        <Route\n                           path='/product/:id'\n                           component={ProductScreen}\n                           exact\n                        />\n                        <Route\n                           path='/order/:id'\n                           component={OrderScreen}\n                           exact\n                        />\n                        <Route\n                           path='/myorders'\n                           component={MyOrdersScreen}\n                           exact\n                        />\n                        <Route\n                           path='/register'\n                           component={RegisterScreen}\n                           exact\n                        />\n                        <Route\n                           path='/shipping'\n                           component={ShippingScreen}\n                           exact\n                        />\n                        <Route path='/login' component={LoginScreen} exact />\n                        <Route\n                           path='/placeorder'\n                           component={PlaceOrderScreen}\n                           exact\n                        />\n                        <Route\n                           path='/payment'\n                           component={PaymentScreen}\n                           exact\n                        />\n                        <Route\n                           path='/page/:pageNumber'\n                           component={HomeScreen}\n                           exact\n                        />\n                        <Route\n                           path='/profile/address'\n                           component={UsersAddressListScreen}\n                           exact\n                        />\n                        <Route\n                           path='/search/:keyword/page/:pageNumber'\n                           component={HomeScreen}\n                           exact\n                        />\n                     </div>\n\n                     <Container>\n                        <Route\n                           path='/admin/productlist/:pageNumber'\n                           component={ProductListScreen}\n                           exact\n                        />\n                     </Container>\n                  </Fragment>\n                  {/* <Footer /> */}\n                  <Route path='/admin' component={AdminScreen} exact />\n\n                  <ProtectedRoute\n                     path='/admin/userlist'\n                     isAdmin={true}\n                     component={UserListScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/categorieslist'\n                     component={CategoriesListScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/subcategorieslist'\n                     component={SubCategoriesListScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/productlist'\n                     component={ProductListScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/product/create'\n                     component={ProductCreateScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/supplierlist'\n                     component={SupplierListScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/orderlist'\n                     component={OrderListScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/category/:id/edit'\n                     component={CategoryEditScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/subcategory/:id/edit'\n                     component={SubCategoryEditScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/order/:id/edit'\n                     component={OrderEditScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/product/:id/edit'\n                     component={ProductEditScreen}\n                     exact\n                  />\n\n                  <ProtectedRoute\n                     isAdmin={true}\n                     path='/admin/supplier/:id/edit'\n                     component={SupplierEditScreen}\n                     exact\n                  />\n\n                  <Route\n                     isAdmin={true}\n                     path='/admin/user/:id/edit'\n                     component={UserEditScreen}\n                     exact\n                  />\n               </ThemeProvider>\n            </div>\n         </Router>\n      </>\n   )\n}\n\nexport default App\n","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Header.js",["381","382","383","384","385","386","387","388","389","390"],"// import { Menu } from '@material-ui/core'\r\n// import { Link } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Button from '@material-ui/core/Button'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport { Menu } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport { black } from 'colors'\r\nimport firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Container, Image, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Route, useHistory } from 'react-router-dom'\r\nimport { listCategories } from '../actions/categoryAction'\r\nimport { logout } from '../actions/userActions'\r\nimport SearchBox from './SearchBox'\r\nimport { USER_DETAILS_RESET } from '../constants/userConstants'\r\nimport { listSubCategory } from '../actions/subCategoryAction'\r\n\r\nconst StyledMenu = withStyles({\r\n   paper: {\r\n      border: '1px solid #d3d4d5',\r\n   },\r\n})((props) => (\r\n   <Menu\r\n      elevation={0}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n         vertical: 'bottom',\r\n         horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n         vertical: 'top',\r\n         horizontal: 'center',\r\n      }}\r\n      {...props}\r\n   />\r\n))\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n   root: {\r\n      '&:focus': {\r\n         backgroundColor: theme.palette.primary.main,\r\n         '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n            color: theme.palette.common.white,\r\n         },\r\n      },\r\n   },\r\n}))(MenuItem)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      display: 'flex',\r\n   },\r\n   paper: {\r\n      marginRight: theme.spacing(1),\r\n      zIndex: '7 !important',\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(4),\r\n      height: theme.spacing(4),\r\n   },\r\n   link: {\r\n      color: black,\r\n      '&:hover': {\r\n         color: '#002984',\r\n         textDecoration: 'none',\r\n      },\r\n      '&:active': {\r\n         color: '#002984',\r\n         textDecoration: 'none',\r\n      },\r\n      '&:visited': {\r\n         color: '#002984',\r\n         textDecoration: 'none',\r\n      },\r\n   },\r\n}))\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n   badge: {\r\n      right: -3,\r\n      top: 13,\r\n      border: `2px solid ${theme.palette.background.paper}`,\r\n      padding: '0 4px',\r\n   },\r\n}))(Badge)\r\n\r\nfunction Header(props) {\r\n   const classes = useStyles()\r\n   const [open, setOpen] = React.useState(false)\r\n   const anchorRef = React.useRef(null)\r\n   const anchorReff = React.useRef(null)\r\n   const history = useHistory()\r\n   const [anchorEl, setAnchorEl] = useState(null)\r\n   // const [menu, setMenu] = useState(false)\r\n\r\n   const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget)\r\n   }\r\n\r\n   const menu = (\r\n      <Menu>\r\n         <Menu.Item key='0'>\r\n            <a to='https://www.antgroup.com'>1st menu item</a>\r\n         </Menu.Item>\r\n         <Menu.Item key='1'>\r\n            <a to='https://www.aliyun.com'>2nd menu item</a>\r\n         </Menu.Item>\r\n         <Menu.Divider />\r\n         <Menu.Item key='3'>3rd menu item</Menu.Item>\r\n      </Menu>\r\n   )\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { user } = userDetails\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category } = categoriesList\r\n\r\n   const subCategoryList = useSelector((state) => state.subCategoryList)\r\n   const { Sub } = subCategoryList\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const cart = useSelector((state) => state.cart)\r\n   const { cartItems } = cart\r\n\r\n   const logoutHandler = () => {\r\n      firebase.auth().signOut()\r\n      dispatch(logout())\r\n      dispatch({ type: USER_DETAILS_RESET })\r\n      history.push('/')\r\n   }\r\n\r\n   const handleToggle = () => {\r\n      setOpen((prevOpen) => !prevOpen)\r\n   }\r\n\r\n   const handleClose = (event) => {\r\n      if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n         return\r\n      }\r\n\r\n      setOpen(false)\r\n   }\r\n\r\n   function handleListKeyDown(event) {\r\n      if (event.key === 'Tab') {\r\n         event.preventDefault()\r\n         setOpen(false)\r\n      }\r\n   }\r\n\r\n   // return focus to the button when we transitioned from !open -> open\r\n   const prevOpen = React.useRef(open)\r\n   useEffect(() => {\r\n      if (prevOpen.current === true && open === false) {\r\n         anchorRef.current.focus()\r\n      }\r\n\r\n      dispatch(listCategories())\r\n      dispatch(listSubCategory())\r\n\r\n      prevOpen.current = open\r\n   }, [open, userInfo, user])\r\n\r\n   return (\r\n      <>\r\n         <Navbar\r\n            expand='lg'\r\n            collapseOnSelect\r\n            className='p-0 pl-5 pr-5 m-0 shadow'\r\n            style={{ backgroundColor: '#edfead', height: '4rem' }}\r\n         >\r\n            <Container fluid>\r\n               <LinkContainer to='/'>\r\n                  <Navbar.Brand className='text-uppercase font-weight-bold flex-grow-1 '>\r\n                     {/* <h2>ProShop</h2> */}\r\n                     <Image\r\n                        className='border-bottom border-danger'\r\n                        src='/logo/logo_white.png'\r\n                        style={{ width: '6rem', height: '5rem', zIndex: '0' }}\r\n                     />\r\n                  </Navbar.Brand>\r\n               </LinkContainer>\r\n               <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\r\n               <Route\r\n                  render={({ history }) => <SearchBox history={history} />}\r\n               />\r\n               <Navbar.Collapse id='basic-navbar-nav'>\r\n                  <Nav className='ml-auto' inline>\r\n                     <LinkContainer to='/cart'>\r\n                        <Nav.Link className='text-uppercase'>\r\n                           <IconButton aria-label='cart'>\r\n                              <StyledBadge\r\n                                 badgeContent={cartItems.length}\r\n                                 color='secondary'\r\n                              >\r\n                                 <ShoppingCartIcon />\r\n                              </StyledBadge>\r\n                           </IconButton>\r\n                        </Nav.Link>\r\n                     </LinkContainer>\r\n\r\n                     {userInfo ? (\r\n                        <>\r\n                           <Button\r\n                              ref={anchorRef}\r\n                              aria-controls={\r\n                                 open ? 'menu-list-grow' : undefined\r\n                              }\r\n                              aria-haspopup='true'\r\n                              onClick={handleToggle}\r\n                              className='ml-2  mt-1 mb-1 rounded-circle'\r\n                           >\r\n                              {userInfo ? (\r\n                                 <Image\r\n                                    className='rounded-circle border border-grey'\r\n                                    src={\r\n                                       userDetails.user\r\n                                          ? userDetails.user?.avatar?.url\r\n                                          : userDetails.user.avatar?.url\r\n                                    }\r\n                                    alt={\r\n                                       userDetails.user && userDetails.user.name\r\n                                    }\r\n                                    style={{\r\n                                       width: '2.5rem',\r\n                                       height: '2.5rem',\r\n                                    }}\r\n                                    fluid\r\n                                 />\r\n                              ) : (\r\n                                 <Avatar className={classes.orange}>\r\n                                    {userInfo.name.substring(0, 1)}\r\n                                 </Avatar>\r\n                              )}\r\n                           </Button>\r\n                           <Popper\r\n                              open={open}\r\n                              anchorEl={anchorRef.current}\r\n                              role={undefined}\r\n                              transition\r\n                              disablePortal\r\n                              style={{ zIndex: '2' }}\r\n                           >\r\n                              {({ TransitionProps, placement }) => (\r\n                                 <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{\r\n                                       transformOrigin:\r\n                                          placement === 'bottom'\r\n                                             ? 'center top'\r\n                                             : 'center bottom',\r\n                                    }}\r\n                                 >\r\n                                    <Paper>\r\n                                       <ClickAwayListener\r\n                                          onClickAway={handleClose}\r\n                                       >\r\n                                          <MenuList\r\n                                             autoFocusItem={open}\r\n                                             id='menu-list-grow'\r\n                                             onKeyDown={handleListKeyDown}\r\n                                          >\r\n                                             {userInfo && userInfo.isAdmin && (\r\n                                                <MenuItem onClick={handleClose}>\r\n                                                   <Link\r\n                                                      to='/admin'\r\n                                                      className={classes.link}\r\n                                                      style={{\r\n                                                         color: 'black',\r\n                                                         fontSize: '0.8rem',\r\n                                                         letterSpacing:\r\n                                                            '0.05rem',\r\n                                                      }}\r\n                                                   >\r\n                                                      <Image\r\n                                                         src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                                         className='pr-1'\r\n                                                      />\r\n                                                      <strong className='text-capitalize'>\r\n                                                         Quản lí\r\n                                                      </strong>\r\n                                                   </Link>\r\n                                                </MenuItem>\r\n                                             )}\r\n                                             <MenuItem onClick={handleClose}>\r\n                                                <Link\r\n                                                   to='/profile'\r\n                                                   className={classes.link}\r\n                                                   style={{\r\n                                                      color: 'black',\r\n                                                      fontSize: '0.8rem',\r\n                                                      letterSpacing: '0.05rem',\r\n                                                   }}\r\n                                                >\r\n                                                   <Image\r\n                                                      src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                                      className='pr-1'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Thông tin cá nhân\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n\r\n                                             <MenuItem onClick={handleClose}>\r\n                                                <Link\r\n                                                   to='/myorders'\r\n                                                   className={classes.link}\r\n                                                   style={{\r\n                                                      color: 'black',\r\n                                                      fontSize: '0.8rem',\r\n                                                      letterSpacing: '0.05rem',\r\n                                                   }}\r\n                                                >\r\n                                                   <Image\r\n                                                      src='https://img.icons8.com/fluent/24/000000/receipt-dollar.png'\r\n                                                      className='pr-1'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đơn hàng của tôi\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n\r\n                                             <MenuItem\r\n                                                onClick={logoutHandler}\r\n                                                style={{\r\n                                                   color: 'black',\r\n                                                   fontSize: '0.8rem',\r\n                                                   letterSpacing: '0.05rem',\r\n                                                }}\r\n                                             >\r\n                                                <Link\r\n                                                   to='/'\r\n                                                   className={classes.link}\r\n                                                   style={{\r\n                                                      color: 'black',\r\n                                                      fontSize: '0.8rem',\r\n                                                      letterSpacing: '0.05rem',\r\n                                                   }}\r\n                                                >\r\n                                                   <Image\r\n                                                      className='pr-1'\r\n                                                      src='https://img.icons8.com/fluent/24/000000/exit.png'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đăng Xuất\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n                                          </MenuList>\r\n                                       </ClickAwayListener>\r\n                                    </Paper>\r\n                                 </Grow>\r\n                              )}\r\n                           </Popper>\r\n                        </>\r\n                     ) : (\r\n                        <>\r\n                           <Button\r\n                              ref={anchorRef}\r\n                              aria-controls={\r\n                                 open ? 'menu-list-grow' : undefined\r\n                              }\r\n                              aria-haspopup='true'\r\n                              onClick={handleToggle}\r\n                              className='ml-2 mt-1 mb-1 rounded-circle'\r\n                           >\r\n                              <Image src='https://img.icons8.com/fluent/30/000000/circled-menu.png' />\r\n                           </Button>\r\n                           <Popper\r\n                              open={open}\r\n                              anchorEl={anchorRef.current}\r\n                              role={undefined}\r\n                              transition\r\n                              disablePortal\r\n                              style={{ zIndex: '2' }}\r\n                           >\r\n                              {({ TransitionProps, placement }) => (\r\n                                 <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{\r\n                                       transformOrigin:\r\n                                          placement === 'bottom'\r\n                                             ? 'center top'\r\n                                             : 'center bottom',\r\n                                    }}\r\n                                 >\r\n                                    <Paper>\r\n                                       <ClickAwayListener\r\n                                          onClickAway={handleClose}\r\n                                       >\r\n                                          <MenuList\r\n                                             autoFocusItem={open}\r\n                                             id='menu-list-grow'\r\n                                             onKeyDown={handleListKeyDown}\r\n                                          >\r\n                                             <MenuItem\r\n                                                onClick={handleClose}\r\n                                                style={{\r\n                                                   color: 'black',\r\n                                                   fontSize: '0.8rem',\r\n                                                   letterSpacing: '0.05rem',\r\n                                                }}\r\n                                             >\r\n                                                <Link\r\n                                                   to='/login'\r\n                                                   className={classes.link}\r\n                                                >\r\n                                                   <Image\r\n                                                      className='pr-1'\r\n                                                      src='https://img.icons8.com/fluent/24/000000/key.png'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đăng Nhập\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n                                             <MenuItem\r\n                                                onClick={handleClose}\r\n                                                style={{\r\n                                                   color: 'black',\r\n                                                   fontSize: '0.8rem',\r\n                                                   letterSpacing: '0.05rem',\r\n                                                }}\r\n                                             >\r\n                                                <Link\r\n                                                   to='/register'\r\n                                                   className={classes.link}\r\n                                                >\r\n                                                   <Image\r\n                                                      className='pr-1'\r\n                                                      src='https://img.icons8.com/fluent/24/000000/new-contact.png'\r\n                                                   />\r\n                                                   <strong className='text-capitalize'>\r\n                                                      Đăng Kí\r\n                                                   </strong>\r\n                                                </Link>\r\n                                             </MenuItem>\r\n                                          </MenuList>\r\n                                       </ClickAwayListener>\r\n                                    </Paper>\r\n                                 </Grow>\r\n                              )}\r\n                           </Popper>\r\n                        </>\r\n                     )}\r\n                  </Nav>\r\n               </Navbar.Collapse>\r\n            </Container>\r\n         </Navbar>\r\n         <Navbar\r\n            expand='lg'\r\n            collapseOnSelect\r\n            className='p-0 pl-5 pr-5'\r\n            style={{ backgroundColor: '#edfead' }}\r\n            variant='tabs'\r\n         >\r\n            {/* <Row>\r\n          <Col md={12} className='pl-5'> */}\r\n            {/* <div className='d-flex justify-content-around'>\r\n            {category &&\r\n              category.map((cat) => (\r\n                <div className='container_link_color'>\r\n                  <Dropdown overlay={menu}>\r\n                    <Link\r\n                      to='/product'\r\n                      className='ant-dropdown-link text-decoration-none link_color'\r\n                      onClick={(e) => e.preventDefault()}\r\n                      style={{ fontSize: '1rem' }}\r\n                    >\r\n                      {cat.name}\r\n                      <DownOutlined\r\n                        className='pl-1'\r\n                        style={{ fontSize: '0.5rem' }}\r\n                      />\r\n                    </Link>\r\n                  </Dropdown>\r\n                </div>\r\n              ))}\r\n          </div> */}\r\n            <div class='collapse navbar-collapse pl-2 pr-2' id='main_nav'>\r\n               <ul className='navbar-nav'>\r\n                  <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n                     <Link className='nav-link' to='/'>\r\n                        Trang chủ\r\n                     </Link>\r\n                  </li>\r\n\r\n                  <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n                     <Link className='nav-link' to='/'>\r\n                        Giới thiệu\r\n                     </Link>\r\n                  </li>\r\n                  <li\r\n                     className='nav-item dropdown has-megamenu'\r\n                     style={{ fontSize: '0.85rem' }}\r\n                  >\r\n                     <Link\r\n                        className='nav-link dropdown-toggle'\r\n                        to='#'\r\n                        data-bs-toggle='dropdown'\r\n                     >\r\n                        Danh mục\r\n                     </Link>\r\n                     <div\r\n                        className='dropdown-menu megamenu border border-secondary shadow'\r\n                        style={{ borderRadius: '2rem' }}\r\n                        role='menu'\r\n                     >\r\n                        <div className='row g-6' style={{ width: '30rem' }}>\r\n                           {category &&\r\n                              category.map((cat) => (\r\n                                 <div className='col-lg-4 col-8 text-center pt-2 pb-2'>\r\n                                    <div className='col-megamenu container_link_color'>\r\n                                       <LinkContainer\r\n                                          to={`/product/${cat._id}/category`}\r\n                                          className='link_color'\r\n                                       >\r\n                                          <h6\r\n                                             className='title'\r\n                                             style={{ fontSize: '0.85rem' }}\r\n                                          >\r\n                                             {cat.name}\r\n                                          </h6>\r\n                                       </LinkContainer>\r\n                                       <ul className='list-unstyled'>\r\n                                          {Sub &&\r\n                                             Sub?.map((s) => (\r\n                                                <li>\r\n                                                   <Link\r\n                                                      to={`/product/${s._id}/category`}\r\n                                                   >\r\n                                                      {s.category === cat._id &&\r\n                                                         s.name}\r\n                                                   </Link>\r\n                                                </li>\r\n                                             ))}\r\n                                       </ul>\r\n                                    </div>\r\n                                 </div>\r\n                              ))}\r\n                        </div>\r\n                     </div>\r\n                  </li>\r\n\r\n                  <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n                     <Link className='nav-link' to='/'>\r\n                        Liên hệ\r\n                     </Link>\r\n                  </li>\r\n               </ul>\r\n            </div>\r\n            {/* </Col>\r\n        </Row> */}\r\n         </Navbar>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Header\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js",["391","392","393"],"import { Link } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Col, Container, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport { black } from 'colors'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nFooter.propTypes = {}\r\n\r\nfunction Footer(props) {\r\n  const classes = useStyles()\r\n  return (\r\n    <footer style={{ backgroundColor: '#edfead' }}>\r\n      <div className='pl-5 pb-4  pr-5'>\r\n        <Row>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Hỗ trợ</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức giao hàng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức thanh toán\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách đổi trả\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách bảo hành\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Thông tin</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Tuyển dụng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Góp ý\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giải đáp thắc mắc\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={3}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Về Natural Food</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giới thiệu\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Liên hệ\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={5}>\r\n            <ListGroup>\r\n              <div className='d-flex justify-content-center'>\r\n                <Image\r\n                  src='/logo/logo_white.png'\r\n                  style={{ width: '9rem', height: '8rem', zIndex: '0' }}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex justify-content-evenly'>\r\n                <Link\r\n                  href='#'\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/gmail-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='#'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/facebook-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='#'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/twitter.png' />\r\n                </Link>\r\n              </div>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Địa chỉ: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      22 Lý Chiêu Hoàng, Phường 10, Quận 6, TP HCM\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Email: </strong>\r\n                    <p className='mb-0 pl-1'>tuvan_online@naturalfood.com.vn</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Số điện thoại: </strong>\r\n                    <p className='mb-0 pl-1'>(028) 38 753 443</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Hotline: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      19002126 ( cước phí: 3000đ/phút )\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <p className='mb-0'>\r\n                      Thời gian tư vấn: Từ 07h30 đến 12h15, 13h15 đến 21h30 các\r\n                      ngày trong tuần ( Trừ ngày Lễ, Tết)\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js",["394"],"import React, { useEffect } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n   listProducts,\r\n   listTopRateProducts,\r\n   listTopSoldProducts,\r\n} from '../actions/productActions'\r\nimport Banner from '../components/Banner'\r\nimport Footer from '../components/Footer'\r\nimport Header from '../components/Header'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Meta from '../components/Meta'\r\nimport Paginate from '../components/Paginate'\r\nimport Product from '../components/Product'\r\n\r\nfunction HomeScreen({ match, history }) {\r\n   const keyword = match.params.keyword\r\n   const pageNumber = match.params.pageNumber || 1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const productList = useSelector((state) => state.productList)\r\n   const { loading, error, products, pages, page } = productList\r\n\r\n   const productTopRated = useSelector((state) => state.productTopRated)\r\n   const {\r\n      loading: loadingRate,\r\n      error: errorRate,\r\n      products: productsRate,\r\n   } = productTopRated\r\n\r\n   const productTopSold = useSelector((state) => state.productTopSold)\r\n   const {\r\n      loading: loadingSold,\r\n      error: errorSold,\r\n      products: productsSold,\r\n   } = productTopSold\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { user } = userDetails\r\n\r\n   useEffect(() => {\r\n      // dispatch(getUserDetails(userInfo._id))\r\n      dispatch(listProducts(keyword, pageNumber))\r\n      dispatch(listTopRateProducts())\r\n      dispatch(listTopSoldProducts())\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, keyword, pageNumber, userInfo])\r\n\r\n   return (\r\n      <>\r\n         <Meta />\r\n         <Header />\r\n         {/* {!keyword && (\r\n        <ProductCarousel className='m-0' style={{ width: '100vh' }} />\r\n      )} */}\r\n         {!keyword && <Banner />}\r\n         <div>\r\n            <h3\r\n               className='ml-5 mt-4 mb-0'\r\n               style={{\r\n                  borderBottom: '0.15rem solid #a20a0a',\r\n                  width: '13rem',\r\n               }}\r\n            >\r\n               Top bán chạy\r\n            </h3>\r\n            {loadingSold ? (\r\n               <Loader />\r\n            ) : errorSold ? (\r\n               <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n               <>\r\n                  <Row\r\n                     className='ml-5 mr-5'\r\n                     style={{ borderBottom: '0.1rem solid #ddd' }}\r\n                  >\r\n                     {productsSold?.map(\r\n                        (\r\n                           product // phai co ? de kiem tra product === null\r\n                        ) => (\r\n                           <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                              <Product product={product} />\r\n                           </Col>\r\n                        )\r\n                     )}\r\n                  </Row>\r\n               </>\r\n            )}\r\n         </div>\r\n\r\n         <div>\r\n            <h3\r\n               className='ml-5 mt-4 mb-0'\r\n               style={{\r\n                  borderBottom: '0.15rem solid #a20a0a',\r\n                  width: '12.8rem',\r\n               }}\r\n            >\r\n               Top đánh giá\r\n            </h3>\r\n            {loadingRate ? (\r\n               <Loader />\r\n            ) : errorRate ? (\r\n               <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n               <>\r\n                  <Row\r\n                     className='ml-5 mr-5'\r\n                     style={{ borderBottom: '0.1rem solid #ddd' }}\r\n                  >\r\n                     {productsRate?.map(\r\n                        (\r\n                           product // phai co ? de kiem tra product === null\r\n                        ) => (\r\n                           <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                              <Product product={product} />\r\n                           </Col>\r\n                        )\r\n                     )}\r\n                  </Row>\r\n               </>\r\n            )}\r\n         </div>\r\n\r\n         <div>\r\n            <h3\r\n               className='ml-5 mt-4 mb-0'\r\n               style={{ borderBottom: '0.15rem solid #a20a0a', width: '16rem' }}\r\n            >\r\n               Tất cả sản phẩm\r\n            </h3>\r\n            {loading ? (\r\n               <Loader />\r\n            ) : error ? (\r\n               <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n               <>\r\n                  <Row className='ml-5 mr-5'>\r\n                     {products?.map(\r\n                        (\r\n                           product // phai co ? de kiem tra product === null\r\n                        ) => (\r\n                           <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                              <Product product={product} />\r\n                           </Col>\r\n                        )\r\n                     )}\r\n                  </Row>\r\n                  <div className='d-flex justify-content-center'>\r\n                     <Paginate\r\n                        pages={pages}\r\n                        page={page}\r\n                        keyword={keyword ? keyword : ''}\r\n                     />\r\n                  </div>\r\n               </>\r\n            )}\r\n         </div>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default HomeScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js",["395","396"],"import Avatar from '@material-ui/core/Avatar'\r\nimport Buttonn from '@material-ui/core/Button'\r\nimport ButtonGroupp from '@material-ui/core/ButtonGroup'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport { Carousel, Image, Skeleton } from 'antd'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { GlassMagnifier } from 'react-image-magnifiers'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport {\r\n   createProductReview,\r\n   listProductDetails,\r\n} from '../actions/productActions.js'\r\nimport ActiveRating from '../components/ActiveRating'\r\nimport Announcement from '../components/Announcement.js'\r\nimport ButtonComponent from '../components/ButtonComponent'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Meta from '../components/Meta'\r\nimport ProgressLine from '../components/ProgressLine.js'\r\nimport Rating from '../components/Rating'\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants.js'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      '& .MuiTextField-root': {\r\n         margin: theme.spacing(1),\r\n      },\r\n\r\n      '& .MuiInputBase-input': {\r\n         padding: theme.spacing(1),\r\n      },\r\n\r\n      '& .MuiFilledInput-input': {\r\n         padding: theme.spacing(1),\r\n      },\r\n\r\n      '& .MuiFilledInput-inputMarginDense': {\r\n         padding: theme.spacing(1),\r\n         textAlign: 'center',\r\n      },\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(4),\r\n      height: theme.spacing(4),\r\n      textAlign: 'center',\r\n   },\r\n   form: {\r\n      width: 1150,\r\n   },\r\n}))\r\n\r\nfunction formatPrice(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction ProductScreen({ history, match }) {\r\n   const classes = useStyles()\r\n   const [qty, setQty] = useState(1)\r\n   const [rating, setRating] = useState(0)\r\n   const [comment, setComment] = useState('')\r\n   const [hover, setHover] = React.useState(-1)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const productDetails = useSelector((state) => state.productDetails)\r\n   const { loading, error, product } = productDetails\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const productReviewCreate = useSelector((state) => state.productReviewCreate)\r\n   const {\r\n      loading: loadingProductReview,\r\n      success: successProductReview,\r\n      error: errorProductReview,\r\n   } = productReviewCreate\r\n\r\n   var settings = {\r\n      className: 'slider variable-width',\r\n      dots: true,\r\n      infinite: true,\r\n      speed: 700,\r\n      slidesToShow: 1,\r\n      slidesToScroll: 1,\r\n      adaptiveHeight: true,\r\n      autoplaySpeed: 2500,\r\n      cssEase: 'linear',\r\n      autoplay: true,\r\n   }\r\n\r\n   function onChange(a, b, c) {\r\n      console.log(a, b, c)\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successProductReview) {\r\n         setRating(0)\r\n         setComment(' ')\r\n         dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n      }\r\n\r\n      dispatch(listProductDetails(match.params.id))\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, match, successProductReview])\r\n\r\n   const submitHandle = (e) => {\r\n      e.preventDefault()\r\n      dispatch(\r\n         createProductReview(match.params.id, {\r\n            rating,\r\n            comment,\r\n         })\r\n      )\r\n      toast.success(\r\n         <div>\r\n            <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n            Đã đánh giá thành công\r\n         </div>,\r\n         {\r\n            className: 'Toastify__toast--success',\r\n            position: 'top-right',\r\n            autoClose: 2500,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n         }\r\n      )\r\n   }\r\n\r\n   const addToCartHandler = () => {\r\n      if (qty <= product.countInStock && qty > 0) {\r\n         history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n      } else if (qty <= 0) {\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' />\r\n               Phải có ít nhất 1 sản phẩm\r\n            </div>,\r\n            {\r\n               className: 'Toastify__toast--success',\r\n               position: 'top-right',\r\n               autoClose: 3000,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n      } else {\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' />\r\n               {`Số lượng đặt hàng không được vượt quá số lượng hàng hoá trong kho (${product.countInStock} sản phẩm)`}\r\n            </div>,\r\n            {\r\n               className: 'Toastify__toast--success',\r\n               position: 'top-right',\r\n               autoClose: 3500,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n         {/* {successProductReview && <MessageSuccess variant='Success' />} */}\r\n         <Header />\r\n         <div className='ml-4 mr-4 mb-4'>\r\n            <Link className='btn btn-light my-3 rounded-pill' to='/'>\r\n               <i className='fas fa-arrow-left pr-2'></i>\r\n               Quay lại\r\n            </Link>\r\n            {loading ? (\r\n               <Loader />\r\n            ) : error ? (\r\n               <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n               <>\r\n                  <Meta title={product.name} />\r\n                  <Row className='container-productGreen mb-2 rounded shadow card_color'>\r\n                     <Col\r\n                        md={7}\r\n                        className='p-3 img-productGreen mt-5 align-items-center'\r\n                     >\r\n                        <Row>\r\n                           <Col md={10} className='mt-3'>\r\n                              <Carousel vertical fade dots>\r\n                                 {product.images &&\r\n                                    product.images.map((img) => (\r\n                                       <>\r\n                                          <GlassMagnifier\r\n                                             style={{\r\n                                                objectFit: 'cover',\r\n                                                zIndex: '5',\r\n                                                borderRadius: '2rem',\r\n                                                border: '0.5rem solid #ddd',\r\n                                             }}\r\n                                             imageSrc={img && img?.url}\r\n                                             imageAlt='Example'\r\n                                             largeImageSrc={\r\n                                                product.images && img?.url\r\n                                             } // Optional\r\n                                          />\r\n                                       </>\r\n                                    ))}\r\n                              </Carousel>\r\n                           </Col>\r\n                           <Col md={2} className='mt-5'>\r\n                              <Image.PreviewGroup>\r\n                                 {product.images &&\r\n                                    product.images.map((img) => (\r\n                                       <div className='d-flex p-1'>\r\n                                          <Image\r\n                                             src={img.url}\r\n                                             style={{\r\n                                                height: '5rem',\r\n                                                width: '5rem',\r\n                                             }}\r\n                                             className='rounded-circle  shadow'\r\n                                          />\r\n                                       </div>\r\n                                    ))}\r\n                              </Image.PreviewGroup>\r\n                           </Col>\r\n                        </Row>\r\n                     </Col>\r\n\r\n                     <Col md={5} className='text-left p-1'>\r\n                        <Row className='pl-4 pr-2'>\r\n                           <ListGroup variant='flush' className='pr-3'>\r\n                              <ListGroup.Item className='border-0 pb-0'>\r\n                                 <strong>\r\n                                    <h3 className='border-0 pb-0'>\r\n                                       {product.name}\r\n                                    </h3>\r\n                                 </strong>\r\n                              </ListGroup.Item>\r\n\r\n                              <ListGroup.Item className='border-0 pb-0'>\r\n                                 <Rating\r\n                                    value={product.rating}\r\n                                    text={`(${product.numReviews} đánh giá)`}\r\n                                 />\r\n                              </ListGroup.Item>\r\n\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <p className='mb-0'>{product.description}</p>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <Row>\r\n                                    <Col\r\n                                       md={6}\r\n                                       className='d-flex align-items-center'\r\n                                    >\r\n                                       <h6 className='mb-0 pr-2'>Khối lượng</h6>\r\n                                       <p className='mb-0'>{product.mass}</p>\r\n                                    </Col>\r\n                                 </Row>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify'>\r\n                                 <h6 className='mb-0'>Hướng dẫn sử dụng</h6>\r\n                                 <p className='mb-0'>{product.hdsd}</p>\r\n                              </ListGroup.Item>\r\n                              <ListGroup.Item className='text-justify border-bottom mb-2'>\r\n                                 <h6 className='mb-0'>Bảo quản</h6>\r\n                                 <p className='mb-0'>{product.hdbq}</p>\r\n                              </ListGroup.Item>\r\n                           </ListGroup>\r\n\r\n                           <ListGroup\r\n                              variant='flush'\r\n                              className='border-0 pt-0 mb-4 '\r\n                              style={{ zIndex: '1' }}\r\n                           >\r\n                              <div className='group-items pt-2 pb-2 ml-4 mr-4 rounded shadow'>\r\n                                 <ListGroup.Item className='border-0 pt-0 pb-0 mb-0 pr-0 group-items'>\r\n                                    <h2 className='text-lowercase'>\r\n                                       {product.price &&\r\n                                          formatPrice(product.price, 'đ')}\r\n                                    </h2>\r\n                                 </ListGroup.Item>\r\n\r\n                                 <ListGroup.Item className='border-0 group-items'>\r\n                                    {product.countInStock > 0 ? (\r\n                                       <div>\r\n                                          <Row>\r\n                                             <Col md={5}>\r\n                                                <p className='mb-0'>\r\n                                                   Trạng thái:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={7}>\r\n                                                <p className='mb-0 fw-bold ml-2 text-success'>\r\n                                                   {product?.countInStock} sản\r\n                                                   phẩm\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                       </div>\r\n                                    ) : (\r\n                                       <div className='d-flex justify-content-start align-items-center'>\r\n                                          <p className='mb-0'>Trạng thái:</p>\r\n                                          <Image src='https://img.icons8.com/fluent/35/000000/close-sign.png' />\r\n                                          <p className='mb-0 fw-bold ml-2 danger'>\r\n                                             Hết hàng\r\n                                          </p>\r\n                                       </div>\r\n                                    )}\r\n                                 </ListGroup.Item>\r\n\r\n                                 {product.countInStock > 0 && (\r\n                                    <ListGroup.Item className='border-0 pt-0 pb-0 group-items '>\r\n                                       <Row>\r\n                                          <Col\r\n                                             md={4}\r\n                                             className='d-flex align-items-center'\r\n                                          >\r\n                                             <p className='mb-0'>Số lượng:</p>\r\n                                          </Col>\r\n                                          <Col md={7} className='d-flex'>\r\n                                             <ButtonGroupp\r\n                                                size='small'\r\n                                                aria-label='small '\r\n                                             >\r\n                                                <Buttonn\r\n                                                   aria-label='reduce'\r\n                                                   size='small'\r\n                                                   color='primary'\r\n                                                   onClick={() => {\r\n                                                      setQty(\r\n                                                         Math.max(qty - 1, 1)\r\n                                                      )\r\n                                                   }}\r\n                                                   variant='contained'\r\n                                                >\r\n                                                   <RemoveIcon fontSize='small' />\r\n                                                </Buttonn>\r\n                                                {/* {qty === 0 ? (\r\n                                <Buttonn variant='contained'>1</Buttonn>\r\n                              ) : (\r\n                                <Buttonn variant='contained'>{qty}</Buttonn>\r\n                              )} */}\r\n                                                <div>\r\n                                                   <TextField\r\n                                                      className={classes.root}\r\n                                                      id='filled-size-small'\r\n                                                      value={qty}\r\n                                                      variant='filled'\r\n                                                      size='small'\r\n                                                      onChange={(e) =>\r\n                                                         setQty(e.target.value)\r\n                                                      }\r\n                                                   />\r\n                                                </div>\r\n                                                <Buttonn\r\n                                                   aria-label='increase'\r\n                                                   size='small'\r\n                                                   onClick={() => {\r\n                                                      setQty(Number(qty) + 1)\r\n                                                   }}\r\n                                                   variant='contained'\r\n                                                   color='primary'\r\n                                                >\r\n                                                   <AddIcon fontSize='small' />\r\n                                                </Buttonn>\r\n                                             </ButtonGroupp>\r\n                                          </Col>\r\n                                       </Row>\r\n                                    </ListGroup.Item>\r\n                                 )}\r\n                              </div>\r\n\r\n                              <ListGroup.Item className='ml-4 pl-0 pr-0 pb-0 mr-4'>\r\n                                 <Button\r\n                                    onClick={addToCartHandler}\r\n                                    className='btn-block btn_color rounded-pill'\r\n                                    type='button'\r\n                                    disabled={product.countInStock === 0}\r\n                                    style={{ fontSize: '1em', width: '20rem' }}\r\n                                 >\r\n                                    <AddShoppingCartIcon />\r\n                                    <strong className='pl-1 '>\r\n                                       Thêm vào giỏ hàng\r\n                                    </strong>\r\n                                    <div className='wave'></div>\r\n                                 </Button>\r\n                              </ListGroup.Item>\r\n                           </ListGroup>\r\n                        </Row>\r\n                     </Col>\r\n                  </Row>\r\n\r\n                  {loading ? (\r\n                     <Loader />\r\n                  ) : (\r\n                     <Row>\r\n                        <Col className='mt-3 p-3 pl-5 pr-5 background-light rounded shadow card_color'>\r\n                           <h5 className='text-uppercase'>Đánh giá sản phẩm</h5>\r\n                           {product.reviews.length === 0 && (\r\n                              <Row>\r\n                                 <Col md={4}>\r\n                                    <Announcement variant='warning'>\r\n                                       Không có đánh giá{' '}\r\n                                       <Image src='https://img.icons8.com/fluent/24/000000/box-important.png' />\r\n                                    </Announcement>\r\n                                 </Col>\r\n                              </Row>\r\n                           )}\r\n                           <div\r\n                              className=' rounded text-center circle-rate pt-2 pb-1 ml-3 mb-2'\r\n                              style={{ width: '14rem' }}\r\n                           >\r\n                              <h5 className=''>Điểm</h5>\r\n                              <h4 className='mb-0'>\r\n                                 {product.rating + ' trên 5'}\r\n                              </h4>\r\n                           </div>\r\n\r\n                           <ListGroup variant='flush'>\r\n                              {loadingProductReview ? (\r\n                                 <>\r\n                                    {/* <MessageSuccess variant='Success' /> */}\r\n                                    <Skeleton avatar paragraph={{ rows: 1 }} />\r\n                                 </>\r\n                              ) : (\r\n                                 product.reviews.map((review) => (\r\n                                    <ListGroup.Item key={review._id}>\r\n                                       <div className='d-flex justify-content-start'>\r\n                                          {/* <Row>\r\n                        <Col md={1} className=''> */}\r\n                                          <div className='pr-2'>\r\n                                             {review ? (\r\n                                                <Image\r\n                                                   className='rounded-circle'\r\n                                                   src={user.avatar?.url}\r\n                                                   style={{\r\n                                                      height: '2rem',\r\n                                                      width: '2rem',\r\n                                                   }}\r\n                                                />\r\n                                             ) : (\r\n                                                <Avatar\r\n                                                   className={classes.orange}\r\n                                                >\r\n                                                   {review.name.substring(0, 1)}\r\n                                                </Avatar>\r\n                                             )}\r\n                                          </div>\r\n                                          {/* </Col>\r\n                        <Col> */}\r\n                                          <div>\r\n                                             <div className='d-flex'>\r\n                                                <h5 className='mb-0 text-capitalize'>\r\n                                                   {review.name}\r\n                                                </h5>\r\n                                                <span className='pl-2'>\r\n                                                   <Rating\r\n                                                      value={review.rating}\r\n                                                   />\r\n                                                </span>\r\n                                             </div>\r\n                                             <div\r\n                                                style={{\r\n                                                   fontWeight: '200',\r\n                                                   color: 'gray',\r\n                                                   fontSize: '0.65rem',\r\n                                                }}\r\n                                             >\r\n                                                <p className='mb-1'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         review.createdAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - MM/dd/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </p>\r\n                                             </div>\r\n                                          </div>\r\n                                          {/* </Col>\r\n                      </Row> */}\r\n                                       </div>\r\n                                       <strong\r\n                                          className='ml-3'\r\n                                          style={{\r\n                                             fontWeight: '500',\r\n                                             color: 'black',\r\n                                          }}\r\n                                       >\r\n                                          {review.comment}\r\n                                       </strong>\r\n                                    </ListGroup.Item>\r\n                                 ))\r\n                              )}\r\n\r\n                              <ListGroup.Item shadow>\r\n                                 {loadingProductReview && <ProgressLine />}\r\n                                 <h5>\r\n                                    ĐÁNH GIÁ VÀ BÌNH LUẬN{' '}\r\n                                    <Image src='https://img.icons8.com/fluent/24/000000/favorite-chat.png' />\r\n                                 </h5>\r\n\r\n                                 {errorProductReview && (\r\n                                    <Message>{errorProductReview}</Message>\r\n                                 )}\r\n                                 {userInfo ? (\r\n                                    <Form onSubmit={submitHandle}>\r\n                                       <Form.Group controlId='rating'>\r\n                                          <Form.Label\r\n                                             as='h5'\r\n                                             className='text-capitalize'\r\n                                          >\r\n                                             Đánh giá\r\n                                          </Form.Label>\r\n                                          <ActiveRating\r\n                                             value={rating}\r\n                                             hover={hover}\r\n                                             setValue={setRating}\r\n                                             setHover={setHover}\r\n                                             size='large'\r\n                                          />\r\n                                       </Form.Group>\r\n\r\n                                       <Form.Group\r\n                                          controlId='comment'\r\n                                          className={classes.root}\r\n                                       >\r\n                                          <TextField\r\n                                             className={classes.form}\r\n                                             id='outlined-multiline-static'\r\n                                             label='Bình luận'\r\n                                             multiline\r\n                                             rows={2}\r\n                                             value={comment}\r\n                                             // defaultValue='Default Value'\r\n                                             // variant='outlined'\r\n                                             onChange={(e) =>\r\n                                                setComment(e.target.value)\r\n                                             }\r\n                                          />\r\n                                       </Form.Group>\r\n                                       <ButtonComponent\r\n                                          type='submit'\r\n                                          color='secondary'\r\n                                          size='large'\r\n                                          value='GỬI'\r\n                                          disabled={loadingProductReview}\r\n                                          endIcon={<SendIcon />}\r\n                                       ></ButtonComponent>\r\n                                       <ToastContainer />\r\n                                    </Form>\r\n                                 ) : (\r\n                                    <Announcement\r\n                                       variant='dark'\r\n                                       style={{ color: '#82FF9E' }}\r\n                                    >\r\n                                       Vui lòng{' '}\r\n                                       <Link\r\n                                          to='/login'\r\n                                          style={{\r\n                                             color: '#5FAD41',\r\n                                             textDecoration: 'none',\r\n                                             fontWeight: '700',\r\n                                          }}\r\n                                       >\r\n                                          Đăng nhập\r\n                                       </Link>{' '}\r\n                                       để đánh giá\r\n                                    </Announcement>\r\n                                 )}\r\n                              </ListGroup.Item>\r\n                           </ListGroup>\r\n                        </Col>\r\n                     </Row>\r\n                  )}\r\n               </>\r\n            )}\r\n         </div>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\store.js",["397"],"import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\nimport { cartReducer } from './reducers/cartReducers.js'\r\nimport {\r\n   categoriesListReducer,\r\n   categoriesListReducerAdm,\r\n   categoryCreateReducer,\r\n   categoryDeleteReducer,\r\n   categoryDetailsReducer,\r\n   categoryUpdateReducer,\r\n} from './reducers/categoriesReducers.js'\r\nimport {\r\n   orderConsultReducer,\r\n   orderCreateReducer,\r\n   orderDeleteReducer,\r\n   orderDeliverReducer,\r\n   orderDetailsReducer,\r\n   orderListMyReducer,\r\n   orderListReducer,\r\n   orderPayReducer,\r\n   orderUpdateByMemberReducer,\r\n   orderUpdateReducer,\r\n} from './reducers/orderReducers.js'\r\nimport {\r\n   productCreateReducer,\r\n   productDeleteReducer,\r\n   productDetailsReducer,\r\n   productFilterPriceReducer,\r\n   productFilterReducer,\r\n   productListAllReducer,\r\n   productListReducer,\r\n   productOfCategoryReducer,\r\n   productOfSubCategoryReducer,\r\n   productReviewCreateReducer,\r\n   productSubFilterReducer,\r\n   productTopRatedReducer,\r\n   productTopSoldReducer,\r\n   productUpdateReducer,\r\n} from './reducers/productReducers'\r\nimport {\r\n   subCategoryCreateReducer,\r\n   subCategoryDeleteReducer,\r\n   subCategoryDetailsReducer,\r\n   subCategoryListReducer,\r\n   subCategoryListReducerAdm,\r\n   subCategoryUpdateReducer,\r\n} from './reducers/subCategoryReducers.js'\r\nimport {\r\n   supplierCreateReducer,\r\n   supplierDeleteReducer,\r\n   supplierDetailsReducer,\r\n   supplierListReducer,\r\n   supplierListReducerAdm,\r\n   supplierUpdateReducer,\r\n} from './reducers/supplierReducers'\r\nimport {\r\n   authReducer,\r\n   userCreateAddressReducer,\r\n   userDeleteAddressReducer,\r\n   userDeleteReducer,\r\n   userDetailsReducer,\r\n   userListReducer,\r\n   userLoginReducer,\r\n   userNotificationReducer,\r\n   userReducer,\r\n   userRegisterReducer,\r\n   userSelectRoleReducer,\r\n   userUpdateAddressReducer,\r\n   userUpdateProfileReducer,\r\n   userUpdateReducer,\r\n} from './reducers/userReducers'\r\n\r\nconst reducer = combineReducers({\r\n   productList: productListReducer,\r\n   productDetails: productDetailsReducer,\r\n   productDelete: productDeleteReducer,\r\n   productCreate: productCreateReducer,\r\n   productUpdate: productUpdateReducer,\r\n   productReviewCreate: productReviewCreateReducer,\r\n   productTopRated: productTopRatedReducer,\r\n   productOfCategory: productOfCategoryReducer,\r\n   productFilter: productFilterReducer,\r\n   productFilterPrice: productFilterPriceReducer,\r\n   productListAll: productListAllReducer,\r\n   productTopSold: productTopSoldReducer,\r\n   productOfSubCategory: productOfSubCategoryReducer,\r\n   productSubFilter: productSubFilterReducer,\r\n\r\n   cart: cartReducer,\r\n\r\n   userLogin: userLoginReducer,\r\n   userRegister: userRegisterReducer,\r\n   userDetails: userDetailsReducer,\r\n   userList: userListReducer,\r\n   userDelete: userDeleteReducer,\r\n   userUpdate: userUpdateReducer,\r\n   userUpdateProfile: userUpdateProfileReducer,\r\n   userAuth: authReducer,\r\n   userCreateAddress: userCreateAddressReducer,\r\n   userDeleteAddress: userDeleteAddressReducer,\r\n   userSelectRole: userSelectRoleReducer,\r\n   userUpdateAddress: userUpdateAddressReducer,\r\n   userNotification: userNotificationReducer,\r\n\r\n   notificationsAdm: userReducer,\r\n\r\n   orderCreate: orderCreateReducer,\r\n   orderDetails: orderDetailsReducer,\r\n   orderPay: orderPayReducer,\r\n   orderDeliver: orderDeliverReducer,\r\n   orderListMy: orderListMyReducer,\r\n   orderList: orderListReducer,\r\n   orderDelete: orderDeleteReducer,\r\n   orderUpdate: orderUpdateReducer,\r\n   orderUpdateByMember: orderUpdateByMemberReducer,\r\n   orderConsult: orderConsultReducer,\r\n\r\n   categoriesList: categoriesListReducer,\r\n   categoriesListAdm: categoriesListReducerAdm,\r\n   categoryDetails: categoryDetailsReducer,\r\n   categoryUpdate: categoryUpdateReducer,\r\n   categoryCreate: categoryCreateReducer,\r\n   categoryDelete: categoryDeleteReducer,\r\n\r\n   subCategoryDetails: subCategoryDetailsReducer,\r\n   subCategoryList: subCategoryListReducer,\r\n   subCategoryListAdm: subCategoryListReducerAdm,\r\n   subCategoryCreate: subCategoryCreateReducer,\r\n   subCategoryDetails: subCategoryDetailsReducer,\r\n   subCategoryUpdate: subCategoryUpdateReducer,\r\n   subCategoryDelete: subCategoryDeleteReducer,\r\n\r\n   supplierList: supplierListReducer,\r\n   supplierListAdm: supplierListReducerAdm,\r\n   supplierDetails: supplierDetailsReducer,\r\n   supplierUpdate: supplierUpdateReducer,\r\n   supplierCreate: supplierCreateReducer,\r\n   supplierDelete: supplierDeleteReducer,\r\n})\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\r\n   ? JSON.parse(localStorage.getItem('cartItems'))\r\n   : []\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n   ? JSON.parse(localStorage.getItem('userInfo'))\r\n   : null\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress')\r\n   ? JSON.parse(localStorage.getItem('shippingAddress'))\r\n   : {}\r\n\r\nconst initialState = {\r\n   cart: {\r\n      cartItems: cartItemsFromStorage,\r\n      shippingAddress: shippingAddressFromStorage,\r\n   },\r\n   userLogin: {\r\n      userInfo: userInfoFromStorage,\r\n      shippingAddress: shippingAddressFromStorage,\r\n   },\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n   reducer,\r\n   initialState,\r\n   composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js",["398","399"],"import { useState } from 'react'\r\nimport { css } from '@emotion/core'\r\nimport ClipLoader from 'react-spinners/ClipLoader'\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n`\r\n\r\nfunction Loader() {\r\n  let [loading, setLoading] = useState(true)\r\n  let [color, setColor] = useState('orange')\r\n\r\n  return (\r\n    <div className='sweet-loading text-center'>\r\n      <ClipLoader color={color} loading={loading} css={override} size={60} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js",["400","401","402","403","404","405","406","407"],"import Buttonn from '@material-ui/core/Button'\r\nimport ButtonGroupp from '@material-ui/core/ButtonGroup'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n   Button,\r\n   Card,\r\n   Col,\r\n   Image,\r\n   ListGroup,\r\n   ListGroupItem,\r\n   Row,\r\n} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions.js'\r\nimport { getUserDetails } from '../actions/userActions.js'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport Message from '../components/Message'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Chip } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      '& .MuiTextField-root': {\r\n         margin: theme.spacing(0),\r\n      },\r\n\r\n      '& .MuiInputBase-input': {\r\n         padding: theme.spacing(2),\r\n      },\r\n\r\n      '& .MuiFilledInput-input': {\r\n         padding: theme.spacing(2),\r\n      },\r\n\r\n      '& .MuiFilledInput-inputMarginDense': {\r\n         padding: theme.spacing(1),\r\n         textAlign: 'center',\r\n      },\r\n   },\r\n}))\r\n\r\nfunction format(n) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'\r\n}\r\n\r\nexport const CartScreen = ({ match, location, history }) => {\r\n   const classes = useStyles()\r\n   const productId = match.params.id\r\n   const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const cart = useSelector((state) => state.cart)\r\n   const { cartItems } = cart\r\n\r\n   const [items, setItems] = useState(cartItems.map((c) => c.qty))\r\n\r\n   useEffect(() => {\r\n      if (productId) {\r\n         dispatch(addToCart(productId, qty))\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, productId, qty, userInfo])\r\n\r\n   const removeFromCartHandler = (id) => {\r\n      dispatch(removeFromCart(id))\r\n   }\r\n\r\n   const checkoutHandler = () => {\r\n      history.push('/login?redirect=shipping')\r\n   }\r\n\r\n   // const test = (e) => {\r\n   //   const value = e.target.value\r\n   //   if (parseInt(value) === 0) {\r\n   //     alert('sai')\r\n   //   }\r\n   //   console.log(value)\r\n   // }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {/* <Link className='btn btn-light my-3 rounded-pill' to='/'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link> */}\r\n\r\n         <Row className='m-4' style={{ height: '100vh' }}>\r\n            <Col md={8} className='p-0 pr-4 mt-3 text-uppercase'>\r\n               {cartItems.length === 0 ? (\r\n                  // <Announcement variant='danger'>\r\n                  <>\r\n                     {/* <Row>\r\n                <Col className='mb-2'> */}\r\n                     <div className='mb-1'>\r\n                        <Link to='/'>\r\n                           <Button className='text-uppercase btn_color rounded-pill'>\r\n                              Mua hàng\r\n                           </Button>\r\n                        </Link>\r\n                     </div>\r\n                     {/* </Col>\r\n                <Col md={12}> */}\r\n                     <div>\r\n                        <Image\r\n                           className=' p-5'\r\n                           src='/images/cart_empty.png'\r\n                           fluid\r\n                        />\r\n                     </div>\r\n                     {/* </Col>\r\n              </Row> */}\r\n                  </>\r\n               ) : (\r\n                  // </Announcement>\r\n                  <ListGroup variant='flush'>\r\n                     <h3>Giỏ hàng</h3>\r\n                     {cartItems.map((item) => (\r\n                        <ListGroup.Item\r\n                           key={item.product}\r\n                           className='border-0 mt-1 shadow card_color'\r\n                           rounded\r\n                        >\r\n                           <div className='mb-2'>\r\n                              <Chip label={item.brand} variant='outlined' />\r\n                           </div>\r\n                           <Row>\r\n                              <Col md={2}>\r\n                                 <Link\r\n                                    to={`/product/${item.product}`}\r\n                                    className='text-decoration-none  product-card-green'\r\n                                 >\r\n                                    <Image\r\n                                       src={item.images[0].url}\r\n                                       alt={item.name}\r\n                                       fluid\r\n                                    />\r\n                                 </Link>\r\n                              </Col>\r\n\r\n                              <Col\r\n                                 md={3}\r\n                                 className='text-lowercase text-capitalize d-flex align-items-center'\r\n                              >\r\n                                 <Link\r\n                                    to={`/product/${item.product}`}\r\n                                    className='text-decoration-none'\r\n                                 >\r\n                                    <p\r\n                                       className='mb-0'\r\n                                       style={{ color: '#343a40' }}\r\n                                    >\r\n                                       {item.name}\r\n                                    </p>\r\n                                 </Link>\r\n                              </Col>\r\n\r\n                              <Col\r\n                                 md={3}\r\n                                 className='text-lowercase d-flex align-items-center'\r\n                              >\r\n                                 <h4 className='text-lowercase'>\r\n                                    {format(item.price)}\r\n                                 </h4>\r\n                              </Col>\r\n\r\n                              <Col md={3} className='d-flex align-items-center'>\r\n                                 <ButtonGroupp size='small' aria-label='small '>\r\n                                    <Buttonn\r\n                                       aria-label='reduce'\r\n                                       size='small'\r\n                                       color='primary'\r\n                                       onClick={() =>\r\n                                          Number(item.qty) - 1 === 0\r\n                                             ? toast.error(\r\n                                                  <div>\r\n                                                     <ErrorOutlineIcon\r\n                                                        className='pr-1'\r\n                                                        fontSize='large'\r\n                                                     />\r\n                                                     {`Phải có ít nhất 1 sản phẩm`}\r\n                                                  </div>,\r\n                                                  {\r\n                                                     className:\r\n                                                        'Toastify__toast--success',\r\n                                                     position: 'top-right',\r\n                                                     autoClose: 3000,\r\n                                                     hideProgressBar: true,\r\n                                                     closeOnClick: true,\r\n                                                     pauseOnHover: true,\r\n                                                     draggable: true,\r\n                                                     progress: undefined,\r\n                                                  }\r\n                                               )\r\n                                             : item.qty > 0 &&\r\n                                               dispatch(\r\n                                                  addToCart(\r\n                                                     item.product,\r\n                                                     Math.min(item.qty - 1, 1)\r\n                                                  )\r\n                                               )\r\n                                       }\r\n                                       variant='contained'\r\n                                    >\r\n                                       <RemoveIcon fontSize='small' />\r\n                                    </Buttonn>\r\n\r\n                                    {/* <Buttonn variant='contained'>{item.qty}</Buttonn> */}\r\n                                    <div>\r\n                                       {item.qty === 0 ? (\r\n                                          <TextField\r\n                                             error\r\n                                             className={classes.root}\r\n                                             id='filled-size-small'\r\n                                             value={item.qty}\r\n                                             variant='filled'\r\n                                             size='small'\r\n                                             onChange={(e) =>\r\n                                                // Number(e.target.value) === 0\r\n                                                //   ? toast.error(\r\n                                                //       <div>\r\n                                                //         <ErrorOutlineIcon\r\n                                                //           className='pr-1'\r\n                                                //           fontSize='large'\r\n                                                //         />\r\n                                                //         Phải có ít nhất 1 sản phẩm\r\n                                                //       </div>,\r\n                                                //       {\r\n                                                //         className: 'Toastify__toast--success',\r\n                                                //         position: 'top-right',\r\n                                                //         autoClose: 3000,\r\n                                                //         hideProgressBar: true,\r\n                                                //         closeOnClick: true,\r\n                                                //         pauseOnHover: true,\r\n                                                //         draggable: true,\r\n                                                //         progress: undefined,\r\n                                                //       }\r\n                                                //     )\r\n                                                //   :\r\n                                                Number(e.target.value) >\r\n                                                item.countInStock\r\n                                                   ? toast.error(\r\n                                                        <div>\r\n                                                           <ErrorOutlineIcon\r\n                                                              className='pr-1'\r\n                                                              fontSize='large'\r\n                                                           />\r\n                                                           {`Số lượng không được vượt quá ${item.countInStock}`}\r\n                                                        </div>,\r\n                                                        {\r\n                                                           className:\r\n                                                              'Toastify__toast--success',\r\n                                                           position:\r\n                                                              'top-right',\r\n                                                           autoClose: 3000,\r\n                                                           hideProgressBar: true,\r\n                                                           closeOnClick: true,\r\n                                                           pauseOnHover: true,\r\n                                                           draggable: true,\r\n                                                           progress: undefined,\r\n                                                        }\r\n                                                     )\r\n                                                   : Number(e.target.value) <=\r\n                                                        item.countInStock &&\r\n                                                     dispatch(\r\n                                                        addToCart(\r\n                                                           item.product,\r\n                                                           Math.max(\r\n                                                              Number(\r\n                                                                 e.target.value\r\n                                                              ),\r\n                                                              0\r\n                                                           )\r\n                                                        )\r\n                                                     )\r\n                                             }\r\n                                          />\r\n                                       ) : (\r\n                                          <TextField\r\n                                             className={classes.root}\r\n                                             id='filled-size-small'\r\n                                             value={item.qty}\r\n                                             variant='filled'\r\n                                             size='small'\r\n                                             onChange={(e) =>\r\n                                                // Number(e.target.value) === 0\r\n                                                //   ? toast.error(\r\n                                                //       <div>\r\n                                                //         <ErrorOutlineIcon\r\n                                                //           className='pr-1'\r\n                                                //           fontSize='large'\r\n                                                //         />\r\n                                                //         Phải có ít nhất 1 sản phẩm\r\n                                                //       </div>,\r\n                                                //       {\r\n                                                //         className: 'Toastify__toast--success',\r\n                                                //         position: 'top-right',\r\n                                                //         autoClose: 3000,\r\n                                                //         hideProgressBar: true,\r\n                                                //         closeOnClick: true,\r\n                                                //         pauseOnHover: true,\r\n                                                //         draggable: true,\r\n                                                //         progress: undefined,\r\n                                                //       }\r\n                                                //     )\r\n                                                //   :\r\n                                                Number(e.target.value) >\r\n                                                item.countInStock\r\n                                                   ? toast.error(\r\n                                                        <div>\r\n                                                           <ErrorOutlineIcon\r\n                                                              className='pr-1'\r\n                                                              fontSize='large'\r\n                                                           />\r\n                                                           {`Số lượng đặt hàng không được vượt quá số lượng hàng hoá trong kho (${item.countInStock} sản phẩm)`}\r\n                                                        </div>,\r\n                                                        {\r\n                                                           className:\r\n                                                              'Toastify__toast--success',\r\n                                                           position:\r\n                                                              'top-right',\r\n                                                           autoClose: 3000,\r\n                                                           hideProgressBar: true,\r\n                                                           closeOnClick: true,\r\n                                                           pauseOnHover: true,\r\n                                                           draggable: true,\r\n                                                           progress: undefined,\r\n                                                        }\r\n                                                     )\r\n                                                   : Number(e.target.value) <=\r\n                                                        item.countInStock &&\r\n                                                     dispatch(\r\n                                                        addToCart(\r\n                                                           item.product,\r\n                                                           Math.max(\r\n                                                              Number(\r\n                                                                 e.target.value\r\n                                                              ),\r\n                                                              0\r\n                                                           )\r\n                                                        )\r\n                                                     )\r\n                                             }\r\n                                          />\r\n                                       )}\r\n                                    </div>\r\n                                    <Buttonn\r\n                                       aria-label='increase'\r\n                                       size='small'\r\n                                       onClick={() => {\r\n                                          item.qty < item.countInStock\r\n                                             ? dispatch(\r\n                                                  addToCart(\r\n                                                     item.product,\r\n                                                     Number(item.qty) + 1\r\n                                                  )\r\n                                               )\r\n                                             : Number(item.qty) >=\r\n                                                  item.countInStock &&\r\n                                               toast.error(\r\n                                                  <div>\r\n                                                     <ErrorOutlineIcon\r\n                                                        className='pr-1'\r\n                                                        fontSize='large'\r\n                                                     />\r\n                                                     {`Số lượng không được vượt quá  ${item.countInStock}`}\r\n                                                  </div>,\r\n                                                  {\r\n                                                     className:\r\n                                                        'Toastify__toast--success',\r\n                                                     position: 'top-right',\r\n                                                     autoClose: 3000,\r\n                                                     hideProgressBar: true,\r\n                                                     closeOnClick: true,\r\n                                                     pauseOnHover: true,\r\n                                                     draggable: true,\r\n                                                     progress: undefined,\r\n                                                  }\r\n                                               )\r\n                                       }}\r\n                                       variant='contained'\r\n                                       color='primary'\r\n                                    >\r\n                                       <AddIcon fontSize='small' />\r\n                                    </Buttonn>\r\n                                 </ButtonGroupp>\r\n                              </Col>\r\n\r\n                              <Col md={1} className='d-flex align-items-center'>\r\n                                 <Button\r\n                                    type='button'\r\n                                    className='p-1 rounded'\r\n                                    variant='light'\r\n                                    onClick={() =>\r\n                                       removeFromCartHandler(item.product)\r\n                                    }\r\n                                 >\r\n                                    <i\r\n                                       style={{ fontSize: '1.2rem' }}\r\n                                       class='far fa-trash-alt'\r\n                                    ></i>\r\n                                 </Button>\r\n                              </Col>\r\n                              <ToastContainer />\r\n                           </Row>\r\n                        </ListGroup.Item>\r\n                     ))}\r\n                  </ListGroup>\r\n               )}\r\n            </Col>\r\n\r\n            <Col md={4} className='p-0'>\r\n               <Card\r\n                  className='border-0 shadow mt-4 card_color p-3'\r\n                  style={{ zIndex: '1' }}\r\n               >\r\n                  <ListGroup variant='flush'>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill text-capitalize'>\r\n                                 Số lượng:{' '}\r\n                              </h5>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill-value text-lowercase pl-1'>\r\n                                 {cartItems.reduce(\r\n                                    (acc, item) => acc + item.qty,\r\n                                    0\r\n                                 )}{' '}\r\n                                 sản phẩm\r\n                              </h5>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill text-capitalize'>\r\n                                 Giá:{' '}\r\n                              </h5>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <h5 className='title-bill-value text-lowercase pl-1'>\r\n                                 {format(\r\n                                    cartItems.reduce(\r\n                                       (acc, item) =>\r\n                                          acc + item.qty * item.price,\r\n                                       0\r\n                                    )\r\n                                 )}\r\n                              </h5>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                  </ListGroup>\r\n               </Card>\r\n               <Card className='mt-3 border-0'>\r\n                  <Button\r\n                     type='button'\r\n                     className='btn-block rounded-pill text-uppercase p-3 text-light'\r\n                     disabled={\r\n                        cartItems.length === 0 ||\r\n                        cartItems.reduce((acc, item) => acc + item.qty, 0) <\r\n                           cartItems.length\r\n                     }\r\n                     onClick={checkoutHandler}\r\n                     size='sm'\r\n                  >\r\n                     <h5 className='text-light m-0'>Đặt hàng</h5>\r\n                  </Button>\r\n               </Card>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default CartScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js",["408","409","410","411","412"],"import firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { login, register } from '../actions/userActions'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Message from '../components/Message'\r\nimport ProgressLine from '../components/ProgressLine'\r\nimport configAuth from '../configAuth'\r\n\r\nconst firebaseApp = firebase.initializeApp(configAuth)\r\n\r\nfunction LoginScreen({ location, history }) {\r\n   const [email, setEmail] = useState('')\r\n   const [password, setPassword] = useState('')\r\n\r\n   const [isLogin, setIsLogin] = useState(false)\r\n   const [name, setName] = useState('')\r\n   const [mail, setMail] = useState('')\r\n   const [avatar, setPhoto] = useState('')\r\n\r\n   const onSubmit = () => {\r\n      var provider = new firebase.auth.GoogleAuthProvider()\r\n      firebase\r\n         .auth()\r\n         .signInWithPopup(provider)\r\n         .then((result) => {\r\n            /** @type {firebase.auth.OAuthCredential} */\r\n            var credential = result.credential\r\n\r\n            var token = credential.accessToken\r\n\r\n            const { user } = result\r\n\r\n            const email = user.email\r\n            const name = user.displayName\r\n            const avatar = { public_id: null, url: user.photoURL }\r\n            const password = ''\r\n\r\n            dispatch(register(name, email, avatar, password))\r\n         })\r\n         .catch((error) => {\r\n            console.log(error)\r\n         })\r\n   }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { loading, error, userInfo } = userLogin\r\n\r\n   const redirect = location.search ? location.search.split('=')[1] : '/'\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(login(email, password))\r\n   }\r\n\r\n   useEffect(() => {\r\n      firebase.auth().onAuthStateChanged((user) => {\r\n         if (user) {\r\n            console.log('User signed in')\r\n            console.log(user.displayName + '\\n' + user.email)\r\n            setIsLogin(true)\r\n            setName(user.displayName)\r\n            setPhoto(user.photoURL)\r\n            setMail(user.email)\r\n            // history.push(redirect)\r\n         } else {\r\n            console.log('No User')\r\n         }\r\n      })\r\n      window.scrollTo(0, 0)\r\n   }, [])\r\n\r\n   useEffect(() => {\r\n      if (userInfo) {\r\n         history.push(redirect)\r\n      }\r\n   }, [history, userInfo, redirect])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row className='shadow p-5 card_color ml-4 mr-4'>\r\n            <Col md={7}>\r\n               <div className='d-flex justify-content-center'>\r\n                  <Image\r\n                     style={{ zIndex: '2' }}\r\n                     src='/background/Wavy_Gen-01_Single-07.jpg'\r\n                     fluid\r\n                  />\r\n               </div>\r\n            </Col>\r\n            <Col md={5}>\r\n               <div className='pt-5 mt-5'>\r\n                  {error && <Message variant='danger'>{error}</Message>}\r\n                  {loading && <ProgressLine />}\r\n                  <Form onSubmit={submitHandler}>\r\n                     <h2 className='text-center'>Đăng nhập</h2>\r\n                     <Form.Group controlId='email' className='pt-3'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Địa chỉ email\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           className='border border-grey rounded-pill'\r\n                           type='email'\r\n                           placeholder='Nhập địa chỉ email'\r\n                           value={email}\r\n                           onChange={(e) => setEmail(e.target.value)}\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <Form.Group controlId='password'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Mật khẩu\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           className='border border-grey rounded-pill'\r\n                           type='password'\r\n                           placeholder='Nhập mật khẩu'\r\n                           value={password}\r\n                           onChange={(e) => setPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <div className='mt-2'>\r\n                        <Button\r\n                           type='submit'\r\n                           variant='outline-light'\r\n                           className='btn-block  rounded-pill mb-3 btn_color_created'\r\n                           style={{\r\n                              fontSize: '0.875rem',\r\n                              letterSpacing: '0.25rem',\r\n                           }}\r\n                        >\r\n                           Đăng nhập\r\n                        </Button>\r\n                        {isLogin === false ? (\r\n                           <Button\r\n                              variant='outline-light'\r\n                              className='btn-block shadow rounded-pill btn_gg'\r\n                              style={{\r\n                                 fontSize: '0.8rem',\r\n                                 letterSpacing: '0.05rem',\r\n                                 border: '1px solid #ddd',\r\n                                 color: '#1a1a1a',\r\n                              }}\r\n                              onClick={onSubmit}\r\n                           >\r\n                              <Image\r\n                                 src='https://img.icons8.com/fluent/20/000000/google-logo.png'\r\n                                 className='pr-1'\r\n                              />\r\n                              Đăng nhập bằng tài khoản Google\r\n                           </Button>\r\n                        ) : (\r\n                           <Button\r\n                              variant='outline-light'\r\n                              className='btn-block shadow rounded-pill btn_gg'\r\n                              style={{\r\n                                 fontSize: '0.8rem',\r\n                                 border: '1px solid #ddd',\r\n                                 letterSpacing: '0.05rem',\r\n                                 color: '#1a1a1a',\r\n                              }}\r\n                              onClick={onSubmit}\r\n                           >\r\n                              <Image\r\n                                 src='https://img.icons8.com/fluent/20/000000/google-logo.png'\r\n                                 className='pr-1'\r\n                              />\r\n                              Đăng nhập bằng tài khoản Google\r\n                           </Button>\r\n                        )}\r\n                     </div>\r\n\r\n                     <Row className='py-3'>\r\n                        <Col\r\n                           className='d-flex align-items-center justify-content-center'\r\n                           style={{\r\n                              fontSize: '0.8rem',\r\n                              letterSpacing: '0.05rem',\r\n                           }}\r\n                        >\r\n                           <div>\r\n                              Bạn là thành viên mới?{' '}\r\n                              <Link\r\n                                 className='text-decoration-none text-info pl-1'\r\n                                 to={\r\n                                    redirect\r\n                                       ? `/register?redirect=${redirect}`\r\n                                       : '/register'\r\n                                 }\r\n                                 style={{ fontWeight: '700' }}\r\n                              >\r\n                                 Đăng kí\r\n                              </Link>\r\n                           </div>\r\n                        </Col>\r\n                     </Row>\r\n                  </Form>\r\n               </div>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default LoginScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js",["413","414"],"import axios from 'axios'\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\nimport {\r\n   CLEAR_ERRORS,\r\n   USER_CREATE_ADDRESS_FAIL,\r\n   USER_CREATE_ADDRESS_REQUEST,\r\n   USER_CREATE_ADDRESS_SUCCESS,\r\n   USER_DELETE_ADDRESS_FAIL,\r\n   USER_DELETE_ADDRESS_REQUEST,\r\n   USER_DELETE_ADDRESS_SUCCESS,\r\n   USER_DELETE_FAIL,\r\n   USER_DELETE_REQUEST,\r\n   USER_DELETE_SUCCESS,\r\n   USER_DETAILS_FAIL,\r\n   USER_DETAILS_REQUEST,\r\n   USER_DETAILS_RESET,\r\n   USER_DETAILS_SUCCESS,\r\n   USER_EDIT_ADDRESS_FAIL,\r\n   USER_EDIT_ADDRESS_REQUEST,\r\n   USER_EDIT_ADDRESS_SUCCESS,\r\n   USER_LIST_FAIL,\r\n   USER_LIST_REQUEST,\r\n   USER_LIST_RESET,\r\n   USER_LIST_SUCCESS,\r\n   USER_LOGIN_FAIL,\r\n   USER_LOGIN_REQUEST,\r\n   USER_LOGIN_SUCCESS,\r\n   USER_LOGOUT,\r\n   USER_REGISTER_FAIL,\r\n   USER_REGISTER_REQUEST,\r\n   USER_REGISTER_SUCCESS,\r\n   USER_SELECT_ROLE_FAIL,\r\n   USER_SELECT_ROLE_REQUEST,\r\n   USER_SELECT_ROLE_SUCCESS,\r\n   USER_UPDATE_FAIL,\r\n   USER_UPDATE_PROFILE_FAIL,\r\n   USER_UPDATE_PROFILE_REQUEST,\r\n   USER_UPDATE_PROFILE_SUCCESS,\r\n   USER_UPDATE_REQUEST,\r\n   USER_UPDATE_SUCCESS,\r\n} from '../constants/userConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_LOGIN_REQUEST,\r\n      })\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.post(\r\n         '/api/users/login',\r\n         { email, password },\r\n         config\r\n      )\r\n\r\n      dispatch({\r\n         type: USER_LOGIN_SUCCESS,\r\n         payload: data,\r\n      })\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_LOGIN_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const register = (name, email, avatar, password) => async (dispatch) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_REGISTER_REQUEST,\r\n      })\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.post(\r\n         '/api/users',\r\n         { name, email, avatar, password },\r\n         config\r\n      )\r\n\r\n      dispatch({\r\n         type: USER_LOGIN_SUCCESS,\r\n         payload: data,\r\n      })\r\n\r\n      dispatch({\r\n         type: USER_REGISTER_SUCCESS,\r\n         payload: data,\r\n      })\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_REGISTER_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_DETAILS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.get(`/api/users/${id}`, config)\r\n\r\n      dispatch({\r\n         type: USER_DETAILS_SUCCESS,\r\n         payload: data,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_DETAILS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_UPDATE_PROFILE_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.put('/api/users/profile', user, config)\r\n\r\n      console.log('data post update profile', data)\r\n\r\n      dispatch({\r\n         type: USER_UPDATE_PROFILE_SUCCESS,\r\n         type: USER_LOGOUT,\r\n         type: USER_DETAILS_RESET,\r\n         payload: data,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_UPDATE_PROFILE_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n   localStorage.removeItem('userInfo')\r\n   dispatch({ type: USER_LOGOUT })\r\n   dispatch({ type: USER_DETAILS_RESET })\r\n   dispatch({ type: ORDER_LIST_MY_RESET })\r\n   dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_LIST_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.get('/api/users', config)\r\n\r\n      dispatch({\r\n         type: USER_LIST_SUCCESS,\r\n         payload: data,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_LIST_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_DELETE_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      await axios.delete(`/api/users/${id}`, config)\r\n\r\n      dispatch({\r\n         type: USER_DELETE_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_DELETE_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_UPDATE_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      const { data } = await axios.put(`/api/users/${user._id}`, user, config)\r\n\r\n      dispatch({ type: USER_UPDATE_SUCCESS })\r\n      dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_UPDATE_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const deleteAddressUser = (id) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_DELETE_ADDRESS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      console.log('id address', id)\r\n\r\n      await axios.post('/api/users/deleteaddress', id, config)\r\n\r\n      dispatch({\r\n         type: USER_DELETE_ADDRESS_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_DELETE_ADDRESS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const createAddressUser = (address) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_CREATE_ADDRESS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      await axios.post('/api/users/createaddress', address, config)\r\n\r\n      dispatch({\r\n         type: USER_CREATE_ADDRESS_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_CREATE_ADDRESS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const updateAddressUser = (address) => async (dispatch, getState) => {\r\n   try {\r\n      dispatch({\r\n         type: USER_EDIT_ADDRESS_REQUEST,\r\n      })\r\n\r\n      const {\r\n         userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n         headers: {\r\n            Authorization: `Bearer ${userInfo.token}`,\r\n         },\r\n      }\r\n\r\n      await axios.post('/api/users/address', address, config)\r\n\r\n      dispatch({\r\n         type: USER_EDIT_ADDRESS_SUCCESS,\r\n      })\r\n   } catch (error) {\r\n      dispatch({\r\n         type: USER_EDIT_ADDRESS_FAIL,\r\n         payload:\r\n            error.response && error.response.data.message\r\n               ? error.response.data.message\r\n               : error.message,\r\n      })\r\n   }\r\n}\r\n\r\nexport const selectRoleAddressUser =\r\n   (address) => async (dispatch, getState) => {\r\n      try {\r\n         dispatch({\r\n            type: USER_SELECT_ROLE_REQUEST,\r\n         })\r\n\r\n         const {\r\n            userLogin: { userInfo },\r\n         } = getState()\r\n\r\n         const config = {\r\n            headers: {\r\n               Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n         }\r\n\r\n         await axios.post('/api/users/roleaddress', address, config)\r\n\r\n         dispatch({\r\n            type: USER_SELECT_ROLE_SUCCESS,\r\n         })\r\n      } catch (error) {\r\n         dispatch({\r\n            type: USER_SELECT_ROLE_FAIL,\r\n            payload:\r\n               error.response && error.response.data.message\r\n                  ? error.response.data.message\r\n                  : error.message,\r\n         })\r\n      }\r\n   }\r\n\r\nexport const clearErrors = () => async (dispatch) => {\r\n   dispatch({\r\n      type: CLEAR_ERRORS,\r\n   })\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js",["415"],"import { deepOrange } from '@material-ui/core/colors'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { uploadFileAvatar } from '../actions/cloudinary'\r\nimport { register } from '../actions/userActions'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      display: 'flex',\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(8),\r\n      height: theme.spacing(8),\r\n      fontSize: '3rem',\r\n   },\r\n}))\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n   const classes = useStyles()\r\n\r\n   const [name, setName] = useState('')\r\n   const [email, setEmail] = useState('')\r\n   const [avatar, setAvatar] = useState(null)\r\n   const [password, setPassword] = useState('')\r\n   const [confirmPassword, setConfirmPassword] = useState('')\r\n   const [message, setMessage] = useState(null)\r\n   const [uploading, setUploading] = useState(false)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userRegister = useSelector((state) => state.userRegister)\r\n   const { loading, error, userInfo } = userRegister\r\n\r\n   const redirect = location.search ? location.search.split('=')[1] : '/'\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      if (password !== confirmPassword) {\r\n         setMessage('Password do not match')\r\n      } else {\r\n         dispatch(register(name, email, avatar, password))\r\n      }\r\n   }\r\n\r\n   const uploadFile = (e) => {\r\n      let files = e.target.files[0]\r\n\r\n      let preview = []\r\n      if (files) {\r\n         preview.push(files.name)\r\n         Resizer.imageFileResizer(files, 720, 720, 'JPEG', 100, 0, (uri) => {\r\n            try {\r\n               uploadFileAvatar({ image: uri }).then((res) => {\r\n                  setAvatar(res.data)\r\n               })\r\n            } catch (error) {\r\n               setUploading(false)\r\n            }\r\n         })\r\n      }\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (userInfo) {\r\n         history.push(redirect)\r\n      }\r\n\r\n      window.scrollTo(0, 0)\r\n   }, [history, userInfo, redirect])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row className='shadow p-5 card_color m-0'>\r\n            <Col md={7}>\r\n               <Image src='/background/3071357.jpg' fluid />\r\n            </Col>\r\n            <Col md={5}>\r\n               <div>\r\n                  {message && <Message variant='danger'>{message}</Message>}\r\n                  {error && <Message variant='danger'>{error}</Message>}\r\n                  {loading && <Loader />}\r\n                  <Form onSubmit={submitHandler}>\r\n                     <h2 className='text-center'>Đăng kí</h2>\r\n                     <Form.Group controlId='name'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Họ và tên\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           type='name'\r\n                           placeholder='Nhập họ và tên'\r\n                           value={name}\r\n                           onChange={(e) => setName(e.target.value)}\r\n                           className='border border-grey rounded-pill'\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <Form.Group controlId='email'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Địa chỉ email\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           type='email'\r\n                           placeholder='Nhập địa chỉ email'\r\n                           value={email}\r\n                           onChange={(e) => setEmail(e.target.value)}\r\n                           className='border border-grey rounded-pill'\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <Form.Group controlId='password'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Mật khẩu\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           type='password'\r\n                           placeholder='Nhập mật khẩu'\r\n                           value={password}\r\n                           onChange={(e) => setPassword(e.target.value)}\r\n                           className='border border-grey rounded-pill'\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <Form.Group controlId='password'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Nhập lại mật khẩu\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                           type='password'\r\n                           placeholder=' Nhập lại mật khẩu'\r\n                           value={confirmPassword}\r\n                           onChange={(e) => setConfirmPassword(e.target.value)}\r\n                           className='border border-grey rounded-pill'\r\n                        ></Form.Control>\r\n                     </Form.Group>\r\n\r\n                     <Form.Group controlId='image'>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                           Ảnh đại diện\r\n                        </Form.Label>\r\n                        <Row>\r\n                           <div className='d-flex align-items-center'>\r\n                              <Col md={6}>\r\n                                 {avatar && (\r\n                                    <Image\r\n                                       src={avatar && avatar?.url}\r\n                                       className='rounded-circle avatar_img'\r\n                                       fluid\r\n                                    />\r\n                                 )}\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <Form.File\r\n                                    className='border border-grey'\r\n                                    id='image-file'\r\n                                    label='Chọn ảnh'\r\n                                    custom\r\n                                    onChange={uploadFile}\r\n                                 ></Form.File>\r\n                                 {uploading && <Loader />}\r\n                              </Col>\r\n                           </div>\r\n                        </Row>\r\n                     </Form.Group>\r\n\r\n                     <div>\r\n                        <Button\r\n                           type='submit'\r\n                           variant='outline-light'\r\n                           className='btn-block  rounded-pill btn_color_created'\r\n                           style={{\r\n                              fontSize: '0.875rem',\r\n                              letterSpacing: '0.25rem',\r\n                           }}\r\n                        >\r\n                           Đăng kí\r\n                        </Button>\r\n                     </div>\r\n\r\n                     <Row className='py-3'>\r\n                        <Col\r\n                           className='d-flex align-items-center justify-content-center'\r\n                           style={{\r\n                              fontSize: '0.8rem',\r\n                              letterSpacing: '0.05rem',\r\n                           }}\r\n                        >\r\n                           <div>\r\n                              Bạn đã có tài khoản?\r\n                              <Link\r\n                                 className='text-decoration-none text-info pl-1 '\r\n                                 to={\r\n                                    redirect\r\n                                       ? `/login?redirect=${redirect}`\r\n                                       : '/login'\r\n                                 }\r\n                                 style={{ fontWeight: '700' }}\r\n                              >\r\n                                 Đăng nhập\r\n                              </Link>\r\n                           </div>\r\n                        </Col>\r\n                     </Row>\r\n                  </Form>\r\n               </div>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default RegisterScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js",["416","417","418","419","420","421","422"],"import DateFnsUtils from '@date-io/date-fns'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Link from '@material-ui/core/Link'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport {\r\n   KeyboardDatePicker,\r\n   MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { uploadFileAvatar } from '../actions/cloudinary'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport data from '../data.json'\r\nimport '../toast.css'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      display: 'flex',\r\n   },\r\n   orange: {\r\n      color: theme.palette.getContrastText(deepOrange[500]),\r\n      backgroundColor: deepOrange[500],\r\n      width: theme.spacing(38.75),\r\n      height: theme.spacing(40),\r\n      fontSize: '15rem',\r\n   },\r\n}))\r\n\r\nfunction ProfileScreen({ location, history }) {\r\n   const classes = useStyles()\r\n\r\n   const [state, setState] = useState(false)\r\n\r\n   const handleChange = () => {\r\n      setState(!state)\r\n   }\r\n\r\n   const [selectedDate, setSelectedDate] = useState(\r\n      new Date('2021-03-22T21:11:54')\r\n   )\r\n\r\n   const handleDateChange = (date) => {\r\n      setSelectedDate(date)\r\n   }\r\n\r\n   // console.log('user', user)\r\n\r\n   const [name, setName] = useState('')\r\n   const [email, setEmail] = useState('')\r\n   const [avatar, setAvatar] = useState(null)\r\n   const [password, setPassword] = useState('')\r\n   const [confirmPassword, setConfirmPassword] = useState('')\r\n   const [message, setMessage] = useState(null)\r\n   const [sex, setSex] = useState('')\r\n   const [thanhPho, setThanhPho] = useState('')\r\n   const [huyen, setHuyen] = useState('')\r\n   const [xa, setXa] = useState('')\r\n   const [diaChi, setDiachi] = useState('')\r\n   const [numberPhone, setNumberPhone] = useState('')\r\n   const [uploading, setUploading] = useState(false)\r\n   const address = { thanhPho, huyen, xa, diaChi }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n   const { loading: loadingUpdate, success } = userUpdateProfile\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   let formatPhoneNumber = (str) => {\r\n      //Filter only numbers from the input\r\n      let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n      //Check if the input is of correct length\r\n      let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n      if (match) {\r\n         return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n      }\r\n\r\n      return null\r\n   }\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      error &&\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' /> {error}\r\n            </div>,\r\n            {\r\n               position: 'top-right',\r\n               autoClose: 2500,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n\r\n      if (password !== confirmPassword) {\r\n         toast.error(\r\n            <div>\r\n               <ErrorOutlineIcon className='pr-1' fontSize='large' /> Password\r\n               is not match\r\n            </div>,\r\n            {\r\n               position: 'top-right',\r\n               autoClose: 2500,\r\n               hideProgressBar: true,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined,\r\n            }\r\n         )\r\n      } else {\r\n         // if (numberPhone.length === 14 || numberPhone.length === 10) {\r\n         dispatch(\r\n            updateUserProfile({\r\n               id: user._id,\r\n               email,\r\n               name,\r\n               avatar,\r\n               password,\r\n               sex,\r\n               selectedDate,\r\n            })\r\n         )\r\n         //    toast.success(\r\n         //       <div>\r\n         //          <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n         //          Hồ sơ đã được cập nhật\r\n         //       </div>,\r\n         //       {\r\n         //          className: 'Toastify__toast--success',\r\n         //          position: 'top-right',\r\n         //          autoClose: 2500,\r\n         //          hideProgressBar: true,\r\n         //          closeOnClick: true,\r\n         //          pauseOnHover: true,\r\n         //          draggable: true,\r\n         //          progress: undefined,\r\n         //       }\r\n         //    )\r\n         // } else {\r\n         //    toast.error(\r\n         //       <div>\r\n         //          <ErrorOutlineIcon className='pr-1' fontSize='large' /> Số điện\r\n         //          thoại phải có đúng 10 số\r\n         //       </div>,\r\n         //       {\r\n         //          position: 'top-right',\r\n         //          autoClose: 2500,\r\n         //          hideProgressBar: true,\r\n         //          closeOnClick: true,\r\n         //          pauseOnHover: true,\r\n         //          draggable: true,\r\n         //          progress: undefined,\r\n         //       }\r\n         //    )\r\n         // }\r\n      }\r\n   }\r\n\r\n   const uploadFile = (e) => {\r\n      let files = e.target.files[0]\r\n      let preview = []\r\n      if (files) {\r\n         preview.push(files.name)\r\n         Resizer.imageFileResizer(files, 720, 720, 'JPEG', 100, 0, (uri) => {\r\n            try {\r\n               uploadFileAvatar({ image: uri }).then((res) => {\r\n                  setAvatar(res.data)\r\n               })\r\n            } catch (error) {\r\n               setUploading(false)\r\n            }\r\n         })\r\n      }\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push('/login')\r\n      } else {\r\n         if (!user || !user.name || success) {\r\n            dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n            dispatch(getUserDetails('profile'))\r\n         } else {\r\n            setName(user.name)\r\n            setEmail(user.email)\r\n            setAvatar(user.avatar)\r\n            // setAddress(user.address)\r\n            {\r\n               user.address?.map(\r\n                  (ad) =>\r\n                     ad.role === true &&\r\n                     (setThanhPho(ad.thanhPho),\r\n                     setHuyen(ad.huyen),\r\n                     setXa(ad.xa),\r\n                     setDiachi(ad.diaChi),\r\n                     setNumberPhone(ad.numberPhone))\r\n               )\r\n            }\r\n            setSelectedDate(user.birthDay)\r\n            setSex(user.sex)\r\n         }\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, history, success, user])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {message && <Announcement variant='danger'>{message}</Announcement>}\r\n         {error && <Announcement variant='danger'>{error}</Announcement>}\r\n\r\n         {loading ? (\r\n            <SkeletonEffect />\r\n         ) : error ? (\r\n            <Message variant='danger'>{error}</Message>\r\n         ) : (\r\n            <div className='border-0'>\r\n               <Row className='justify-content-center  m-4 '>\r\n                  <Col\r\n                     md={4}\r\n                     className='pt-5 shadow'\r\n                     style={{\r\n                        backgroundColor: '#977bd5',\r\n                        borderTopLeftRadius: '1rem',\r\n                        borderBottomLeftRadius: '1rem',\r\n                     }}\r\n                  >\r\n                     <div\r\n                        className='text-center mt-5 m-auto'\r\n                        style={{\r\n                           border: '5px solid #55595c',\r\n                           borderRadius: '50%',\r\n                           width: '20rem',\r\n                           height: '20.6rem',\r\n                        }}\r\n                     >\r\n                        <div className='text-center mb-3 avatar_container'>\r\n                           {user.avatar?.url ? (\r\n                              <>\r\n                                 <Image\r\n                                    style={{\r\n                                       width: '20rem',\r\n                                       height: '20rem',\r\n                                    }}\r\n                                    src={\r\n                                       avatar ? avatar?.url : user.avatar?.url\r\n                                    }\r\n                                    className='rounded-circle avatar_img'\r\n                                    fluid\r\n                                 />\r\n\r\n                                 <div className='avatar_upload'>\r\n                                    <div className='avatar_edit'>\r\n                                       {uploading && <Loader />}\r\n                                       <Form.Group>\r\n                                          <Image\r\n                                             className='avatar_icon'\r\n                                             src='https://img.icons8.com/fluent/40/000000/camera.png'\r\n                                          />\r\n                                          <Form.File\r\n                                             id='image-file'\r\n                                             custom\r\n                                             onChange={uploadFile}\r\n                                             className='avatar_file'\r\n                                          ></Form.File>\r\n                                       </Form.Group>\r\n                                    </div>\r\n                                 </div>\r\n                              </>\r\n                           ) : (\r\n                              <>\r\n                                 <Avatar className={classes.orange}>\r\n                                    {uploading && <Loader />}\r\n                                    {userInfo.name.substring(0, 1)}\r\n                                 </Avatar>\r\n\r\n                                 <div className='avatar_upload'>\r\n                                    <div className='avatar_edit'>\r\n                                       {uploading && <Loader />}\r\n                                       <Form.Group>\r\n                                          <Image\r\n                                             className='avatar_icon'\r\n                                             src='https://img.icons8.com/fluent/40/000000/camera.png'\r\n                                          />\r\n                                          <Form.File\r\n                                             id='image-file'\r\n                                             custom\r\n                                             onChange={uploadFile}\r\n                                             className='avatar_file'\r\n                                          ></Form.File>\r\n                                       </Form.Group>\r\n                                    </div>\r\n                                 </div>\r\n                              </>\r\n                           )}\r\n                        </div>\r\n                        <div className='text-center mt-5'>\r\n                           <Link\r\n                              href='/myorders'\r\n                              style={{\r\n                                 fontSize: '0.8rem',\r\n                                 letterSpacing: '0.05rem',\r\n                              }}\r\n                              className='text-decoration-none shadow'\r\n                           >\r\n                              <Button\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill shadow '\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                 }}\r\n                              >\r\n                                 ĐƠN HÀNG CỦA TÔI\r\n                              </Button>\r\n                           </Link>\r\n                        </div>\r\n                     </div>\r\n                  </Col>\r\n                  <Col\r\n                     md={8}\r\n                     className='pt-4 pb-4  bg-light shadow border-0'\r\n                     style={{\r\n                        backgroundColor:\r\n                           'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%);',\r\n                        borderTopRightRadius: '1rem',\r\n                        borderBottomRightRadius: '1rem',\r\n                     }}\r\n                  >\r\n                     <h2 className='text-center'>Thông tin cá nhân</h2>\r\n                     <Form onSubmit={submitHandler} className='pl-4 pr-4 pt-3'>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='name'>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Họ và tên</strong>\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    className='border-1 border-grey rounded-pill'\r\n                                    type='name'\r\n                                    placeholder='Nhập họ và tên'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                 ></Form.Control>\r\n                              </Form.Group>\r\n                           </Col>\r\n\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='email'>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Địa chỉ email</strong>\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    className='border-1 border-grey rounded-pill'\r\n                                    type='email'\r\n                                    placeholder='Nhập địa chỉ email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                 ></Form.Control>\r\n                              </Form.Group>\r\n                           </Col>\r\n                        </Row>\r\n                        <Form.Group>\r\n                           <Row>\r\n                              <Col md={6}>\r\n                                 <strong>Ngày sinh</strong>\r\n                                 <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <Grid container justify='space-between'>\r\n                                       <KeyboardDatePicker\r\n                                          className='m-0'\r\n                                          margin='normal'\r\n                                          id='date-picker-dialog'\r\n                                          format='MM/dd/yyyy'\r\n                                          value={selectedDate}\r\n                                          onChange={handleDateChange}\r\n                                          KeyboardButtonProps={{\r\n                                             'aria-label': 'change date',\r\n                                          }}\r\n                                       />\r\n                                    </Grid>\r\n                                 </MuiPickersUtilsProvider>\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <strong>Giới tính:</strong>\r\n                                 <RadioGroup\r\n                                    value={sex}\r\n                                    onChange={(e) => setSex(e.target.value)}\r\n                                 >\r\n                                    <div className='d-flex justify-content-evenly align-items-center'>\r\n                                       <FormControlLabel\r\n                                          value='Nam'\r\n                                          control={<Radio size='small' />}\r\n                                          label='Nam'\r\n                                          size='medium'\r\n                                       />\r\n                                       <FormControlLabel\r\n                                          value='Nữ'\r\n                                          control={<Radio size='small' />}\r\n                                          label='Nữ'\r\n                                       />\r\n                                    </div>\r\n                                 </RadioGroup>\r\n                              </Col>\r\n                           </Row>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                           <div\r\n                              className='rounded p-3'\r\n                              style={{\r\n                                 border: '0.14rem dotted grey',\r\n                              }}\r\n                           >\r\n                              <Row className='mb-2'>\r\n                                 <Col md={3}>\r\n                                    <strong>Số điện thoại</strong>\r\n                                 </Col>\r\n                                 <Col md={9} style={{ fontSize: '0.9rem' }}>\r\n                                    {formatPhoneNumber(numberPhone)}\r\n                                 </Col>\r\n                              </Row>\r\n                              <Row>\r\n                                 <Col md={3}>\r\n                                    <strong>Địa chỉ liên hệ</strong>\r\n                                 </Col>\r\n                                 <Col md={9} style={{ fontSize: '0.9rem' }}>\r\n                                    {diaChi} {' - '} {xa} {' - '} {huyen}{' '}\r\n                                    {' - '}\r\n                                    {thanhPho}.\r\n                                 </Col>\r\n                              </Row>\r\n                              <div className='text-end'>\r\n                                 <strong>\r\n                                    <Link\r\n                                       href='/profile/address'\r\n                                       color='secondary'\r\n                                    >\r\n                                       Thay đổi\r\n                                    </Link>\r\n                                 </strong>\r\n                              </div>\r\n                           </div>\r\n                        </Form.Group>\r\n\r\n                        <div className='d-flex align-items-center'>\r\n                           <Switch\r\n                              value={state}\r\n                              onChange={handleChange}\r\n                              color='secondary'\r\n                              name='checkedB'\r\n                              inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                           />\r\n                           {state === true ? (\r\n                              <p className='mb-0' style={{ opacity: '1' }}>\r\n                                 <strong>Đổi mật khẩu</strong>\r\n                                 <Image\r\n                                    style={{ opacity: '1' }}\r\n                                    src='https://img.icons8.com/fluent/32/000000/unlock-2.png'\r\n                                 />\r\n                              </p>\r\n                           ) : (\r\n                              <p className='mb-0' style={{ opacity: '0.7' }}>\r\n                                 Đổi mật khẩu\r\n                                 <Image\r\n                                    style={{ opacity: '1' }}\r\n                                    src='https://img.icons8.com/fluent/32/000000/lock-2.png'\r\n                                 />\r\n                              </p>\r\n                           )}\r\n                        </div>\r\n                        <Row>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='password' fluid>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Mật khẩu mới</strong>\r\n                                 </Form.Label>\r\n                                 {state === true ? (\r\n                                    <>\r\n                                       <Form.Control\r\n                                          className='border-1 border-grey rounded-pill '\r\n                                          type='password'\r\n                                          placeholder='Nhập mật khẩu mới'\r\n                                          value={password}\r\n                                          onChange={(e) =>\r\n                                             setPassword(e.target.value)\r\n                                          }\r\n                                       ></Form.Control>\r\n                                    </>\r\n                                 ) : (\r\n                                    <Form.Control\r\n                                       className='border-1 border-grey rounded-pill '\r\n                                       type='password'\r\n                                       placeholder='Nhập mật khẩu mới'\r\n                                       value={password}\r\n                                       onChange={(e) =>\r\n                                          setPassword(e.target.value)\r\n                                       }\r\n                                       disabled\r\n                                       // style={{ visibility: 'hidden' }}\r\n                                    ></Form.Control>\r\n                                 )}\r\n                              </Form.Group>\r\n                           </Col>\r\n                           <Col md={6}>\r\n                              <Form.Group controlId='password'>\r\n                                 <Form.Label as='p' className='mb-1'>\r\n                                    <strong>Nhập lại mật khẩu</strong>\r\n                                 </Form.Label>\r\n                                 {state === true ? (\r\n                                    <>\r\n                                       <Form.Control\r\n                                          className='border-1 border-grey rounded-pill'\r\n                                          type='password'\r\n                                          placeholder='Nhập lại mật khẩu'\r\n                                          value={confirmPassword}\r\n                                          onChange={(e) =>\r\n                                             setConfirmPassword(e.target.value)\r\n                                          }\r\n                                       ></Form.Control>\r\n                                    </>\r\n                                 ) : (\r\n                                    <Form.Control\r\n                                       className='border-1 border-grey rounded-pill'\r\n                                       type='password'\r\n                                       placeholder='Nhập lại mật khẩu'\r\n                                       value={confirmPassword}\r\n                                       onChange={(e) =>\r\n                                          setConfirmPassword(e.target.value)\r\n                                       }\r\n                                       disabled\r\n                                       // style={{ visibility: 'hidden' }}\r\n                                    ></Form.Control>\r\n                                 )}\r\n                              </Form.Group>\r\n                           </Col>\r\n                        </Row>\r\n                        <div className='d-flex justify-content-center'>\r\n                           <Button\r\n                              type='submit'\r\n                              variant='outline-light'\r\n                              className='rounded-pill btn_color_created'\r\n                              style={{\r\n                                 fontSize: '1rem',\r\n                                 letterSpacing: '0.25rem',\r\n                                 width: '10rem',\r\n                              }}\r\n                           >\r\n                              Lưu\r\n                           </Button>\r\n                        </div>\r\n                        <ToastContainer />\r\n                     </Form>\r\n                  </Col>\r\n               </Row>\r\n            </div>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProfileScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js",["423","424","425","426","427","428","429","430","431"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport { getUserDetails } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport Step from '../components/Step'\r\nimport data from '../data.json'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport { Link } from '@material-ui/core'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport { Close } from '@material-ui/icons'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nexport const ShippingScreen = ({ history }) => {\r\n   const cart = useSelector((state) => state.cart)\r\n   const { shippingAddress, loading } = cart\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading: loadingUserDetail, success, user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const [thanhPho, setThanhPho] = useState(shippingAddress.thanhPho)\r\n   const [huyen, setHuyen] = useState(shippingAddress.huyen)\r\n   const [xa, setXa] = useState(shippingAddress.xa)\r\n   const [diaChi, setDiachi] = useState(shippingAddress.diaChi)\r\n   const [numberPhone, setNumberPhone] = useState(shippingAddress.numberPhone)\r\n   const [open, setOpen] = useState(false)\r\n   const [add, setAdd] = useState([])\r\n   const updateInformationAddress = {\r\n      thanhPho,\r\n      huyen,\r\n      xa,\r\n      diaChi,\r\n      numberPhone,\r\n   }\r\n\r\n   console.log('add', add)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const handleClickOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(\r\n         saveShippingAddress({ thanhPho, huyen, xa, diaChi, numberPhone })\r\n      )\r\n      history.push('/payment')\r\n   }\r\n\r\n   const updateAddress = (diaChi, xa, huyen, thanhPho, numberPhone) => {\r\n      setThanhPho(thanhPho)\r\n      setHuyen(huyen)\r\n      setXa(xa)\r\n      setDiachi(diaChi)\r\n      setNumberPhone(numberPhone)\r\n      setOpen(false)\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push('/login')\r\n      } else {\r\n         if (!user) {\r\n            dispatch(getUserDetails('profile'))\r\n         } else {\r\n            {\r\n               user.address?.map(\r\n                  (ad) =>\r\n                     ad.role === true &&\r\n                     (setThanhPho(ad.thanhPho),\r\n                     setHuyen(ad.huyen),\r\n                     setXa(ad.xa),\r\n                     setDiachi(ad.diaChi),\r\n                     setNumberPhone(ad.numberPhone))\r\n               )\r\n            }\r\n         }\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, history, user])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {loadingUserDetail ? (\r\n            <SkeletonEffect />\r\n         ) : (\r\n            <>\r\n               <div>\r\n                  <Dialog\r\n                     maxWidth='xl'\r\n                     open={open}\r\n                     onClose={handleClose}\r\n                     aria-labelledby='form-dialog-title'\r\n                  >\r\n                     <div className='d-flex justify-content-end'>\r\n                        <Button\r\n                           onClick={handleClose}\r\n                           className='p-1 m-1 rounded-pill'\r\n                           variant='light'\r\n                        >\r\n                           <Close />\r\n                        </Button>\r\n                     </div>\r\n                     <h4 id='form-dialog-title' className='text-center p-2'>\r\n                        Thay đổi thông tin giao hàng\r\n                     </h4>\r\n                     <DialogContent style={{ width: '45rem' }}>\r\n                        <Form\r\n                           // onSubmit={updateAddress}\r\n                           className='mt-2 border-0 mb-2'\r\n                        >\r\n                           <Form.Group controlId='address'>\r\n                              <Form.Label as='p' className='mb-1 mt-2'>\r\n                                 <strong>Địa chỉ giao hàng</strong>\r\n                              </Form.Label>\r\n                              {user.address?.map((add) => (\r\n                                 <div\r\n                                    className='p-3 mt-1 mb-1'\r\n                                    style={{\r\n                                       borderBottom: '0.1rem solid #ddd',\r\n                                    }}\r\n                                 >\r\n                                    <Row className='mb-2'>\r\n                                       <Col\r\n                                          md={3}\r\n                                          className='d-flex align-items-center '\r\n                                       >\r\n                                          <strong>Số điện thoại</strong>\r\n                                       </Col>\r\n                                       <Col\r\n                                          md={7}\r\n                                          style={{ fontSize: '0.9rem' }}\r\n                                          className='d-flex align-items-center'\r\n                                       >\r\n                                          {formatPhoneNumber(add.numberPhone)}\r\n                                       </Col>\r\n                                       <Col md={2}>\r\n                                          <Button\r\n                                             variant='outline-dark'\r\n                                             size='sm'\r\n                                             className='rounded-pill btn-block'\r\n                                             style={{ letterSpacing: '0.1rem' }}\r\n                                             onClick={() =>\r\n                                                updateAddress(\r\n                                                   add.diaChi,\r\n                                                   add.xa,\r\n                                                   add.huyen,\r\n                                                   add.thanhPho,\r\n                                                   add.numberPhone\r\n                                                )\r\n                                             }\r\n                                          >\r\n                                             Chọn\r\n                                          </Button>\r\n                                       </Col>\r\n                                    </Row>\r\n                                    <Row className='button_select_default'>\r\n                                       <Col\r\n                                          md={3}\r\n                                          className='d-flex align-items-center'\r\n                                       >\r\n                                          <strong>Địa chỉ liên hệ</strong>\r\n                                       </Col>\r\n                                       <Col\r\n                                          md={9}\r\n                                          style={{ fontSize: '0.9rem' }}\r\n                                          className='d-flex align-items-center text-justify'\r\n                                       >\r\n                                          {add.diaChi} {' - '} {add.xa} {' - '}{' '}\r\n                                          {add.huyen} {' - '}\r\n                                          {add.thanhPho}.\r\n                                       </Col>\r\n                                    </Row>\r\n                                 </div>\r\n                              ))}\r\n                           </Form.Group>\r\n                           <div className='text-end'>\r\n                              <strong>\r\n                                 <Link\r\n                                    href='/profile/address'\r\n                                    color='secondary'\r\n                                 >\r\n                                    Thêm địa chỉ mới\r\n                                 </Link>\r\n                              </strong>\r\n                           </div>\r\n                        </Form>\r\n                     </DialogContent>\r\n                  </Dialog>\r\n               </div>\r\n               <Row className='shadow p-2 card_color m-4'>\r\n                  <Col md={7} className='d-flex align-items-center'>\r\n                     <Image src='/background/shipping.jpg' fluid />\r\n                  </Col>\r\n                  <Col md={5} className='mt-2 pr-4'>\r\n                     <div>\r\n                        <Step step1 step2 />\r\n\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='mt-2 border-0 mb-2'\r\n                        >\r\n                           <h3 className='pt-3 text-center'>\r\n                              Thông tin Vận chuyển\r\n                           </h3>\r\n                           <Form.Group>\r\n                              <div\r\n                                 className='rounded p-3'\r\n                                 style={{\r\n                                    border: '0.14rem dotted grey',\r\n                                 }}\r\n                              >\r\n                                 <Row className='mb-2'>\r\n                                    <Col md={4}>\r\n                                       <strong>Số điện thoại</strong>\r\n                                    </Col>\r\n                                    <Col md={8} style={{ fontSize: '0.9rem' }}>\r\n                                       {formatPhoneNumber(numberPhone)}\r\n                                    </Col>\r\n                                 </Row>\r\n                                 <Row>\r\n                                    <Col md={4}>\r\n                                       <strong>Địa chỉ liên hệ</strong>\r\n                                    </Col>\r\n                                    <Col\r\n                                       md={8}\r\n                                       style={{ fontSize: '0.9rem' }}\r\n                                       className='text-justify'\r\n                                    >\r\n                                       {diaChi} {' - '} {xa} {' - '} {huyen}{' '}\r\n                                       {' - '}\r\n                                       {thanhPho}.\r\n                                    </Col>\r\n                                 </Row>\r\n                                 <div className='text-end'>\r\n                                    <strong>\r\n                                       <Button\r\n                                          size='sm'\r\n                                          className='rounded-pill'\r\n                                          variant='outline-dark'\r\n                                          onClick={handleClickOpen}\r\n                                       >\r\n                                          Thay đổi\r\n                                       </Button>\r\n                                    </strong>\r\n                                 </div>\r\n                              </div>\r\n                           </Form.Group>\r\n                           <div>\r\n                              <Button\r\n                                 type='submit'\r\n                                 className='btn-block btn_color rounded-pill'\r\n                              >\r\n                                 Tiếp tục\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </div>\r\n                  </Col>\r\n               </Row>\r\n            </>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js",[],["432","433"],"F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js",["434"],"import FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Step from '../components/Step'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nexport const PaymentScreen = ({ history }) => {\r\n   const cart = useSelector((state) => state.cart)\r\n   const { shippingAddress } = cart\r\n\r\n   if (!shippingAddress) {\r\n      history.push('/shipping')\r\n   }\r\n\r\n   const [paymentMethod, setPaymentMethod] = useState('Thanh toán bằng PayPal')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   useEffect(() => {\r\n      window.scrollTo(0, 0)\r\n   }, [])\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(savePaymentMethod(paymentMethod))\r\n      history.push('/placeorder')\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row className='shadow p-2 card_color m-4'>\r\n            <Col md={6} className='d-flex align-items-center'>\r\n               <Image src='/background/payment.jpg' fluid />\r\n            </Col>\r\n            <Col md={6} className='d-flex align-items-center'>\r\n               <div>\r\n                  <Step step1 step2 step3 />\r\n                  <Form\r\n                     onSubmit={submitHandler}\r\n                     className=' p-4 mt-2 text-center'\r\n                  >\r\n                     <Form.Group>\r\n                        <Form.Label as='legend'>\r\n                           <h3>Phương thức thanh toán</h3>\r\n                        </Form.Label>\r\n\r\n                        <Col>\r\n                           <div>\r\n                              <RadioGroup\r\n                                 value={paymentMethod}\r\n                                 onChange={(e) =>\r\n                                    setPaymentMethod(e.target.value)\r\n                                 }\r\n                              >\r\n                                 <FormControlLabel\r\n                                    value='Thanh toán bằng PayPal'\r\n                                    control={<Radio />}\r\n                                    label='Thanh toán bằng PayPal'\r\n                                 />\r\n                                 <FormControlLabel\r\n                                    value='Thanh toán bằng tiền mặt'\r\n                                    control={<Radio />}\r\n                                    label='Thanh toán bằng tiền mặt'\r\n                                 />\r\n                              </RadioGroup>\r\n                           </div>\r\n                        </Col>\r\n                     </Form.Group>\r\n\r\n                     <Button\r\n                        type='submit'\r\n                        variant='danger'\r\n                        className='btn-block btn_color rounded-pill'\r\n                     >\r\n                        Tiếp Tục\r\n                     </Button>\r\n                  </Form>\r\n               </div>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js",["435","436","437"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { removeFromCart } from '../actions/cartActions'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Message from '../components/Message'\r\nimport Step from '../components/Step'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport { USER_DETAILS_RESET } from '../constants/userConstants'\r\nimport {\r\n   ORDER_CREATE_RESET,\r\n   ORDER_DETAIL_RESET,\r\n} from '../constants/orderConstants'\r\n\r\nPlaceOrderScreen.propTypes = {}\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nfunction format(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n   const dispatch = useDispatch()\r\n\r\n   const cart = useSelector((state) => state.cart)\r\n\r\n   // Calculate prices\r\n   cart.itemsPrice = cart.cartItems.reduce(\r\n      (acc, item) => acc + item.price * item.qty,\r\n      0\r\n   )\r\n\r\n   const addDecimals = (num) => {\r\n      return Math.round(num)\r\n   }\r\n\r\n   if (cart.shippingAddress.thanhPho === 'Thành phố Hà Nội') {\r\n      cart.shippingPrice = 25000\r\n   } else if (cart.shippingAddress.thanhPho === 'Thành phố Hồ Chí Minh') {\r\n      cart.shippingPrice = 15000\r\n   } else {\r\n      cart.shippingPrice = 35000\r\n   }\r\n\r\n   // cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n   cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\r\n   cart.totalPrice = Number(cart.itemsPrice) + Number(cart.shippingPrice)\r\n\r\n   const orderCreate = useSelector((state) => state.orderCreate)\r\n   const { order, success, error } = orderCreate\r\n\r\n   const placeOrderHandler = () => {\r\n      dispatch(\r\n         createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice,\r\n         })\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (success) {\r\n         history.push(`/order/${order._id}`)\r\n         dispatch({ type: USER_DETAILS_RESET })\r\n         dispatch({ type: ORDER_CREATE_RESET })\r\n\r\n         cart.cartItems.map((item) => dispatch(removeFromCart(item.product)))\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [history, success])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row className='m-4'>\r\n            <Col md={8} className='mt-2'>\r\n               <Step step1 step2 step3 step4 />\r\n               <ListGroup\r\n                  variant='flush'\r\n                  className='shadow mt-3 card_color p-1 border-order'\r\n               >\r\n                  <ListGroup.Item className='pt-3'>\r\n                     <h4 className='text-uppercase'>Thông tin giao hàng</h4>\r\n                     <p className='mb-1 ml-2' style={{ fontSize: '0.9rem' }}>\r\n                        <strong>Địa chỉ: </strong>\r\n                        {cart.shippingAddress.diaChi} {' - '}{' '}\r\n                        {cart.shippingAddress.xa} {' - '}\r\n                        {cart.shippingAddress.huyen} {' - '}\r\n                        {cart.shippingAddress.thanhPho}.\r\n                     </p>\r\n                     <p className='mb-2 ml-2' style={{ fontSize: '0.9rem' }}>\r\n                        <strong>Số điện thoại: </strong>\r\n                        {formatPhoneNumber(cart.shippingAddress.numberPhone)}\r\n                     </p>\r\n                  </ListGroup.Item>\r\n\r\n                  <ListGroup.Item>\r\n                     <h4 className='text-uppercase mt-2'>\r\n                        Phương thức thanh toán\r\n                     </h4>\r\n                     <div\r\n                        className='d-flex mb-2 ml-2'\r\n                        style={{ fontSize: '0.9rem' }}\r\n                     >\r\n                        <strong className='pr-1'>Phương Thức: </strong>\r\n                        {cart.paymentMethod ? (\r\n                           cart.paymentMethod\r\n                        ) : (\r\n                           <strong className='text-danger'>\r\n                              Chưa chọn phương thức thanh toán\r\n                           </strong>\r\n                        )}\r\n                     </div>\r\n                  </ListGroup.Item>\r\n\r\n                  <ListGroup.Item>\r\n                     <h4 className='text-uppercase mt-2'>Giỏ hàng</h4>\r\n                     {cart.cartItems.length === 0 ? (\r\n                        <Message>Giỏ hàng của bạn trống</Message>\r\n                     ) : (\r\n                        <ListGroup variant='flush'>\r\n                           {cart.cartItems.map((item, index) => (\r\n                              <ListGroup.Item key={index}>\r\n                                 <Row>\r\n                                    <Col md={2}>\r\n                                       <Image\r\n                                          src={item.images[0].url}\r\n                                          alt={item.name}\r\n                                          fluid\r\n                                          rounded\r\n                                       />\r\n                                    </Col>\r\n\r\n                                    <Col\r\n                                       md={5}\r\n                                       className='d-flex align-items-center'\r\n                                    >\r\n                                       <Link\r\n                                          to={`/product/${item.product}`}\r\n                                          className='link-product'\r\n                                       >\r\n                                          {item.name}\r\n                                       </Link>\r\n                                    </Col>\r\n\r\n                                    <Col\r\n                                       md={5}\r\n                                       className='d-flex align-items-center'\r\n                                    >\r\n                                       <b style={{ fontSize: '1rem' }}>\r\n                                          {item.qty} x {format(item.price, 'đ')}\r\n                                          {' = '}\r\n                                          {format(item.qty * item.price, 'đ')}\r\n                                       </b>\r\n                                    </Col>\r\n                                 </Row>\r\n                              </ListGroup.Item>\r\n                           ))}\r\n                        </ListGroup>\r\n                     )}\r\n                  </ListGroup.Item>\r\n               </ListGroup>\r\n            </Col>\r\n            <Col md={4}>\r\n               <Card\r\n                  className='shadow mt-2 border-0 card_color p-1 border-order'\r\n                  style={{ zIndex: '1' }}\r\n               >\r\n                  <ListGroup variant='flush' className='card_color'>\r\n                     <ListGroup.Item>\r\n                        <h4 className='text-uppercase text-center'>\r\n                           Chi tiết hoá đơn\r\n                        </h4>\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={8}>Tổng tiền sản phẩm</Col>\r\n                           <Col md={4}>\r\n                              <strong>{format(cart.itemsPrice, 'đ')}</strong>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={8}>Phí vận chuyển</Col>\r\n                           <Col m={4}>\r\n                              <strong>{format(cart.shippingPrice, 'đ')}</strong>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n\r\n                     <ListGroup.Item>\r\n                        <Row>\r\n                           <Col md={8}>\r\n                              <strong>Tổng cộng (bao gồm VAT):</strong>\r\n                           </Col>\r\n                           <Col md={4}>\r\n                              <strong>{format(cart.totalPrice, 'đ')}</strong>\r\n                           </Col>\r\n                        </Row>\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        {error && (\r\n                           <Announcement variant='danger'>\r\n                              Vui lòng chọn phương thức thanh toán\r\n                           </Announcement>\r\n                        )}\r\n                     </ListGroup.Item>\r\n                     <ListGroup.Item>\r\n                        <Button\r\n                           type='button'\r\n                           variant='outline-light'\r\n                           className='btn-block text-uppercase btn-apply btn_color_created pt-3 rounded-pill'\r\n                           disabled={cart.cartItems === 0}\r\n                           onClick={placeOrderHandler}\r\n                        >\r\n                           <h5>Đặt hàng</h5>\r\n                        </Button>\r\n                     </ListGroup.Item>\r\n                  </ListGroup>\r\n               </Card>\r\n            </Col>\r\n         </Row>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js",["438","439","440","441","442"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n   deliverOrder,\r\n   getOrderDetails,\r\n   payOrder,\r\n   updateOrderByMember,\r\n} from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nimport ImagePay from '../components/ImagePay'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport ProgressShipping from '../components/ProgressShipping'\r\nimport {\r\n   ORDER_CREATE_RESET,\r\n   ORDER_DELIVER_RESET,\r\n   ORDER_DETAIL_RESET,\r\n   ORDER_PAY_RESET,\r\n   ORDER_UPDATE_BY_MEMBER_RESET,\r\n} from '../constants/orderConstants'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport Header from '../components/Header'\r\nimport Footer from '../components/Footer'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst OrderScreen = ({ match, history }) => {\r\n   const orderId = match.params.id\r\n\r\n   const [sdkReady, setSdkReady] = useState(false)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const [orderStatus, setOrderStatus] = useState('Huỷ')\r\n\r\n   const orderDetails = useSelector((state) => state.orderDetails)\r\n   const { order, loading, error } = orderDetails\r\n\r\n   const orderPay = useSelector((state) => state.orderPay)\r\n   const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n   const orderDeliver = useSelector((state) => state.orderDeliver)\r\n   const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n   const orderUpdateByMember = useSelector((state) => state.orderUpdateByMember)\r\n   const { loading: loadingByMember, success: successByMember } =\r\n      orderUpdateByMember\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   if (!loading) {\r\n      //   Calculate prices\r\n      const addDecimals = (num) => {\r\n         return Math.round(num)\r\n      }\r\n\r\n      order.itemsPrice = addDecimals(\r\n         order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push('/login')\r\n      }\r\n\r\n      const addPayPalScript = async () => {\r\n         const { data: clientId } = await axios.get('/api/config/paypal')\r\n         const script = document.createElement('script')\r\n         script.type = 'text/javascript'\r\n         script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n         script.async = true\r\n         script.onload = () => {\r\n            setSdkReady(true)\r\n         }\r\n         document.body.appendChild(script)\r\n      }\r\n\r\n      if (\r\n         !order ||\r\n         successPay ||\r\n         successDeliver ||\r\n         successByMember ||\r\n         order._id !== orderId\r\n      ) {\r\n         dispatch({ type: ORDER_PAY_RESET })\r\n         dispatch({ type: ORDER_DELIVER_RESET })\r\n         dispatch({ type: ORDER_UPDATE_BY_MEMBER_RESET })\r\n\r\n         dispatch(getOrderDetails(orderId))\r\n      } else if (!order.isPaid) {\r\n         if (!window.paypal) {\r\n            addPayPalScript()\r\n         } else {\r\n            setSdkReady(true)\r\n         }\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, orderId, successPay, successDeliver, successByMember, order])\r\n\r\n   const successPaymentHandler = (paymentResult) => {\r\n      console.log(paymentResult)\r\n      dispatch(payOrder(orderId, paymentResult))\r\n   }\r\n\r\n   const deliverHandler = () => {\r\n      dispatch(deliverOrder(order))\r\n   }\r\n\r\n   const cancelOrder = () => {\r\n      dispatch(updateOrderByMember({ _id: orderId, orderStatus }))\r\n   }\r\n\r\n   // console.log('Trạng thái: ', order)\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {loading ? (\r\n            <Loader />\r\n         ) : error ? (\r\n            <Message>{error}</Message>\r\n         ) : (\r\n            <>\r\n               <Row className='m-4'>\r\n                  <Col md={8}>\r\n                     <ListGroup\r\n                        variant='flush'\r\n                        className='shadow mt-3 card_color p-1 border-order'\r\n                     >\r\n                        <ListGroup.Item>\r\n                           <h3\r\n                              className='text-center'\r\n                              style={{ color: '#7563c8' }}\r\n                           >\r\n                              Đơn hàng {order._id}\r\n                           </h3>\r\n                           <Row>\r\n                              <Col md={6} className='d-flex align-items-center'>\r\n                                 <h5 className='text-uppercase mb-0'>\r\n                                    Trạng thái đơn hàng\r\n                                 </h5>\r\n                              </Col>\r\n                              <Col\r\n                                 md={6}\r\n                                 className='d-flex justify-content-end mb-3'\r\n                              >\r\n                                 <div>\r\n                                    {order.orderStatus === 'Chờ xác nhận' ? (\r\n                                       <Button\r\n                                          variant='outline-light'\r\n                                          className='p-1 pl-3 pr-3 btn_color_cancel rounded-pill '\r\n                                          onClick={cancelOrder}\r\n                                       >\r\n                                          <div className='d-flex justify-content-end'>\r\n                                             Huỷ\r\n                                             <ClearIcon\r\n                                                fontSize='small'\r\n                                                style={{ marginTop: '0.2rem' }}\r\n                                             />\r\n                                          </div>\r\n                                       </Button>\r\n                                    ) : (\r\n                                       <Button\r\n                                          disabled\r\n                                          className='p-1 pl-3 pr-3 rounded-pill'\r\n                                       >\r\n                                          <div className='d-flex justify-content-end'>\r\n                                             Huỷ\r\n                                             <ClearIcon\r\n                                                fontSize='small'\r\n                                                style={{ marginTop: '0.2rem' }}\r\n                                             />\r\n                                          </div>\r\n                                       </Button>\r\n                                    )}\r\n                                 </div>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           {order.orderStatus !== 'Huỷ' ? (\r\n                              <ProgressShipping />\r\n                           ) : (\r\n                              <Announcement variant='warning'>\r\n                                 Đơn hàng đã được huỷ\r\n                              </Announcement>\r\n                           )}\r\n\r\n                           <h5 className='text-uppercase'>\r\n                              Thông tin giao hàng\r\n                           </h5>\r\n                           <div className='pl-4 pr-4 border-1 border-gray rounded pt-3 mb-2'>\r\n                              <Row>\r\n                                 <Col md={6}>\r\n                                    <p>\r\n                                       <strong>Tên khách hàng: </strong>{' '}\r\n                                       {order.user.name}\r\n                                    </p>\r\n                                 </Col>\r\n                                 <Col md={6}>\r\n                                    <p>\r\n                                       <strong>Địa chỉ email: </strong>\r\n                                       <a\r\n                                          className='link-product'\r\n                                          href={`mailto: ${order.user.email}`}\r\n                                       >\r\n                                          {order.user.email}\r\n                                       </a>\r\n                                    </p>\r\n                                 </Col>\r\n                              </Row>\r\n                              <p>\r\n                                 <strong>Số điện thoại: </strong>\r\n                                 {formatPhoneNumber(\r\n                                    order.shippingAddress.numberPhone\r\n                                 )}\r\n                              </p>\r\n                              <p className='mb-3'>\r\n                                 <strong>Địa chỉ: </strong>\r\n                                 {order.shippingAddress.diaChi}\r\n                                 {' - '}\r\n                                 {order.shippingAddress.xa}\r\n                                 {' - '}\r\n                                 {order.shippingAddress.huyen}\r\n                                 {' - '}\r\n                                 {order.shippingAddress.thanhPho}.\r\n                              </p>\r\n                           </div>\r\n                           {\r\n                              order.isDelivered && (\r\n                                 <Announcement variant='success'>\r\n                                    Đã giao hàng vào lúc{' '}\r\n                                    {format(\r\n                                       new utcToZonedTime(\r\n                                          order.deliveredAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                       ),\r\n                                       'HH:mm:ss - dd/MM/yyyy',\r\n                                       { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                    )}\r\n                                 </Announcement>\r\n                              )\r\n                              // : (\r\n                              //   <Announcement variant='danger'>No Delivered</Announcement>\r\n                              // )}\r\n                           }\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                           <h5 className='text-uppercase'>\r\n                              Phương thức thanh toán\r\n                           </h5>\r\n                           <p className='pl-4'>\r\n                              <strong>Phương thức: </strong>\r\n                              {order.paymentMethod}\r\n                           </p>\r\n\r\n                           {\r\n                              order.isPaid && (\r\n                                 <Announcement\r\n                                    variant='success'\r\n                                    className='rounded-pill'\r\n                                 >\r\n                                    Đã thanh toán vào lúc{' '}\r\n                                    {format(\r\n                                       new utcToZonedTime(\r\n                                          order.paidAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                       ),\r\n                                       'HH:mm:ss - dd/MM/yyyy',\r\n                                       { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                    )}\r\n                                 </Announcement>\r\n                              )\r\n                              // : (\r\n                              //   <Announcement variant='danger'>No Paid</Announcement>\r\n                              // )\r\n                           }\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                           <h5 className='text-uppercase'>Giỏ hàng</h5>\r\n                           {order.orderItems.length === 0 ? (\r\n                              <Message>Giỏ hàng rỗng</Message>\r\n                           ) : (\r\n                              <ListGroup variant='flush'>\r\n                                 {order.orderItems.map((item, index) => (\r\n                                    <ListGroup.Item key={index}>\r\n                                       <Row>\r\n                                          <Col md={2}>\r\n                                             <Link\r\n                                                to={`/product/${item.product}`}\r\n                                                className='link-product'\r\n                                             >\r\n                                                <Image\r\n                                                   src={item.images[0].url}\r\n                                                   alt={item.name}\r\n                                                   fluid\r\n                                                   rounded\r\n                                                   className='border border-gray'\r\n                                                />\r\n                                             </Link>\r\n                                          </Col>\r\n\r\n                                          <Col\r\n                                             className='d-flex align-items-center'\r\n                                             md={4}\r\n                                          >\r\n                                             <Link\r\n                                                to={`/product/${item.product}`}\r\n                                                className='text-decoration-none d-flex align-items-center'\r\n                                             >\r\n                                                <p className='mb-0'>\r\n                                                   {item.name}\r\n                                                </p>\r\n                                             </Link>\r\n                                          </Col>\r\n\r\n                                          <Col\r\n                                             md={6}\r\n                                             className='d-flex align-items-center justify-content-center'\r\n                                          >\r\n                                             <h5 className='text-lowercase'>\r\n                                                {item.qty} x{' '}\r\n                                                {formatMoney(item.price, 'đ')}{' '}\r\n                                                {' = '}\r\n                                                {formatMoney(\r\n                                                   item.qty * item.price,\r\n                                                   'đ'\r\n                                                )}\r\n                                             </h5>\r\n                                          </Col>\r\n                                       </Row>\r\n                                    </ListGroup.Item>\r\n                                 ))}\r\n                              </ListGroup>\r\n                           )}\r\n                        </ListGroup.Item>\r\n                     </ListGroup>\r\n                  </Col>\r\n                  <Col md={4} style={{ zIndex: '1' }}>\r\n                     <Card className='border-0'>\r\n                        <ListGroup\r\n                           variant='flush'\r\n                           className='shadow mt-3 card_color p-1 border-order'\r\n                        >\r\n                           <ListGroup.Item>\r\n                              <h4 className='text-uppercase text-center'>\r\n                                 Chi tiết hoá đơn\r\n                              </h4>\r\n                              <Row className='mt-3'>\r\n                                 <Col md={8}>Tổng tiền sản phẩm</Col>\r\n                                 <Col md={4}>\r\n                                    <p className='mb-0'>\r\n                                       {formatMoney(order.itemsPrice, 'đ')}\r\n                                    </p>\r\n                                 </Col>\r\n                              </Row>\r\n                           </ListGroup.Item>\r\n                           <ListGroup.Item>\r\n                              <Row>\r\n                                 <Col md={8}>Phí vận chuyển</Col>\r\n                                 <Col md={4}>\r\n                                    <p className='mb-0'>\r\n                                       {formatMoney(order.shippingPrice, 'đ')}\r\n                                    </p>\r\n                                 </Col>\r\n                              </Row>\r\n                           </ListGroup.Item>\r\n\r\n                           <ListGroup.Item>\r\n                              <Row>\r\n                                 <Col md={8} className='text-danger'>\r\n                                    <h5 className='mb-0'>Tổng cộng</h5>\r\n                                 </Col>\r\n                                 <Col md={4}>\r\n                                    <h5 className='mb-0 text-danger text-lowercase'>\r\n                                       {formatMoney(order.totalPrice, 'đ')}\r\n                                    </h5>\r\n                                 </Col>\r\n                              </Row>\r\n                           </ListGroup.Item>\r\n\r\n                           {!order.isPaid &&\r\n                              order.orderStatus !== 'Huỷ' &&\r\n                              order.paymentMethod !==\r\n                                 'Thanh toán bằng tiền mặt' && (\r\n                                 <ListGroup.Item className='border-0'>\r\n                                    {loadingPay && <Loader />}\r\n                                    {!sdkReady ? (\r\n                                       <Loader />\r\n                                    ) : (\r\n                                       <PayPalButton\r\n                                          amount={order.totalPrice / 100}\r\n                                          onSuccess={successPaymentHandler}\r\n                                          className='rounded-pill'\r\n                                       />\r\n                                    )}\r\n                                 </ListGroup.Item>\r\n                              )}\r\n\r\n                           {loadingDeliver && <Loader />}\r\n                           {userInfo &&\r\n                              !order.isDelivered &&\r\n                              order.orderStatus === 'Đã giao hàng' && (\r\n                                 <ListGroup.Item className='border-0'>\r\n                                    <Button\r\n                                       type='button'\r\n                                       className='btn_color btn-block rounded-pill'\r\n                                       onClick={deliverHandler}\r\n                                    >\r\n                                       Đã giao hàng\r\n                                    </Button>\r\n                                 </ListGroup.Item>\r\n                              )}\r\n\r\n                           <ListGroup.Item className='border-0 p-0'>\r\n                              <ImagePay />\r\n                           </ListGroup.Item>\r\n                        </ListGroup>\r\n                     </Card>\r\n                  </Col>\r\n               </Row>\r\n            </>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default OrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Step.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js",["443","444","445","446","447"],"import { React, useState } from 'react'\r\nimport { Form, Button, Image, InputGroup } from 'react-bootstrap'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { ButtonBase, FormGroup, Input } from '@material-ui/core'\r\nimport SpeechRecognition, {\r\n  useSpeechRecognition,\r\n} from 'react-speech-recognition'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\n\r\nconst SearchBox = ({ history }) => {\r\n  const [keyword, setKeyword] = useState('')\r\n\r\n  const submitHandle = (e) => {\r\n    // setKeyword(transcript)\r\n    e.preventDefault()\r\n    if (keyword.trim()) {\r\n      if (keyword) {\r\n        history.push(`/search/${keyword}`)\r\n      } else {\r\n        history.push(`/search/${transcript}`)\r\n      }\r\n    } else {\r\n      history.push('/')\r\n    }\r\n  }\r\n\r\n  const { transcript, resetTranscript } = useSpeechRecognition()\r\n\r\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n    return null\r\n  }\r\n\r\n  const click = () => {\r\n    if (transcript) {\r\n      setKeyword(transcript)\r\n    }\r\n  }\r\n\r\n  const clear = () => {\r\n    setKeyword(' ')\r\n    resetTranscript()\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={submitHandle} inline>\r\n      <div className='d-flex align-items-center'>\r\n        <Form.Control\r\n          type='text'\r\n          name='q'\r\n          placeholder='Tìm kiếm sản phẩm.'\r\n          className='mr-sm-2 ml-sm-5 rounded-pill'\r\n          onChange={(e) => setKeyword(e.target.value)}\r\n          value={transcript ? transcript : keyword}\r\n          style={{ width: '30rem' }}\r\n        ></Form.Control>\r\n        <Button\r\n          variant='outline-light'\r\n          className='p-1 text-dark border-0'\r\n          style={{ marginLeft: '-14%', height: '2rem' }}\r\n          onClick={clear}\r\n        >\r\n          <ClearIcon />\r\n        </Button>\r\n\r\n        <Button\r\n          variant='outline-light'\r\n          onClick={SpeechRecognition.startListening}\r\n          className='p-1 text-dark border-0'\r\n          style={{ marginLeft: '-10%', fontSize: '1rem' }}\r\n        >\r\n          <i className='fa fa-microphone' />\r\n        </Button>\r\n      </div>\r\n\r\n      <Button\r\n        type='submit'\r\n        className='p-2 btn_color rounded-circle'\r\n        style={{ fontSize: '0.7rem', marginLeft: '-15%' }}\r\n        onClick={click}\r\n      >\r\n        <SearchIcon />\r\n      </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js",[],["448","449"],"F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js",["450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476"],"import CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { listMyOrders } from '../actions/orderActions'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport '../toast.css'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport PropTypes from 'prop-types'\r\nimport clsx from 'clsx'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'name',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: true, disablePadding: false, label: 'TÊN SẢN PHẨM' },\r\n   { id: 'date', numeric: true, disablePadding: false, label: 'NGÀY ĐẶT' },\r\n   { id: 'total', numeric: true, disablePadding: false, label: 'TỔNG CỘNG' },\r\n   { id: 'carbs', numeric: true, disablePadding: false, label: 'THANH TOÁN' },\r\n   {\r\n      id: 'protein',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'TRẠNG THÁI',\r\n   },\r\n   {\r\n      id: 'protein',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: '',\r\n   },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            {/* <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell> */}\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n   const classes = useToolbarStyles()\r\n   const { numSelected } = props\r\n\r\n   return (\r\n      <Toolbar\r\n         className={clsx(classes.root, {\r\n            [classes.highlight]: numSelected > 0,\r\n         })}\r\n      >\r\n         <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n         >\r\n            <h3 className='text-center'> Danh sách đơn hàng</h3>\r\n         </Typography>\r\n      </Toolbar>\r\n   )\r\n}\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n   numSelected: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n      padding: theme.spacing(3),\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nconst MyOrdersScreen = ({ history }) => {\r\n   const classes = useStyles()\r\n   const [name, setName] = useState('')\r\n   const [email, setEmail] = useState('')\r\n   const [password, setPassword] = useState('')\r\n   const [confirmPassword, setConfirmPassword] = useState('')\r\n   const [message, setMessage] = useState(null)\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('date')\r\n\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = orders?.map((n) => n.name)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   // const handleClick = (event, name) => {\r\n   //    const selectedIndex = selected.indexOf(name)\r\n   //    let newSelected = []\r\n\r\n   //    if (selectedIndex === -1) {\r\n   //       newSelected = newSelected.concat(selected, name)\r\n   //    } else if (selectedIndex === 0) {\r\n   //       newSelected = newSelected.concat(selected.slice(1))\r\n   //    } else if (selectedIndex === selected.length - 1) {\r\n   //       newSelected = newSelected.concat(selected.slice(0, -1))\r\n   //    } else if (selectedIndex > 0) {\r\n   //       newSelected = newSelected.concat(\r\n   //          selected.slice(0, selectedIndex),\r\n   //          selected.slice(selectedIndex + 1)\r\n   //       )\r\n   //    }\r\n\r\n   //    setSelected(newSelected)\r\n   // }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n   const { success } = userUpdateProfile\r\n\r\n   const orderListMy = useSelector((state) => state.orderListMy)\r\n   const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n   const emptyRows =\r\n      orders !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, orders.length - page * rowsPerPage)\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push()\r\n      } else {\r\n         // dispatch(getUserDetails('profile'))\r\n         dispatch(listMyOrders())\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, history, userInfo, user])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         {loadingOrders ? (\r\n            <Loader />\r\n         ) : errorOrders ? (\r\n            <Announcement variant='danger'>{errorOrders}</Announcement>\r\n         ) : (\r\n            <>\r\n               <div className={classes.root}>\r\n                  <Paper className={classes.paper} boxShadow={3}>\r\n                     <EnhancedTableToolbar numSelected={selected.length} />\r\n                     <TableContainer>\r\n                        <Table\r\n                           className={classes.table}\r\n                           aria-labelledby='tableTitle'\r\n                           size={dense ? 'small' : 'medium'}\r\n                           aria-label='enhanced table'\r\n                        >\r\n                           <EnhancedTableHead\r\n                              classes={classes}\r\n                              numSelected={selected.length}\r\n                              order={order}\r\n                              orderBy={orderBy}\r\n                              onSelectAllClick={handleSelectAllClick}\r\n                              onRequestSort={handleRequestSort}\r\n                              rowCount={orders?.length}\r\n                           />\r\n                           <TableBody>\r\n                              {stableSort(orders, getComparator(order, orderBy))\r\n                                 .slice(\r\n                                    page * rowsPerPage,\r\n                                    page * rowsPerPage + rowsPerPage\r\n                                 )\r\n                                 .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.name)\r\n                                    const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                    return (\r\n                                       <TableRow\r\n                                          hover\r\n                                          // onClick={(event) =>\r\n                                          //    handleClick(event, row._id)\r\n                                          // }\r\n                                          role='checkbox'\r\n                                          aria-checked={isItemSelected}\r\n                                          tabIndex={-1}\r\n                                          key={row._id}\r\n                                          selected={isItemSelected}\r\n                                       >\r\n                                          {/* <TableCell padding='checkbox'>\r\n                                             <Checkbox\r\n                                                checked={isItemSelected}\r\n                                                inputProps={{\r\n                                                   'aria-labelledby': labelId,\r\n                                                }}\r\n                                             />\r\n                                          </TableCell> */}\r\n                                          <TableCell\r\n                                             component='th'\r\n                                             id={labelId}\r\n                                             scope='row'\r\n                                             align='center'\r\n                                          >\r\n                                             {row._id}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {row.orderItems.map(\r\n                                                (item, index) => (\r\n                                                   <Row>\r\n                                                      <Col md={12}>\r\n                                                         <TableCell\r\n                                                            key={index}\r\n                                                            className='border-0'\r\n                                                            align='center'\r\n                                                         >\r\n                                                            {item.name.slice(\r\n                                                               0,\r\n                                                               30\r\n                                                            ) + '...'}\r\n                                                         </TableCell>\r\n                                                      </Col>\r\n                                                   </Row>\r\n                                                )\r\n                                             )}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {format(\r\n                                                new utcToZonedTime(\r\n                                                   row.createdAt,\r\n                                                   'Asia/Ho_Chi_Minh'\r\n                                                ),\r\n                                                'HH:mm:ss - dd/MM/yyyy',\r\n                                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                             )}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {formatMoney(row.totalPrice, 'đ')}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {row.paymentMethod ===\r\n                                                'Thanh toán bằng tiền mặt' &&\r\n                                             row.isDelivered ? (\r\n                                                <strong className='mb-0'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         row.deliveredAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </strong>\r\n                                             ) : row.paymentMethod ===\r\n                                                  'Thanh toán bằng PayPal' &&\r\n                                               row.isPaid ? (\r\n                                                <strong className='mb-0'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         row.paidAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </strong>\r\n                                             ) : (\r\n                                                <i\r\n                                                   className='fas fa-times'\r\n                                                   style={{ color: 'red' }}\r\n                                                />\r\n                                             )}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             {row.orderStatus === 'Huỷ' ? (\r\n                                                <strong className='text-danger border border-danger p-2 rounded-pill'>\r\n                                                   {row.orderStatus}\r\n                                                </strong>\r\n                                             ) : row.orderStatus ===\r\n                                               'Đã giao hàng' ? (\r\n                                                <strong className='text-success border border-success p-2 rounded-pill'>\r\n                                                   {row.orderStatus}\r\n                                                </strong>\r\n                                             ) : (\r\n                                                <strong className='text-warning border border-warning p-2 rounded-pill'>\r\n                                                   {row.orderStatus}\r\n                                                </strong>\r\n                                             )}\r\n                                          </TableCell>\r\n                                          <TableCell align='center'>\r\n                                             <LinkContainer\r\n                                                to={`/order/${row._id}`}\r\n                                             >\r\n                                                <div>\r\n                                                   <Button\r\n                                                      style={{\r\n                                                         fontSize: '1rem',\r\n                                                      }}\r\n                                                      variant='outline-light'\r\n                                                      className='text-uppercase p-2 pl-3 pr-3 btn_color_details rounded-pill'\r\n                                                   >\r\n                                                      <i class='fab fa-connectdevelop'></i>\r\n                                                   </Button>\r\n                                                </div>\r\n                                             </LinkContainer>\r\n                                          </TableCell>\r\n                                       </TableRow>\r\n                                    )\r\n                                 })}\r\n                              {emptyRows > 0 && (\r\n                                 <TableRow\r\n                                    style={{\r\n                                       height: (dense ? 33 : 53) * emptyRows,\r\n                                    }}\r\n                                 >\r\n                                    <TableCell colSpan={6} />\r\n                                 </TableRow>\r\n                              )}\r\n                           </TableBody>\r\n                        </Table>\r\n                     </TableContainer>\r\n                     <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component='div'\r\n                        count={orders.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                     />\r\n                  </Paper>\r\n                  <FormControlLabel\r\n                     control={\r\n                        <Switch checked={dense} onChange={handleChangeDense} />\r\n                     }\r\n                     label='Dense padding'\r\n                  />\r\n               </div>\r\n            </>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default MyOrdersScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\configAuth.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js",["477","478","479","480","481","482","483","484","485","486","487","488","489","490"],"import Step from '@material-ui/core/Step'\r\nimport StepConnector from '@material-ui/core/StepConnector'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Check from '@material-ui/icons/Check'\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport VideoLabelIcon from '@material-ui/icons/VideoLabel'\r\nimport CachedIcon from '@material-ui/icons/Cached'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping'\r\nimport EventAvailableIcon from '@material-ui/icons/EventAvailable'\r\n\r\nconst useQontoStepIconStyles = makeStyles({\r\n  root: {\r\n    color: '#eaeaf0',\r\n    display: 'flex',\r\n    height: 22,\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    color: '#784af4',\r\n  },\r\n  circle: {\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: '50%',\r\n    backgroundColor: 'currentColor',\r\n  },\r\n  completed: {\r\n    color: '#784af4',\r\n    zIndex: 1,\r\n    fontSize: 18,\r\n  },\r\n})\r\n\r\nfunction QontoStepIcon(props) {\r\n  const classes = useQontoStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n      })}\r\n    >\r\n      {completed ? (\r\n        <Check className={classes.completed} />\r\n      ) : (\r\n        <div className={classes.circle} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n}\r\n\r\nconst ColorlibConnector = withStyles({\r\n  alternativeLabel: {\r\n    top: 22,\r\n  },\r\n  active: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  completed: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  line: {\r\n    height: 3,\r\n    border: 0,\r\n    backgroundColor: '#eaeaf0',\r\n    borderRadius: 1,\r\n  },\r\n})(StepConnector)\r\n\r\nconst useColorlibStepIconStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: '#ccc',\r\n    zIndex: 1,\r\n    color: '#fff',\r\n    width: 50,\r\n    height: 50,\r\n    display: 'flex',\r\n    borderRadius: '50%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n  completed: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n})\r\n\r\nfunction ColorlibStepIcon(props) {\r\n  const classes = useColorlibStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  const icons = {\r\n    1: <CachedIcon style={{ fontSize: '1.8rem' }} />,\r\n    2: <LocalShippingIcon style={{ fontSize: '1.8rem' }} />,\r\n    3: <EventAvailableIcon style={{ fontSize: '1.8rem' }} />,\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n        [classes.completed]: completed,\r\n      })}\r\n    >\r\n      {icons[String(props.icon)]}\r\n    </div>\r\n  )\r\n}\r\n\r\nColorlibStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n  /**\r\n   * The label displayed in the step icon.\r\n   */\r\n  icon: PropTypes.node,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst ProgressShipping = () => {\r\n  const classes = useStyles()\r\n  const [activeStep, setActiveStep] = useState(0)\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  // const steps = getSteps()\r\n\r\n  const steps = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng']\r\n\r\n  const stepHandler = () => {\r\n    setActiveStep(1)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper\r\n        alternativeLabel\r\n        activeStep={steps.indexOf(order.orderStatus)}\r\n        connector={<ColorlibConnector />}\r\n      >\r\n        {steps.map((label) => (\r\n          <Step key={label} onChange={stepHandler}>\r\n            {order.orderStatus === label ? (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            ) : (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            )}\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressShipping\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\test.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js",["491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507"],"import Chip from '@material-ui/core/Chip'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useEffect } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCategoryDetails } from '../actions/categoryAction'\r\nimport {\r\n   getProductOfCategory,\r\n   getProductOfSubCategory,\r\n} from '../actions/productActions'\r\nimport { getSubCategoryDetails } from '../actions/subCategoryAction'\r\nimport FilterNav from '../components/FilterNav'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Message from '../components/Message'\r\nimport Meta from '../components/Meta'\r\nimport Paginate from '../components/Paginate'\r\nimport Product from '../components/Product'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport {\r\n   PRODUCT_OF_CATEGORY_RESET,\r\n   PRODUCT_OF_SUB_CATEGORY_RESET,\r\n} from '../constants/productConstants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      flexWrap: 'wrap',\r\n      '& > *': {\r\n         margin: theme.spacing(0.5),\r\n      },\r\n   },\r\n}))\r\n\r\nconst ProductOfCategoryScreen = ({ match }) => {\r\n   const keyword = match.params.keyword\r\n   const pageNumber = match.params.pageNumber || 1\r\n   const catId = match.params.id\r\n\r\n   const classes = useStyles()\r\n\r\n   const handleDelete = () => {\r\n      console.info('You clicked the delete icon.')\r\n   }\r\n\r\n   const handleClick = () => {\r\n      console.info('You clicked the Chip.')\r\n   }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const productOfCategory = useSelector((state) => state.productOfCategory)\r\n   const { loading, error, products, pages, page } = productOfCategory\r\n\r\n   const productOfSubCategory = useSelector(\r\n      (state) => state.productOfSubCategory\r\n   )\r\n   const {\r\n      loading: loadingSub,\r\n      error: errorSub,\r\n      products: productSub,\r\n   } = productOfSubCategory\r\n\r\n   const categoryDetails = useSelector((state) => state.categoryDetails)\r\n   const {\r\n      loading: loadingCat,\r\n      success: successCat,\r\n      category,\r\n   } = categoryDetails\r\n\r\n   const subCategoryDetails = useSelector((state) => state.subCategoryDetails)\r\n   const { subcat } = subCategoryDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const productFilter = useSelector((state) => state.productFilter)\r\n   const {\r\n      loading: loadingFilter,\r\n      success: successFilter,\r\n      product: productsFilter,\r\n   } = productFilter\r\n\r\n   const productSubFilter = useSelector((state) => state.productSubFilter)\r\n   const {\r\n      loading: loadingSubFilter,\r\n      success: successSubFilter,\r\n      product: productsSubFilter,\r\n   } = productSubFilter\r\n\r\n   const productFilterPrice = useSelector((state) => state.productFilterPrice)\r\n   const {\r\n      loading: loadingFilterPrice,\r\n      success: successFilterPrice,\r\n      product: productsFilterPrice,\r\n   } = productFilterPrice\r\n\r\n   console.log('product', productSub)\r\n\r\n   useEffect(() => {\r\n      dispatch(getProductOfCategory(catId))\r\n      // dispatch({ type: PRODUCT_OF_SUB_CATEGORY_RESET })\r\n\r\n      if (products.length === 0) {\r\n         dispatch({ type: PRODUCT_OF_CATEGORY_RESET })\r\n         dispatch(getProductOfSubCategory(catId))\r\n      }\r\n\r\n      if (userInfo) {\r\n         dispatch(getCategoryDetails(catId))\r\n         dispatch(getSubCategoryDetails(catId))\r\n      }\r\n\r\n      window.scrollTo(0, 0)\r\n   }, [dispatch, userInfo, catId])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <div className='pt-2'>\r\n            <>\r\n               <Meta />\r\n\r\n               <>\r\n                  <Row\r\n                     className='card_color shadow '\r\n                     style={{ minHeight: '105vh', backgroundColor: '#FFF' }}\r\n                  >\r\n                     <Col md={3} className='border-right border-gray'>\r\n                        <FilterNav />\r\n                     </Col>\r\n                     <Col md={9}>\r\n                        <div className='pt-2 pl-3 pr-3 '>\r\n                           <Col\r\n                              md={12}\r\n                              className='d-flex justify-content-center '\r\n                           >\r\n                              {productsFilter &&\r\n                                 productsFilter.map((prod) => (\r\n                                    <Chip\r\n                                       variant='outlined'\r\n                                       color='primary'\r\n                                       size='small'\r\n                                       label={prod.category.name}\r\n                                    />\r\n                                 ))}\r\n                           </Col>\r\n                           <Row>\r\n                              {loadingFilterPrice ? (\r\n                                 <SkeletonEffect />\r\n                              ) : (\r\n                                 productsFilterPrice?.map(\r\n                                    (\r\n                                       price // phai co ? de kiem tra price === null\r\n                                    ) => (\r\n                                       <>\r\n                                          <Col\r\n                                             key={price._id}\r\n                                             sm={12}\r\n                                             md={6}\r\n                                             lg={4}\r\n                                             xl={3}\r\n                                          >\r\n                                             <Product product={price} />\r\n                                          </Col>\r\n                                       </>\r\n                                    )\r\n                                 )\r\n                              )}\r\n                              {loadingFilter ? (\r\n                                 <SkeletonEffect />\r\n                              ) : (\r\n                                 productsFilter?.map(\r\n                                    (\r\n                                       product // phai co ? de kiem tra product === null\r\n                                    ) => (\r\n                                       <Col\r\n                                          key={product._id}\r\n                                          sm={12}\r\n                                          md={6}\r\n                                          lg={4}\r\n                                          xl={3}\r\n                                       >\r\n                                          <Product product={product} />\r\n                                       </Col>\r\n                                    )\r\n                                 )\r\n                              )}\r\n                              {loadingSubFilter ? (\r\n                                 <SkeletonEffect />\r\n                              ) : (\r\n                                 productsSubFilter?.map(\r\n                                    (\r\n                                       product // phai co ? de kiem tra product === null\r\n                                    ) => (\r\n                                       <Col\r\n                                          key={product._id}\r\n                                          sm={12}\r\n                                          md={6}\r\n                                          lg={4}\r\n                                          xl={3}\r\n                                       >\r\n                                          <Product product={product} />\r\n                                       </Col>\r\n                                    )\r\n                                 )\r\n                              )}\r\n                              {loading ? (\r\n                                 <SkeletonEffect />\r\n                              ) : (\r\n                                 products?.map(\r\n                                    (\r\n                                       product // phai co ? de kiem tra product === null\r\n                                    ) => (\r\n                                       <Col\r\n                                          key={product._id}\r\n                                          sm={12}\r\n                                          md={6}\r\n                                          lg={4}\r\n                                          xl={3}\r\n                                       >\r\n                                          <Product product={product} />\r\n                                       </Col>\r\n                                    )\r\n                                 )\r\n                              )}\r\n                              {loadingSub ? (\r\n                                 <SkeletonEffect />\r\n                              ) : (\r\n                                 productSub?.map(\r\n                                    (\r\n                                       product // phai co ? de kiem tra product === null\r\n                                    ) => (\r\n                                       <Col\r\n                                          key={product._id}\r\n                                          sm={12}\r\n                                          md={6}\r\n                                          lg={4}\r\n                                          xl={3}\r\n                                       >\r\n                                          <Product product={product} />\r\n                                       </Col>\r\n                                    )\r\n                                 )\r\n                              )}\r\n                           </Row>\r\n                           <div className='d-flex justify-content-center'>\r\n                              <Paginate\r\n                                 pages={pages}\r\n                                 page={page}\r\n                                 // keyword={keyword ? keyword : ''}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                     </Col>\r\n                  </Row>\r\n               </>\r\n            </>\r\n         </div>\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductOfCategoryScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js",["508","509"],"import { BookOutlined } from '@ant-design/icons'\r\nimport Slider from '@material-ui/core/Slider'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { Checkbox, Menu } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Image } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listCategories } from '../actions/categoryAction'\r\nimport {\r\n   filterPriceProduct,\r\n   filterProduct,\r\n   filterSubProduct,\r\n} from '../actions/productActions'\r\nimport { listSubCategory } from '../actions/subCategoryAction'\r\nimport {\r\n   PRODUCT_FILTER_PRICE_RESET,\r\n   PRODUCT_FILTER_SUB_RESET,\r\n   PRODUCT_OF_CATEGORY_RESET,\r\n   PRODUCT_OF_SUB_CATEGORY_RESET,\r\n} from '../constants/productConstants'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nconst rootSubmenuKeys = ['sub1', 'sub2', 'sub4']\r\n\r\nconst useStyles = makeStyles({\r\n   root: {\r\n      width: 300,\r\n   },\r\n})\r\n\r\nconst PrettoSlider = withStyles({\r\n   root: {\r\n      color: '#52af77',\r\n      height: 8,\r\n   },\r\n   thumb: {\r\n      height: 24,\r\n      width: 24,\r\n      backgroundColor: '#fff',\r\n      border: '2px solid currentColor',\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      '&:focus, &:hover, &$active': {\r\n         boxShadow: 'inherit',\r\n      },\r\n   },\r\n   active: {},\r\n   valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n   },\r\n   track: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n   },\r\n   rail: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n   },\r\n})(Slider)\r\n\r\nfunction valuetext(value) {\r\n   return `${value}`\r\n}\r\n\r\nconst FilterNav = () => {\r\n   const classes = useStyles()\r\n   const [value, setValue] = useState([0, 5000000])\r\n   const [cat, setCat] = useState([])\r\n   const [sub, setSub] = useState([])\r\n   const [start, setStart] = useState('')\r\n   const [end, setEnd] = useState('')\r\n   const [openKeys, setOpenKeys] = React.useState(['sub1', 'sub2'])\r\n\r\n   const onOpenChange = (keys) => {\r\n      const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1)\r\n      if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\r\n         setOpenKeys(keys)\r\n      } else {\r\n         setOpenKeys(latestOpenKey ? [latestOpenKey] : [])\r\n      }\r\n   }\r\n   function ValueLabelComponent(props) {\r\n      const { children, open, value } = props\r\n\r\n      props.index === 1 ? setEnd(props.value) : setStart(props.value)\r\n\r\n      return (\r\n         <Tooltip\r\n            open={open}\r\n            enterTouchDelay={0}\r\n            placement='bottom'\r\n            title={value.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n         >\r\n            {children}\r\n         </Tooltip>\r\n      )\r\n   }\r\n\r\n   // console.log('end', end)\r\n   // console.log('start', start)\r\n\r\n   ValueLabelComponent.propTypes = {\r\n      children: PropTypes.element.isRequired,\r\n      open: PropTypes.bool.isRequired,\r\n      value: PropTypes.number.isRequired,\r\n   }\r\n\r\n   const handleChange = (event, newValue) => {\r\n      setValue(newValue)\r\n   }\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category } = categoriesList\r\n\r\n   const subCategoryList = useSelector((state) => state.subCategoryList)\r\n   const { Sub } = subCategoryList\r\n\r\n   const productFilterPrice = useSelector((state) => state.productFilterPrice)\r\n   const { product: productsFilterPrice } = productFilterPrice\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   function onChange(checkedValues) {\r\n      if (checkedValues.target.checked === true) {\r\n         setCat([...cat, checkedValues.target.value])\r\n      } else {\r\n         cat.map(\r\n            (e) =>\r\n               e === checkedValues.target.value && cat.splice(cat.indexOf(e), 1)\r\n         )\r\n         setCat([...cat])\r\n      }\r\n   }\r\n\r\n   function onChange2(checkedValues) {\r\n      if (checkedValues.target.checked === true) {\r\n         setSub([...sub, checkedValues.target.value])\r\n      } else {\r\n         sub.map(\r\n            (e) =>\r\n               e === checkedValues.target.value && sub.splice(sub.indexOf(e), 1)\r\n         )\r\n         setSub([...sub])\r\n      }\r\n   }\r\n\r\n   console.log('sub', sub)\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      if ((cat.length === 0) & (sub.length === 0)) {\r\n         dispatch(filterPriceProduct([start, end]))\r\n      } else if (sub.length === 0) {\r\n         dispatch({ type: PRODUCT_FILTER_SUB_RESET })\r\n         dispatch({ type: PRODUCT_FILTER_PRICE_RESET })\r\n         dispatch({ type: PRODUCT_OF_SUB_CATEGORY_RESET })\r\n         dispatch({ type: PRODUCT_OF_CATEGORY_RESET })\r\n         dispatch(filterProduct(cat))\r\n      } else {\r\n         dispatch({ type: PRODUCT_FILTER_PRICE_RESET })\r\n         dispatch({ type: PRODUCT_OF_SUB_CATEGORY_RESET })\r\n         dispatch({ type: PRODUCT_OF_CATEGORY_RESET })\r\n         dispatch(filterSubProduct(sub))\r\n      }\r\n   }\r\n\r\n   useEffect(() => {\r\n      dispatch(listCategories())\r\n      dispatch(listSubCategory())\r\n   }, [dispatch])\r\n\r\n   return (\r\n      <>\r\n         <Form onSubmit={submitHandler}>\r\n            <div className='m-3 mb-0'>\r\n               <h5 className='justify-content-center mt-2 d-flex align-items-center'>\r\n                  <Image\r\n                     className='mr-2'\r\n                     src='https://img.icons8.com/material-outlined/20/000000/filter--v1.png'\r\n                  />\r\n                  Bộ lọc tìm kiếm\r\n               </h5>\r\n\r\n               <Form.Group>\r\n                  <strong className='mb-1 justify-content-center d-flex align-items-center mt-3 '>\r\n                     <Image\r\n                        className='pl-1 pr-1'\r\n                        src='https://img.icons8.com/fluent/24/000000/us-dollar.png'\r\n                     />\r\n                     Tìm kiếm theo giá\r\n                  </strong>\r\n                  <div className='d-flex align-items-center justify-content-center mb-1'>\r\n                     <p className='pr-1 mb-0'> Giá từ:</p>\r\n                     <strong\r\n                        className='mb-0'\r\n                        style={{ letterSpacing: '0.08rem' }}\r\n                     >\r\n                        {start\r\n                           .toString()\r\n                           .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'}\r\n                        {\r\n                           <Image\r\n                              className='pl-1 pr-1'\r\n                              src='https://img.icons8.com/fluent/24/000000/resize-horizontal.png'\r\n                           />\r\n                        }\r\n                        {end.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') +\r\n                           'đ'}\r\n                     </strong>\r\n                  </div>\r\n                  <PrettoSlider\r\n                     value={value}\r\n                     onChange={handleChange}\r\n                     ValueLabelComponent={ValueLabelComponent}\r\n                     aria-labelledby='range-slider'\r\n                     getAriaValueText={valuetext}\r\n                     valueLabelDisplay='auto'\r\n                     aria-label='pretto slider'\r\n                     min={0}\r\n                     step={50000}\r\n                     max={5000000}\r\n                  />\r\n               </Form.Group>\r\n\r\n               <Form.Group>\r\n                  <Menu\r\n                     mode='inline'\r\n                     openKeys={openKeys}\r\n                     onOpenChange={onOpenChange}\r\n                     style={{ width: 270 }}\r\n                     className='border-0'\r\n                  >\r\n                     <SubMenu\r\n                        key='sub1'\r\n                        icon={<BookOutlined />}\r\n                        title='Tìm kiếm theo danh mục'\r\n                     >\r\n                        {category &&\r\n                           category.map((cate, key) => (\r\n                              <Menu.Item key={key}>\r\n                                 <Checkbox value={cate._id} onChange={onChange}>\r\n                                    {cate.name}\r\n                                 </Checkbox>\r\n                              </Menu.Item>\r\n                           ))}\r\n                     </SubMenu>\r\n                  </Menu>\r\n               </Form.Group>\r\n\r\n               <Form.Group>\r\n                  <Menu\r\n                     mode='inline'\r\n                     openKeys={openKeys}\r\n                     onOpenChange={onOpenChange}\r\n                     style={{ width: 270 }}\r\n                     className='border-0'\r\n                  >\r\n                     <SubMenu\r\n                        key='sub2'\r\n                        icon={<BookOutlined />}\r\n                        title='Tìm kiếm theo danh mục con'\r\n                     >\r\n                        {Sub &&\r\n                           Sub.map((cate, key) => (\r\n                              <Menu.Item key={key}>\r\n                                 <Checkbox\r\n                                    value={cate._id}\r\n                                    onChange={onChange2}\r\n                                 >\r\n                                    {cate.name}\r\n                                 </Checkbox>\r\n                              </Menu.Item>\r\n                           ))}\r\n                     </SubMenu>\r\n                  </Menu>\r\n               </Form.Group>\r\n               <Form.Group className='text-center '>\r\n                  <Button\r\n                     type='submit'\r\n                     size='normal'\r\n                     variant='outline-dark rounded-pill p-1 pl-4 pr-4'\r\n                     style={{ letterSpacing: '0.08rem', fontSize: '0.85rem' }}\r\n                  >\r\n                     Tìm kiếm\r\n                  </Button>\r\n               </Form.Group>\r\n            </div>\r\n         </Form>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default FilterNav\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js",["510"],"import FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useState } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Bar, BarChart, CartesianGrid, Tooltip, XAxis, YAxis } from 'recharts'\r\nimport { consultOrder } from '../../actions/orderActions'\r\nimport Header from './components/Header'\r\nimport ListNumbers from './components/ListNumber'\r\nimport SideBar from './components/SideBar'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 150,\r\n   },\r\n}))\r\n\r\nfunction format(n, currency) {\r\n   return n?.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst AdminScreen = ({ history }) => {\r\n   const classes = useStyles()\r\n   const dispatch = useDispatch()\r\n\r\n   const [consult, setConsult] = useState('')\r\n\r\n   const orderConsult = useSelector((state) => state.orderConsult)\r\n   const { order } = orderConsult\r\n\r\n   const handleChange = (event) => {\r\n      setConsult(event.target.value)\r\n      dispatch(consultOrder({ values: event.target.value }))\r\n   }\r\n\r\n   const data = order?.orderFilters.map((cn) => ({\r\n      name: cn._id,\r\n      'Số đơn hàng': cn.count,\r\n      'Tổng doanh thu': cn.total,\r\n   }))\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col\r\n               md={10}\r\n               className='pl-0 pt-4'\r\n               style={{ backgroundColor: '#fff' }}\r\n            >\r\n               <h3 className='text-center'>Thống kê</h3>\r\n               <ListNumbers />\r\n               <div className='d-flex justify-content-end mr-4'>\r\n                  <FormControl\r\n                     className={classes.formControl}\r\n                     style={{ zIndex: '4' }}\r\n                  >\r\n                     <InputLabel id='demo-simple-select-label'>\r\n                        Xem theo:\r\n                     </InputLabel>\r\n                     <Select\r\n                        labelId='demo-simple-select-label'\r\n                        id='demo-simple-select'\r\n                        value={consult}\r\n                        onChange={handleChange}\r\n                        align='center'\r\n                        type='submit'\r\n                     >\r\n                        <MenuItem value={'day7Ago'}>7 ngày trước</MenuItem>\r\n                        <MenuItem value={'currentWeek'}>Tuần này</MenuItem>\r\n                        <MenuItem value={'monthAgo'}>Tháng trước</MenuItem>\r\n                        <MenuItem value={'currentMonth'}>Tháng này</MenuItem>\r\n                        <MenuItem value={'year'}>Cả năm</MenuItem>\r\n                     </Select>\r\n                  </FormControl>\r\n               </div>\r\n               <BarChart width={1100} height={500} data={data}>\r\n                  <XAxis\r\n                     dataKey='name'\r\n                     stroke='#334443'\r\n                     style={{ fontWeight: '700' }}\r\n                  />\r\n                  <YAxis />\r\n                  <Tooltip\r\n                     wrapperStyle={{\r\n                        width: 220,\r\n                        backgroundColor: '#ccc',\r\n                        fontSize: '0.9rem',\r\n                        fontWeight: '700',\r\n                     }}\r\n                  />\r\n\r\n                  <CartesianGrid\r\n                     stroke='#2e5a1c'\r\n                     // strokeDasharray='5 5'\r\n                     type='monotone'\r\n                  />\r\n                  <Bar dataKey={'Tổng doanh thu'} fill='#4e9525' barSize={20} />\r\n                  <Bar dataKey={'Số đơn hàng'} fill='#4e9525' barSize={1} />\r\n               </BarChart>\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default AdminScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js",["511","512","513","514","515","516","517","518","519","520","521","522","523","524"],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js",["525"],"import React, { useEffect, useState } from 'react'\r\nimport { Menu, Button } from 'antd'\r\nimport {\r\n   AppstoreOutlined,\r\n   MenuUnfoldOutlined,\r\n   MenuFoldOutlined,\r\n   PieChartOutlined,\r\n   DesktopOutlined,\r\n   ContainerOutlined,\r\n   MailOutlined,\r\n} from '@ant-design/icons'\r\nimport { Link } from '@material-ui/core'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nconst SideBar = () => {\r\n   const location = useLocation()\r\n\r\n   const [state, setState] = useState(false)\r\n   const [selectedKey, setSelectedKey] = useState('/')\r\n\r\n   useEffect(() => {\r\n      let path = location.pathname\r\n      if (path === '/') {\r\n         path = '/home'\r\n      }\r\n      setSelectedKey(path)\r\n   }, [location])\r\n\r\n   const toggleCollapsed = () => {\r\n      setState(!state)\r\n   }\r\n\r\n   console.log(selectedKey)\r\n\r\n   return (\r\n      <>\r\n         <div>\r\n            <Button\r\n               type='primary'\r\n               onClick={toggleCollapsed}\r\n               // style={{ marginBottom: 16 }}\r\n            >\r\n               {React.createElement(\r\n                  state ? MenuUnfoldOutlined : MenuFoldOutlined\r\n               )}\r\n            </Button>\r\n            <Menu\r\n               // defaultSelectedKeys={selectedKey}\r\n               defaultOpenKeys={['sub1', 'sub2', 'sub3']}\r\n               mode='inline'\r\n               theme='dark'\r\n               inlineCollapsed={state}\r\n               selectedKeys={selectedKey}\r\n               style={{ height: '100vh', backgroundColor: '#b68973' }}\r\n            >\r\n               <Menu.Item key='/admin' icon={<PieChartOutlined />}>\r\n                  <Link href='/admin' className='text-decoration-none '>\r\n                     Thống kê\r\n                  </Link>\r\n               </Menu.Item>\r\n               <Menu.Item key='/admin/userlist' icon={<DesktopOutlined />}>\r\n                  <Link href='/admin/userlist' className='text-decoration-none'>\r\n                     Người dùng\r\n                  </Link>\r\n               </Menu.Item>\r\n               <Menu.Item\r\n                  key='/admin/categorieslist'\r\n                  icon={<ContainerOutlined />}\r\n               >\r\n                  <Link\r\n                     href='/admin/categorieslist'\r\n                     className='text-decoration-none'\r\n                  >\r\n                     Danh mục\r\n                  </Link>\r\n               </Menu.Item>\r\n               <Menu.Item\r\n                  key='/admin/subcategorieslist'\r\n                  icon={<ContainerOutlined />}\r\n               >\r\n                  <Link\r\n                     href='/admin/subcategorieslist'\r\n                     className='text-decoration-none'\r\n                  >\r\n                     Danh mục con\r\n                  </Link>\r\n               </Menu.Item>\r\n               <Menu.Item\r\n                  key='/admin/supplierlist'\r\n                  icon={<ContainerOutlined />}\r\n               >\r\n                  <Link\r\n                     href='/admin/supplierlist'\r\n                     className='text-decoration-none'\r\n                  >\r\n                     Nhà cung cấp\r\n                  </Link>\r\n               </Menu.Item>\r\n               <Menu.Item key='/admin/orderlist' icon={<ContainerOutlined />}>\r\n                  <Link\r\n                     href='/admin/orderlist'\r\n                     className='text-decoration-none'\r\n                  >\r\n                     Đơn hàng\r\n                  </Link>\r\n               </Menu.Item>\r\n               <SubMenu key='sub1' icon={<MailOutlined />} title='Sản phẩm'>\r\n                  <Menu.Item\r\n                     key='/admin/productlist'\r\n                     className='m-0 pb-2'\r\n                     // style={{ backgroundColor: '#587B7F' }}\r\n                  >\r\n                     <Link\r\n                        href='/admin/productlist'\r\n                        className='text-decoration-none'\r\n                     >\r\n                        Danh sách\r\n                     </Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                     key='/admin/product/create'\r\n                     className='m-0  pb-4'\r\n                     // style={{ backgroundColor: '#587B7F' }}\r\n                  >\r\n                     <Link\r\n                        href='/admin/product/create'\r\n                        className='text-decoration-none'\r\n                     >\r\n                        Thêm\r\n                     </Link>\r\n                  </Menu.Item>\r\n               </SubMenu>\r\n               {/* <SubMenu\r\n            key='sub2'\r\n            icon={<AppstoreOutlined />}\r\n            title='Navigation Two'\r\n          >\r\n            <Menu.Item key='9'>Option 9</Menu.Item>\r\n            <Menu.Item key='10'>Option 10</Menu.Item>\r\n            <SubMenu key='sub3' title='Submenu'>\r\n              <Menu.Item key='11'>Option 11</Menu.Item>\r\n              <Menu.Item key='12'>Option 12</Menu.Item>\r\n            </SubMenu>\r\n          </SubMenu> */}\r\n            </Menu>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default SideBar\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js",["526"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport { deleteUser, listUsers } from '../../actions/userActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  { id: 'email', numeric: true, disablePadding: false, label: 'ĐỊA CHỈ EMAIL' },\r\n  { id: 'isAdmin', numeric: true, disablePadding: false, label: 'ADMIN' },\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction UserListScreen({ history }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((user) => user._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userList = useSelector((state) => state.userList)\r\n  const { loading, error, users } = userList\r\n\r\n  const emptyRows =\r\n    users !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage)\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDelete = useSelector((state) => state.userDelete)\r\n  const { success: successDelete } = userDelete\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteUser(id))\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = users.find((user) => user._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>Danh sách tài khoản người dùng</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers())\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch, history, successDelete, userInfo])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 '>\r\n          {loading ? (\r\n            <Loader />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div className={classes.root}>\r\n                <Paper\r\n                  className={classes.paper}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={users.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(users, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((user, index) => {\r\n                            const isItemSelected = isSelected(user._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) =>\r\n                                  handleClick(event, user._id)\r\n                                }\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={user._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {user._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {user.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {user.email}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {' '}\r\n                                  {user.isAdmin ? (\r\n                                    <i\r\n                                      className='fas fa-check'\r\n                                      style={{ color: 'green' }}\r\n                                    ></i>\r\n                                  ) : (\r\n                                    <i\r\n                                      className='fas fa-times'\r\n                                      style={{ color: 'red' }}\r\n                                    ></i>\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/user/${user._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='info'\r\n                                      className='btn-sm rounded-pill'\r\n                                    >\r\n                                      <i className='far fa-edit'></i>\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={users.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js",["527","528"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n  createCategory,\r\n  deleteCategory,\r\n  listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst CategoriesListScreen = ({ history }) => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = category.map((cat) => cat._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n  const { loading, error, category } = categoriesListAdm\r\n\r\n  const categoryDelete = useSelector((state) => state.categoryDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = categoryDelete\r\n\r\n  const categoryCreate = useSelector((state) => state.categoryCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    category: createdProduct,\r\n  } = categoryCreate\r\n\r\n  const emptyRows =\r\n    category !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, category.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteCategory(id))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = category.find((cat) => cat._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH DANH MỤC</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listCategoriesAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createCategory(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingDelete && (\r\n              <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n            ) && <Loader />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n          {loadingCreate && (\r\n            <MessageSuccess\r\n              variant={'Đã thêm ' + name + ' thành công'}\r\n            ></MessageSuccess>\r\n          )}\r\n          {errorCreate && <Message>{errorCreate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Dialog\r\n                  disableBackdropClick\r\n                  disableEscapeKeyDown\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby='form-dialog-title'\r\n                  maxWidth='xl'\r\n                >\r\n                  <div className='d-flex justify-content-end'>\r\n                    <Button\r\n                      onClick={handleClose}\r\n                      className='p-1 m-1 rounded-pill'\r\n                      variant='light'\r\n                    >\r\n                      <Close />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <DialogContent style={{ width: '30rem' }}>\r\n                    <h4 className='text-center'>Tạo danh mục</h4>\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                          Tên danh mục\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='name'\r\n                          size='normal'\r\n                          placeholder='Enter name'\r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <div className='pl-3 pr-3 text-center'>\r\n                        <Button\r\n                          type='submit'\r\n                          size='sm'\r\n                          variant='outline-light'\r\n                          className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                          style={{\r\n                            fontSize: '1rem',\r\n                            letterSpacing: '0.25rem',\r\n                          }}\r\n                        >\r\n                          Tạo\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </DialogContent>\r\n                </Dialog>\r\n              </div>\r\n              <div className={classes.root}>\r\n                <div className='d-flex justify-content-end'>\r\n                  <Button\r\n                    variant='outline-light'\r\n                    className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                    onClick={handleClickOpen}\r\n                    size='normal'\r\n                  >\r\n                    <i className='fas fa-plus'></i> Tạo danh mục\r\n                  </Button>\r\n                </div>\r\n                <Paper\r\n                  className={classes.paper + 'shadow'}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={category.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(category, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((cat, index) => {\r\n                            const isItemSelected = isSelected(cat._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) => handleClick(event, cat._id)}\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={cat._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {cat._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {cat.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.createdAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.updatedAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - MM/dd/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/category/${cat._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-sm rounded-pill btn_color_details'\r\n                                    >\r\n                                      CHI TIẾT\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={category.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoriesListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js",["529","530"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport { default as React, useEffect } from 'react'\r\nimport { Button, Col, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport {\r\n   getCategoryDetails,\r\n   listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport { deleteProduct, listAllProduct } from '../../actions/productActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport '../../notisfied.css'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: false, disablePadding: false, label: 'Tên' },\r\n   { id: 'image', numeric: false, disablePadding: false, label: 'Ảnh' },\r\n   { id: 'price', numeric: true, disablePadding: false, label: 'Giá' },\r\n   { id: 'category', numeric: false, disablePadding: false, label: 'Thể Loại' },\r\n   { id: 'quantity', numeric: true, disablePadding: false, label: 'Số lượng' },\r\n   { id: 'action', numeric: false, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = products.map((product) => product._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n   const pageNumber = match.params.pageNumber || 1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category: categoryCat } = categoriesList\r\n\r\n   const productListAll = useSelector((state) => state.productListAll)\r\n   const { loading, error, products } = productListAll\r\n\r\n   const emptyRows =\r\n      products !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, products.length - page * rowsPerPage)\r\n\r\n   const productDelete = useSelector((state) => state.productDelete)\r\n   const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n   } = productDelete\r\n\r\n   const productCreate = useSelector((state) => state.productCreate)\r\n   const { success: successCreate, product: createdProduct } = productCreate\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   useEffect(() => {\r\n      if (!userInfo.isAdmin) {\r\n         history.push('/login')\r\n      }\r\n\r\n      if (userInfo) {\r\n         dispatch(listCategoriesAdm())\r\n         dispatch(getCategoryDetails(categoryCat.map((e) => e._id)))\r\n      }\r\n\r\n      if (successCreate) {\r\n         history.push(`/admin/product/${createdProduct._id}/edit`)\r\n      } else {\r\n         dispatch(listAllProduct())\r\n      }\r\n   }, [dispatch, history, userInfo, successDelete, successCreate])\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('You are sure?')) {\r\n         dispatch(deleteProduct(id))\r\n         setSelected([])\r\n      }\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               >\r\n                  <h2>Danh sách sản phẩm</h2>\r\n               </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingDelete && <Loader />}\r\n               {errorDelete && <Message>{errorDelete}</Message>}\r\n\r\n               {loading ? (\r\n                  <Loader />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <>\r\n                     <div className='text-right bg-light'>\r\n                        <LinkContainer to='/admin/product/create'>\r\n                           <Button\r\n                              variant='outline-dark'\r\n                              className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                           >\r\n                              <i className='fas fa-plus'></i> Thêm sản phẩm\r\n                           </Button>\r\n                        </LinkContainer>\r\n                     </div>\r\n                     <div className={classes.root}>\r\n                        <Paper\r\n                           className={classes.paper}\r\n                           // style={{\r\n                           //   borderRadius: '1rem',\r\n                           //   border: '0.25px solid #ddd',\r\n                           // }}\r\n                        >\r\n                           <TableContainer\r\n                              className='text-center p-2'\r\n                              style={{\r\n                                 borderRadius: '1rem',\r\n                              }}\r\n                           >\r\n                              <EnhancedTableToolbar\r\n                                 numSelected={selected.length}\r\n                              />\r\n                              <Table\r\n                                 className={classes.table}\r\n                                 aria-labelledby='tableTitle'\r\n                                 size={dense ? 'small' : 'medium'}\r\n                                 aria-label='enhanced table'\r\n                              >\r\n                                 <EnhancedTableHead\r\n                                    classes={classes}\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={products.length}\r\n                                    colSpan={1}\r\n                                 />\r\n                                 <TableBody>\r\n                                    {stableSort(\r\n                                       products,\r\n                                       getComparator(order, orderBy)\r\n                                    )\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((product, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             product._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(\r\n                                                      event,\r\n                                                      product._id\r\n                                                   )\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={product._id}\r\n                                                selected={isItemSelected}\r\n                                             >\r\n                                                <TableCell padding='checkbox'>\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   component='th'\r\n                                                   id={labelId}\r\n                                                   scope='row'\r\n                                                   padding='none'\r\n                                                   align='center'\r\n                                                   className='text-center text-capitalize'\r\n                                                >\r\n                                                   {product._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center text-capitalize'\r\n                                                >\r\n                                                   <p className='text-capitalize'>\r\n                                                      {product.name}\r\n                                                   </p>\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   <Image\r\n                                                      src={\r\n                                                         product.images[0].url\r\n                                                      }\r\n                                                      fluid\r\n                                                      className='rounded p-1'\r\n                                                   />\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align='center'>\r\n                                                   {formatMoney(\r\n                                                      product.price,\r\n                                                      'đ'\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {categoryCat &&\r\n                                                      categoryCat.map(\r\n                                                         (cat, index) =>\r\n                                                            cat._id ===\r\n                                                               product.category &&\r\n                                                            cat.name\r\n                                                      )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   style={{ padding: '1px' }}\r\n                                                >\r\n                                                   {product.countInStock}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/product/${product._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='outline-light'\r\n                                                         className='btn-block rounded-pill btn_color_details'\r\n                                                      >\r\n                                                         <i className='far fa-edit'></i>\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                    {emptyRows > 0 && (\r\n                                       <TableRow\r\n                                          style={{\r\n                                             height:\r\n                                                (dense ? 33 : 53) * emptyRows,\r\n                                          }}\r\n                                       >\r\n                                          <TableCell colSpan={6} />\r\n                                       </TableRow>\r\n                                    )}\r\n                                 </TableBody>\r\n                              </Table>\r\n                           </TableContainer>\r\n                           <TablePagination\r\n                              rowsPerPageOptions={[5, 10, 25]}\r\n                              component='div'\r\n                              count={products.length}\r\n                              rowsPerPage={rowsPerPage}\r\n                              page={page}\r\n                              onChangePage={handleChangePage}\r\n                              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                           />\r\n                        </Paper>\r\n                        <FormControlLabel\r\n                           control={\r\n                              <Switch\r\n                                 checked={dense}\r\n                                 onChange={handleChangeDense}\r\n                              />\r\n                           }\r\n                           label='Dense padding'\r\n                        />\r\n                     </div>\r\n                  </>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js",["531","532","533","534","535","536"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport Resizer from 'react-image-file-resizer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listCategoriesAdm } from '../../actions/categoryAction'\r\nimport { deleteFileImages, uploadFileImages } from '../../actions/cloudinary'\r\nimport { createProduct, newProduct } from '../../actions/productActions'\r\nimport { listSupplierAdm } from '../../actions/supplierActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { PRODUCT_CREATE_RESET } from '../../constants/productConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\nimport { CloseOutlined } from '@ant-design/icons'\r\nimport { listSubCategoryAdm } from '../../actions/subCategoryAction'\r\n\r\nfunction formatPrice(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst ProductCreateScreen = () => {\r\n   const [name, setName] = useState('')\r\n   const [price, setPrice] = useState(0)\r\n   const [images, setImages] = useState([])\r\n   const [brand, setBrand] = useState('')\r\n   const [categoryy, setCategory] = useState('')\r\n   const [subCategory, setSubCategory] = useState('')\r\n   const [countInStock, setCountInStock] = useState(0)\r\n   const [description, setDescription] = useState('')\r\n   const [mass, setMass] = useState('')\r\n   const [hdsd, setHdsd] = useState('')\r\n   const [hdbq, setHdbq] = useState('')\r\n   const [supplierr, setSupplier] = useState('')\r\n   const [uploading, setUploading] = useState(false)\r\n   const [imagesPreview, setImagesPreview] = useState([])\r\n\r\n   const uploadFile = (e) => {\r\n      let files = e.target.files\r\n      let allImages = []\r\n      let preview = []\r\n      if (files) {\r\n         for (let i = 0; i < files.length; i++) {\r\n            preview.push(files[i].name)\r\n            Resizer.imageFileResizer(\r\n               files[i],\r\n               720,\r\n               720,\r\n               'JPEG',\r\n               100,\r\n               0,\r\n               (uri) => {\r\n                  try {\r\n                     uploadFileImages({ image: uri }).then((res) => {\r\n                        allImages.push(res.data)\r\n                        setImages(allImages)\r\n                     })\r\n                  } catch (error) {\r\n                     setUploading(false)\r\n                  }\r\n               }\r\n            )\r\n         }\r\n         console.log(allImages)\r\n      }\r\n   }\r\n\r\n   // const deleteFile = (e) => {\r\n   //    dispatch(deleteFileImages(e))\r\n   // }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const productCreate = useSelector((state) => state.productCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n   } = productCreate\r\n\r\n   const categoriesList = useSelector((state) => state.categoriesList)\r\n   const { category } = categoriesList\r\n\r\n   const subCategoryList = useSelector((state) => state.subCategoryList)\r\n   const { Sub } = subCategoryList\r\n\r\n   const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n   const { supplier } = supplierListAdm\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n\r\n      dispatch(\r\n         createProduct({\r\n            name,\r\n            price,\r\n            description,\r\n            categoryy,\r\n            supplierr,\r\n            countInStock,\r\n            mass,\r\n            brand,\r\n            hdbq,\r\n            images,\r\n            hdsd,\r\n            subCategory,\r\n         })\r\n      )\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successCreate) {\r\n         dispatch({ type: PRODUCT_CREATE_RESET })\r\n      } else {\r\n         if (userInfo) {\r\n            dispatch(listCategoriesAdm())\r\n            dispatch(listSubCategoryAdm())\r\n            dispatch(listSupplierAdm())\r\n         }\r\n      }\r\n   }, [dispatch, userInfo, successCreate])\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0 '>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 pr-4 '>\r\n               <>\r\n                  {/* {loadingCreate && (\r\n            <Announcement variant='success'> Thêm thành công</Announcement>\r\n          ) && <Loader />}\r\n        {errorCreate && <Announcement>{errorCreate}</Announcement>} */}\r\n                  {loadingCreate && (\r\n                     <MessageSuccess variant='Thêm thành công'></MessageSuccess>\r\n                  )}\r\n                  {loadingCreate ? (\r\n                     <Loader />\r\n                  ) : errorCreate ? (\r\n                     <Message>{errorCreate}</Message>\r\n                  ) : (\r\n                     <>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='bg-light border-0 pt-3 pb-3'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>Thêm sản phẩm</h2>\r\n\r\n                           <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Tên sản phẩm\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='name'\r\n                                 placeholder='Enter name'\r\n                                 value={name}\r\n                                 onChange={(e) => setName(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 Ảnh\r\n                              </Form.Label>\r\n\r\n                              <Row>\r\n                                 <Col\r\n                                    md={6}\r\n                                    className='align-items-center d-flex'\r\n                                 >\r\n                                    <Form.File\r\n                                       className='border border-grey'\r\n                                       id='image-file'\r\n                                       label='Choose File'\r\n                                       custom\r\n                                       onChange={uploadFile}\r\n                                       multiple\r\n                                    ></Form.File>\r\n                                 </Col>\r\n                                 <Col md={6}>\r\n                                    <Row>\r\n                                       {images &&\r\n                                          images.map((img) => (\r\n                                             <Col md={3}>\r\n                                                <div>\r\n                                                   <Button\r\n                                                      className=''\r\n                                                      style={{\r\n                                                         // marginBottom: '-35%',\r\n                                                         zIndex: '5',\r\n                                                         color: 'black',\r\n                                                      }}\r\n                                                      size='sm'\r\n                                                      variant='outline-light'\r\n                                                      // onClick={deleteFile(\r\n                                                      //    images.public_id\r\n                                                      // )}\r\n                                                   >\r\n                                                      <CloseOutlined\r\n                                                         style={{\r\n                                                            fontSize: '1rem',\r\n                                                         }}\r\n                                                      />\r\n                                                   </Button>\r\n\r\n                                                   <Image\r\n                                                      src={img.url}\r\n                                                      className='rounded avatar_img'\r\n                                                      fluid\r\n                                                   />\r\n                                                </div>\r\n                                             </Col>\r\n                                          ))}\r\n                                    </Row>\r\n                                 </Col>\r\n                              </Row>\r\n                              {uploading && <Loader />}\r\n                           </Form.Group>\r\n\r\n                           <Row>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='brand'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Thể loại\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='text'\r\n                                       placeholder='Enter brand'\r\n                                       value={brand}\r\n                                       onChange={(e) =>\r\n                                          setBrand(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Số lượng trong kho\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={countInStock}\r\n                                       onChange={(e) =>\r\n                                          setCountInStock(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Danh mục\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={categoryy}\r\n                                       onChange={(e) =>\r\n                                          setCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {category &&\r\n                                          category.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={3}>\r\n                                 <Form.Group\r\n                                    controlId='price'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Giá\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='number'\r\n                                       placeholder='Enter price'\r\n                                       value={price}\r\n                                       onChange={(e) =>\r\n                                          setPrice(e.target.value)\r\n                                       }\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Row>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Danh mục con\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={subCategory}\r\n                                       onChange={(e) =>\r\n                                          setSubCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {Sub &&\r\n                                          Sub.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='countInStock'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Khối lượng\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill text-center'\r\n                                       type='text'\r\n                                       placeholder='Enter countInStock'\r\n                                       value={mass}\r\n                                       onChange={(e) => setMass(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                              <Col md={4}>\r\n                                 <Form.Group\r\n                                    controlId='category'\r\n                                    className='pl-3 pr-3'\r\n                                 >\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1 text-center'\r\n                                    >\r\n                                       Nhà cung cấp\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill '\r\n                                       type='text'\r\n                                       as='select'\r\n                                       placeholder='Enter category'\r\n                                       value={supplierr}\r\n                                       onChange={(e) =>\r\n                                          setSupplier(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option></option>\r\n                                       {supplier &&\r\n                                          supplier.map((cat, index) => (\r\n                                             <option\r\n                                                style={{ color: 'black' }}\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Col>\r\n                           </Row>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Nội dung\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={description}\r\n                                 onChange={(e) =>\r\n                                    setDescription(e.target.value)\r\n                                 }\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn sử dụng\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdsd}\r\n                                 onChange={(e) => setHdsd(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group\r\n                              controlId='description'\r\n                              className='pl-3 pr-3'\r\n                           >\r\n                              <Form.Label as='p' className='mb-1 ml-5'>\r\n                                 Hướng dẫn bảo quản\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 className='border border-grey rounded-pill'\r\n                                 type='text'\r\n                                 rows={3}\r\n                                 as='textarea'\r\n                                 placeholder='Enter description'\r\n                                 value={hdbq}\r\n                                 onChange={(e) => setHdbq(e.target.value)}\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Tạo\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </>\r\n                  )}\r\n               </>\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ProductCreateScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js",["537","538","539"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n  createSupplier,\r\n  deleteSupplier,\r\n  listSupplierAdm,\r\n} from '../../actions/supplierActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst SupplierListScreen = () => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = supplier.map((sup) => sup._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n  const { loading, error, supplier } = supplierListAdm\r\n\r\n  const supplierDelete = useSelector((state) => state.supplierDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = supplierDelete\r\n\r\n  const supplierCreate = useSelector((state) => state.supplierCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    supplier: createdProduct,\r\n  } = supplierCreate\r\n\r\n  const emptyRows =\r\n    supplier !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, supplier.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('Bạn có chắc?')) {\r\n      dispatch(deleteSupplier({ id }))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = supplier.find((cat) => cat._id)\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH NHÀ CUNG CẤP</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listSupplierAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  const submitHandlerDetails = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingDelete && (\r\n              <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n            ) && <Loader />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n          {loadingCreate && (\r\n            <MessageSuccess\r\n              variant={'Đã thêm ' + name + ' thành công'}\r\n            ></MessageSuccess>\r\n          )}\r\n          {errorCreate && <Message>{errorCreate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Dialog\r\n                  disableBackdropClick\r\n                  disableEscapeKeyDown\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby='form-dialog-title'\r\n                  maxWidth='xl'\r\n                >\r\n                  <div className='d-flex justify-content-end'>\r\n                    <Button\r\n                      onClick={handleClose}\r\n                      className='p-1 m-1 rounded-pill'\r\n                      variant='light'\r\n                    >\r\n                      <Close />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <DialogContent style={{ width: '30rem' }}>\r\n                    <h4 className='text-center'>Thêm nhà cung cấp</h4>\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                          Tên nhà cung cấp\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='name'\r\n                          size='normal'\r\n                          placeholder='Enter name'\r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <div className='pl-3 pr-3 text-center'>\r\n                        <Button\r\n                          type='submit'\r\n                          size='sm'\r\n                          variant='outline-light'\r\n                          className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                          style={{\r\n                            fontSize: '1rem',\r\n                            letterSpacing: '0.25rem',\r\n                          }}\r\n                        >\r\n                          Tạo\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </DialogContent>\r\n                </Dialog>\r\n              </div>\r\n\r\n              <div className={classes.root}>\r\n                <div className='d-flex justify-content-end'>\r\n                  <Button\r\n                    variant='outline-dark'\r\n                    className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                    onClick={handleClickOpen}\r\n                    size='normal'\r\n                  >\r\n                    <i className='fas fa-plus'></i> Thêm nhà cung cấp\r\n                  </Button>\r\n                </div>\r\n                <Paper className={classes.paper}>\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={supplier.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(supplier, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((sup, index) => {\r\n                            const isItemSelected = isSelected(sup._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) => handleClick(event, sup._id)}\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={sup._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {sup._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {sup.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      sup.createdAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      sup.updatedAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - MM/dd/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/supplier/${sup._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-sm rounded-pill btn_color_details'\r\n                                    >\r\n                                      CHI TIẾT\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={supplier.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js",["540","541","542"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Col, Row, Table } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport { listOrders, deleteOrder } from '../../actions/orderActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Message from '../../components/Message'\r\nimport Loader from '../../components/Loader'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport BubbleChartOutlinedIcon from '@material-ui/icons/BubbleChartOutlined'\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: true, disablePadding: false, label: 'NGƯỜI DÙNG' },\r\n   { id: 'date', numeric: true, disablePadding: false, label: 'NGÀY ĐẶT' },\r\n   { id: 'total', numeric: true, disablePadding: false, label: 'TỔNG TIỀN' },\r\n   { id: 'product', numeric: true, disablePadding: false, label: 'SẢN PHẨM' },\r\n   { id: 'paid', numeric: true, disablePadding: false, label: 'THANH TOÁN' },\r\n   {\r\n      id: 'delivered',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'GIAO HÀNG',\r\n   },\r\n   { id: 'action', numeric: false, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  style={{\r\n                     fontWeight: '700',\r\n                     fontSize: '0.8rem',\r\n                  }}\r\n                  className='table_th'\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {/* {orderBy === headCell.id ? (\r\n                        <div\r\n                           className={\r\n                              classes.visuallyHidden + 'text-capitalize'\r\n                           }\r\n                        >\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </div>\r\n                     ) : null} */}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      // paddingLeft: theme.spacing(2),\r\n      // paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n      padding: theme.spacing(1),\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nfunction OrderListScreen({ history, match }) {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = ord.map((order) => order._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const orderList = useSelector((state) => state.orderList)\r\n   const { loading, error, ordersList } = orderList\r\n\r\n   const ord = ordersList?.orders\r\n\r\n\r\n   const orderDelete = useSelector((state) => state.orderDelete)\r\n   const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n   } = orderDelete\r\n\r\n   const emptyRows =\r\n      ordersList?.orders !== undefined &&\r\n      rowsPerPage -\r\n         Math.min(rowsPerPage, ordersList?.orders.length - page * rowsPerPage)\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   useEffect(() => {\r\n      if (userInfo && userInfo.isAdmin) {\r\n         dispatch(listOrders())\r\n      } else {\r\n         history.push('/login')\r\n      }\r\n   }, [dispatch, history, userInfo, successDelete])\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('You are sure?')) {\r\n         dispatch(deleteOrder(id))\r\n      }\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               >\r\n                  {' '}\r\n                  <h2>Danh sách đơn hàng</h2>\r\n               </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#fff' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar fluid />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingDelete && <Loader />}\r\n               {errorDelete && <Message>{errorDelete}</Message>}\r\n               {loading ? (\r\n                  <Loader />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <div className={classes.root}>\r\n                     <Paper className={classes.paper}>\r\n                        <TableContainer\r\n                           className='text-center '\r\n                           style={{\r\n                              borderRadius: '1rem',\r\n                           }}\r\n                        >\r\n                           <EnhancedTableToolbar\r\n                              numSelected={selected.length}\r\n                           />\r\n                           <Table\r\n                              className={classes.table}\r\n                              aria-labelledby='tableTitle'\r\n                              size={dense ? 'small' : 'medium'}\r\n                              aria-label='enhanced table'\r\n                           >\r\n                              <EnhancedTableHead\r\n                                 classes={classes}\r\n                                 numSelected={selected.length}\r\n                                 order={order}\r\n                                 orderBy={orderBy}\r\n                                 onSelectAllClick={handleSelectAllClick}\r\n                                 onRequestSort={handleRequestSort}\r\n                                 rowCount={ordersList?.orders.length}\r\n                              />\r\n                              <TableBody>\r\n                                 {ordersList &&\r\n                                    ordersList.orders\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((order, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             order._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(event, order._id)\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={order._id}\r\n                                                selected={isItemSelected}\r\n                                                className='p-0'\r\n                                             >\r\n                                                <TableCell\r\n                                                   padding='checkbox'\r\n                                                   className='table_th'\r\n                                                >\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   id={labelId}\r\n                                                   // scope='row'\r\n                                                   // padding='none'\r\n                                                   align='center'\r\n                                                   className='table_th '\r\n                                                >\r\n                                                   {order._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   // component='th'\r\n                                                   className='text-capitalize table_th'\r\n                                                >\r\n                                                   {order.user &&\r\n                                                      order.user.name}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   className='table_th'\r\n                                                >\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         order.createdAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   className='table_th'\r\n                                                >\r\n                                                   {formatMoney(\r\n                                                      order.totalPrice,\r\n                                                      'đ'\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   className='table_th'\r\n                                                >\r\n                                                   {order.orderItems &&\r\n                                                      order.orderItems.map(\r\n                                                         (q) =>\r\n                                                            q.name.slice(\r\n                                                               0,\r\n                                                               20\r\n                                                            ) + '...'\r\n                                                      )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   style={{\r\n                                                      color: 'green',\r\n                                                      fontWeight: '700',\r\n                                                   }}\r\n                                                   className='table_th'\r\n                                                >\r\n                                                   {order.isPaid ? (\r\n                                                      format(\r\n                                                         new utcToZonedTime(\r\n                                                            order.paidAt,\r\n                                                            'Asia/Ho_Chi_Minh'\r\n                                                         ),\r\n                                                         'HH:mm:ss - dd/MM/yyyy',\r\n                                                         {\r\n                                                            timeZone:\r\n                                                               'Asia/Ho_Chi_Minh',\r\n                                                         }\r\n                                                      )\r\n                                                   ) : (\r\n                                                      <i\r\n                                                         className='fas fa-times'\r\n                                                         style={{\r\n                                                            color: 'red',\r\n                                                         }}\r\n                                                      ></i>\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   style={{\r\n                                                      color: 'green',\r\n                                                      fontWeight: '700',\r\n                                                   }}\r\n                                                   className='table_th'\r\n                                                >\r\n                                                   {order.isDelivered ? (\r\n                                                      format(\r\n                                                         new utcToZonedTime(\r\n                                                            order.deliveredAt,\r\n                                                            'Asia/Ho_Chi_Minh'\r\n                                                         ),\r\n                                                         'HH:mm:ss - dd/MM/yyyy',\r\n                                                         {\r\n                                                            timeZone:\r\n                                                               'Asia/Ho_Chi_Minh',\r\n                                                         }\r\n                                                      )\r\n                                                   ) : (\r\n                                                      <i\r\n                                                         className='fas fa-times'\r\n                                                         style={{\r\n                                                            color: 'red',\r\n                                                         }}\r\n                                                      ></i>\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='center'\r\n                                                   className='table_th'\r\n                                                >\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/order/${order._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='outline-dark'\r\n                                                         className='btn-sm btn-unique rounded-pill'\r\n                                                      >\r\n                                                         <BubbleChartOutlinedIcon\r\n                                                            style={{\r\n                                                               fontSize:\r\n                                                                  '1.2rem',\r\n                                                            }}\r\n                                                         />\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                 {emptyRows > 0 && (\r\n                                    <TableRow\r\n                                       style={{\r\n                                          height: (dense ? 33 : 53) * emptyRows,\r\n                                       }}\r\n                                    >\r\n                                       <TableCell colSpan={6} />\r\n                                    </TableRow>\r\n                                 )}\r\n                              </TableBody>\r\n                           </Table>\r\n                        </TableContainer>\r\n                        <TablePagination\r\n                           rowsPerPageOptions={[5, 10, 15, 20, 25]}\r\n                           component='div'\r\n                           count={ordersList?.orders.length}\r\n                           rowsPerPage={rowsPerPage}\r\n                           page={page}\r\n                           onChangePage={handleChangePage}\r\n                           onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n                     </Paper>\r\n                     <FormControlLabel\r\n                        control={\r\n                           <Switch\r\n                              checked={dense}\r\n                              onChange={handleChangeDense}\r\n                           />\r\n                        }\r\n                        label='Dense padding'\r\n                     />\r\n                  </div>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default OrderListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js",["543","544"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport {\r\n  getCategoryDetails,\r\n  updateCategory,\r\n} from '../../actions/categoryAction'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../../constants/categoriesConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nconst CategoryEditScreen = ({ match, history }) => {\r\n  const catId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const categoryDetails = useSelector((state) => state.categoryDetails)\r\n  const { loading, error, category } = categoryDetails\r\n\r\n  const categoryUpdate = useSelector((state) => state.categoryUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = categoryUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateCategory({ _id: catId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: CATEGORY_UPDATE_RESET })\r\n      history.push('/admin/categorieslist')\r\n    } else {\r\n      if (!category.name || category._id !== catId) {\r\n        dispatch(getCategoryDetails(catId))\r\n      } else {\r\n        setName(category.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, catId, category, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Row className='justify-content-center'>\r\n              <Col md={6}>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h2 className='text-center mb-4'>Chỉnh sửa danh mục</h2>\r\n                  <Form.Group>\r\n                    <Container>\r\n                      <Form.Label\r\n                        as='p'\r\n                        className='mb-1'\r\n                        style={{ fontSize: '1.5rem' }}\r\n                      >\r\n                        Tên danh mục\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        style={{ fontSize: '1.2rem' }}\r\n                        className='border border-grey rounded-pill'\r\n                        type='name'\r\n                        size='normal'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                      ></Form.Control>\r\n                    </Container>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn_color_created'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Cập nhật\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js",["545","546","547"],"import Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getOrderDetails, updateOrder } from '../../actions/orderActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport { ORDER_UPDATE_RESET } from '../../constants/orderConstants'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 500,\r\n   },\r\n}))\r\n\r\nconst OrderEditScreen = ({ match, history }) => {\r\n   const classes = useStyles()\r\n   const [open, setOpen] = React.useState(false)\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const handleOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const orderId = match.params.id\r\n\r\n   const orderDetails = useSelector((state) => state.orderDetails)\r\n   const { order, loading } = orderDetails\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const orderUpdate = useSelector((state) => state.orderUpdate)\r\n   const {\r\n      loading: loadingUpdate,\r\n      error: errorUpdate,\r\n      success: successUpdate,\r\n   } = orderUpdate\r\n\r\n   const orderPay = useSelector((state) => state.orderPay)\r\n   const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n   const stateOrder = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng', 'Huỷ']\r\n   const [orderStatus, setOrderStatus] = useState('')\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateOrder({ _id: orderId, orderStatus }))\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successUpdate) {\r\n         dispatch({ type: ORDER_UPDATE_RESET })\r\n      } else {\r\n         dispatch(getOrderDetails(orderId))\r\n      }\r\n   }, [dispatch, orderId, successUpdate])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingUpdate && (\r\n                  <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n               )}\r\n               {errorUpdate && <Message>{errorUpdate}</Message>}\r\n               {loading ? (\r\n                  <Loader />\r\n               ) : (\r\n                  <Form onSubmit={submitHandler}>\r\n                     <ListGroup variant='flush' className='mt-3'>\r\n                        <ListGroup.Item className='border-0'>\r\n                           <div className='text-center'>\r\n                              <h3 className='pl-2'>CHI TIẾT ĐƠN HÀNG</h3>\r\n                           </div>\r\n                           <Row>\r\n                              <Col md={6}>\r\n                                 <p className='text-start'>\r\n                                    Mã đơn hàng: <strong>{order._id}</strong>\r\n                                 </p>\r\n                                 <p className='text-start'>\r\n                                    Tổng tiền:{' '}\r\n                                    <strong>{order.totalPrice}đ</strong>\r\n                                 </p>\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <FormControl className={classes.formControl}>\r\n                                    <InputLabel\r\n                                       id='demo-controlled-open-select-label'\r\n                                       style={{ fontSize: '1.2rem' }}\r\n                                    >\r\n                                       Trạng thái đơn hàng\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                       labelId='demo-controlled-open-select-label'\r\n                                       id='demo-controlled-open-select'\r\n                                       open={open}\r\n                                       onClose={handleClose}\r\n                                       onOpen={handleOpen}\r\n                                       value={\r\n                                          order.orderStatus\r\n                                             ? orderStatus\r\n                                             : order.orderStatus\r\n                                       }\r\n                                       onChange={(e) =>\r\n                                          setOrderStatus(e.target.value)\r\n                                       }\r\n                                       className='text-danger text-center text-uppercase'\r\n                                    >\r\n                                       {stateOrder.map((t) => (\r\n                                          <MenuItem\r\n                                             className='justify-content-center'\r\n                                             value={t}\r\n                                          >\r\n                                             {t}\r\n                                          </MenuItem>\r\n                                       ))}\r\n                                    </Select>\r\n                                 </FormControl>\r\n                              </Col>\r\n                           </Row>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item className='border-0'>\r\n                           <Row>\r\n                              <Col md={6} className='border-0'>\r\n                                 <Card\r\n                                    className='rounded card_color'\r\n                                    style={{\r\n                                       height: '13rem',\r\n                                       backgroundColor: '#F8F8F8',\r\n                                    }}\r\n                                 >\r\n                                    <CardContent>\r\n                                       <h5 className='border-bottom border-info text-info pb-1'>\r\n                                          Thông tin người nhận\r\n                                       </h5>\r\n                                       <div>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={4}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Địa chỉ:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={8}>\r\n                                                <strong>\r\n                                                   {order.user?.name}\r\n                                                </strong>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={4}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Tên khách hàng:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={8}>\r\n                                                <p className='mb-1'>\r\n                                                   {\r\n                                                      order.shippingAddress\r\n                                                         .diaChi\r\n                                                   }\r\n                                                   {' - '}\r\n                                                   {order.shippingAddress.xa}\r\n                                                   {' - '}\r\n                                                   {order.shippingAddress.huyen}\r\n                                                   {' - '}\r\n                                                   {\r\n                                                      order.shippingAddress\r\n                                                         .thanhPho\r\n                                                   }\r\n                                                   .\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={4}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Số điện thoại:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={8}>\r\n                                                <p className='mb-1'>\r\n                                                   {formatPhoneNumber(\r\n                                                      order.shippingAddress\r\n                                                         .numberPhone\r\n                                                   )}\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={4}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Email:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={8}>\r\n                                                <p className='mb-1'>\r\n                                                   {order.user?.email}\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                       </div>\r\n                                    </CardContent>\r\n                                 </Card>\r\n                              </Col>\r\n                              <Col md={6}>\r\n                                 <Card\r\n                                    className='rounded card_color'\r\n                                    style={{\r\n                                       height: '13rem',\r\n                                       backgroundColor: '#F8F8F8',\r\n                                    }}\r\n                                 >\r\n                                    <CardContent>\r\n                                       <h5 className='border-bottom border-info text-info pb-1'>\r\n                                          Phương thức thanh toán\r\n                                       </h5>\r\n                                       <div>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={5}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Phương thức:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={7} className='pt-1'>\r\n                                                <strong\r\n                                                   className='mb-0 text-capitalize'\r\n                                                   style={{\r\n                                                      letterSpacing: '0.1rem',\r\n                                                   }}\r\n                                                >\r\n                                                   {order.paymentMethod}\r\n                                                </strong>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={5}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Thời gian thanh toán:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={7}>\r\n                                                <p className='mb-1'>\r\n                                                   {order.paymentMethod ===\r\n                                                      'Thanh toán bằng tiền mặt' &&\r\n                                                   order.isDelivered ? (\r\n                                                      <strong className='mb-0'>\r\n                                                         {format(\r\n                                                            new utcToZonedTime(\r\n                                                               order.deliveredAt,\r\n                                                               'Asia/Ho_Chi_Minh'\r\n                                                            ),\r\n                                                            'HH:mm:ss - dd/MM/yyyy',\r\n                                                            {\r\n                                                               timeZone:\r\n                                                                  'Asia/Ho_Chi_Minh',\r\n                                                            }\r\n                                                         )}\r\n                                                      </strong>\r\n                                                   ) : order.paymentMethod ===\r\n                                                     'Thanh toán bằng PayPal' ? (\r\n                                                      <strong className='mb-0'>\r\n                                                         {format(\r\n                                                            new utcToZonedTime(\r\n                                                               order.paidAt,\r\n                                                               'Asia/Ho_Chi_Minh'\r\n                                                            ),\r\n                                                            'HH:mm:ss - dd/MM/yyyy',\r\n                                                            {\r\n                                                               timeZone:\r\n                                                                  'Asia/Ho_Chi_Minh',\r\n                                                            }\r\n                                                         )}\r\n                                                      </strong>\r\n                                                   ) : (\r\n                                                      <div className='d-flex'>\r\n                                                         <strong className='text-danger mb-0'>\r\n                                                            Chưa thanh toán\r\n                                                         </strong>\r\n                                                      </div>\r\n                                                   )}\r\n                                                </p>\r\n                                             </Col>\r\n                                          </Row>\r\n                                          <Row className='m-0'>\r\n                                             <Col md={5}>\r\n                                                <p\r\n                                                   style={{ color: 'grey' }}\r\n                                                   className='mb-1'\r\n                                                >\r\n                                                   Thời gian nhận hàng:\r\n                                                </p>\r\n                                             </Col>\r\n                                             <Col md={7}>\r\n                                                {order.isDelivered ? (\r\n                                                   <strong className='mb-0'>\r\n                                                      {format(\r\n                                                         new utcToZonedTime(\r\n                                                            order.deliveredAt,\r\n                                                            'Asia/Ho_Chi_Minh'\r\n                                                         ),\r\n                                                         'HH:mm:ss - dd/MM/yyyy',\r\n                                                         {\r\n                                                            timeZone:\r\n                                                               'Asia/Ho_Chi_Minh',\r\n                                                         }\r\n                                                      )}\r\n                                                   </strong>\r\n                                                ) : (\r\n                                                   <div className='d-flex'>\r\n                                                      {/* <Image\r\n                                  src='https://img.icons8.com/fluent/24/000000/only-cash.png'\r\n                                  className='pr-1'\r\n                                /> */}\r\n                                                      <strong className='text-danger mb-0'>\r\n                                                         Chưa nhận hàng\r\n                                                      </strong>\r\n                                                   </div>\r\n                                                )}\r\n                                             </Col>\r\n                                          </Row>\r\n                                       </div>\r\n                                    </CardContent>\r\n                                 </Card>\r\n                              </Col>\r\n                           </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item className='border-0'>\r\n                           <h5\r\n                              className='pb-1'\r\n                              style={{ borderBottom: '0.04rem solid #ddd' }}\r\n                           >\r\n                              Giỏ hàng\r\n                           </h5>\r\n\r\n                           <div className='rounded mt-3'>\r\n                              {order.orderItems.map((item, index) => (\r\n                                 <div\r\n                                    key={index}\r\n                                    className='p-3 card_color shadow border mb-1'\r\n                                    style={{ backgroundColor: '#F8F8F8' }}\r\n                                 >\r\n                                    <Row>\r\n                                       <Col md={1} className='img_container'>\r\n                                          <Image\r\n                                             className='img_color'\r\n                                             src={item.images[0].url}\r\n                                             alt={item.name}\r\n                                             fluid\r\n                                             rounded\r\n                                          />\r\n                                       </Col>\r\n\r\n                                       <Col md={7} className='text-center'>\r\n                                          <Link\r\n                                             to={`/product/${item.product}`}\r\n                                             className='link-product fst-italic'\r\n                                          >\r\n                                             <p\r\n                                                style={{ fontSize: '1.1rem' }}\r\n                                                className='pt-3'\r\n                                             >\r\n                                                {item.name}\r\n                                             </p>\r\n                                          </Link>\r\n                                       </Col>\r\n\r\n                                       <Col md={4} className='text-center'>\r\n                                          <p\r\n                                             style={{ fontSize: '1.1rem' }}\r\n                                             className='pt-3 fst-italic'\r\n                                          >\r\n                                             {item.qty} x{' '}\r\n                                             {formatMoney(item.price, 'đ')}\r\n                                             {' = '}\r\n                                             {formatMoney(\r\n                                                item.qty * item.price,\r\n                                                'đ'\r\n                                             )}\r\n                                          </p>\r\n                                       </Col>\r\n                                    </Row>\r\n                                 </div>\r\n                              ))}\r\n                           </div>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item className='border-0'>\r\n                           <div\r\n                              className='d-flex justify-content-end '\r\n                              style={{ borderTop: '0.04rem solid #ddd' }}\r\n                           >\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light rounded-pill mt-4 btn_color_pink'\r\n                                 size='normal'\r\n                                 style={{\r\n                                    width: '14rem',\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                 }}\r\n                              >\r\n                                 DUYỆT\r\n                              </Button>\r\n                           </div>\r\n                        </ListGroup.Item>\r\n                     </ListGroup>\r\n                  </Form>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default OrderEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js",["548"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {\r\n  getSupplierDetails,\r\n  updateSupplier,\r\n} from '../../actions/supplierActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { SUPPLIER_UPDATE_RESET } from '../../constants/supplierConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nconst SupplierEditScreen = ({ history, match }) => {\r\n  const supId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const supplierDetails = useSelector((state) => state.supplierDetails)\r\n  const { loading, error, supplier } = supplierDetails\r\n\r\n  const supplierUpdate = useSelector((state) => state.supplierUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = supplierUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateSupplier({ _id: supId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: SUPPLIER_UPDATE_RESET })\r\n      history.push('/admin/supplierlist')\r\n    } else {\r\n      if (!supplier.name || supplier._id !== supId) {\r\n        dispatch(getSupplierDetails(supId))\r\n      } else {\r\n        setName(supplier.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, supId, supplier, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Row className='justify-content-center'>\r\n              <Col md={6}>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h3 className='text-center mb-4'>\r\n                    Chỉnh sửa thông tin nhà cung cấp\r\n                  </h3>\r\n                  <Form.Group>\r\n                    <Container>\r\n                      <Form.Label\r\n                        as='p'\r\n                        className='mb-1'\r\n                        style={{ fontSize: '1rem' }}\r\n                      >\r\n                        Tên nhà cung cấp\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        style={{ fontSize: '1rem' }}\r\n                        className='border border-grey rounded-pill'\r\n                        type='name'\r\n                        size='sm'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                      ></Form.Control>\r\n                    </Container>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      size='sm'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn_color_created'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Cập nhật\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js",["549","550","551"],"import { Switch } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../../actions/userActions'\r\nimport FormContainer from '../../components/FormContainer'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { USER_UPDATE_RESET } from '../../constants/userConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const [state, setState] = useState(false)\r\n\r\n  const handleChange = () => {\r\n    setState(!state)\r\n  }\r\n\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin, password }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          <div className='d-flex justify-content-center'>\r\n            {loadingUpdate && <Loader /> && (\r\n              <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n            )}\r\n            {errorUpdate && <Message>{errorUpdate}</Message>}\r\n            {loading ? (\r\n              <Loader />\r\n            ) : (\r\n              <Form\r\n                onSubmit={submitHandler}\r\n                className='bg-light p-3 card_color '\r\n                style={{ width: '50rem' }}\r\n              >\r\n                <h2 className='mt-3 text-center'>Cập nhật người dùng</h2>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='name'>\r\n                      <Form.Label>\r\n                        <strong>Tên</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='name'\r\n                        placeholder='Nhập tên'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        className='rounded-pill border-1'\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='email'>\r\n                      <Form.Label>\r\n                        <strong>Địa chỉ email</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='email'\r\n                        placeholder='Enter email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        className='rounded-pill border-1'\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Form.Group\r\n                  controlId='idAdmin'\r\n                  className='d-flex justify-content-start'\r\n                >\r\n                  <Form.Check\r\n                    type='checkbox'\r\n                    label='Người quản lí'\r\n                    size='lg'\r\n                    checked={isAdmin}\r\n                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                  ></Form.Check>\r\n                </Form.Group>\r\n                <div className='d-flex align-items-center'>\r\n                  <Switch\r\n                    value={state}\r\n                    onChange={handleChange}\r\n                    color='secondary'\r\n                    name='checkedB'\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                  />\r\n                  {state === true ? (\r\n                    <p className='mb-0' style={{ opacity: '1' }}>\r\n                      <strong>Đổi mật khẩu</strong>\r\n                      <Image\r\n                        style={{ opacity: '1' }}\r\n                        src='https://img.icons8.com/fluent/32/000000/unlock-2.png'\r\n                      />\r\n                    </p>\r\n                  ) : (\r\n                    <p className='mb-0' style={{ opacity: '0.7' }}>\r\n                      Đổi mật khẩu\r\n                      <Image\r\n                        style={{ opacity: '1' }}\r\n                        src='https://img.icons8.com/fluent/32/000000/lock-2.png'\r\n                      />\r\n                    </p>\r\n                  )}\r\n                </div>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='password' fluid>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Mật khẩu mới</strong>\r\n                      </Form.Label>\r\n                      {state === true ? (\r\n                        <>\r\n                          <Form.Control\r\n                            className='border-1 border-grey rounded-pill '\r\n                            type='password'\r\n                            placeholder='Nhập mật khẩu mới'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                          ></Form.Control>\r\n                        </>\r\n                      ) : (\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill '\r\n                          type='password'\r\n                          placeholder='Nhập mật khẩu mới'\r\n                          value={password}\r\n                          onChange={(e) => setPassword(e.target.value)}\r\n                          disabled\r\n                          // style={{ visibility: 'hidden' }}\r\n                        ></Form.Control>\r\n                      )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='password'>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Nhập lại mật khẩu</strong>\r\n                      </Form.Label>\r\n                      {state === true ? (\r\n                        <>\r\n                          <Form.Control\r\n                            className='border-1 border-grey rounded-pill'\r\n                            type='password'\r\n                            placeholder='Nhập lại mật khẩu'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                          ></Form.Control>\r\n                        </>\r\n                      ) : (\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill'\r\n                          type='password'\r\n                          placeholder='Nhập lại mật khẩu'\r\n                          value={confirmPassword}\r\n                          onChange={(e) => setConfirmPassword(e.target.value)}\r\n                          disabled\r\n                          // style={{ visibility: 'hidden' }}\r\n                        ></Form.Control>\r\n                      )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n                <div className='pl-3 pr-3 text-center'>\r\n                  <Button\r\n                    type='submit'\r\n                    variant='outline-light'\r\n                    className='rounded-pill btn_color_created'\r\n                    style={{\r\n                      fontSize: '1rem',\r\n                      letterSpacing: '0.25rem',\r\n                      width: '15rem',\r\n                    }}\r\n                  >\r\n                    Cập nhật\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\cloudinary.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\ListNumber.js",["552","553","554","555","556"],"import { Button } from '@material-ui/core'\r\nimport React, { useEffect } from 'react'\r\nimport { Card, Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listOrders } from '../../../actions/orderActions'\r\nimport { listAllProduct, listProducts } from '../../../actions/productActions'\r\nimport { listSupplierAdm } from '../../../actions/supplierActions'\r\n\r\nfunction formatMoney(n, currency) {\r\n   return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst ListNumbers = ({ history }) => {\r\n   const dispatch = useDispatch()\r\n\r\n   const productListAll = useSelector((state) => state.productListAll)\r\n   const { products } = productListAll\r\n\r\n   const orderConsult = useSelector((state) => state.orderConsult)\r\n   const { order } = orderConsult\r\n\r\n   const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n   const { supplier } = supplierListAdm\r\n\r\n   const orderList = useSelector((state) => state.orderList)\r\n   const { ordersList } = orderList\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   let outOfStock = 0\r\n   let productOut = []\r\n   products.map((product) => {\r\n      if (product.countInStock == 0) {\r\n         productOut.push(product)\r\n         outOfStock += 1\r\n      }\r\n   })\r\n\r\n   useEffect(() => {\r\n      if (!userInfo.isAdmin) {\r\n         history.push('/login')\r\n      }\r\n\r\n      if (userInfo) {\r\n         dispatch(listOrders())\r\n         dispatch(listAllProduct())\r\n         dispatch(listSupplierAdm())\r\n      }\r\n   }, [dispatch, history, userInfo])\r\n\r\n   return (\r\n      <div>\r\n         <Row className='p-3 '>\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Tổng số đơn hàng</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className='mb-3  pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số đơn hàng đã được đặt\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>\r\n                           {ordersList && ordersList.orders?.length}\r\n                        </h1>\r\n                     </Card.Title>\r\n                     <Card.Subtitle className='mb-2 text-center'>\r\n                        <h5 className='text-secondary'>Đơn hàng</h5>\r\n                     </Card.Subtitle>\r\n                     <Card.Link\r\n                        href='/admin/orderlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>Chi tiết</strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Doanh thu</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className='mb-4 mt-4 pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số doanh thu từ các đơn hàng\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center mb-4'>\r\n                        <h2\r\n                           style={{ fontSize: '1.4rem' }}\r\n                           className='text-lowercase'\r\n                        >\r\n                           {ordersList?.totalAmount &&\r\n                              formatMoney(ordersList?.totalAmount, 'đ')}\r\n                        </h2>\r\n                     </Card.Title>\r\n\r\n                     <Card.Link\r\n                        href='/admin/orderlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>\r\n                              {' '}\r\n                              Chi tiết\r\n                           </strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Tổng số sản phẩm</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className=' pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số sản phẩm đang được bày bán\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>\r\n                           {products && products.length}\r\n                        </h1>\r\n                     </Card.Title>\r\n                     <Card.Subtitle className='mb-2 text-center'>\r\n                        <h5 className='text-secondary'>Sản phẩm</h5>\r\n                     </Card.Subtitle>\r\n                     <Card.Link\r\n                        href='/admin/productlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>Chi tiết</strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n\r\n            <Col md={3}>\r\n               <Card\r\n                  className='shadow card_color'\r\n                  style={{ height: '16rem', border: '0.25rem solid #2e5a1c' }}\r\n                  text='light'\r\n               >\r\n                  <Card.Body>\r\n                     <Card.Title className='text-center'>\r\n                        <h4>Tổng số sản phẩm hết hàng</h4>\r\n                     </Card.Title>\r\n                     <Card.Subtitle\r\n                        className='mb-3 pt-2 text-center text-secondary'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        Tổng số sản phẩm hết hàng\r\n                     </Card.Subtitle>\r\n                     <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>{outOfStock}</h1>\r\n                     </Card.Title>\r\n                     <Card.Subtitle className='mb-1 text-center'>\r\n                        <h5 className='text-secondary'>Sản phẩm</h5>\r\n                     </Card.Subtitle>\r\n                     <Card.Link\r\n                        href='/admin/productlist'\r\n                        className='d-flex justify-content-end'\r\n                        style={{ borderTop: '0.15rem solid #ddd' }}\r\n                     >\r\n                        <Button color='secondary'>\r\n                           <strong className='text-capitalize'>Chi tiết</strong>\r\n                        </Button>\r\n                     </Card.Link>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </Row>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ListNumbers\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\notificationsAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\NotificationsDropDown.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UsersAddressListScreen.js",["557"],"import Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport Link from '@material-ui/core/Link'\r\nimport { Close } from '@material-ui/icons'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n   createAddressUser,\r\n   deleteAddressUser,\r\n   getUserDetails,\r\n   selectRoleAddressUser,\r\n   updateAddressUser,\r\n} from '../actions/userActions'\r\nimport Announcement from '../components/Announcement.js'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\nimport Message from '../components/Message'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\nimport data from '../data.json'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n   //Filter only numbers from the input\r\n   let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n   //Check if the input is of correct length\r\n   let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n   if (match) {\r\n      return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n   }\r\n\r\n   return null\r\n}\r\n\r\nconst UsersAddressListScreen = ({ history }) => {\r\n   const [thanhPho, setThanhPho] = useState('')\r\n   const [huyen, setHuyen] = useState('')\r\n   const [xa, setXa] = useState('')\r\n   const [diaChi, setDiachi] = useState('')\r\n   const [numberPhone, setNumberPhone] = useState('')\r\n   const [open, setOpen] = useState(false)\r\n   const [openEdit, setOpenEdit] = useState(false)\r\n   const [idAddress, setIdAddress] = useState('')\r\n\r\n   const addressUser = { thanhPho, huyen, xa, diaChi, numberPhone }\r\n   const updateInformationAddress = {\r\n      idAddress,\r\n      thanhPho,\r\n      huyen,\r\n      xa,\r\n      diaChi,\r\n      numberPhone,\r\n   }\r\n\r\n   const handleClickOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const handleClickOpenEdit = (id) => {\r\n      setOpenEdit(true)\r\n      setIdAddress(id)\r\n   }\r\n\r\n   const handleCloseEdit = () => {\r\n      setOpenEdit(false)\r\n   }\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const userDetails = useSelector((state) => state.userDetails)\r\n   const { loading, error, user } = userDetails\r\n\r\n   const userDeleteAddress = useSelector((state) => state.userDeleteAddress)\r\n   const { success: successDeleteAddress } = userDeleteAddress\r\n\r\n   const userCreateAddress = useSelector((state) => state.userCreateAddress)\r\n   const { success: successCreateAddress } = userCreateAddress\r\n\r\n   const userSelectRole = useSelector((state) => state.userSelectRole)\r\n   const { success: successSelectRole } = userSelectRole\r\n\r\n   const userUpdateAddress = useSelector((state) => state.userUpdateAddress)\r\n   const { success: successUpdateAddress } = userUpdateAddress\r\n\r\n   useEffect(() => {\r\n      if (!userInfo) {\r\n         history.push('/login')\r\n      } else {\r\n         if (\r\n            successDeleteAddress ||\r\n            successCreateAddress ||\r\n            successSelectRole ||\r\n            successUpdateAddress\r\n         ) {\r\n            setOpen(false)\r\n            setOpenEdit(false)\r\n\r\n            dispatch(getUserDetails('profile'))\r\n         }\r\n      }\r\n      window.scrollTo(0, 0)\r\n   }, [\r\n      history,\r\n      dispatch,\r\n      successDeleteAddress,\r\n      successCreateAddress,\r\n      successSelectRole,\r\n      successUpdateAddress,\r\n   ])\r\n\r\n   const deleteAddress = (id) => {\r\n      dispatch(deleteAddressUser({ id: id }))\r\n   }\r\n\r\n   const createAddress = (e) => {\r\n      e.preventDefault()\r\n      dispatch(createAddressUser(addressUser))\r\n   }\r\n\r\n   const selectRole = (id, role) => {\r\n      dispatch(selectRoleAddressUser({ id: id, role: role }))\r\n   }\r\n\r\n   const updateAddress = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateAddressUser(updateInformationAddress))\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n\r\n         {loading ? (\r\n            <SkeletonEffect />\r\n         ) : error ? (\r\n            <Message variant='danger'>{error}</Message>\r\n         ) : (\r\n            <>\r\n               <div>\r\n                  <Dialog\r\n                     maxWidth='xl'\r\n                     open={open}\r\n                     onClose={handleClose}\r\n                     aria-labelledby='form-dialog-title'\r\n                  >\r\n                     <div className='d-flex justify-content-end'>\r\n                        <Button\r\n                           onClick={handleClose}\r\n                           className='p-1 m-1 rounded-pill'\r\n                           variant='light'\r\n                        >\r\n                           <Close />\r\n                        </Button>\r\n                     </div>\r\n                     <h4 id='form-dialog-title' className='text-center p-3'>\r\n                        Thêm địa chỉ mới\r\n                     </h4>\r\n                     <DialogContent style={{ width: '35rem' }}>\r\n                        <Form\r\n                           onSubmit={createAddress}\r\n                           className='mt-2 border-0 mb-2'\r\n                        >\r\n                           <Form.Group controlId='address'>\r\n                              <Form.Label as='p' className='mb-1 mt-2'>\r\n                                 <strong>Thành Phố / Tỉnh</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 placeholder='Enter address'\r\n                                 value={thanhPho}\r\n                                 onChange={(e) => setThanhPho(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>\r\n                                    Vui lòng chọn thành phố/tỉnh...\r\n                                 </option>\r\n                                 {data.map((tp) => (\r\n                                    <option\r\n                                       style={{ color: 'black' }}\r\n                                       key={tp.Id}\r\n                                       value={tp.Name}\r\n                                    >\r\n                                       {tp.Name}\r\n                                    </option>\r\n                                 ))}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='city'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong> Quận / Huyện</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 placeholder='Enter city'\r\n                                 value={huyen}\r\n                                 onChange={(e) => setHuyen(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>Vui lòng chọn quận/huyện...</option>\r\n                                 {data.map(\r\n                                    (a) =>\r\n                                       a.Name === thanhPho &&\r\n                                       a.Districts.map((b) => (\r\n                                          <option\r\n                                             key={b.Id}\r\n                                             style={{ color: 'black' }}\r\n                                             value={b.Name}\r\n                                          >\r\n                                             {b.Name}\r\n                                          </option>\r\n                                       ))\r\n                                 )}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='postalCode'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Phường / Xã</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 required\r\n                                 placeholder='Enter postalCode'\r\n                                 value={xa}\r\n                                 onChange={(e) => setXa(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>\r\n                                    Vui lòng chọn thành xã/phường...\r\n                                 </option>\r\n                                 {data.map(\r\n                                    (a) =>\r\n                                       a.Name === thanhPho &&\r\n                                       a.Districts.map(\r\n                                          (b) =>\r\n                                             b.Name === huyen &&\r\n                                             b.Wards.map((c) => (\r\n                                                <option\r\n                                                   style={{ color: 'black' }}\r\n                                                >\r\n                                                   {c.Name}\r\n                                                </option>\r\n                                             ))\r\n                                       )\r\n                                 )}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='country'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Địa chỉ chi tiết</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 placeholder='Enter country'\r\n                                 value={diaChi}\r\n                                 onChange={(e) => setDiachi(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='country'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Số điện thoại</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 placeholder='Enter country'\r\n                                 value={formatPhoneNumber(numberPhone)}\r\n                                 onChange={(e) =>\r\n                                    setNumberPhone(e.target.value)\r\n                                 }\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <div className='d-flex justify-content-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 className='btn_color rounded-pill text-center'\r\n                                 style={{ width: '15rem' }}\r\n                              >\r\n                                 Tạo\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </DialogContent>\r\n                  </Dialog>\r\n               </div>\r\n               <div>\r\n                  <Dialog\r\n                     maxWidth='xl'\r\n                     open={openEdit}\r\n                     onClose={handleCloseEdit}\r\n                     aria-labelledby='form-dialog-title'\r\n                  >\r\n                     <div className='d-flex justify-content-end'>\r\n                        <Button\r\n                           onClick={handleCloseEdit}\r\n                           className='p-1 m-1 rounded-pill'\r\n                           variant='light'\r\n                        >\r\n                           <Close />\r\n                        </Button>\r\n                     </div>\r\n                     <h4 id='form-dialog-title' className='text-center p-3'>\r\n                        Sửa thông tin địa chỉ\r\n                     </h4>\r\n                     <DialogContent style={{ width: '35rem' }}>\r\n                        <Form\r\n                           onSubmit={updateAddress}\r\n                           className='mt-2 border-0 mb-2'\r\n                        >\r\n                           <Form.Group controlId='address'>\r\n                              <Form.Label as='p' className='mb-1 mt-2'>\r\n                                 <strong>Thành Phố / Tỉnh</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 placeholder='Enter address'\r\n                                 value={thanhPho}\r\n                                 onChange={(e) => setThanhPho(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>\r\n                                    Vui lòng chọn thành phố/tỉnh...\r\n                                 </option>\r\n                                 {data.map((tp) => (\r\n                                    <option\r\n                                       style={{ color: 'black' }}\r\n                                       key={tp.Id}\r\n                                       value={tp.Name}\r\n                                    >\r\n                                       {tp.Name}\r\n                                    </option>\r\n                                 ))}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='city'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong> Quận / Huyện</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 placeholder='Enter city'\r\n                                 value={huyen}\r\n                                 onChange={(e) => setHuyen(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>Vui lòng chọn quận/huyện...</option>\r\n                                 {data.map(\r\n                                    (a) =>\r\n                                       a.Name === thanhPho &&\r\n                                       a.Districts.map((b) => (\r\n                                          <option\r\n                                             key={b.Id}\r\n                                             style={{ color: 'black' }}\r\n                                             value={b.Name}\r\n                                          >\r\n                                             {b.Name}\r\n                                          </option>\r\n                                       ))\r\n                                 )}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='postalCode'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Phường / Xã</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 as='select'\r\n                                 required\r\n                                 placeholder='Enter postalCode'\r\n                                 value={xa}\r\n                                 onChange={(e) => setXa(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              >\r\n                                 <option>\r\n                                    Vui lòng chọn thành xã/phường...\r\n                                 </option>\r\n                                 {data.map(\r\n                                    (a) =>\r\n                                       a.Name === thanhPho &&\r\n                                       a.Districts.map(\r\n                                          (b) =>\r\n                                             b.Name === huyen &&\r\n                                             b.Wards.map((c) => (\r\n                                                <option\r\n                                                   style={{ color: 'black' }}\r\n                                                >\r\n                                                   {c.Name}\r\n                                                </option>\r\n                                             ))\r\n                                       )\r\n                                 )}\r\n                              </Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='country'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Địa chỉ chi tiết</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 placeholder='Enter country'\r\n                                 value={diaChi}\r\n                                 onChange={(e) => setDiachi(e.target.value)}\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <Form.Group controlId='country'>\r\n                              <Form.Label as='p' className='mb-1'>\r\n                                 <strong>Số điện thoại</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                 type='text'\r\n                                 placeholder='Enter country'\r\n                                 value={formatPhoneNumber(numberPhone)}\r\n                                 onChange={(e) =>\r\n                                    setNumberPhone(e.target.value)\r\n                                 }\r\n                                 className='border-1 border-gray rounded-pill'\r\n                              ></Form.Control>\r\n                           </Form.Group>\r\n\r\n                           <div className='d-flex justify-content-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 className='btn_color rounded-pill text-center'\r\n                                 style={{ width: '15rem' }}\r\n                              >\r\n                                 Cập nhật\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </DialogContent>\r\n                  </Dialog>\r\n               </div>\r\n               <Container className='mt-4 mb-4 card_color shadow p-4'>\r\n                  <div\r\n                     className='text-center pb-3 d-flex justify-content-between align-items-center'\r\n                     style={{ borderBottom: '0.1rem solid #ddd' }}\r\n                  >\r\n                     <h4>Danh sách địa chỉ</h4>\r\n                     <Button\r\n                        className='btn_color_created rounded-pill'\r\n                        variant='outline-light'\r\n                        size='sm'\r\n                        onClick={handleClickOpen}\r\n                        disabled={user.address && user?.address.length === 5}\r\n                     >\r\n                        <i className='fas fa-plus pr-1'></i>Thêm địa chỉ mới\r\n                     </Button>\r\n                  </div>\r\n                  {user.address && user?.address.length === 5 && (\r\n                     <Announcement\r\n                        variant='warning'\r\n                        className='d-flex justify-content-center'\r\n                     >\r\n                        Danh sách địa chỉ đã đầy. Nếu bạn muốn thêm một địa chỉ\r\n                        mới, xin vui lòng xoá địa chỉ không cần thiết. Xin cảm\r\n                        ơn!\r\n                     </Announcement>\r\n                  )}\r\n                  {user.address?.map((add) => (\r\n                     <div\r\n                        className='p-3 mt-1 mb-1'\r\n                        style={{ borderBottom: '0.1rem solid #ddd' }}\r\n                     >\r\n                        <Row className='mb-2'>\r\n                           <Col md={3} className='d-flex align-items-center '>\r\n                              <strong>Số điện thoại</strong>\r\n                           </Col>\r\n                           <Col\r\n                              md={7}\r\n                              style={{ fontSize: '0.9rem' }}\r\n                              className='d-flex align-items-center'\r\n                           >\r\n                              {formatPhoneNumber(add.numberPhone)}\r\n                           </Col>\r\n                           <Col md={1} className='d-flex align-items-center '>\r\n                              <Link>\r\n                                 <Button\r\n                                    variant='outline-warning'\r\n                                    size='sm'\r\n                                    className='rounded-pill'\r\n                                    onClick={() => handleClickOpenEdit(add._id)}\r\n                                 >\r\n                                    Sửa\r\n                                 </Button>\r\n                              </Link>\r\n                           </Col>\r\n                           <Col md={1}>\r\n                              <Button\r\n                                 variant='outline-danger'\r\n                                 size='sm'\r\n                                 className='rounded-pill'\r\n                                 onClick={() => deleteAddress(add._id)}\r\n                              >\r\n                                 Xoá\r\n                              </Button>\r\n                           </Col>\r\n                        </Row>\r\n                        <Row className='button_select_default'>\r\n                           <Col md={3} className='d-flex align-items-center'>\r\n                              <strong>Địa chỉ liên hệ</strong>\r\n                           </Col>\r\n                           <Col\r\n                              md={7}\r\n                              style={{ fontSize: '0.9rem' }}\r\n                              className='d-flex align-items-center'\r\n                           >\r\n                              {add.diaChi} {' - '} {add.xa} {' - '} {add.huyen}{' '}\r\n                              {' - '}\r\n                              {add.thanhPho}.\r\n                           </Col>\r\n                           <Col md={2} className='text-center'>\r\n                              <Button\r\n                                 size='sm'\r\n                                 variant='outline-dark'\r\n                                 className='rounded-pill btn-block select_default'\r\n                                 disabled={add.role === true}\r\n                                 onClick={() => selectRole(add._id, true)}\r\n                              >\r\n                                 Thiết lập mặc định\r\n                              </Button>\r\n                           </Col>\r\n                        </Row>\r\n                     </div>\r\n                  ))}\r\n               </Container>\r\n            </>\r\n         )}\r\n         <Footer />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default UsersAddressListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\subCategoryAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\subCategoryConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\subCategoryReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SubCategoryListScreen.js",["558","559","560"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n   createCategory,\r\n   deleteCategory,\r\n   listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\nimport {\r\n   create_subCategory,\r\n   deleteSubCategory,\r\n   listSubCategoryAdm,\r\n} from '../../actions/subCategoryAction'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1\r\n   }\r\n   return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index])\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0])\r\n      if (order !== 0) return order\r\n      return a[1] - b[1]\r\n   })\r\n   return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n   {\r\n      id: 'id',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'ID',\r\n   },\r\n   { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n   {\r\n      id: 'create',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN TẠO',\r\n   },\r\n   {\r\n      id: 'update',\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: 'THỜI GIAN CẬP NHẬT',\r\n   },\r\n\r\n   { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const {\r\n      classes,\r\n      onSelectAllClick,\r\n      order,\r\n      orderBy,\r\n      numSelected,\r\n      rowCount,\r\n      onRequestSort,\r\n   } = props\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property)\r\n   }\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding='checkbox'>\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align='center'\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n                  className='pl-5'\r\n                  style={{ fontWeight: '700' }}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc'\r\n                              ? 'sorted descending'\r\n                              : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n           }\r\n         : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n           },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n      align: 'center',\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}))\r\n\r\nconst SubCategoriesListScreen = ({ history }) => {\r\n   const classes = useStyles()\r\n   const [order, setOrder] = React.useState('asc')\r\n   const [orderBy, setOrderBy] = React.useState('calories')\r\n   const [selected, setSelected] = React.useState([])\r\n   const [page, setPage] = React.useState(0)\r\n   const [dense, setDense] = React.useState(false)\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n   const [selectCategory, setSelectCategory] = useState('')\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc'\r\n      setOrder(isAsc ? 'desc' : 'asc')\r\n      setOrderBy(property)\r\n   }\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = Sub.map((cat) => cat._id)\r\n         setSelected(newSelecteds)\r\n         return\r\n      }\r\n      setSelected([])\r\n   }\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name)\r\n      let newSelected = []\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name)\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1))\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1))\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1)\r\n         )\r\n      }\r\n\r\n      setSelected(newSelected)\r\n   }\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage)\r\n   }\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10))\r\n      setPage(0)\r\n   }\r\n\r\n   const handleChangeDense = (event) => {\r\n      setDense(event.target.checked)\r\n   }\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const [open, setOpen] = useState(false)\r\n   const [name, setName] = useState('')\r\n\r\n   const handleClickOpen = () => {\r\n      setOpen(true)\r\n   }\r\n\r\n   const handleClose = () => {\r\n      setOpen(false)\r\n   }\r\n\r\n   const userLogin = useSelector((state) => state.userLogin)\r\n   const { userInfo } = userLogin\r\n\r\n   const subCategoryListAdm = useSelector((state) => state.subCategoryListAdm)\r\n   const { loading, error, Sub } = subCategoryListAdm\r\n\r\n   const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n   const { category } = categoriesListAdm\r\n\r\n   const subCategoryDelete = useSelector((state) => state.subCategoryDelete)\r\n   const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n   } = subCategoryDelete\r\n\r\n   const subCategoryCreate = useSelector((state) => state.subCategoryCreate)\r\n   const {\r\n      loading: loadingCreate,\r\n      error: errorCreate,\r\n      success: successCreate,\r\n   } = subCategoryCreate\r\n\r\n   const emptyRows =\r\n      Sub !== undefined &&\r\n      rowsPerPage - Math.min(rowsPerPage, Sub.length - page * rowsPerPage)\r\n\r\n   const deleteHandle = (id) => {\r\n      if (window.confirm('You are sure?')) {\r\n         dispatch(deleteSubCategory({ id }))\r\n         setSelected([])\r\n      }\r\n   }\r\n\r\n   const EnhancedTableToolbar = (props) => {\r\n      const classes = useToolbarStyles()\r\n      const { numSelected } = props\r\n\r\n      const did = Sub.find((cat) => cat._id)\r\n\r\n      return (\r\n         <Toolbar\r\n            className={clsx(classes.root, {\r\n               [classes.highlight]: numSelected > 0,\r\n            })}\r\n         >\r\n            {numSelected > 0 ? (\r\n               <Typography\r\n                  className={classes.title}\r\n                  color='inherit'\r\n                  variant='subtitle1'\r\n                  component='div'\r\n               >\r\n                  {numSelected} selected\r\n               </Typography>\r\n            ) : (\r\n               <Typography\r\n                  className={classes.title}\r\n                  variant='h6'\r\n                  id='tableTitle'\r\n                  component='div'\r\n               >\r\n                  <h2>DANH SÁCH DANH MỤC CON</h2>\r\n               </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n               <Tooltip title='Delete'>\r\n                  <IconButton\r\n                     aria-label='delete'\r\n                     onClick={() => deleteHandle(selected)}\r\n                  >\r\n                     <DeleteIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            ) : (\r\n               <Tooltip title='Filter list'>\r\n                  <IconButton aria-label='filter list'>\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n         </Toolbar>\r\n      )\r\n   }\r\n\r\n   EnhancedTableToolbar.propTypes = {\r\n      numSelected: PropTypes.number.isRequired,\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (userInfo) {\r\n         dispatch(listSubCategoryAdm())\r\n         dispatch(listCategoriesAdm())\r\n      }\r\n   }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(create_subCategory({ name, selectCategory }))\r\n      setOpen(false)\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0'>\r\n               {loadingDelete && (\r\n                     <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n                  ) && <Loader />}\r\n               {errorDelete && <Message>{errorDelete}</Message>}\r\n               {loadingCreate && (\r\n                  <MessageSuccess\r\n                     variant={'Đã thêm ' + name + ' thành công'}\r\n                  ></MessageSuccess>\r\n               )}\r\n               {errorCreate && <Message>{errorCreate}</Message>}\r\n               {loading ? (\r\n                  <SkeletonEffect />\r\n               ) : error ? (\r\n                  <Announcement variant='danger'>{error}</Announcement>\r\n               ) : (\r\n                  <>\r\n                     <div>\r\n                        <Dialog\r\n                           disableBackdropClick\r\n                           disableEscapeKeyDown\r\n                           open={open}\r\n                           onClose={handleClose}\r\n                           aria-labelledby='form-dialog-title'\r\n                           maxWidth='xl'\r\n                        >\r\n                           <div className='d-flex justify-content-end'>\r\n                              <Button\r\n                                 onClick={handleClose}\r\n                                 className='p-1 m-1 rounded-pill'\r\n                                 variant='light'\r\n                              >\r\n                                 <Close />\r\n                              </Button>\r\n                           </div>\r\n\r\n                           <DialogContent style={{ width: '30rem' }}>\r\n                              <h4 className='text-center'>Tạo danh mục</h4>\r\n                              <Form onSubmit={submitHandler}>\r\n                                 <Form.Group>\r\n                                    <Form.Label as='p' className='mb-1'>\r\n                                       Tên danh mục con\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='name'\r\n                                       size='normal'\r\n                                       placeholder='Enter name'\r\n                                       value={name}\r\n                                       onChange={(e) => setName(e.target.value)}\r\n                                    ></Form.Control>\r\n                                 </Form.Group>\r\n                                 <Form.Group>\r\n                                    <Form.Label as='p' className='mb-1'>\r\n                                       Tên danh mục\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='text'\r\n                                       as='select'\r\n                                       size='normal'\r\n                                       placeholder='Enter name'\r\n                                       value={selectCategory}\r\n                                       onChange={(e) =>\r\n                                          setSelectCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option>Vui lòng chọn danh mục</option>\r\n\r\n                                       {category &&\r\n                                          category?.map((cat, index) => (\r\n                                             <option\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                                 <div className='pl-3 pr-3 text-center'>\r\n                                    <Button\r\n                                       type='submit'\r\n                                       size='sm'\r\n                                       variant='outline-light'\r\n                                       className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                                       style={{\r\n                                          fontSize: '1rem',\r\n                                          letterSpacing: '0.25rem',\r\n                                       }}\r\n                                    >\r\n                                       Tạo\r\n                                    </Button>\r\n                                 </div>\r\n                              </Form>\r\n                           </DialogContent>\r\n                        </Dialog>\r\n                     </div>\r\n                     <div className={classes.root}>\r\n                        <div className='d-flex justify-content-end'>\r\n                           <Button\r\n                              variant='outline-light'\r\n                              className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                              onClick={handleClickOpen}\r\n                              size='normal'\r\n                           >\r\n                              <i className='fas fa-plus'></i> Tạo danh mục con\r\n                           </Button>\r\n                        </div>\r\n                        <Paper\r\n                           className={classes.paper + 'shadow'}\r\n                           // style={{\r\n                           //   borderRadius: '1rem',\r\n                           //   border: '0.25px solid #ddd',\r\n                           // }}\r\n                        >\r\n                           <TableContainer\r\n                              className='text-center p-5'\r\n                              style={{\r\n                                 borderRadius: '1rem',\r\n                              }}\r\n                           >\r\n                              <EnhancedTableToolbar\r\n                                 numSelected={selected.length}\r\n                              />\r\n                              <Table\r\n                                 className={classes.table}\r\n                                 aria-labelledby='tableTitle'\r\n                                 size={dense ? 'small' : 'medium'}\r\n                                 aria-label='enhanced table'\r\n                              >\r\n                                 <EnhancedTableHead\r\n                                    classes={classes}\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={Sub.length}\r\n                                 />\r\n                                 <TableBody>\r\n                                    {stableSort(\r\n                                       Sub,\r\n                                       getComparator(order, orderBy)\r\n                                    )\r\n                                       .slice(\r\n                                          page * rowsPerPage,\r\n                                          page * rowsPerPage + rowsPerPage\r\n                                       )\r\n                                       .map((cat, index) => {\r\n                                          const isItemSelected = isSelected(\r\n                                             cat._id\r\n                                          )\r\n                                          const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                                          return (\r\n                                             <TableRow\r\n                                                hover\r\n                                                onClick={(event) =>\r\n                                                   handleClick(event, cat._id)\r\n                                                }\r\n                                                role='checkbox'\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={cat._id}\r\n                                                selected={isItemSelected}\r\n                                             >\r\n                                                <TableCell padding='checkbox'>\r\n                                                   <Checkbox\r\n                                                      checked={isItemSelected}\r\n                                                      inputProps={{\r\n                                                         'aria-labelledby':\r\n                                                            labelId,\r\n                                                      }}\r\n                                                   />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   component='th'\r\n                                                   id={labelId}\r\n                                                   scope='row'\r\n                                                   padding='none'\r\n                                                   align='center'\r\n                                                >\r\n                                                   {cat._id}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                   align='left'\r\n                                                   className='text-center'\r\n                                                >\r\n                                                   {cat.name}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         cat.createdAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n                                                <TableCell align='center'>\r\n                                                   {format(\r\n                                                      new utcToZonedTime(\r\n                                                         cat.updatedAt,\r\n                                                         'Asia/Ho_Chi_Minh'\r\n                                                      ),\r\n                                                      'HH:mm:ss - MM/dd/yyyy',\r\n                                                      {\r\n                                                         timeZone:\r\n                                                            'Asia/Ho_Chi_Minh',\r\n                                                      }\r\n                                                   )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align='center'>\r\n                                                   <LinkContainer\r\n                                                      to={`/admin/subcategory/${cat._id}/edit`}\r\n                                                   >\r\n                                                      <Button\r\n                                                         variant='outline-light'\r\n                                                         className='btn-sm rounded-pill btn_color_details'\r\n                                                      >\r\n                                                         CHI TIẾT\r\n                                                      </Button>\r\n                                                   </LinkContainer>\r\n                                                </TableCell>\r\n                                             </TableRow>\r\n                                          )\r\n                                       })}\r\n                                    {emptyRows > 0 && (\r\n                                       <TableRow\r\n                                          style={{\r\n                                             height:\r\n                                                (dense ? 33 : 53) * emptyRows,\r\n                                          }}\r\n                                       >\r\n                                          <TableCell colSpan={6} />\r\n                                       </TableRow>\r\n                                    )}\r\n                                 </TableBody>\r\n                              </Table>\r\n                           </TableContainer>\r\n                           <TablePagination\r\n                              rowsPerPageOptions={[5, 10, 25]}\r\n                              component='div'\r\n                              count={Sub.length}\r\n                              rowsPerPage={rowsPerPage}\r\n                              page={page}\r\n                              onChangePage={handleChangePage}\r\n                              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                           />\r\n                        </Paper>\r\n                        <FormControlLabel\r\n                           control={\r\n                              <Switch\r\n                                 checked={dense}\r\n                                 onChange={handleChangeDense}\r\n                              />\r\n                           }\r\n                           label='Dense padding'\r\n                        />\r\n                     </div>\r\n                  </>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default SubCategoriesListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SubCategoryEditScreen.js",["561","562","563","564"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport {\r\n   getCategoryDetails,\r\n   listCategoriesAdm,\r\n   updateCategory,\r\n} from '../../actions/categoryAction'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../../constants/categoriesConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\nimport {\r\n   getSubCategoryDetails,\r\n   updateSubCategory,\r\n} from '../../actions/subCategoryAction'\r\n\r\nconst SubCategoryEditScreen = ({ match, history }) => {\r\n   const subId = match.params.id\r\n\r\n   const [name, setName] = useState('')\r\n   const [selectCategory, setSelectCategory] = useState('')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const subCategoryDetails = useSelector((state) => state.subCategoryDetails)\r\n   const { loading, error, subcat } = subCategoryDetails\r\n\r\n   const subCategoryUpdate = useSelector((state) => state.subCategoryUpdate)\r\n   const {\r\n      loading: loadingUpdate,\r\n      error: errorUpdate,\r\n      success: successUpdate,\r\n   } = subCategoryUpdate\r\n\r\n   const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n   const { category } = categoriesListAdm\r\n\r\n   const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateSubCategory({ _id: subId, name, selectCategory }))\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (successUpdate) {\r\n         dispatch({ type: CATEGORY_UPDATE_RESET })\r\n         history.push('/admin/subcategorieslist')\r\n      } else {\r\n         if (!subcat.name || subcat._id !== subId) {\r\n            dispatch(getSubCategoryDetails(subId))\r\n            dispatch(listCategoriesAdm())\r\n         } else {\r\n            setName(subcat.name)\r\n         }\r\n      }\r\n   }, [dispatch, history, subId, subcat, successUpdate])\r\n\r\n   return (\r\n      <>\r\n         <Header />\r\n         <Row style={{ backgroundColor: '#b68973' }}>\r\n            <Col md={2} className='p-0'>\r\n               <SideBar />\r\n            </Col>\r\n            <Col md={10} className='pl-0 mt-3'>\r\n               {loadingUpdate && (\r\n                  <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n               )}\r\n               {errorUpdate && <Message>{errorUpdate}</Message>}\r\n               {loading ? (\r\n                  <Loader />\r\n               ) : (\r\n                  <Row className='justify-content-center'>\r\n                     <Col md={6}>\r\n                        <Form\r\n                           onSubmit={submitHandler}\r\n                           className='p-4 bg-light shadow card_color'\r\n                           fluid\r\n                        >\r\n                           <h2 className='text-center mb-4'>\r\n                              Chỉnh sửa danh mục con\r\n                           </h2>\r\n                           <Form.Group>\r\n                              <Container>\r\n                                 <Form.Label\r\n                                    as='p'\r\n                                    className='mb-1'\r\n                                    style={{ fontSize: '1rem' }}\r\n                                 >\r\n                                    Tên danh mục con\r\n                                 </Form.Label>\r\n                                 <Form.Control\r\n                                    className='border border-grey rounded-pill'\r\n                                    type='name'\r\n                                    size='normal'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                 ></Form.Control>\r\n                                 <Form.Group>\r\n                                    <Form.Label\r\n                                       as='p'\r\n                                       className='mb-1'\r\n                                       style={{ fontSize: '1rem' }}\r\n                                    >\r\n                                       Tên danh mục\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                       className='border border-grey rounded-pill'\r\n                                       type='text'\r\n                                       as='select'\r\n                                       size='normal'\r\n                                       placeholder='Enter name'\r\n                                       value={selectCategory}\r\n                                       onChange={(e) =>\r\n                                          setSelectCategory(e.target.value)\r\n                                       }\r\n                                    >\r\n                                       <option>Vui lòng chọn danh mục</option>\r\n\r\n                                       {category &&\r\n                                          category?.map((cat, index) => (\r\n                                             <option\r\n                                                key={index}\r\n                                                value={cat._id}\r\n                                             >\r\n                                                {cat.name}\r\n                                             </option>\r\n                                          ))}\r\n                                    </Form.Control>\r\n                                 </Form.Group>\r\n                              </Container>\r\n                           </Form.Group>\r\n                           <div className='pl-3 pr-3 text-center'>\r\n                              <Button\r\n                                 type='submit'\r\n                                 variant='outline-light'\r\n                                 className='rounded-pill btn_color_created'\r\n                                 style={{\r\n                                    fontSize: '1rem',\r\n                                    letterSpacing: '0.25rem',\r\n                                    width: '20rem',\r\n                                 }}\r\n                              >\r\n                                 Cập nhật\r\n                              </Button>\r\n                           </div>\r\n                        </Form>\r\n                     </Col>\r\n                  </Row>\r\n               )}\r\n            </Col>\r\n         </Row>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default SubCategoryEditScreen\r\n",{"ruleId":"565","replacedBy":"566"},{"ruleId":"567","replacedBy":"568"},{"ruleId":"569","severity":1,"message":"570","line":50,"column":12,"nodeType":"571","messageId":"572","endLine":50,"endColumn":16},{"ruleId":"569","severity":1,"message":"573","line":22,"column":41,"nodeType":"571","messageId":"572","endLine":22,"endColumn":52},{"ruleId":"569","severity":1,"message":"574","line":32,"column":7,"nodeType":"571","messageId":"572","endLine":32,"endColumn":17},{"ruleId":"569","severity":1,"message":"575","line":52,"column":7,"nodeType":"571","messageId":"572","endLine":52,"endColumn":21},{"ruleId":"569","severity":1,"message":"576","line":107,"column":10,"nodeType":"571","messageId":"572","endLine":107,"endColumn":20},{"ruleId":"569","severity":1,"message":"577","line":109,"column":11,"nodeType":"571","messageId":"572","endLine":109,"endColumn":19},{"ruleId":"569","severity":1,"message":"578","line":112,"column":10,"nodeType":"571","messageId":"572","endLine":112,"endColumn":21},{"ruleId":"569","severity":1,"message":"579","line":116,"column":10,"nodeType":"571","messageId":"572","endLine":116,"endColumn":14},{"ruleId":"580","severity":1,"message":"581","line":119,"column":13,"nodeType":"582","endLine":119,"endColumn":46},{"ruleId":"580","severity":1,"message":"581","line":122,"column":13,"nodeType":"582","endLine":122,"endColumn":44},{"ruleId":"583","severity":1,"message":"584","line":183,"column":7,"nodeType":"585","endLine":183,"endColumn":29,"suggestions":"586"},{"ruleId":"569","severity":1,"message":"587","line":3,"column":15,"nodeType":"571","messageId":"572","endLine":3,"endColumn":24},{"ruleId":"569","severity":1,"message":"588","line":4,"column":10,"nodeType":"571","messageId":"572","endLine":4,"endColumn":23},{"ruleId":"569","severity":1,"message":"589","line":5,"column":22,"nodeType":"571","messageId":"572","endLine":5,"endColumn":32},{"ruleId":"569","severity":1,"message":"570","line":45,"column":12,"nodeType":"571","messageId":"572","endLine":45,"endColumn":16},{"ruleId":"569","severity":1,"message":"590","line":100,"column":8,"nodeType":"571","messageId":"572","endLine":100,"endColumn":16},{"ruleId":"569","severity":1,"message":"591","line":113,"column":13,"nodeType":"571","messageId":"572","endLine":113,"endColumn":21},{"ruleId":"592","severity":1,"message":"593","line":130,"column":4,"nodeType":"594","messageId":"595","endLine":130,"endColumn":22},{"ruleId":"569","severity":1,"message":"596","line":12,"column":17,"nodeType":"571","messageId":"572","endLine":12,"endColumn":27},{"ruleId":"569","severity":1,"message":"597","line":13,"column":15,"nodeType":"571","messageId":"572","endLine":13,"endColumn":23},{"ruleId":"569","severity":1,"message":"598","line":14,"column":4,"nodeType":"571","messageId":"572","endLine":14,"endColumn":17},{"ruleId":"569","severity":1,"message":"599","line":20,"column":10,"nodeType":"571","messageId":"572","endLine":20,"endColumn":24},{"ruleId":"569","severity":1,"message":"600","line":24,"column":8,"nodeType":"571","messageId":"572","endLine":24,"endColumn":15},{"ruleId":"569","severity":1,"message":"601","line":62,"column":12,"nodeType":"571","messageId":"572","endLine":62,"endColumn":19},{"ruleId":"569","severity":1,"message":"602","line":62,"column":21,"nodeType":"571","messageId":"572","endLine":62,"endColumn":26},{"ruleId":"569","severity":1,"message":"570","line":62,"column":28,"nodeType":"571","messageId":"572","endLine":62,"endColumn":32},{"ruleId":"569","severity":1,"message":"603","line":70,"column":11,"nodeType":"571","messageId":"572","endLine":70,"endColumn":16},{"ruleId":"569","severity":1,"message":"604","line":70,"column":18,"nodeType":"571","messageId":"572","endLine":70,"endColumn":26},{"ruleId":"569","severity":1,"message":"605","line":13,"column":7,"nodeType":"571","messageId":"572","endLine":13,"endColumn":18},{"ruleId":"569","severity":1,"message":"606","line":20,"column":11,"nodeType":"571","messageId":"572","endLine":20,"endColumn":15},{"ruleId":"569","severity":1,"message":"607","line":21,"column":11,"nodeType":"571","messageId":"572","endLine":21,"endColumn":15},{"ruleId":"569","severity":1,"message":"608","line":22,"column":11,"nodeType":"571","messageId":"572","endLine":22,"endColumn":17},{"ruleId":"569","severity":1,"message":"609","line":33,"column":17,"nodeType":"571","messageId":"572","endLine":33,"endColumn":22},{"ruleId":"592","severity":1,"message":"610","line":175,"column":10,"nodeType":"594","messageId":"595","endLine":175,"endColumn":14},{"ruleId":"592","severity":1,"message":"610","line":176,"column":10,"nodeType":"594","messageId":"595","endLine":176,"endColumn":14},{"ruleId":"569","severity":1,"message":"611","line":29,"column":10,"nodeType":"571","messageId":"572","endLine":29,"endColumn":17},{"ruleId":"569","severity":1,"message":"612","line":11,"column":8,"nodeType":"571","messageId":"572","endLine":11,"endColumn":30},{"ruleId":"569","severity":1,"message":"613","line":32,"column":8,"nodeType":"571","messageId":"572","endLine":32,"endColumn":12},{"ruleId":"569","severity":1,"message":"614","line":72,"column":20,"nodeType":"571","messageId":"572","endLine":72,"endColumn":30},{"ruleId":"569","severity":1,"message":"615","line":80,"column":10,"nodeType":"571","messageId":"572","endLine":80,"endColumn":17},{"ruleId":"569","severity":1,"message":"616","line":88,"column":21,"nodeType":"571","messageId":"572","endLine":88,"endColumn":34},{"ruleId":"617","severity":1,"message":"618","line":219,"column":13,"nodeType":"619","messageId":"620","endLine":229,"endColumn":14},{"ruleId":"583","severity":1,"message":"621","line":235,"column":7,"nodeType":"585","endLine":235,"endColumn":41,"suggestions":"622"},{"ruleId":"569","severity":1,"message":"623","line":6,"column":8,"nodeType":"571","messageId":"572","endLine":6,"endColumn":21},{"ruleId":"569","severity":1,"message":"613","line":9,"column":8,"nodeType":"571","messageId":"572","endLine":9,"endColumn":12},{"ruleId":"569","severity":1,"message":"624","line":14,"column":8,"nodeType":"571","messageId":"572","endLine":14,"endColumn":21},{"ruleId":"569","severity":1,"message":"601","line":34,"column":29,"nodeType":"571","messageId":"572","endLine":34,"endColumn":36},{"ruleId":"569","severity":1,"message":"625","line":37,"column":40,"nodeType":"571","messageId":"572","endLine":37,"endColumn":47},{"ruleId":"569","severity":1,"message":"626","line":48,"column":16,"nodeType":"571","messageId":"572","endLine":48,"endColumn":22},{"ruleId":"569","severity":1,"message":"627","line":49,"column":10,"nodeType":"571","messageId":"572","endLine":49,"endColumn":34},{"ruleId":"617","severity":1,"message":"618","line":93,"column":13,"nodeType":"619","messageId":"620","endLine":103,"endColumn":14},{"ruleId":"583","severity":1,"message":"621","line":107,"column":7,"nodeType":"585","endLine":107,"endColumn":32,"suggestions":"628"},{"ruleId":"565","replacedBy":"629"},{"ruleId":"567","replacedBy":"630"},{"ruleId":"569","severity":1,"message":"623","line":8,"column":8,"nodeType":"571","messageId":"572","endLine":8,"endColumn":21},{"ruleId":"569","severity":1,"message":"631","line":1,"column":28,"nodeType":"571","messageId":"572","endLine":1,"endColumn":36},{"ruleId":"569","severity":1,"message":"632","line":15,"column":4,"nodeType":"571","messageId":"572","endLine":15,"endColumn":22},{"ruleId":"583","severity":1,"message":"633","line":91,"column":7,"nodeType":"585","endLine":91,"endColumn":25,"suggestions":"634"},{"ruleId":"569","severity":1,"message":"635","line":20,"column":4,"nodeType":"571","messageId":"572","endLine":20,"endColumn":22},{"ruleId":"569","severity":1,"message":"632","line":22,"column":4,"nodeType":"571","messageId":"572","endLine":22,"endColumn":22},{"ruleId":"569","severity":1,"message":"636","line":56,"column":24,"nodeType":"571","messageId":"572","endLine":56,"endColumn":38},{"ruleId":"569","severity":1,"message":"637","line":68,"column":21,"nodeType":"571","messageId":"572","endLine":68,"endColumn":36},{"ruleId":"583","severity":1,"message":"638","line":122,"column":7,"nodeType":"585","endLine":122,"endColumn":78,"suggestions":"639"},{"ruleId":"569","severity":1,"message":"640","line":2,"column":24,"nodeType":"571","messageId":"572","endLine":2,"endColumn":29},{"ruleId":"569","severity":1,"message":"641","line":2,"column":31,"nodeType":"571","messageId":"572","endLine":2,"endColumn":41},{"ruleId":"569","severity":1,"message":"642","line":4,"column":10,"nodeType":"571","messageId":"572","endLine":4,"endColumn":20},{"ruleId":"569","severity":1,"message":"643","line":4,"column":22,"nodeType":"571","messageId":"572","endLine":4,"endColumn":31},{"ruleId":"569","severity":1,"message":"644","line":4,"column":33,"nodeType":"571","messageId":"572","endLine":4,"endColumn":38},{"ruleId":"565","replacedBy":"645"},{"ruleId":"567","replacedBy":"646"},{"ruleId":"569","severity":1,"message":"612","line":1,"column":8,"nodeType":"571","messageId":"572","endLine":1,"endColumn":30},{"ruleId":"569","severity":1,"message":"647","line":2,"column":8,"nodeType":"571","messageId":"572","endLine":2,"endColumn":24},{"ruleId":"569","severity":1,"message":"640","line":4,"column":23,"nodeType":"571","messageId":"572","endLine":4,"endColumn":28},{"ruleId":"569","severity":1,"message":"648","line":7,"column":10,"nodeType":"571","messageId":"572","endLine":7,"endColumn":15},{"ruleId":"569","severity":1,"message":"599","line":10,"column":10,"nodeType":"571","messageId":"572","endLine":10,"endColumn":24},{"ruleId":"569","severity":1,"message":"649","line":10,"column":26,"nodeType":"571","messageId":"572","endLine":10,"endColumn":43},{"ruleId":"569","severity":1,"message":"650","line":31,"column":8,"nodeType":"571","messageId":"572","endLine":31,"endColumn":16},{"ruleId":"569","severity":1,"message":"651","line":32,"column":8,"nodeType":"571","messageId":"572","endLine":32,"endColumn":18},{"ruleId":"569","severity":1,"message":"652","line":33,"column":8,"nodeType":"571","messageId":"572","endLine":33,"endColumn":15},{"ruleId":"569","severity":1,"message":"653","line":36,"column":8,"nodeType":"571","messageId":"572","endLine":36,"endColumn":18},{"ruleId":"569","severity":1,"message":"654","line":37,"column":8,"nodeType":"571","messageId":"572","endLine":37,"endColumn":22},{"ruleId":"569","severity":1,"message":"655","line":97,"column":7,"nodeType":"571","messageId":"572","endLine":97,"endColumn":23},{"ruleId":"569","severity":1,"message":"656","line":100,"column":7,"nodeType":"571","messageId":"572","endLine":100,"endColumn":18},{"ruleId":"569","severity":1,"message":"657","line":101,"column":7,"nodeType":"571","messageId":"572","endLine":101,"endColumn":15},{"ruleId":"569","severity":1,"message":"606","line":232,"column":11,"nodeType":"571","messageId":"572","endLine":232,"endColumn":15},{"ruleId":"569","severity":1,"message":"658","line":232,"column":17,"nodeType":"571","messageId":"572","endLine":232,"endColumn":24},{"ruleId":"569","severity":1,"message":"659","line":233,"column":11,"nodeType":"571","messageId":"572","endLine":233,"endColumn":16},{"ruleId":"569","severity":1,"message":"660","line":233,"column":18,"nodeType":"571","messageId":"572","endLine":233,"endColumn":26},{"ruleId":"569","severity":1,"message":"661","line":234,"column":11,"nodeType":"571","messageId":"572","endLine":234,"endColumn":19},{"ruleId":"569","severity":1,"message":"662","line":234,"column":21,"nodeType":"571","messageId":"572","endLine":234,"endColumn":32},{"ruleId":"569","severity":1,"message":"663","line":235,"column":11,"nodeType":"571","messageId":"572","endLine":235,"endColumn":26},{"ruleId":"569","severity":1,"message":"664","line":235,"column":28,"nodeType":"571","messageId":"572","endLine":235,"endColumn":46},{"ruleId":"569","severity":1,"message":"665","line":236,"column":11,"nodeType":"571","messageId":"572","endLine":236,"endColumn":18},{"ruleId":"569","severity":1,"message":"614","line":236,"column":20,"nodeType":"571","messageId":"572","endLine":236,"endColumn":30},{"ruleId":"569","severity":1,"message":"601","line":298,"column":12,"nodeType":"571","messageId":"572","endLine":298,"endColumn":19},{"ruleId":"569","severity":1,"message":"602","line":298,"column":21,"nodeType":"571","messageId":"572","endLine":298,"endColumn":26},{"ruleId":"569","severity":1,"message":"625","line":304,"column":12,"nodeType":"571","messageId":"572","endLine":304,"endColumn":19},{"ruleId":"569","severity":1,"message":"666","line":7,"column":8,"nodeType":"571","messageId":"572","endLine":7,"endColumn":20},{"ruleId":"569","severity":1,"message":"667","line":8,"column":8,"nodeType":"571","messageId":"572","endLine":8,"endColumn":20},{"ruleId":"569","severity":1,"message":"668","line":9,"column":8,"nodeType":"571","messageId":"572","endLine":9,"endColumn":22},{"ruleId":"569","severity":1,"message":"669","line":13,"column":17,"nodeType":"571","messageId":"572","endLine":13,"endColumn":26},{"ruleId":"569","severity":1,"message":"670","line":14,"column":10,"nodeType":"571","messageId":"572","endLine":14,"endColumn":21},{"ruleId":"569","severity":1,"message":"671","line":15,"column":10,"nodeType":"571","messageId":"572","endLine":15,"endColumn":13},{"ruleId":"569","severity":1,"message":"640","line":15,"column":15,"nodeType":"571","messageId":"572","endLine":15,"endColumn":20},{"ruleId":"569","severity":1,"message":"672","line":15,"column":22,"nodeType":"571","messageId":"572","endLine":15,"endColumn":31},{"ruleId":"569","severity":1,"message":"673","line":15,"column":33,"nodeType":"571","messageId":"572","endLine":15,"endColumn":36},{"ruleId":"569","severity":1,"message":"674","line":15,"column":38,"nodeType":"571","messageId":"572","endLine":15,"endColumn":44},{"ruleId":"569","severity":1,"message":"675","line":15,"column":46,"nodeType":"571","messageId":"572","endLine":15,"endColumn":50},{"ruleId":"569","severity":1,"message":"676","line":168,"column":10,"nodeType":"571","messageId":"572","endLine":168,"endColumn":20},{"ruleId":"569","severity":1,"message":"601","line":171,"column":18,"nodeType":"571","messageId":"572","endLine":171,"endColumn":25},{"ruleId":"569","severity":1,"message":"602","line":171,"column":27,"nodeType":"571","messageId":"572","endLine":171,"endColumn":32},{"ruleId":"569","severity":1,"message":"600","line":15,"column":8,"nodeType":"571","messageId":"572","endLine":15,"endColumn":15},{"ruleId":"569","severity":1,"message":"677","line":22,"column":4,"nodeType":"571","messageId":"572","endLine":22,"endColumn":33},{"ruleId":"569","severity":1,"message":"678","line":37,"column":10,"nodeType":"571","messageId":"572","endLine":37,"endColumn":17},{"ruleId":"569","severity":1,"message":"679","line":38,"column":10,"nodeType":"571","messageId":"572","endLine":38,"endColumn":20},{"ruleId":"569","severity":1,"message":"611","line":41,"column":10,"nodeType":"571","messageId":"572","endLine":41,"endColumn":17},{"ruleId":"569","severity":1,"message":"680","line":43,"column":10,"nodeType":"571","messageId":"572","endLine":43,"endColumn":22},{"ruleId":"569","severity":1,"message":"578","line":47,"column":10,"nodeType":"571","messageId":"572","endLine":47,"endColumn":21},{"ruleId":"569","severity":1,"message":"602","line":54,"column":21,"nodeType":"571","messageId":"572","endLine":54,"endColumn":26},{"ruleId":"569","severity":1,"message":"681","line":61,"column":14,"nodeType":"571","messageId":"572","endLine":61,"endColumn":22},{"ruleId":"569","severity":1,"message":"682","line":67,"column":16,"nodeType":"571","messageId":"572","endLine":67,"endColumn":26},{"ruleId":"569","severity":1,"message":"683","line":68,"column":16,"nodeType":"571","messageId":"572","endLine":68,"endColumn":26},{"ruleId":"569","severity":1,"message":"684","line":69,"column":7,"nodeType":"571","messageId":"572","endLine":69,"endColumn":15},{"ruleId":"569","severity":1,"message":"685","line":73,"column":12,"nodeType":"571","messageId":"572","endLine":73,"endColumn":18},{"ruleId":"569","severity":1,"message":"686","line":81,"column":16,"nodeType":"571","messageId":"572","endLine":81,"endColumn":29},{"ruleId":"569","severity":1,"message":"687","line":88,"column":16,"nodeType":"571","messageId":"572","endLine":88,"endColumn":32},{"ruleId":"569","severity":1,"message":"688","line":95,"column":16,"nodeType":"571","messageId":"572","endLine":95,"endColumn":34},{"ruleId":"583","severity":1,"message":"689","line":116,"column":7,"nodeType":"585","endLine":116,"endColumn":34,"suggestions":"690"},{"ruleId":"569","severity":1,"message":"611","line":69,"column":10,"nodeType":"571","messageId":"572","endLine":69,"endColumn":17},{"ruleId":"569","severity":1,"message":"691","line":122,"column":21,"nodeType":"571","messageId":"572","endLine":122,"endColumn":40},{"ruleId":"569","severity":1,"message":"692","line":22,"column":10,"nodeType":"571","messageId":"572","endLine":22,"endColumn":16},{"ruleId":"569","severity":1,"message":"574","line":40,"column":7,"nodeType":"571","messageId":"572","endLine":40,"endColumn":17},{"ruleId":"569","severity":1,"message":"575","line":60,"column":7,"nodeType":"571","messageId":"572","endLine":60,"endColumn":21},{"ruleId":"569","severity":1,"message":"577","line":121,"column":11,"nodeType":"571","messageId":"572","endLine":121,"endColumn":19},{"ruleId":"569","severity":1,"message":"693","line":122,"column":11,"nodeType":"571","messageId":"572","endLine":122,"endColumn":20},{"ruleId":"569","severity":1,"message":"694","line":122,"column":22,"nodeType":"571","messageId":"572","endLine":122,"endColumn":34},{"ruleId":"569","severity":1,"message":"695","line":125,"column":11,"nodeType":"571","messageId":"572","endLine":125,"endColumn":31},{"ruleId":"569","severity":1,"message":"696","line":126,"column":11,"nodeType":"571","messageId":"572","endLine":126,"endColumn":24},{"ruleId":"569","severity":1,"message":"697","line":127,"column":26,"nodeType":"571","messageId":"572","endLine":127,"endColumn":42},{"ruleId":"569","severity":1,"message":"578","line":130,"column":10,"nodeType":"571","messageId":"572","endLine":130,"endColumn":21},{"ruleId":"569","severity":1,"message":"698","line":143,"column":32,"nodeType":"571","messageId":"572","endLine":143,"endColumn":40},{"ruleId":"569","severity":1,"message":"699","line":208,"column":16,"nodeType":"571","messageId":"572","endLine":208,"endColumn":19},{"ruleId":"583","severity":1,"message":"700","line":239,"column":7,"nodeType":"585","endLine":239,"endColumn":14,"suggestions":"701"},{"ruleId":"583","severity":1,"message":"702","line":272,"column":7,"nodeType":"585","endLine":272,"endColumn":43,"suggestions":"703"},{"ruleId":"569","severity":1,"message":"704","line":290,"column":10,"nodeType":"571","messageId":"572","endLine":290,"endColumn":27},{"ruleId":"569","severity":1,"message":"705","line":4,"column":4,"nodeType":"571","messageId":"572","endLine":4,"endColumn":20},{"ruleId":"569","severity":1,"message":"706","line":264,"column":11,"nodeType":"571","messageId":"572","endLine":264,"endColumn":14},{"ruleId":"569","severity":1,"message":"707","line":293,"column":15,"nodeType":"571","messageId":"572","endLine":293,"endColumn":29},{"ruleId":"569","severity":1,"message":"706","line":311,"column":11,"nodeType":"571","messageId":"572","endLine":311,"endColumn":14},{"ruleId":"569","severity":1,"message":"679","line":251,"column":10,"nodeType":"571","messageId":"572","endLine":251,"endColumn":20},{"ruleId":"583","severity":1,"message":"708","line":293,"column":7,"nodeType":"585","endLine":293,"endColumn":66,"suggestions":"709"},{"ruleId":"569","severity":1,"message":"710","line":1,"column":8,"nodeType":"571","messageId":"572","endLine":1,"endColumn":13},{"ruleId":"569","severity":1,"message":"711","line":7,"column":10,"nodeType":"571","messageId":"572","endLine":7,"endColumn":26},{"ruleId":"569","severity":1,"message":"712","line":8,"column":25,"nodeType":"571","messageId":"572","endLine":8,"endColumn":35},{"ruleId":"569","severity":1,"message":"713","line":19,"column":10,"nodeType":"571","messageId":"572","endLine":19,"endColumn":21},{"ruleId":"569","severity":1,"message":"714","line":37,"column":11,"nodeType":"571","messageId":"572","endLine":37,"endColumn":24},{"ruleId":"569","severity":1,"message":"715","line":37,"column":26,"nodeType":"571","messageId":"572","endLine":37,"endColumn":42},{"ruleId":"569","severity":1,"message":"707","line":291,"column":15,"nodeType":"571","messageId":"572","endLine":291,"endColumn":29},{"ruleId":"569","severity":1,"message":"706","line":309,"column":11,"nodeType":"571","messageId":"572","endLine":309,"endColumn":14},{"ruleId":"569","severity":1,"message":"716","line":371,"column":9,"nodeType":"571","messageId":"572","endLine":371,"endColumn":29},{"ruleId":"569","severity":1,"message":"717","line":49,"column":10,"nodeType":"571","messageId":"572","endLine":49,"endColumn":23},{"ruleId":"569","severity":1,"message":"718","line":55,"column":10,"nodeType":"571","messageId":"572","endLine":55,"endColumn":20},{"ruleId":"569","severity":1,"message":"611","line":88,"column":7,"nodeType":"571","messageId":"572","endLine":88,"endColumn":14},{"ruleId":"569","severity":1,"message":"672","line":2,"column":40,"nodeType":"571","messageId":"572","endLine":2,"endColumn":49},{"ruleId":"569","severity":1,"message":"602","line":23,"column":20,"nodeType":"571","messageId":"572","endLine":23,"endColumn":25},{"ruleId":"569","severity":1,"message":"719","line":66,"column":12,"nodeType":"571","messageId":"572","endLine":66,"endColumn":20},{"ruleId":"569","severity":1,"message":"720","line":76,"column":21,"nodeType":"571","messageId":"572","endLine":76,"endColumn":31},{"ruleId":"569","severity":1,"message":"721","line":76,"column":42,"nodeType":"571","messageId":"572","endLine":76,"endColumn":52},{"ruleId":"569","severity":1,"message":"602","line":24,"column":20,"nodeType":"571","messageId":"572","endLine":24,"endColumn":25},{"ruleId":"569","severity":1,"message":"722","line":5,"column":10,"nodeType":"571","messageId":"572","endLine":5,"endColumn":14},{"ruleId":"569","severity":1,"message":"623","line":7,"column":8,"nodeType":"571","messageId":"572","endLine":7,"endColumn":21},{"ruleId":"569","severity":1,"message":"602","line":33,"column":20,"nodeType":"571","messageId":"572","endLine":33,"endColumn":25},{"ruleId":"569","severity":1,"message":"723","line":6,"column":26,"nodeType":"571","messageId":"572","endLine":6,"endColumn":38},{"ruleId":"569","severity":1,"message":"724","line":20,"column":12,"nodeType":"571","messageId":"572","endLine":20,"endColumn":17},{"ruleId":"569","severity":1,"message":"725","line":23,"column":12,"nodeType":"571","messageId":"572","endLine":23,"endColumn":20},{"ruleId":"726","severity":1,"message":"727","line":33,"column":27,"nodeType":"728","messageId":"729","endLine":33,"endColumn":29},{"ruleId":"730","severity":1,"message":"731","line":34,"column":32,"nodeType":"732","messageId":"595","endLine":34,"endColumn":34},{"ruleId":"583","severity":1,"message":"621","line":110,"column":7,"nodeType":"585","endLine":117,"endColumn":5,"suggestions":"733"},{"ruleId":"569","severity":1,"message":"734","line":32,"column":4,"nodeType":"571","messageId":"572","endLine":32,"endColumn":18},{"ruleId":"569","severity":1,"message":"735","line":33,"column":4,"nodeType":"571","messageId":"572","endLine":33,"endColumn":18},{"ruleId":"569","severity":1,"message":"706","line":321,"column":13,"nodeType":"571","messageId":"572","endLine":321,"endColumn":16},{"ruleId":"569","severity":1,"message":"672","line":2,"column":40,"nodeType":"571","messageId":"572","endLine":2,"endColumn":49},{"ruleId":"569","severity":1,"message":"736","line":6,"column":4,"nodeType":"571","messageId":"572","endLine":6,"endColumn":22},{"ruleId":"569","severity":1,"message":"737","line":8,"column":4,"nodeType":"571","messageId":"572","endLine":8,"endColumn":18},{"ruleId":"569","severity":1,"message":"602","line":29,"column":21,"nodeType":"571","messageId":"572","endLine":29,"endColumn":26},"no-native-reassign",["738"],"no-negated-in-lhs",["739"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'NavDropdown' is defined but never used.","'StyledMenu' is assigned a value but never used.","'StyledMenuItem' is assigned a value but never used.","'anchorReff' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'menu' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["740"],"'Container' is defined but never used.","'LinkContainer' is defined but never used.","'withStyles' is defined but never used.","'settings' is assigned a value but never used.","'onChange' is defined but never used.","no-dupe-keys","Duplicate key 'subCategoryDetails'.","ObjectExpression","unexpected","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","'ListGroupItem' is defined but never used.","'getUserDetails' is defined but never used.","'Message' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","'firebaseApp' is assigned a value but never used.","'name' is assigned a value but never used.","'mail' is assigned a value but never used.","'avatar' is assigned a value but never used.","'token' is assigned a value but never used.","Duplicate key 'type'.","'classes' is assigned a value but never used.","'CheckCircleOutlineIcon' is defined but never used.","'data' is defined but never used.","'setMessage' is assigned a value but never used.","'address' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["741"],"'FormContainer' is defined but never used.","'DialogActions' is defined but never used.","'success' is assigned a value but never used.","'setAdd' is assigned a value but never used.","'updateInformationAddress' is assigned a value but never used.",["742"],["738"],["739"],"'useState' is defined but never used.","'ORDER_DETAIL_RESET' is defined but never used.","React Hook useEffect has missing dependencies: 'cart.cartItems', 'dispatch', and 'order._id'. Either include them or remove the dependency array.",["743"],"'ORDER_CREATE_RESET' is defined but never used.","'setOrderStatus' is assigned a value but never used.","'loadingByMember' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["744"],"'Image' is defined but never used.","'InputGroup' is defined but never used.","'ButtonBase' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.",["738"],["739"],"'ErrorOutlineIcon' is defined but never used.","'toast' is defined but never used.","'updateUserProfile' is defined but never used.","'Checkbox' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'DeleteIcon' is defined but never used.","'FilterListIcon' is defined but never used.","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'setName' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'message' is assigned a value but never used.","'GroupAddIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'VideoLabelIcon' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'activeStep' is assigned a value but never used.","'PRODUCT_OF_SUB_CATEGORY_RESET' is defined but never used.","'keyword' is assigned a value but never used.","'pageNumber' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'errorSub' is assigned a value but never used.","'loadingCat' is assigned a value but never used.","'successCat' is assigned a value but never used.","'category' is assigned a value but never used.","'subcat' is assigned a value but never used.","'successFilter' is assigned a value but never used.","'successSubFilter' is assigned a value but never used.","'successFilterPrice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'products.length'. Either include it or remove the dependency array.",["745"],"'productsFilterPrice' is assigned a value but never used.","'format' is defined but never used.","'anchorEl1' is assigned a value but never used.","'setAnchorEl1' is assigned a value but never used.","'loadingNotifications' is assigned a value but never used.","'notifications' is assigned a value but never used.","'setHasFirstFetch' is assigned a value but never used.","'userData' is assigned a value but never used.","'url' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.",["746"],"React Hook useEffect has missing dependencies: 'open', 'open1', and 'openNotification'. Either include them or remove the dependency array.",["747"],"'markAsReadHandler' is assigned a value but never used.","'AppstoreOutlined' is defined but never used.","'did' is assigned a value but never used.","'createdProduct' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categoryCat' and 'createdProduct._id'. Either include them or remove the dependency array.",["748"],"'axios' is defined but never used.","'deleteFileImages' is defined but never used.","'newProduct' is defined but never used.","'formatPrice' is defined but never used.","'imagesPreview' is assigned a value but never used.","'setImagesPreview' is assigned a value but never used.","'submitHandlerDetails' is assigned a value but never used.","'getComparator' is defined but never used.","'stableSort' is defined but never used.","'userInfo' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'successPay' is assigned a value but never used.","'Link' is defined but never used.","'listProducts' is defined but never used.","'order' is assigned a value but never used.","'supplier' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["749"],"'createCategory' is defined but never used.","'deleteCategory' is defined but never used.","'getCategoryDetails' is defined but never used.","'updateCategory' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"750","fix":"751"},{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},"Update the dependencies array to be: [open, userInfo, user, dispatch]",{"range":"770","text":"771"},"Update the dependencies array to be: [dispatch, history, success, user, userInfo]",{"range":"772","text":"773"},"Update the dependencies array to be: [dispatch, history, user, userInfo]",{"range":"774","text":"775"},"Update the dependencies array to be: [cart.cartItems, dispatch, history, order._id, success]",{"range":"776","text":"777"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",{"range":"778","text":"779"},"Update the dependencies array to be: [dispatch, userInfo, catId, products.length]",{"range":"780","text":"781"},"Update the dependencies array to be: [history]",{"range":"782","text":"783"},"Update the dependencies array to be: [dispatch, notificationsCount, open, open1, openNotification, user]",{"range":"784","text":"785"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id]",{"range":"786","text":"787"},"Update the dependencies array to be: [history, dispatch, successDeleteAddress, successCreateAddress, successSelectRole, successUpdateAddress, userInfo]",{"range":"788","text":"789"},[5343,5365],"[open, userInfo, user, dispatch]",[7807,7841],"[dispatch, history, success, user, userInfo]",[3345,3370],"[dispatch, history, user, userInfo]",[2902,2920],"[cart.cartItems, dispatch, history, order._id, success]",[3830,3901],"[dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",[3532,3559],"[dispatch, userInfo, catId, products.length]",[7099,7106],"[history]",[7867,7903],"[dispatch, notificationsCount, open, open1, openNotification, user]",[9630,9689],"[dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id]",[3348,3501],"[history, dispatch, successDeleteAddress, successCreateAddress, successSelectRole, successUpdateAddress, userInfo]"]