[{"F:\\Code\\shopPro\\frontend\\src\\index.js":"1","F:\\Code\\shopPro\\frontend\\src\\App.js":"2","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js":"3","F:\\Code\\shopPro\\frontend\\src\\components\\Header.js":"4","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js":"5","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js":"6","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js":"7","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js":"8","F:\\Code\\shopPro\\frontend\\src\\store.js":"9","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js":"10","F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js":"11","F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js":"12","F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js":"13","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js":"14","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js":"15","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js":"16","F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js":"17","F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js":"18","F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js":"19","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js":"20","F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js":"21","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js":"22","F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js":"23","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js":"24","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js":"25","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js":"26","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js":"27","F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js":"28","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js":"29","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js":"30","F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js":"31","F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js":"32","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js":"33","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js":"34","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js":"35","F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js":"36","F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js":"37","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js":"38","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js":"39","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js":"40","F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js":"41","F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js":"42","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js":"43","F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js":"44","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js":"45","F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js":"46","F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js":"47","F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js":"48","F:\\Code\\shopPro\\frontend\\src\\configAuth.js":"49","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderEditScreen.js":"50","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js":"51","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js":"52","F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js":"53","F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js":"54","F:\\Code\\shopPro\\frontend\\src\\screens\\CategoriesListScreen.js":"55","F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js":"56","F:\\Code\\shopPro\\frontend\\src\\screens\\CategoryEditScreen.js":"57","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductCreateScreen.js":"58","F:\\Code\\shopPro\\frontend\\src\\components\\test.js":"59","F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js":"60","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js":"61","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js":"62","F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js":"63","F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js":"64","F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js":"65","F:\\Code\\shopPro\\frontend\\src\\screens\\SupplierListScreen.js":"66","F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js":"67","F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js":"68","F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js":"69","F:\\Code\\shopPro\\frontend\\src\\screens\\SupplierEditScreen.js":"70","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js":"71","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js":"72","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js":"73","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js":"74","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js":"75","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js":"76","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js":"77","F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js":"78","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js":"79","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js":"80","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js":"81","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js":"82","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js":"83","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js":"84","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js":"85"},{"size":629,"mtime":1620119595981,"results":"86","hashOfConfig":"87"},{"size":6306,"mtime":1620241744524,"results":"88","hashOfConfig":"87"},{"size":362,"mtime":499162500000,"results":"89","hashOfConfig":"87"},{"size":20338,"mtime":1620205814356,"results":"90","hashOfConfig":"87"},{"size":11338,"mtime":1619597581543,"results":"91","hashOfConfig":"87"},{"size":2307,"mtime":1620205206588,"results":"92","hashOfConfig":"87"},{"size":1545,"mtime":1619589307853,"results":"93","hashOfConfig":"87"},{"size":19466,"mtime":1620241779274,"results":"94","hashOfConfig":"87"},{"size":3871,"mtime":1620134200673,"results":"95","hashOfConfig":"87"},{"size":5546,"mtime":1618734151819,"results":"96","hashOfConfig":"87"},{"size":2288,"mtime":1618733779615,"results":"97","hashOfConfig":"87"},{"size":7845,"mtime":1620236630866,"results":"98","hashOfConfig":"87"},{"size":567,"mtime":1615791677731,"results":"99","hashOfConfig":"87"},{"size":689,"mtime":1619547659359,"results":"100","hashOfConfig":"87"},{"size":10291,"mtime":1620241859773,"results":"101","hashOfConfig":"87"},{"size":1184,"mtime":1615605660974,"results":"102","hashOfConfig":"87"},{"size":1281,"mtime":1615605733344,"results":"103","hashOfConfig":"87"},{"size":238,"mtime":1612540677571,"results":"104","hashOfConfig":"87"},{"size":5024,"mtime":1620134822303,"results":"105","hashOfConfig":"87"},{"size":2376,"mtime":1620134067531,"results":"106","hashOfConfig":"87"},{"size":7114,"mtime":1620241320969,"results":"107","hashOfConfig":"87"},{"size":402,"mtime":1612087628650,"results":"108","hashOfConfig":"87"},{"size":6446,"mtime":1620156653042,"results":"109","hashOfConfig":"87"},{"size":7475,"mtime":1620241649126,"results":"110","hashOfConfig":"87"},{"size":24319,"mtime":1620241600764,"results":"111","hashOfConfig":"87"},{"size":7150,"mtime":1620241936464,"results":"112","hashOfConfig":"87"},{"size":1643,"mtime":1612593111433,"results":"113","hashOfConfig":"87"},{"size":2763,"mtime":1620243566664,"results":"114","hashOfConfig":"87"},{"size":8054,"mtime":1620243739885,"results":"115","hashOfConfig":"87"},{"size":5106,"mtime":1619835091253,"results":"116","hashOfConfig":"87"},{"size":1928,"mtime":1619834933597,"results":"117","hashOfConfig":"87"},{"size":7309,"mtime":1619878397795,"results":"118","hashOfConfig":"87"},{"size":15585,"mtime":1620244216186,"results":"119","hashOfConfig":"87"},{"size":855,"mtime":1619547664611,"results":"120","hashOfConfig":"87"},{"size":311,"mtime":1619377332627,"results":"121","hashOfConfig":"87"},{"size":14956,"mtime":1617434431370,"results":"122","hashOfConfig":"87"},{"size":3358,"mtime":1614437771361,"results":"123","hashOfConfig":"87"},{"size":17846,"mtime":1617764524144,"results":"124","hashOfConfig":"87"},{"size":9647,"mtime":1619575870525,"results":"125","hashOfConfig":"87"},{"size":16538,"mtime":1620150058105,"results":"126","hashOfConfig":"87"},{"size":995,"mtime":1618210153490,"results":"127","hashOfConfig":"87"},{"size":1297,"mtime":1619197232259,"results":"128","hashOfConfig":"87"},{"size":3613,"mtime":1619707633985,"results":"129","hashOfConfig":"87"},{"size":2344,"mtime":1620226170211,"results":"130","hashOfConfig":"87"},{"size":778,"mtime":1614826321511,"results":"131","hashOfConfig":"87"},{"size":1725,"mtime":1616170962837,"results":"132","hashOfConfig":"87"},{"size":514,"mtime":1615015305728,"results":"133","hashOfConfig":"87"},{"size":6842,"mtime":1620241371188,"results":"134","hashOfConfig":"87"},{"size":393,"mtime":1616226016215,"results":"135","hashOfConfig":"87"},{"size":15863,"mtime":1619882842548,"results":"136","hashOfConfig":"87"},{"size":5057,"mtime":1617288730631,"results":"137","hashOfConfig":"87"},{"size":514,"mtime":1617284362928,"results":"138","hashOfConfig":"87"},{"size":3079,"mtime":1617764918779,"results":"139","hashOfConfig":"87"},{"size":1148,"mtime":1617555469184,"results":"140","hashOfConfig":"87"},{"size":19132,"mtime":1619936106264,"results":"141","hashOfConfig":"87"},{"size":4859,"mtime":1617764862267,"results":"142","hashOfConfig":"87"},{"size":3395,"mtime":1617534903289,"results":"143","hashOfConfig":"87"},{"size":9117,"mtime":1617763767260,"results":"144","hashOfConfig":"87"},{"size":0,"mtime":1617780641945,"results":"145","hashOfConfig":"87"},{"size":251,"mtime":1617900546652,"results":"146","hashOfConfig":"87"},{"size":6097,"mtime":1620241503062,"results":"147","hashOfConfig":"87"},{"size":855,"mtime":1618203083711,"results":"148","hashOfConfig":"87"},{"size":1802,"mtime":1611471571179,"results":"149","hashOfConfig":"87"},{"size":6372,"mtime":1618852953383,"results":"150","hashOfConfig":"87"},{"size":1253,"mtime":1619890864238,"results":"151","hashOfConfig":"87"},{"size":19197,"mtime":1619960414835,"results":"152","hashOfConfig":"87"},{"size":4900,"mtime":1619943611553,"results":"153","hashOfConfig":"87"},{"size":1148,"mtime":1619935367616,"results":"154","hashOfConfig":"87"},{"size":3073,"mtime":1619936932800,"results":"155","hashOfConfig":"87"},{"size":3454,"mtime":1619960650161,"results":"156","hashOfConfig":"87"},{"size":9903,"mtime":1620199400848,"results":"157","hashOfConfig":"87"},{"size":13837,"mtime":1620205969215,"results":"158","hashOfConfig":"87"},{"size":3842,"mtime":1620183296387,"results":"159","hashOfConfig":"87"},{"size":16012,"mtime":1620183244605,"results":"160","hashOfConfig":"87"},{"size":20339,"mtime":1620183268367,"results":"161","hashOfConfig":"87"},{"size":18945,"mtime":1620183358467,"results":"162","hashOfConfig":"87"},{"size":14232,"mtime":1620239413210,"results":"163","hashOfConfig":"87"},{"size":815,"mtime":1620138964451,"results":"164","hashOfConfig":"87"},{"size":20200,"mtime":1620183235479,"results":"165","hashOfConfig":"87"},{"size":17530,"mtime":1620183255814,"results":"166","hashOfConfig":"87"},{"size":3935,"mtime":1620183263582,"results":"167","hashOfConfig":"87"},{"size":17410,"mtime":1620183259816,"results":"168","hashOfConfig":"87"},{"size":10449,"mtime":1620183249072,"results":"169","hashOfConfig":"87"},{"size":4009,"mtime":1620183231306,"results":"170","hashOfConfig":"87"},{"size":9043,"mtime":1620183240177,"results":"171","hashOfConfig":"87"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"1shtzj8",{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"174"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"174"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"174"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"174"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"174"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"174"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"174"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"174"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"256"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"256"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"256"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"256"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"256"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"174"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"256"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"256"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"256"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"174"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"256"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"256"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"174"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"174"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"174"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"174"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"174"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"174"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"174"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"174"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"174"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"174"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"174"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"174"},"F:\\Code\\shopPro\\frontend\\src\\index.js",[],["378","379"],"F:\\Code\\shopPro\\frontend\\src\\App.js",["380"],"F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Header.js",["381","382","383","384","385","386","387","388","389","390","391","392","393","394"],"// import { Menu } from '@material-ui/core'\r\n// import { Link } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Button from '@material-ui/core/Button'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport { Menu } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport { black } from 'colors'\r\nimport firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Container, Image, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Route, useHistory } from 'react-router-dom'\r\nimport { listCategories } from '../actions/categoryAction'\r\nimport { logout } from '../actions/userActions'\r\nimport SearchBox from './SearchBox'\r\n\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n})((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'center',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    {...props}\r\n  />\r\n))\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n  root: {\r\n    '&:focus': {\r\n      backgroundColor: theme.palette.primary.main,\r\n      '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n        color: theme.palette.common.white,\r\n      },\r\n    },\r\n  },\r\n}))(MenuItem)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  paper: {\r\n    marginRight: theme.spacing(1),\r\n    zIndex: '7 !important',\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n  },\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: -3,\r\n    top: 13,\r\n    border: `2px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n  },\r\n}))(Badge)\r\n\r\nfunction Header(props) {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = React.useState(false)\r\n  const anchorRef = React.useRef(null)\r\n  const anchorReff = React.useRef(null)\r\n  const history = useHistory()\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n  // const [menu, setMenu] = useState(false)\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const menu = (\r\n    <Menu>\r\n      <Menu.Item key='0'>\r\n        <a to='https://www.antgroup.com'>1st menu item</a>\r\n      </Menu.Item>\r\n      <Menu.Item key='1'>\r\n        <a to='https://www.aliyun.com'>2nd menu item</a>\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key='3'>3rd menu item</Menu.Item>\r\n    </Menu>\r\n  )\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { user } = userDetails\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const { loading, success, category } = categoriesList\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  const logoutHandler = () => {\r\n    firebase.auth().signOut()\r\n    dispatch(logout())\r\n    history.push('/')\r\n  }\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen)\r\n  }\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return\r\n    }\r\n\r\n    setOpen(false)\r\n  }\r\n\r\n  function handleListKeyDown(event) {\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault()\r\n      setOpen(false)\r\n    }\r\n  }\r\n\r\n  // return focus to the button when we transitioned from !open -> open\r\n  const prevOpen = React.useRef(open)\r\n  useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      anchorRef.current.focus()\r\n    }\r\n\r\n    dispatch(listCategories())\r\n\r\n    prevOpen.current = open\r\n  }, [open, userInfo, user])\r\n\r\n  return (\r\n    <>\r\n      <Navbar\r\n        expand='lg'\r\n        collapseOnSelect\r\n        className='p-0 pl-5 pr-5 m-0 shadow'\r\n        style={{ backgroundColor: '#edfead', height: '4rem' }}\r\n      >\r\n        <Container fluid>\r\n          <LinkContainer to='/'>\r\n            <Navbar.Brand className='text-uppercase font-weight-bold flex-grow-1 '>\r\n              {/* <h2>ProShop</h2> */}\r\n              <Image\r\n                className='border-bottom border-danger'\r\n                src='/logo/logo_white.png'\r\n                style={{ width: '6rem', height: '5rem', zIndex: '0' }}\r\n              />\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\r\n          <Route render={({ history }) => <SearchBox history={history} />} />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='ml-auto' inline>\r\n              <LinkContainer to='/cart'>\r\n                <Nav.Link className='text-uppercase'>\r\n                  <IconButton aria-label='cart'>\r\n                    <StyledBadge\r\n                      badgeContent={cartItems.length}\r\n                      color='secondary'\r\n                    >\r\n                      <ShoppingCartIcon />\r\n                    </StyledBadge>\r\n                  </IconButton>\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n\r\n              {userInfo ? (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2  mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    {userInfo ? (\r\n                      <Image\r\n                        className='rounded-circle border border-grey'\r\n                        src={userDetails.user && userDetails.user.avatar}\r\n                        alt={userDetails.user && userDetails.user.avatar}\r\n                        style={{ width: '2.5rem', height: '2.5rem' }}\r\n                        fluid\r\n                      />\r\n                    ) : (\r\n                      <Avatar className={classes.orange}>\r\n                        {userInfo.name.substring(0, 1)}\r\n                      </Avatar>\r\n                    )}\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '2' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                          transformOrigin:\r\n                            placement === 'bottom'\r\n                              ? 'center top'\r\n                              : 'center bottom',\r\n                        }}\r\n                      >\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              {userInfo && userInfo.isAdmin && (\r\n                                <MenuItem onClick={handleClose}>\r\n                                  <Link\r\n                                    to='/admin'\r\n                                    className={classes.link}\r\n                                    style={{\r\n                                      color: 'black',\r\n                                      fontSize: '0.8rem',\r\n                                      letterSpacing: '0.05rem',\r\n                                    }}\r\n                                  >\r\n                                    <Image\r\n                                      src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                      className='pr-1'\r\n                                    />\r\n                                    <strong className='text-capitalize'>\r\n                                      Quản lí\r\n                                    </strong>\r\n                                  </Link>\r\n                                </MenuItem>\r\n                              )}\r\n                              <MenuItem onClick={handleClose}>\r\n                                <Link\r\n                                  to='/profile'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                    className='pr-1'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Thông tin cá nhân\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem onClick={handleClose}>\r\n                                <Link\r\n                                  to='/myorders'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    src='https://img.icons8.com/fluent/24/000000/receipt-dollar.png'\r\n                                    className='pr-1'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đơn hàng của tôi\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem\r\n                                onClick={logoutHandler}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link\r\n                                  to='/'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/exit.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Xuất\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2 mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    <Image src='https://img.icons8.com/fluent/30/000000/circled-menu.png' />\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '2' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                          transformOrigin:\r\n                            placement === 'bottom'\r\n                              ? 'center top'\r\n                              : 'center bottom',\r\n                        }}\r\n                      >\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link to='/login' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/key.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Nhập\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link to='/register' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/new-contact.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Kí\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      <Navbar\r\n        expand='lg'\r\n        collapseOnSelect\r\n        className='p-0 pl-5 pr-5'\r\n        style={{ backgroundColor: '#edfead' }}\r\n        variant='tabs'\r\n      >\r\n        {/* <Row>\r\n          <Col md={12} className='pl-5'> */}\r\n        {/* <div className='d-flex justify-content-around'>\r\n            {category &&\r\n              category.map((cat) => (\r\n                <div className='container_link_color'>\r\n                  <Dropdown overlay={menu}>\r\n                    <Link\r\n                      to='/product'\r\n                      className='ant-dropdown-link text-decoration-none link_color'\r\n                      onClick={(e) => e.preventDefault()}\r\n                      style={{ fontSize: '1rem' }}\r\n                    >\r\n                      {cat.name}\r\n                      <DownOutlined\r\n                        className='pl-1'\r\n                        style={{ fontSize: '0.5rem' }}\r\n                      />\r\n                    </Link>\r\n                  </Dropdown>\r\n                </div>\r\n              ))}\r\n          </div> */}\r\n        <div class='collapse navbar-collapse pl-2 pr-2' id='main_nav'>\r\n          <ul className='navbar-nav'>\r\n            <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n              <Link className='nav-link' to='/'>\r\n                Trang chủ\r\n              </Link>\r\n            </li>\r\n\r\n            <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n              <Link className='nav-link' to='/'>\r\n                Giới thiệu\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className='nav-item dropdown has-megamenu'\r\n              style={{ fontSize: '0.85rem' }}\r\n            >\r\n              <Link\r\n                className='nav-link dropdown-toggle'\r\n                to='#'\r\n                data-bs-toggle='dropdown'\r\n              >\r\n                Danh mục\r\n              </Link>\r\n              <div\r\n                className='dropdown-menu megamenu border border-secondary shadow'\r\n                style={{ borderRadius: '2rem' }}\r\n                role='menu'\r\n              >\r\n                <div className='row g-6' style={{ width: '70rem' }}>\r\n                  {category &&\r\n                    category.map((cat) => (\r\n                      <div className='col-lg-2 col-8 text-center pt-2 pb-2'>\r\n                        <div className='col-megamenu container_link_color'>\r\n                          <LinkContainer\r\n                            to={`/product/${cat._id}/category`}\r\n                            className='link_color'\r\n                          >\r\n                            <h6\r\n                              className='title'\r\n                              style={{ fontSize: '0.85rem' }}\r\n                            >\r\n                              {cat.name}\r\n                            </h6>\r\n                          </LinkContainer>\r\n                          <ul className='list-unstyled'>\r\n                            <li>\r\n                              <a to='#'>Custom Menu</a>\r\n                            </li>\r\n                            <li>\r\n                              <a to='#'>Custom Menu</a>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            </li>\r\n\r\n            <li class='nav-item active' style={{ fontSize: '0.85rem' }}>\r\n              <Link className='nav-link' to='/'>\r\n                Liên hệ\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        {/* </Col>\r\n        </Row> */}\r\n      </Navbar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js",["395","396","397"],"import { Link } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Col, Container, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport { black } from 'colors'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nFooter.propTypes = {}\r\n\r\nfunction Footer(props) {\r\n  const classes = useStyles()\r\n  return (\r\n    <footer style={{ backgroundColor: '#edfead' }}>\r\n      <div className='pl-5 pb-4  pr-5'>\r\n        <Row>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Hỗ trợ</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức giao hàng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Hình thức thanh toán\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách đổi trả\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Chính sách bảo hành\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={2}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Thông tin</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Tuyển dụng\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Góp ý\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giải đáp thắc mắc\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={3}>\r\n            <ListGroup className='pt-5 pb-4'>\r\n              <h5>Về Natural Food</h5>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Giới thiệu\r\n                </Link>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <Link\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                  href='/'\r\n                >\r\n                  Liên hệ\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={5}>\r\n            <ListGroup>\r\n              <div className='d-flex justify-content-center'>\r\n                <Image\r\n                  src='/logo/logo_white.png'\r\n                  style={{ width: '9rem', height: '8rem', zIndex: '0' }}\r\n                />\r\n              </div>\r\n\r\n              <div className='d-flex justify-content-evenly'>\r\n                <Link\r\n                  href='https://mail.google.com/'\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/gmail-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='https://www.facebook.com/'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/facebook-new.png' />\r\n                </Link>\r\n                <Link\r\n                  className='border bg-secondary p-2 rounded-circle'\r\n                  href='https://www.twitter.com/'\r\n                >\r\n                  <Image src='https://img.icons8.com/fluent/24/000000/twitter.png' />\r\n                </Link>\r\n              </div>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Địa chỉ: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      22 Lý Chiêu Hoàng, Phường 10, Quận 6, TP HCM\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Email: </strong>\r\n                    <p className='mb-0 pl-1'>tuvan_online@naturalfood.com.vn</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Số điện thoại: </strong>\r\n                    <p className='mb-0 pl-1'>(028) 38 753 443</p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <strong>Hotline: </strong>\r\n                    <p className='mb-0 pl-1'>\r\n                      19002126 ( cước phí: 3000đ/phút )\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item\r\n                className='border-0 p-0 pt-2'\r\n                style={{ backgroundColor: '#edfead' }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: 'black',\r\n                    fontSize: '0.875rem',\r\n                    letterSpacing: '0.05rem',\r\n                  }}\r\n                  className={classes.link + 'pt-1'}\r\n                >\r\n                  <div className='d-flex justify-content-start'>\r\n                    <p className='mb-0'>\r\n                      Thời gian tư vấn: Từ 07h30 đến 12h15, 13h15 đến 21h30 các\r\n                      ngày trong tuần ( Trừ ngày Lễ, Tết)\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js",["398","399"],"import React, { useEffect } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listProducts } from '../actions/productActions'\r\nimport Banner from '../components/Banner'\r\nimport Footer from '../components/Footer'\r\nimport Header from '../components/Header'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Meta from '../components/Meta'\r\nimport Paginate from '../components/Paginate'\r\nimport Product from '../components/Product'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\n\r\nfunction HomeScreen({ match, history }) {\r\n  const keyword = match.params.keyword\r\n  const pageNumber = match.params.pageNumber || 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products, pages, page } = productList\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { user } = userDetails\r\n\r\n  useEffect(() => {\r\n    // dispatch(getUserDetails(userInfo._id))\r\n    dispatch(listProducts(keyword, pageNumber))\r\n  }, [dispatch, keyword, pageNumber, userInfo])\r\n\r\n  return (\r\n    <>\r\n      <Meta />\r\n      <Header />\r\n      {/* {!keyword && (\r\n        <ProductCarousel className='m-0' style={{ width: '100vh' }} />\r\n      )} */}\r\n      {!keyword && <Banner />}\r\n\r\n      <h3 className='ml-5 mt-4 mb-0'>Sản phẩm</h3>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <>\r\n          <Row className='ml-5 mr-5'>\r\n            {products?.map((\r\n              product // phai co ? de kiem tra product === null\r\n            ) => (\r\n              <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                <Product product={product} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <div className='d-flex justify-content-center'>\r\n            <Paginate\r\n              pages={pages}\r\n              page={page}\r\n              keyword={keyword ? keyword : ''}\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js",["400","401"],"F:\\Code\\shopPro\\frontend\\src\\store.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js",["402","403"],"import { useState } from 'react'\r\nimport { css } from '@emotion/core'\r\nimport ClipLoader from 'react-spinners/ClipLoader'\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n`\r\n\r\nfunction Loader() {\r\n  let [loading, setLoading] = useState(true)\r\n  let [color, setColor] = useState('orange')\r\n\r\n  return (\r\n    <div className='sweet-loading text-center'>\r\n      <ClipLoader color={color} loading={loading} css={override} size={60} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js",["404","405","406","407","408"],"import Buttonn from '@material-ui/core/Button'\r\nimport ButtonGroupp from '@material-ui/core/ButtonGroup'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport React, { useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Image,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Row,\r\n} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions.js'\r\nimport { getUserDetails } from '../actions/userActions.js'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(0),\r\n    },\r\n\r\n    '& .MuiInputBase-input': {\r\n      padding: theme.spacing(2),\r\n    },\r\n\r\n    '& .MuiFilledInput-input': {\r\n      padding: theme.spacing(2),\r\n    },\r\n\r\n    '& .MuiFilledInput-inputMarginDense': {\r\n      padding: theme.spacing(1),\r\n      textAlign: 'center',\r\n    },\r\n  },\r\n}))\r\n\r\nfunction format(n) {\r\n  return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'\r\n}\r\n\r\nexport const CartScreen = ({ match, location, history }) => {\r\n  const classes = useStyles()\r\n  const productId = match.params.id\r\n  const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  // console.log(cartItems.product)\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      dispatch(addToCart(productId, qty))\r\n    }\r\n  }, [dispatch, productId, qty, userInfo])\r\n\r\n  const removeFromCartHandler = (id) => {\r\n    dispatch(removeFromCart(id))\r\n  }\r\n\r\n  const checkoutHandler = () => {\r\n    history.push('/login?redirect=shipping')\r\n  }\r\n\r\n  // const test = (e) => {\r\n  //   const value = e.target.value\r\n  //   if (parseInt(value) === 0) {\r\n  //     alert('sai')\r\n  //   }\r\n  //   console.log(value)\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/* <Link className='btn btn-light my-3 rounded-pill' to='/'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link> */}\r\n\r\n      <Row className='m-4' style={{ height: '100vh' }}>\r\n        <Col md={8} className='p-0 pr-4 mt-3 text-uppercase'>\r\n          {cartItems.length === 0 ? (\r\n            // <Announcement variant='danger'>\r\n            <>\r\n              {/* <Row>\r\n                <Col className='mb-2'> */}\r\n              <div className='mb-1'>\r\n                <Link to='/'>\r\n                  <Button className='text-uppercase btn_color rounded-pill'>\r\n                    Mua hàng\r\n                  </Button>\r\n                </Link>\r\n              </div>\r\n              {/* </Col>\r\n                <Col md={12}> */}\r\n              <div>\r\n                <Image className=' p-5' src='/images/cart_empty.png' fluid />\r\n              </div>\r\n              {/* </Col>\r\n              </Row> */}\r\n            </>\r\n          ) : (\r\n            // </Announcement>\r\n            <ListGroup variant='flush'>\r\n              <h3>Giỏ hàng</h3>\r\n              {cartItems.map((item) => (\r\n                <ListGroup.Item\r\n                  key={item.product}\r\n                  className='border-0 mt-1 shadow card_color'\r\n                  rounded\r\n                >\r\n                  <h6>\r\n                    {item.brand} <i class='fas fa-angle-right'></i>\r\n                  </h6>\r\n                  <Row>\r\n                    <Col md={2}>\r\n                      <Link\r\n                        to={`/product/${item.product}`}\r\n                        className='text-decoration-none  product-card-green'\r\n                      >\r\n                        <Image src={item.image} alt={item.name} fluid />\r\n                      </Link>\r\n                    </Col>\r\n\r\n                    <Col\r\n                      md={4}\r\n                      className='text-lowercase text-capitalize d-flex align-items-center'\r\n                    >\r\n                      <Link\r\n                        to={`/product/${item.product}`}\r\n                        className='text-decoration-none'\r\n                      >\r\n                        <p className='mb-0' style={{ color: '#343a40' }}>\r\n                          {item.name}\r\n                        </p>\r\n                      </Link>\r\n                    </Col>\r\n\r\n                    <Col\r\n                      md={3}\r\n                      className='text-lowercase d-flex align-items-center'\r\n                    >\r\n                      <h4 className='text-lowercase'>{format(item.price)}</h4>\r\n                    </Col>\r\n\r\n                    <Col md={2} className='d-flex align-items-center'>\r\n                      <ButtonGroupp size='small' aria-label='small '>\r\n                        <Buttonn\r\n                          aria-label='reduce'\r\n                          size='small'\r\n                          color='secondary'\r\n                          onClick={() =>\r\n                            item.qty !== 0\r\n                              ? dispatch(\r\n                                  addToCart(\r\n                                    item.product,\r\n                                    Math.max(item.qty - 1, 1)\r\n                                  )\r\n                                )\r\n                              : () => removeFromCartHandler(item.product)\r\n                          }\r\n                          variant='contained'\r\n                        >\r\n                          <RemoveIcon fontSize='small' />\r\n                        </Buttonn>\r\n\r\n                        {/* <Buttonn variant='contained'>{item.qty}</Buttonn> */}\r\n                        <div>\r\n                          <TextField\r\n                            className={classes.root}\r\n                            id='filled-size-small'\r\n                            value={item.qty}\r\n                            variant='filled'\r\n                            size='small'\r\n                            onChange={(e) =>\r\n                              Number(e.target.value) !== 0\r\n                                ? dispatch(\r\n                                    addToCart(\r\n                                      item.product,\r\n                                      Number(e.target.value)\r\n                                    )\r\n                                  )\r\n                                : dispatch(\r\n                                    addToCart(\r\n                                      item.product,\r\n                                      Number((e.target.value = ''))\r\n                                    )\r\n                                  )\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <Buttonn\r\n                          aria-label='increase'\r\n                          size='small'\r\n                          onClick={() =>\r\n                            dispatch(addToCart(item.product, item.qty + 1))\r\n                          }\r\n                          variant='contained'\r\n                          color='secondary'\r\n                        >\r\n                          <AddIcon fontSize='small' />\r\n                        </Buttonn>\r\n                      </ButtonGroupp>\r\n                    </Col>\r\n\r\n                    <Col md={1} className='d-flex align-items-center'>\r\n                      <Button\r\n                        type='button'\r\n                        className='p-1 rounded'\r\n                        variant='light'\r\n                        onClick={() => removeFromCartHandler(item.product)}\r\n                      >\r\n                        <i\r\n                          style={{ fontSize: '1.2rem' }}\r\n                          class='far fa-trash-alt'\r\n                        ></i>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          )}\r\n        </Col>\r\n\r\n        <Col md={4} className='p-0'>\r\n          <Card\r\n            className='border-0 shadow mt-4 card_color p-3'\r\n            style={{ zIndex: '1' }}\r\n          >\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <h5 className='title-bill text-capitalize'>Số lượng: </h5>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <h5 className='title-bill-value text-lowercase pl-1'>\r\n                      {cartItems.reduce((acc, item) => acc + item.qty, 0)} sản\r\n                      phẩm\r\n                    </h5>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <h5 className='title-bill text-capitalize'>Giá: </h5>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <h5 className='title-bill-value text-lowercase pl-1'>\r\n                      {format(\r\n                        cartItems.reduce(\r\n                          (acc, item) => acc + item.qty * item.price,\r\n                          0\r\n                        )\r\n                      )}\r\n                    </h5>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n          <Card className='mt-3 border-0'>\r\n            <Button\r\n              type='button'\r\n              className='btn-block btn_color rounded-pill text-uppercase p-3 text-light'\r\n              disabled={cartItems === 0}\r\n              onClick={checkoutHandler}\r\n              size='sm'\r\n            >\r\n              <h5 className='text-light m-0'>Đặt hàng</h5>\r\n            </Button>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CartScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js",["409","410","411","412","413","414","415","416","417","418"],"import {\r\n  CLEAR_ERRORS,\r\n  LOAD_USER_FAIL,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_USER_FAIL,\r\n  REGISTER_USER_REQUEST,\r\n  REGISTER_USER_SUCCESS,\r\n  USER_DELETE_FAIL,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_RESET,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_RESET,\r\n  USER_LIST_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_RESET,\r\n  USER_UPDATE_SUCCESS,\r\n} from '../constants/userConstants'\r\n\r\nexport const userLoginReducer = (state = { products: [] }, action) => {\r\n  switch (action.type) {\r\n    case USER_LOGIN_REQUEST:\r\n      return { loading: true }\r\n    case USER_LOGIN_SUCCESS:\r\n      return { loading: false, userInfo: action.payload }\r\n    case USER_LOGIN_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case USER_LOGOUT:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userRegisterReducer = (state = { products: [] }, action) => {\r\n  switch (action.type) {\r\n    case USER_REGISTER_REQUEST:\r\n      return { loading: true }\r\n    case USER_REGISTER_SUCCESS:\r\n      return { loading: false, userInfo: action.payload }\r\n    case USER_REGISTER_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userDetailsReducer = (state = { user: {} }, action) => {\r\n  switch (action.type) {\r\n    case USER_DETAILS_REQUEST:\r\n      return { ...state, loading: true }\r\n    case USER_DETAILS_SUCCESS:\r\n      return { loading: false, user: action.payload }\r\n    case USER_DETAILS_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case USER_DETAILS_RESET:\r\n      return { user: {} }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userUpdateProfileReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_UPDATE_PROFILE_REQUEST:\r\n      return { loading: true }\r\n    case USER_UPDATE_PROFILE_SUCCESS:\r\n      return { loading: false, success: true, user: action.payload }\r\n    case USER_UPDATE_PROFILE_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userListReducer = (state = { users: [] }, action) => {\r\n  switch (action.type) {\r\n    case USER_LIST_REQUEST:\r\n      return { loading: true }\r\n    case USER_LIST_SUCCESS:\r\n      return { loading: false, users: action.payload }\r\n    case USER_LIST_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case USER_LIST_RESET:\r\n      return { users: [] }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userDeleteReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_DELETE_REQUEST:\r\n      return { loading: true }\r\n    case USER_DELETE_SUCCESS:\r\n      return { loading: false, success: true, s: action.payload }\r\n    case USER_DELETE_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const userUpdateReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_UPDATE_REQUEST:\r\n      return { loading: true }\r\n    case USER_UPDATE_SUCCESS:\r\n      return { loading: false, success: true, s: action.payload }\r\n    case USER_UPDATE_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case USER_UPDATE_RESET:\r\n      return { users: [] }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const authReducer = (state = { user: {} }, action) => {\r\n  switch (action.type) {\r\n    case USER_LOGIN_REQUEST:\r\n    case USER_REGISTER_REQUEST:\r\n    case USER_DETAILS_REQUEST:\r\n      return {\r\n        loading: true,\r\n        isAuthenticated: false,\r\n      }\r\n\r\n    case USER_LOGIN_SUCCESS:\r\n    case REGISTER_USER_SUCCESS:\r\n    case USER_DETAILS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        isAuthenticated: true,\r\n        user: action.payload,\r\n      }\r\n\r\n    case USER_LOGOUT:\r\n      return {\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n      }\r\n\r\n    case USER_DETAILS_FAIL:\r\n      return {\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        error: action.payload,\r\n      }\r\n\r\n    // case LOGOUT_FAIL:\r\n    //   return {\r\n    //     ...state,\r\n    //     error: action.payload,\r\n    //   }\r\n\r\n    case USER_LOGIN_FAIL:\r\n    case USER_REGISTER_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        error: action.payload,\r\n      }\r\n\r\n    case CLEAR_ERRORS:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js",["419","420","421","422","423","424","425"],"F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js",["426","427","428","429","430"],"import axios from 'axios'\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\nimport {\r\n  CLEAR_ERRORS,\r\n  USER_DELETE_FAIL,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_RESET,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_RESET,\r\n  USER_LIST_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_GOOGLE_FAIL,\r\n  USER_LOGIN_GOOGLE_REQUEST,\r\n  USER_LOGIN_GOOGLE_SUCCESS,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n} from '../constants/userConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LOGIN_REQUEST,\r\n    })\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.post(\r\n      '/api/users/login',\r\n      { email, password },\r\n      config\r\n    )\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const register = (name, email, avatar, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n    })\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.post(\r\n      '/api/users',\r\n      { name, email, avatar, password },\r\n      config\r\n    )\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    dispatch({\r\n      type: USER_REGISTER_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DETAILS_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get(`/api/users/${id}`, config)\r\n\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put('/api/users/profile', user, config)\r\n\r\n    console.log('data post update profile', data)\r\n\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_SUCCESS,\r\n      type: USER_LOGOUT,\r\n      type: USER_DETAILS_RESET,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('userInfo')\r\n  dispatch({ type: USER_LOGOUT })\r\n  dispatch({ type: USER_DETAILS_RESET })\r\n  dispatch({ type: ORDER_LIST_MY_RESET })\r\n  dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LIST_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get('/api/users', config)\r\n\r\n    dispatch({\r\n      type: USER_LIST_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DELETE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    await axios.delete(`/api/users/${id}`, config)\r\n\r\n    dispatch({\r\n      type: USER_DELETE_SUCCESS,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put(`/api/users/${user._id}`, user, config)\r\n\r\n    dispatch({ type: USER_UPDATE_SUCCESS })\r\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const clearErrors = () => async (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_ERRORS,\r\n  })\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js",["431","432","433","434","435","436","437"],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js",["438","439","440","441","442"],"F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js",["443","444","445"],"F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js",[],["446","447"],"F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js",["448"],"import FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport React, { useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Step from '../components/Step'\r\nimport Footer from '../components/Footer.js'\r\nimport Header from '../components/Header.js'\r\n\r\nexport const PaymentScreen = ({ history }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const { shippingAddress } = cart\r\n\r\n  if (!shippingAddress) {\r\n    history.push('/shipping')\r\n  }\r\n\r\n  const [paymentMethod, setPaymentMethod] = useState('Thanh toán bằng PayPal')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(savePaymentMethod(paymentMethod))\r\n    history.push('/placeorder')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row className='shadow p-2 card_color m-4'>\r\n        <Col md={6} className='d-flex align-items-center'>\r\n          <Image src='/background/payment.jpg' fluid />\r\n        </Col>\r\n        <Col md={6} className='d-flex align-items-center'>\r\n          <div>\r\n            <Step step1 step2 step3 />\r\n            <Form onSubmit={submitHandler} className=' p-4 mt-2 text-center'>\r\n              <Form.Group>\r\n                <Form.Label as='legend'>\r\n                  <h3>Phương thức thanh toán</h3>\r\n                </Form.Label>\r\n\r\n                <Col>\r\n                  <div>\r\n                    <RadioGroup\r\n                      value={paymentMethod}\r\n                      onChange={(e) => setPaymentMethod(e.target.value)}\r\n                    >\r\n                      <FormControlLabel\r\n                        value='Thanh toán bằng PayPal'\r\n                        control={<Radio />}\r\n                        label='Thanh toán bằng PayPal'\r\n                      />\r\n                      <FormControlLabel\r\n                        value='Thanh toán bằng tiền mặt'\r\n                        control={<Radio />}\r\n                        label='Thanh toán bằng tiền mặt'\r\n                      />\r\n                    </RadioGroup>\r\n                  </div>\r\n                </Col>\r\n              </Form.Group>\r\n\r\n              <Button\r\n                type='submit'\r\n                variant='danger'\r\n                className='btn-block btn_color rounded-pill'\r\n              >\r\n                Tiếp Tục\r\n              </Button>\r\n            </Form>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js",["449","450"],"F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js",["451","452","453"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  deliverOrder,\r\n  getOrderDetails,\r\n  payOrder,\r\n  updateOrderByMember,\r\n} from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nimport ImagePay from '../components/ImagePay'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport ProgressShipping from '../components/ProgressShipping'\r\nimport {\r\n  ORDER_DELIVER_RESET,\r\n  ORDER_PAY_RESET,\r\n  ORDER_UPDATE_BY_MEMBER_RESET,\r\n} from '../constants/orderConstants'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport Header from '../components/Header'\r\nimport Footer from '../components/Footer'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n  //Filter only numbers from the input\r\n  let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n  //Check if the input is of correct length\r\n  let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n  if (match) {\r\n    return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n  return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst OrderScreen = ({ match, history }) => {\r\n  const orderId = match.params.id\r\n\r\n  const [sdkReady, setSdkReady] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [orderStatus, setOrderStatus] = useState('Huỷ')\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  const orderPay = useSelector((state) => state.orderPay)\r\n  const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver)\r\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n  const orderUpdateByMember = useSelector((state) => state.orderUpdateByMember)\r\n  const {\r\n    loading: loadingByMember,\r\n    success: successByMember,\r\n  } = orderUpdateByMember\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  if (!loading) {\r\n    //   Calculate prices\r\n    const addDecimals = (num) => {\r\n      return Math.round(num * 100) / 100\r\n    }\r\n\r\n    order.itemsPrice = addDecimals(\r\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login')\r\n    }\r\n\r\n    const addPayPalScript = async () => {\r\n      const { data: clientId } = await axios.get('/api/config/paypal')\r\n      const script = document.createElement('script')\r\n      script.type = 'text/javascript'\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n      script.async = true\r\n      script.onload = () => {\r\n        setSdkReady(true)\r\n      }\r\n      document.body.appendChild(script)\r\n    }\r\n\r\n    if (!order || successPay || successDeliver || successByMember) {\r\n      dispatch({ type: ORDER_PAY_RESET })\r\n      dispatch({ type: ORDER_DELIVER_RESET })\r\n      dispatch({ type: ORDER_UPDATE_BY_MEMBER_RESET })\r\n      dispatch(getOrderDetails(orderId))\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPalScript()\r\n      } else {\r\n        setSdkReady(true)\r\n      }\r\n    }\r\n  }, [dispatch, orderId, successPay, successDeliver, successByMember, order])\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    console.log(paymentResult)\r\n    dispatch(payOrder(orderId, paymentResult))\r\n  }\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order))\r\n  }\r\n\r\n  const cancelOrder = () => {\r\n    dispatch(updateOrderByMember({ _id: orderId, orderStatus }))\r\n  }\r\n\r\n  // console.log('Trạng thái: ', order)\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message>{error}</Message>\r\n      ) : (\r\n        <>\r\n          <Row className='m-4'>\r\n            <Col md={8}>\r\n              <ListGroup\r\n                variant='flush'\r\n                className='shadow mt-3 card_color p-1 border-order'\r\n              >\r\n                <ListGroup.Item>\r\n                  <h3 className='text-center' style={{ color: '#7563c8' }}>\r\n                    Đơn hàng {order._id}\r\n                  </h3>\r\n                  <Row>\r\n                    <Col md={6} className='d-flex align-items-center'>\r\n                      <h5 className='text-uppercase mb-0'>\r\n                        Trạng thái đơn hàng\r\n                      </h5>\r\n                    </Col>\r\n                    <Col md={6} className='d-flex justify-content-end mb-3'>\r\n                      <div>\r\n                        {order.orderStatus === 'Chờ xác nhận' ? (\r\n                          <Button\r\n                            variant='outline-light'\r\n                            className='p-1 pl-3 pr-3 btn_color_cancel rounded-pill '\r\n                            onClick={cancelOrder}\r\n                          >\r\n                            <div className='d-flex justify-content-end'>\r\n                              Huỷ\r\n                              <ClearIcon\r\n                                fontSize='small'\r\n                                style={{ marginTop: '0.2rem' }}\r\n                              />\r\n                            </div>\r\n                          </Button>\r\n                        ) : (\r\n                          <Button\r\n                            disabled\r\n                            className='p-1 pl-3 pr-3 rounded-pill'\r\n                          >\r\n                            <div className='d-flex justify-content-end'>\r\n                              Huỷ\r\n                              <ClearIcon\r\n                                fontSize='small'\r\n                                style={{ marginTop: '0.2rem' }}\r\n                              />\r\n                            </div>\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  {order.orderStatus !== 'Huỷ' ? (\r\n                    <ProgressShipping />\r\n                  ) : (\r\n                    <Announcement variant='warning'>\r\n                      Đơn hàng đã được huỷ\r\n                    </Announcement>\r\n                  )}\r\n\r\n                  <h5 className='text-uppercase'>Thông tin giao hàng</h5>\r\n                  <div className='pl-4 pr-4 border-1 border-gray rounded pt-3 mb-2'>\r\n                    <Row>\r\n                      <Col md={6}>\r\n                        <p>\r\n                          <strong>Tên khách hàng: </strong> {order.user.name}\r\n                        </p>\r\n                      </Col>\r\n                      <Col md={6}>\r\n                        <p>\r\n                          <strong>Địa chỉ email: </strong>\r\n                          <a\r\n                            className='link-product'\r\n                            href={`mailto: ${order.user.email}`}\r\n                          >\r\n                            {order.user.email}\r\n                          </a>\r\n                        </p>\r\n                      </Col>\r\n                    </Row>\r\n                    <p>\r\n                      <strong>Số điện thoại: </strong>\r\n                      {formatPhoneNumber(order.shippingAddress.numberPhone)}\r\n                    </p>\r\n                    <p className='mb-3'>\r\n                      <strong>Địa chỉ: </strong>\r\n                      {order.shippingAddress.diaChi}\r\n                      {' - '}\r\n                      {order.shippingAddress.xa}\r\n                      {' - '}\r\n                      {order.shippingAddress.huyen}\r\n                      {' - '}\r\n                      {order.shippingAddress.thanhPho}.\r\n                    </p>\r\n                  </div>\r\n                  {\r\n                    order.isDelivered && (\r\n                      <Announcement variant='success'>\r\n                        Đã giao hàng vào lúc{' '}\r\n                        {format(\r\n                          new utcToZonedTime(\r\n                            order.deliveredAt,\r\n                            'Asia/Ho_Chi_Minh'\r\n                          ),\r\n                          'HH:mm:ss - dd/MM/yyyy',\r\n                          { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                        )}\r\n                      </Announcement>\r\n                    )\r\n                    // : (\r\n                    //   <Announcement variant='danger'>No Delivered</Announcement>\r\n                    // )}\r\n                  }\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                  <h5 className='text-uppercase'>Phương thức thanh toán</h5>\r\n                  <p className='pl-4'>\r\n                    <strong>Phương thức: </strong>\r\n                    {order.paymentMethod}\r\n                  </p>\r\n\r\n                  {\r\n                    order.isPaid && (\r\n                      <Announcement variant='success' className='rounded-pill'>\r\n                        Đã thanh toán vào lúc{' '}\r\n                        {format(\r\n                          new utcToZonedTime(order.paidAt, 'Asia/Ho_Chi_Minh'),\r\n                          'HH:mm:ss - dd/MM/yyyy',\r\n                          { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                        )}\r\n                      </Announcement>\r\n                    )\r\n                    // : (\r\n                    //   <Announcement variant='danger'>No Paid</Announcement>\r\n                    // )\r\n                  }\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                  <h5 className='text-uppercase'>Giỏ hàng</h5>\r\n                  {order.orderItems.length === 0 ? (\r\n                    <Message>Giỏ hàng rỗng</Message>\r\n                  ) : (\r\n                    <ListGroup variant='flush'>\r\n                      {order.orderItems.map((item, index) => (\r\n                        <ListGroup.Item key={index}>\r\n                          <Row>\r\n                            <Col md={2}>\r\n                              <Link\r\n                                to={`/product/${item.product}`}\r\n                                className='link-product'\r\n                              >\r\n                                <Image\r\n                                  src={item.image}\r\n                                  alt={item.name}\r\n                                  fluid\r\n                                  rounded\r\n                                  className='border border-gray'\r\n                                />\r\n                              </Link>\r\n                            </Col>\r\n\r\n                            <Col className='d-flex align-items-center' md={4}>\r\n                              <Link\r\n                                to={`/product/${item.product}`}\r\n                                className='text-decoration-none d-flex align-items-center'\r\n                              >\r\n                                <p className='mb-0'>{item.name}</p>\r\n                              </Link>\r\n                            </Col>\r\n\r\n                            <Col\r\n                              md={6}\r\n                              className='d-flex align-items-center justify-content-center'\r\n                            >\r\n                              <h5 className='text-lowercase'>\r\n                                {item.qty} x {formatMoney(item.price, 'đ')}{' '}\r\n                                {' = '}\r\n                                {formatMoney(item.qty * item.price, 'đ')}\r\n                              </h5>\r\n                            </Col>\r\n                          </Row>\r\n                        </ListGroup.Item>\r\n                      ))}\r\n                    </ListGroup>\r\n                  )}\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Col>\r\n            <Col md={4} style={{ zIndex: '1' }}>\r\n              <Card className='border-0'>\r\n                <ListGroup\r\n                  variant='flush'\r\n                  className='shadow mt-3 card_color p-1 border-order'\r\n                >\r\n                  <ListGroup.Item>\r\n                    <h4 className='text-uppercase text-center'>\r\n                      Chi tiết hoá đơn\r\n                    </h4>\r\n                    <Row className='mt-3'>\r\n                      <Col md={8}>Tổng tiền sản phẩm</Col>\r\n                      <Col md={4}>\r\n                        <p className='mb-0'>\r\n                          {formatMoney(order.itemsPrice, 'đ')}\r\n                        </p>\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n                  <ListGroup.Item>\r\n                    <Row>\r\n                      <Col md={8}>Phí vận chuyển</Col>\r\n                      <Col md={4}>\r\n                        <p className='mb-0'>\r\n                          {formatMoney(order.shippingPrice, 'đ')}\r\n                        </p>\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n\r\n                  <ListGroup.Item>\r\n                    <Row>\r\n                      <Col md={8} className='text-danger'>\r\n                        <h5 className='mb-0'>Tổng cộng</h5>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <h5 className='mb-0 text-danger'>\r\n                          {formatMoney(order.totalPrice, 'đ')}\r\n                        </h5>\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n\r\n                  {!order.isPaid &&\r\n                    order.orderStatus !== 'Huỷ' &&\r\n                    order.paymentMethod !== 'Thanh toán bằng tiền mặt' && (\r\n                      <ListGroup.Item className='border-0'>\r\n                        {loadingPay && <Loader />}\r\n                        {!sdkReady ? (\r\n                          <Loader />\r\n                        ) : (\r\n                          <PayPalButton\r\n                            amount={order.totalPrice}\r\n                            onSuccess={successPaymentHandler}\r\n                            className='rounded-pill'\r\n                          />\r\n                        )}\r\n                      </ListGroup.Item>\r\n                    )}\r\n\r\n                  {loadingDeliver && <Loader />}\r\n                  {userInfo &&\r\n                    !order.isDelivered &&\r\n                    order.orderStatus === 'Đã giao hàng' && (\r\n                      <ListGroup.Item className='border-0'>\r\n                        <Button\r\n                          type='button'\r\n                          className='btn_color btn-block rounded-pill'\r\n                          onClick={deliverHandler}\r\n                        >\r\n                          Đã giao hàng\r\n                        </Button>\r\n                      </ListGroup.Item>\r\n                    )}\r\n\r\n                  <ListGroup.Item className='border-0 p-0'>\r\n                    <ImagePay />\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      )}\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js",["454"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport { deleteUser, listUsers } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'Name' },\r\n  { id: 'email', numeric: true, disablePadding: false, label: 'EMAIL' },\r\n  { id: 'isAdmin', numeric: true, disablePadding: false, label: 'ADMIN' },\r\n  { id: 'action', numeric: true, disablePadding: false, label: 'ACTION' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction UserListScreen({ history }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((user) => user._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userList = useSelector((state) => state.userList)\r\n  const { loading, error, users } = userList\r\n\r\n  const emptyRows =\r\n    users !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage)\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDelete = useSelector((state) => state.userDelete)\r\n  const { success: successDelete } = userDelete\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteUser(id))\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = users.find((user) => user._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>Users List</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers())\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch, history, successDelete, userInfo])\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <div className={classes.root}>\r\n            <Paper\r\n              className={classes.paper + 'shadow'}\r\n              style={{\r\n                borderRadius: '1rem',\r\n                border: '0.25px solid #ddd',\r\n              }}\r\n            >\r\n              <TableContainer\r\n                className='text-center p-5'\r\n                style={{\r\n                  borderRadius: '1rem',\r\n                }}\r\n              >\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby='tableTitle'\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label='enhanced table'\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={users.length}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(users, getComparator(order, orderBy))\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((user, index) => {\r\n                        const isItemSelected = isSelected(user._id)\r\n                        const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            onClick={(event) => handleClick(event, user._id)}\r\n                            role='checkbox'\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={user._id}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding='checkbox'>\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              component='th'\r\n                              id={labelId}\r\n                              scope='row'\r\n                              padding='none'\r\n                              align='center'\r\n                            >\r\n                              {user._id}\r\n                            </TableCell>\r\n                            <TableCell align='left' className='text-center'>\r\n                              {user.name}\r\n                            </TableCell>\r\n                            <TableCell align='center'>{user.email}</TableCell>\r\n                            <TableCell align='center'>\r\n                              {' '}\r\n                              {user.isAdmin ? (\r\n                                <i\r\n                                  className='fas fa-check'\r\n                                  style={{ color: 'green' }}\r\n                                ></i>\r\n                              ) : (\r\n                                <i\r\n                                  className='fas fa-times'\r\n                                  style={{ color: 'red' }}\r\n                                ></i>\r\n                              )}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              <LinkContainer\r\n                                to={`/admin/user/${user._id}/edit`}\r\n                              >\r\n                                <Button\r\n                                  variant='info'\r\n                                  className='btn-sm rounded-pill'\r\n                                >\r\n                                  <i className='far fa-edit'></i>\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                    {emptyRows > 0 && (\r\n                      <TableRow\r\n                        style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                      >\r\n                        <TableCell colSpan={6} />\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component='div'\r\n                count={users.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n            <FormControlLabel\r\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n              label='Dense padding'\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserListScreen\r\n",["455","456"],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js",["457","458"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport {\r\n  USER_UPDATE_RESET\r\n} from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n      history.push('/admin/userlist')\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link to='/admin/userlist' className='btn btn-light my-3 text-uppercase'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer sm>\r\n        <h2>Edit User</h2>\r\n        {loadingUpdate ? (\r\n          <Loader /> \r\n        ) && <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess> : errorUpdate ? (\r\n          <Message>{errorUpdate}</Message>\r\n        ) : loading ? (\r\n          <Loader />\r\n        ) : (\r\n          <Form onSubmit={submitHandler} md={10}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter email'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='idAdmin'>\r\n              <Form.Check\r\n                type='checkbox'\r\n                label='Is Admin'\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n            <Button type='submit' variant='warning'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js",["459","460","461","462","463","464","465","466","467","468","469"],"import { Link } from '@material-ui/core'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport { default as React, useEffect } from 'react'\r\nimport { Button, Col, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  getCategoryDetails,\r\n  listCategoriesAdm,\r\n} from '../actions/categoryAction'\r\nimport {\r\n  createProduct,\r\n  deleteProduct,\r\n  listProducts,\r\n} from '../actions/productActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: false, disablePadding: false, label: 'NAME' },\r\n  { id: 'image', numeric: false, disablePadding: false, label: 'IMAGE' },\r\n  { id: 'price', numeric: true, disablePadding: false, label: 'PRICE' },\r\n  { id: 'category', numeric: false, disablePadding: false, label: 'CATEGORY' },\r\n  { id: 'brand', numeric: false, disablePadding: false, label: 'BRAND' },\r\n  { id: 'quantity', numeric: true, disablePadding: false, label: 'QUANTITY' },\r\n  { id: 'action', numeric: false, disablePadding: false, label: 'ACTION' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = products.map((product) => product._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n  const pageNumber = match.params.pageNumber || 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const {\r\n    loading: loadingCat,\r\n    error: errorCat,\r\n    category: categoryCat,\r\n  } = categoriesList\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products } = productList\r\n\r\n  const emptyRows =\r\n    products !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, products.length - page * rowsPerPage)\r\n\r\n  const productDelete = useSelector((state) => state.productDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = productDelete\r\n\r\n  const categoryDetails = useSelector((state) => state.categoryDetails)\r\n  const {\r\n    loading: loadingCatDe,\r\n    error: errorCatDe,\r\n    category: categoryCatDe,\r\n  } = categoryDetails\r\n\r\n  const productCreate = useSelector((state) => state.productCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    product: createdProduct,\r\n  } = productCreate\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const k = '6067d4b59f684c3fe0bd9def'\r\n\r\n  useEffect(() => {\r\n    if (!userInfo.isAdmin) {\r\n      history.push('/login')\r\n    }\r\n\r\n    if (userInfo) {\r\n      dispatch(listCategoriesAdm())\r\n      dispatch(getCategoryDetails(categoryCat.map((e) => e._id)))\r\n    }\r\n\r\n    if (successCreate) {\r\n      history.push(`/admin/product/${createdProduct._id}/edit`)\r\n    } else {\r\n      dispatch(listProducts('', pageNumber))\r\n    }\r\n  }, [dispatch, history, userInfo, successDelete, successCreate, createProduct])\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteProduct(id))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          ></Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row className='align-items-center'>\r\n        <Col>\r\n          <h2 className='text-uppercase'>Products</h2>\r\n        </Col>\r\n        <Col className='text-right'>\r\n          <LinkContainer to='/admin/product/create'>\r\n            <Button\r\n              variant='outline-dark'\r\n              className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n            >\r\n              <i className='fas fa-plus'></i> Thêm sản phẩm\r\n            </Button>\r\n          </LinkContainer>\r\n        </Col>\r\n      </Row>\r\n      {loadingDelete && <Loader />}\r\n      {errorDelete && <Message>{errorDelete}</Message>}\r\n\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <div className={classes.root}>\r\n            <Paper\r\n              className={classes.paper + 'shadow'}\r\n              style={{\r\n                borderRadius: '1rem',\r\n                border: '0.25px solid #ddd',\r\n              }}\r\n            >\r\n              <TableContainer\r\n                className='text-center p-2'\r\n                style={{\r\n                  borderRadius: '1rem',\r\n                }}\r\n              >\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby='tableTitle'\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label='enhanced table'\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={products.length}\r\n                    colSpan={1}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(products, getComparator(order, orderBy))\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((product, index) => {\r\n                        const isItemSelected = isSelected(product._id)\r\n                        const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            onClick={(event) => handleClick(event, product._id)}\r\n                            role='checkbox'\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={product._id}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding='checkbox'>\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              component='th'\r\n                              id={labelId}\r\n                              scope='row'\r\n                              padding='none'\r\n                              align='center'\r\n                            >\r\n                              {product._id}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              align='left'\r\n                              component='th'\r\n                              className='text-center'\r\n                            >\r\n                              {product.name}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              <Image\r\n                                src={product.image}\r\n                                fluid\r\n                                className='rounded-circle p-1'\r\n                              />\r\n                            </TableCell>\r\n\r\n                            <TableCell align='center'>\r\n                              ${product.price}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {categoryCat &&\r\n                                categoryCat.map(\r\n                                  (cat, index) =>\r\n                                    cat._id === product.category && cat.name\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {product.brand}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              align='center'\r\n                              style={{ padding: '1px' }}\r\n                            >\r\n                              {product.countInStock}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              <LinkContainer\r\n                                to={`/admin/product/${product._id}/edit`}\r\n                              >\r\n                                <Button\r\n                                  variant='outline-light'\r\n                                  className='btn-block rounded-pill btn_color_details'\r\n                                >\r\n                                  <i className='far fa-edit'></i>\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                    {emptyRows > 0 && (\r\n                      <TableRow\r\n                        style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                      >\r\n                        <TableCell colSpan={6} />\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component='div'\r\n                count={products.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n            <FormControlLabel\r\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n              label='Dense padding'\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js",["470","471"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { listCategoriesAdm } from '../actions/categoryAction'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const {\r\n    loading: loadingCat,\r\n    error: errorCat,\r\n    category: categoryCat,\r\n  } = categoriesList\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      // history.push('/admin/productlist')\r\n    } else {\r\n      if (!product.name || product._id !== productId) {\r\n        if (userInfo) {\r\n          dispatch(listProductDetails(productId))\r\n          dispatch(listCategoriesAdm())\r\n        }\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInStock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, userInfo, history, productId, product, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Link\r\n          to='/admin/productlist'\r\n          className='btn btn-light my-3 text-uppercase rounded-pill'\r\n        >\r\n          <i class='fas fa-arrow-left pr-2'></i>\r\n          Quay về\r\n        </Link>\r\n        {loadingUpdate && (\r\n            <MessageSuccess variant='Đã cập nhật thành công'></MessageSuccess>\r\n          ) && <Loader />}\r\n        {errorUpdate && <Message>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message>{error}</Message>\r\n        ) : (\r\n          <>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow card_color'\r\n              fluid\r\n            >\r\n              <h2 className='text-center mb-4'>Edit Product</h2>\r\n\r\n              <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Name\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='name'\r\n                  placeholder='Enter name'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Image\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter image url'\r\n                  value={image}\r\n                  onChange={(e) => setImage(e.target.value)}\r\n                ></Form.Control>\r\n                <Form.File\r\n                  className='border border-grey'\r\n                  id='image-file'\r\n                  label='Choose File'\r\n                  custom\r\n                  onChange={uploadFileHandler}\r\n                ></Form.File>\r\n                {uploading && <Loader />}\r\n              </Form.Group>\r\n\r\n              <Row>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='brand' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Brand\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='text'\r\n                      placeholder='Enter brand'\r\n                      value={brand}\r\n                      onChange={(e) => setBrand(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='countInStock' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Count In Stock\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill text-center'\r\n                      type='number'\r\n                      placeholder='Enter countInStock'\r\n                      value={countInStock}\r\n                      onChange={(e) => setCountInStock(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='category' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Category\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill '\r\n                      type='text'\r\n                      as='select'\r\n                      placeholder='Enter category'\r\n                      value={category}\r\n                      onChange={(e) => setCategory(e.target.value)}\r\n                    >\r\n                      <option></option>\r\n                      {categoryCat &&\r\n                        categoryCat.map((cat, index) => (\r\n                          <option\r\n                            style={{ color: 'black' }}\r\n                            key={index}\r\n                            value={cat._id}\r\n                          >\r\n                            {cat.name}\r\n                          </option>\r\n                        ))}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='price' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Price\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill text-center'\r\n                      type='number'\r\n                      placeholder='Enter price'\r\n                      value={price}\r\n                      onChange={(e) => setPrice(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Form.Group controlId='description' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Description\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='text'\r\n                  rows={3}\r\n                  as='textarea'\r\n                  placeholder='Enter description'\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <div className='pl-3 pr-3 text-center'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-success'\r\n                  className='rounded-pill'\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                    width: '20rem',\r\n                  }}\r\n                >\r\n                  Update\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Step.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js",["472","473","474","475","476"],"F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\MyOrdersScreen.js",["477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495"],"F:\\Code\\shopPro\\frontend\\src\\configAuth.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderEditScreen.js",["496","497","498"],"import Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getOrderDetails, updateOrder } from '../actions/orderActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { ORDER_UPDATE_RESET } from '../constants/orderConstants'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n  //Filter only numbers from the input\r\n  let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n  //Check if the input is of correct length\r\n  let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n  if (match) {\r\n    return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n  return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 560,\r\n  },\r\n}))\r\n\r\nconst OrderEditScreen = ({ match, history }) => {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const orderId = match.params.id\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading } = orderDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const orderUpdate = useSelector((state) => state.orderUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = orderUpdate\r\n\r\n  const orderPay = useSelector((state) => state.orderPay)\r\n  const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n  const stateOrder = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng', 'Huỷ']\r\n  const [orderStatus, setOrderStatus] = useState('')\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateOrder({ _id: orderId, orderStatus }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: ORDER_UPDATE_RESET })\r\n    } else {\r\n      dispatch(getOrderDetails(orderId))\r\n    }\r\n  }, [dispatch, orderId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      {loadingUpdate && (\r\n        <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n      )}\r\n      {errorUpdate && <Message>{errorUpdate}</Message>}\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Form onSubmit={submitHandler}>\r\n          <ListGroup\r\n            variant='flush'\r\n            className='shadow p-3 mt-3 card_color'\r\n            style={{ border: '0.4rem dashed #ffc1b6', borderRadius: '1rem' }}\r\n          >\r\n            <div className='text-center'>\r\n              <h3 className='pl-2'>CHI TIẾT ĐƠN HÀNG</h3>\r\n            </div>\r\n            <ListGroup.Item className='border-0'>\r\n              <Row>\r\n                <Col md={6}>\r\n                  <p className='text-start'>\r\n                    Mã đơn hàng: <strong>{order._id}</strong>\r\n                  </p>\r\n                  <p className='text-start'>\r\n                    Tổng tiền: <strong>{order.totalPrice}đ</strong>\r\n                  </p>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <FormControl className={classes.formControl}>\r\n                    <InputLabel\r\n                      id='demo-controlled-open-select-label'\r\n                      style={{ fontSize: '1.2rem' }}\r\n                    >\r\n                      Trạng thái đơn hàng\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId='demo-controlled-open-select-label'\r\n                      id='demo-controlled-open-select'\r\n                      open={open}\r\n                      onClose={handleClose}\r\n                      onOpen={handleOpen}\r\n                      value={\r\n                        order.orderStatus ? order.orderStatus : orderStatus\r\n                      }\r\n                      onChange={(e) => setOrderStatus(e.target.value)}\r\n                      className='text-danger text-center text-uppercase'\r\n                    >\r\n                      {stateOrder.map((t) => (\r\n                        <MenuItem className='justify-content-center' value={t}>\r\n                          {t}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Col>\r\n              </Row>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className='border-0'>\r\n              <Row>\r\n                <Col md={6} className='border-0'>\r\n                  <Card\r\n                    className='rounded card_color'\r\n                    style={{ height: '11rem', backgroundColor: '#F8F8F8' }}\r\n                  >\r\n                    <CardContent>\r\n                      <h5 className='border-bottom border-info text-info pb-1'>\r\n                        Thông tin người nhận\r\n                      </h5>\r\n                      <div>\r\n                        <Row className='m-0'>\r\n                          <Col md={4}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Địa chỉ:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={8}>\r\n                            <strong>{order.user.name}</strong>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={4}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Tên khách hàng:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={8}>\r\n                            <p className='mb-1'>\r\n                              {order.shippingAddress.diaChi}\r\n                              {' - '}\r\n                              {order.shippingAddress.xa}\r\n                              {' - '}\r\n                              {order.shippingAddress.huyen}\r\n                              {' - '}\r\n                              {order.shippingAddress.thanhPho}.\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={4}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Số điện thoại:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={8}>\r\n                            <p className='mb-1'>\r\n                              {formatPhoneNumber(\r\n                                order.shippingAddress.numberPhone\r\n                              )}\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={4}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Email:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={8}>\r\n                            <p className='mb-1'>{order.user.email}</p>\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Card\r\n                    className='rounded card_color'\r\n                    style={{ height: '11rem', backgroundColor: '#F8F8F8' }}\r\n                  >\r\n                    <CardContent>\r\n                      <h5 className='border-bottom border-info text-info pb-1'>\r\n                        Phương thức thanh toán\r\n                      </h5>\r\n                      <div>\r\n                        <Row className='m-0'>\r\n                          <Col md={5}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Phương thức:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={7} className='pt-1'>\r\n                            <strong\r\n                              className='mb-0 text-capitalize'\r\n                              style={{ letterSpacing: '0.1rem' }}\r\n                            >\r\n                              {order.paymentMethod}\r\n                            </strong>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={5}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Thời gian thanh toán:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={7}>\r\n                            <p className='mb-1'>\r\n                              {order.paymentMethod ===\r\n                                'Thanh toán bằng tiền mặt' &&\r\n                              order.isDelivered ? (\r\n                                <strong className='mb-0'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      order.deliveredAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </strong>\r\n                              ) : order.paymentMethod ===\r\n                                'Thanh toán bằng PayPal' ? (\r\n                                <strong className='mb-0'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      order.paidAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </strong>\r\n                              ) : (\r\n                                <div className='d-flex'>\r\n                                  <strong className='text-danger mb-0'>\r\n                                    Chưa thanh toán\r\n                                  </strong>\r\n                                </div>\r\n                              )}\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className='m-0'>\r\n                          <Col md={5}>\r\n                            <p style={{ color: 'grey' }} className='mb-1'>\r\n                              Thời gian nhận hàng:\r\n                            </p>\r\n                          </Col>\r\n                          <Col md={7}>\r\n                            {order.isDelivered ? (\r\n                              <strong className='mb-0'>\r\n                                {format(\r\n                                  new utcToZonedTime(\r\n                                    order.deliveredAt,\r\n                                    'Asia/Ho_Chi_Minh'\r\n                                  ),\r\n                                  'HH:mm:ss - dd/MM/yyyy',\r\n                                  { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                )}\r\n                              </strong>\r\n                            ) : (\r\n                              <div className='d-flex'>\r\n                                {/* <Image\r\n                                  src='https://img.icons8.com/fluent/24/000000/only-cash.png'\r\n                                  className='pr-1'\r\n                                /> */}\r\n                                <strong className='text-danger mb-0'>\r\n                                  Chưa nhận hàng\r\n                                </strong>\r\n                              </div>\r\n                            )}\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item className='border-0'>\r\n              <h5\r\n                className='pb-1'\r\n                style={{ borderBottom: '0.04rem solid #ddd' }}\r\n              >\r\n                Giỏ hàng\r\n              </h5>\r\n\r\n              <div className='rounded mt-3'>\r\n                {order.orderItems.map((item, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className='p-3 card_color shadow border mb-1'\r\n                    style={{ backgroundColor: '#F8F8F8' }}\r\n                  >\r\n                    <Row>\r\n                      <Col md={1} className='img_container'>\r\n                        <Image\r\n                          className='img_color'\r\n                          src={item.image}\r\n                          alt={item.name}\r\n                          fluid\r\n                          rounded\r\n                        />\r\n                      </Col>\r\n\r\n                      <Col md={7} className='text-center'>\r\n                        <Link\r\n                          to={`/product/${item.product}`}\r\n                          className='link-product fst-italic'\r\n                        >\r\n                          <p style={{ fontSize: '1.1rem' }} className='pt-3'>\r\n                            {item.name}\r\n                          </p>\r\n                        </Link>\r\n                      </Col>\r\n\r\n                      <Col md={4} className='text-center'>\r\n                        <p\r\n                          style={{ fontSize: '1.1rem' }}\r\n                          className='pt-3 fst-italic'\r\n                        >\r\n                          {item.qty} x {formatMoney(item.price, 'đ')}\r\n                          {' = '}\r\n                          {formatMoney(item.qty * item.price, 'đ')}\r\n                        </p>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item className='border-0'>\r\n              <div\r\n                className='d-flex justify-content-end '\r\n                style={{ borderTop: '0.04rem solid #ddd' }}\r\n              >\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-light rounded-pill mt-4 btn_color_pink'\r\n                  size='normal'\r\n                  style={{\r\n                    width: '14rem',\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                  }}\r\n                >\r\n                  DUYỆT\r\n                </Button>\r\n              </div>\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Form>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ProgressShipping.js",["499","500","501","502","503","504","505","506","507","508","509","510","511","512"],"import Step from '@material-ui/core/Step'\r\nimport StepConnector from '@material-ui/core/StepConnector'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Check from '@material-ui/icons/Check'\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport VideoLabelIcon from '@material-ui/icons/VideoLabel'\r\nimport CachedIcon from '@material-ui/icons/Cached'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping'\r\nimport EventAvailableIcon from '@material-ui/icons/EventAvailable'\r\n\r\nconst useQontoStepIconStyles = makeStyles({\r\n  root: {\r\n    color: '#eaeaf0',\r\n    display: 'flex',\r\n    height: 22,\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    color: '#784af4',\r\n  },\r\n  circle: {\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: '50%',\r\n    backgroundColor: 'currentColor',\r\n  },\r\n  completed: {\r\n    color: '#784af4',\r\n    zIndex: 1,\r\n    fontSize: 18,\r\n  },\r\n})\r\n\r\nfunction QontoStepIcon(props) {\r\n  const classes = useQontoStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n      })}\r\n    >\r\n      {completed ? (\r\n        <Check className={classes.completed} />\r\n      ) : (\r\n        <div className={classes.circle} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n}\r\n\r\nconst ColorlibConnector = withStyles({\r\n  alternativeLabel: {\r\n    top: 22,\r\n  },\r\n  active: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  completed: {\r\n    '& $line': {\r\n      backgroundColor: '#2e5a1c;',\r\n    },\r\n  },\r\n  line: {\r\n    height: 3,\r\n    border: 0,\r\n    backgroundColor: '#eaeaf0',\r\n    borderRadius: 1,\r\n  },\r\n})(StepConnector)\r\n\r\nconst useColorlibStepIconStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: '#ccc',\r\n    zIndex: 1,\r\n    color: '#fff',\r\n    width: 50,\r\n    height: 50,\r\n    display: 'flex',\r\n    borderRadius: '50%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  active: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n  completed: {\r\n    backgroundColor: '#4e9525;',\r\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n  },\r\n})\r\n\r\nfunction ColorlibStepIcon(props) {\r\n  const classes = useColorlibStepIconStyles()\r\n  const { active, completed } = props\r\n\r\n  const icons = {\r\n    1: <CachedIcon style={{ fontSize: '1.8rem' }} />,\r\n    2: <LocalShippingIcon style={{ fontSize: '1.8rem' }} />,\r\n    3: <EventAvailableIcon style={{ fontSize: '1.8rem' }} />,\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n        [classes.completed]: completed,\r\n      })}\r\n    >\r\n      {icons[String(props.icon)]}\r\n    </div>\r\n  )\r\n}\r\n\r\nColorlibStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n  /**\r\n   * The label displayed in the step icon.\r\n   */\r\n  icon: PropTypes.node,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst ProgressShipping = () => {\r\n  const classes = useStyles()\r\n  const [activeStep, setActiveStep] = useState(0)\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  // const steps = getSteps()\r\n\r\n  const steps = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng']\r\n\r\n  const stepHandler = () => {\r\n    setActiveStep(1)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper\r\n        alternativeLabel\r\n        activeStep={steps.indexOf(order.orderStatus)}\r\n        connector={<ColorlibConnector />}\r\n      >\r\n        {steps.map((label) => (\r\n          <Step key={label} onChange={stepHandler}>\r\n            {order.orderStatus === label ? (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            ) : (\r\n              <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                <p style={{ fontSize: '1rem' }}>{label}</p>\r\n              </StepLabel>\r\n            )}\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressShipping\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\ImagePay.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\categoriesReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\categoriesConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CategoriesListScreen.js",["513","514"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  createCategory,\r\n  deleteCategory,\r\n  listCategoriesAdm,\r\n} from '../actions/categoryAction'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst CategoriesListScreen = ({ history }) => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = category.map((cat) => cat._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n  const { loading, error, category } = categoriesListAdm\r\n\r\n  const categoryDelete = useSelector((state) => state.categoryDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = categoryDelete\r\n\r\n  const categoryCreate = useSelector((state) => state.categoryCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    category: createdProduct,\r\n  } = categoryCreate\r\n\r\n  const emptyRows =\r\n    category !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, category.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteCategory(id))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = category.find((cat) => cat._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH DANH MỤC</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listCategoriesAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createCategory(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {loadingDelete && (\r\n          <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n        ) && <Loader />}\r\n      {errorDelete && <Message>{errorDelete}</Message>}\r\n      {loadingCreate && (\r\n        <MessageSuccess\r\n          variant={'Đã thêm ' + name + ' thành công'}\r\n        ></MessageSuccess>\r\n      )}\r\n      {errorCreate && <Message>{errorCreate}</Message>}\r\n      {loading ? (\r\n        <SkeletonEffect />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <div>\r\n            <Dialog\r\n              disableBackdropClick\r\n              disableEscapeKeyDown\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby='form-dialog-title'\r\n              maxWidth='xl'\r\n            >\r\n              <div className='d-flex justify-content-end'>\r\n                <Button\r\n                  onClick={handleClose}\r\n                  className='p-1 m-1 rounded-pill'\r\n                  variant='light'\r\n                >\r\n                  <Close />\r\n                </Button>\r\n              </div>\r\n\r\n              <DialogContent style={{ width: '30rem' }}>\r\n                <h4 className='text-center'>Tạo danh mục</h4>\r\n                <Form onSubmit={submitHandler}>\r\n                  <Form.Group>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Tên danh mục\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='name'\r\n                      size='normal'\r\n                      placeholder='Enter name'\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      size='sm'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                      }}\r\n                    >\r\n                      Tạo\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n          <div className={classes.root}>\r\n            <div className='d-flex justify-content-end'>\r\n              <Button\r\n                variant='outline-dark'\r\n                className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                onClick={handleClickOpen}\r\n                size='normal'\r\n              >\r\n                <i className='fas fa-plus'></i> Tạo danh mục\r\n              </Button>\r\n            </div>\r\n            <Paper\r\n              className={classes.paper + 'shadow'}\r\n              style={{\r\n                borderRadius: '1rem',\r\n                border: '0.25px solid #ddd',\r\n              }}\r\n            >\r\n              <TableContainer\r\n                className='text-center p-5'\r\n                style={{\r\n                  borderRadius: '1rem',\r\n                }}\r\n              >\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby='tableTitle'\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label='enhanced table'\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={category.length}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(category, getComparator(order, orderBy))\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((cat, index) => {\r\n                        const isItemSelected = isSelected(cat._id)\r\n                        const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            onClick={(event) => handleClick(event, cat._id)}\r\n                            role='checkbox'\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={cat._id}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding='checkbox'>\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              component='th'\r\n                              id={labelId}\r\n                              scope='row'\r\n                              padding='none'\r\n                              align='center'\r\n                            >\r\n                              {cat._id}\r\n                            </TableCell>\r\n                            <TableCell align='left' className='text-center'>\r\n                              {cat.name}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {format(\r\n                                new utcToZonedTime(\r\n                                  cat.createdAt,\r\n                                  'Asia/Ho_Chi_Minh'\r\n                                ),\r\n                                'HH:mm:ss - dd/MM/yyyy',\r\n                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                              )}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {format(\r\n                                new utcToZonedTime(\r\n                                  cat.updatedAt,\r\n                                  'Asia/Ho_Chi_Minh'\r\n                                ),\r\n                                'HH:mm:ss - MM/dd/yyyy',\r\n                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                              )}\r\n                            </TableCell>\r\n\r\n                            <TableCell align='center'>\r\n                              <LinkContainer\r\n                                to={`/admin/category/${cat._id}/edit`}\r\n                              >\r\n                                <Button\r\n                                  variant='outline-light'\r\n                                  className='btn-sm rounded-pill btn_color_details'\r\n                                >\r\n                                  CHI TIẾT\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                    {emptyRows > 0 && (\r\n                      <TableRow\r\n                        style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                      >\r\n                        <TableCell colSpan={6} />\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component='div'\r\n                count={category.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n            <FormControlLabel\r\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n              label='Dense padding'\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoriesListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\categoryAction.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CategoryEditScreen.js",["515","516"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport { getCategoryDetails, updateCategory } from '../actions/categoryAction'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../constants/categoriesConstants'\r\n\r\nconst CategoryEditScreen = ({ match, history }) => {\r\n  const catId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const categoryDetails = useSelector((state) => state.categoryDetails)\r\n  const { loading, error, category } = categoryDetails\r\n\r\n  const categoryUpdate = useSelector((state) => state.categoryUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = categoryUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateCategory({ _id: catId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: CATEGORY_UPDATE_RESET })\r\n      history.push('/admin/categorieslist')\r\n    } else {\r\n      if (!category.name || category._id !== catId) {\r\n        dispatch(getCategoryDetails(catId))\r\n      } else {\r\n        setName(category.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, catId, category, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      {loadingUpdate && (\r\n        <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n      )}\r\n      {errorUpdate && <Message>{errorUpdate}</Message>}\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Row className='justify-content-center'>\r\n          <Col md={6}>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow card_color'\r\n              fluid\r\n            >\r\n              <h2 className='text-center mb-4'>Chỉnh sửa danh mục</h2>\r\n              <Form.Group>\r\n                <Container>\r\n                  <Form.Label\r\n                    as='p'\r\n                    className='mb-1'\r\n                    style={{ fontSize: '1.5rem' }}\r\n                  >\r\n                    Tên danh mục\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    style={{ fontSize: '1.2rem' }}\r\n                    className='border border-grey rounded-pill'\r\n                    type='name'\r\n                    size='normal'\r\n                    placeholder='Enter name'\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  ></Form.Control>\r\n                </Container>\r\n              </Form.Group>\r\n              <div className='pl-3 pr-3 text-center'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-light'\r\n                  className='rounded-pill btn_color_created'\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                    width: '20rem',\r\n                  }}\r\n                >\r\n                  Cập nhật\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductCreateScreen.js",["517","518","519"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { listCategoriesAdm } from '../actions/categoryAction'\r\nimport { createProduct } from '../actions/productActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport Announcement from '../components/Announcement'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nconst ProductCreateScreen = () => {\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [categoryy, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const productCreate = useSelector((state) => state.productCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n  } = productCreate\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const { loading: loadingCat, error: errorCat, category } = categoriesList\r\n\r\n  console.log('hihi', category)\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(\r\n      createProduct({\r\n        name,\r\n        price,\r\n        description,\r\n        image,\r\n        brand,\r\n        categoryy,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successCreate) {\r\n      dispatch({ type: PRODUCT_CREATE_RESET })\r\n    } else {\r\n      if (userInfo) {\r\n        dispatch(listCategoriesAdm())\r\n      }\r\n    }\r\n  }, [dispatch, userInfo, successCreate])\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Link\r\n          to='/admin/productlist'\r\n          className='btn btn-light my-3 text-uppercase rounded-pill'\r\n        >\r\n          <i class='fas fa-arrow-left pr-2'></i>\r\n          Quay về\r\n        </Link>\r\n        {/* {loadingCreate && (\r\n            <Announcement variant='success'> Thêm thành công</Announcement>\r\n          ) && <Loader />}\r\n        {errorCreate && <Announcement>{errorCreate}</Announcement>} */}\r\n        {loadingCreate ? (\r\n          <Announcement> Thêm thành công</Announcement> && <Loader />\r\n        ) : errorCreate ? (\r\n          <Message>{errorCreate}</Message>\r\n        ) : (\r\n          <>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow card_color'\r\n              fluid\r\n            >\r\n              <h2 className='text-center mb-4'>Thêm sản phẩm</h2>\r\n\r\n              <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Tên sản phẩm\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='name'\r\n                  placeholder='Enter name'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1'>\r\n                  Ảnh\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey'\r\n                  type='text'\r\n                  placeholder='Enter image url'\r\n                  value={image}\r\n                  onChange={(e) => setImage(e.target.value)}\r\n                ></Form.Control>\r\n                <Form.File\r\n                  className='border border-grey'\r\n                  id='image-file'\r\n                  label='Choose File'\r\n                  custom\r\n                  onChange={uploadFileHandler}\r\n                ></Form.File>\r\n                {uploading && <Loader />}\r\n              </Form.Group>\r\n\r\n              <Row>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='brand' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Thể loại\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='text'\r\n                      placeholder='Enter brand'\r\n                      value={brand}\r\n                      onChange={(e) => setBrand(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='countInStock' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Số lượng trong kho\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill text-center'\r\n                      type='number'\r\n                      placeholder='Enter countInStock'\r\n                      value={countInStock}\r\n                      onChange={(e) => setCountInStock(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='category' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Danh mục\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill '\r\n                      type='text'\r\n                      as='select'\r\n                      placeholder='Enter category'\r\n                      value={categoryy}\r\n                      onChange={(e) => setCategory(e.target.value)}\r\n                    >\r\n                      <option></option>\r\n                      {category &&\r\n                        category.map((cat, index) => (\r\n                          <option\r\n                            style={{ color: 'black' }}\r\n                            key={index}\r\n                            value={cat._id}\r\n                          >\r\n                            {cat.name}\r\n                          </option>\r\n                        ))}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Form.Group controlId='price' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1 text-center'>\r\n                      Giá\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill text-center'\r\n                      type='number'\r\n                      placeholder='Enter price'\r\n                      value={price}\r\n                      onChange={(e) => setPrice(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Form.Group controlId='description' className='pl-3 pr-3'>\r\n                <Form.Label as='p' className='mb-1 ml-5'>\r\n                  Nội dung\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className='border border-grey rounded-pill'\r\n                  type='text'\r\n                  rows={3}\r\n                  as='textarea'\r\n                  placeholder='Enter description'\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n\r\n              <div className='pl-3 pr-3 text-center'>\r\n                <Button\r\n                  type='submit'\r\n                  variant='outline-light'\r\n                  className='rounded-pill btn_color_created'\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                    width: '20rem',\r\n                  }}\r\n                >\r\n                  Tạo\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductCreateScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\test.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SkeletonEffect.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductOfCategoryScreen.js",["520","521","522","523","524","525","526","527","528","529","530","531","532","533"],"F:\\Code\\shopPro\\frontend\\src\\components\\ProgressLine.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\FilterNav.js",["534","535","536","537","538","539"],"import { BookOutlined, DollarOutlined } from '@ant-design/icons'\r\nimport Slider from '@material-ui/core/Slider'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { Menu } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listCategories } from '../actions/categoryAction'\r\nimport { Checkbox } from 'antd'\r\nimport { Col, Image, Row, Button, Form } from 'react-bootstrap'\r\nimport { filterPriceProduct, filterProduct } from '../actions/productActions'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nconst rootSubmenuKeys = ['sub1', 'sub2', 'sub4']\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 300,\r\n  },\r\n})\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    color: '#52af77',\r\n    height: 8,\r\n  },\r\n  thumb: {\r\n    height: 24,\r\n    width: 24,\r\n    backgroundColor: '#fff',\r\n    border: '2px solid currentColor',\r\n    marginTop: -8,\r\n    marginLeft: -12,\r\n    '&:focus, &:hover, &$active': {\r\n      boxShadow: 'inherit',\r\n    },\r\n  },\r\n  active: {},\r\n  valueLabel: {\r\n    left: 'calc(-50% + 4px)',\r\n  },\r\n  track: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n  rail: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n})(Slider)\r\n\r\nfunction valuetext(value) {\r\n  return `${value}`\r\n}\r\n\r\nconst FilterNav = () => {\r\n  const classes = useStyles()\r\n  const [value, setValue] = useState([0, 5000000])\r\n  const [cat, setCat] = useState([])\r\n  const [start, setStart] = useState('')\r\n  const [end, setEnd] = useState('')\r\n  const [openKeys, setOpenKeys] = React.useState(['sub1'])\r\n\r\n  const onOpenChange = (keys) => {\r\n    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1)\r\n    if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\r\n      setOpenKeys(keys)\r\n    } else {\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : [])\r\n    }\r\n  }\r\n  function ValueLabelComponent(props) {\r\n    const { children, open, value } = props\r\n\r\n    props.index === 1 ? setEnd(props.value) : setStart(props.value)\r\n\r\n    return (\r\n      <Tooltip\r\n        open={open}\r\n        enterTouchDelay={0}\r\n        placement='bottom'\r\n        title={value.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n      >\r\n        {children}\r\n      </Tooltip>\r\n    )\r\n  }\r\n\r\n  // console.log('end', end)\r\n  // console.log('start', start)\r\n\r\n  ValueLabelComponent.propTypes = {\r\n    children: PropTypes.element.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n  }\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue)\r\n  }\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const { loading, success, category } = categoriesList\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  function onChange(checkedValues) {\r\n    if (checkedValues.target.checked === true) {\r\n      setCat([...cat, checkedValues.target.value])\r\n    } else {\r\n      cat.map(\r\n        (e) => e === checkedValues.target.value && cat.splice(cat.indexOf(e), 1)\r\n      )\r\n      setCat([...cat])\r\n    }\r\n  }\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(filterProduct(cat))\r\n    dispatch(filterPriceProduct([start, end]))\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(listCategories())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={submitHandler}>\r\n        <div className='m-3 mb-0'>\r\n          <h5 className='justify-content-center mt-2 d-flex align-items-center'>\r\n            <Image\r\n              className='mr-2'\r\n              src='https://img.icons8.com/material-outlined/20/000000/filter--v1.png'\r\n            />\r\n            Bộ lọc tìm kiếm\r\n          </h5>\r\n\r\n          <Form.Group>\r\n            <strong className='mb-1 justify-content-center d-flex align-items-center mt-3 '>\r\n              <Image\r\n                className='pl-1 pr-1'\r\n                src='https://img.icons8.com/fluent/24/000000/us-dollar.png'\r\n              />\r\n              Tìm kiếm theo giá\r\n            </strong>\r\n            <div className='d-flex align-items-center justify-content-center mb-1'>\r\n              <p className='pr-1 mb-0'> Giá từ:</p>\r\n              <strong className='mb-0' style={{ letterSpacing: '0.08rem' }}>\r\n                {start.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'}\r\n                {\r\n                  <Image\r\n                    className='pl-1 pr-1'\r\n                    src='https://img.icons8.com/fluent/24/000000/resize-horizontal.png'\r\n                  />\r\n                }\r\n                {end.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + 'đ'}\r\n              </strong>\r\n            </div>\r\n            <PrettoSlider\r\n              value={value}\r\n              onChange={handleChange}\r\n              ValueLabelComponent={ValueLabelComponent}\r\n              aria-labelledby='range-slider'\r\n              getAriaValueText={valuetext}\r\n              valueLabelDisplay='auto'\r\n              aria-label='pretto slider'\r\n              min={0}\r\n              step={50000}\r\n              max={5000000}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Menu\r\n              mode='inline'\r\n              openKeys={openKeys}\r\n              onOpenChange={onOpenChange}\r\n              style={{ width: 270 }}\r\n              className='border-0'\r\n            >\r\n              <SubMenu\r\n                key='sub2'\r\n                icon={<BookOutlined />}\r\n                title='Tìm kiếm theo danh mục'\r\n              >\r\n                {category &&\r\n                  category.map((cate, key) => (\r\n                    <Menu.Item key={key}>\r\n                      <Checkbox value={cate._id} onChange={onChange}>\r\n                        {cate.name}\r\n                      </Checkbox>\r\n                    </Menu.Item>\r\n                  ))}\r\n              </SubMenu>\r\n            </Menu>\r\n          </Form.Group>\r\n          <Form.Group className='text-center '>\r\n            <Button\r\n              type='submit'\r\n              size='normal'\r\n              variant='outline-dark rounded-pill p-1 pl-4 pr-4'\r\n              style={{ letterSpacing: '0.08rem', fontSize: '0.85rem' }}\r\n            >\r\n              Tìm kiếm\r\n            </Button>\r\n          </Form.Group>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FilterNav\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Banner.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\SupplierListScreen.js",["540","541","542"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  createSupplier,\r\n  deleteSupplier,\r\n  listSupplierAdm,\r\n} from '../actions/supplierActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport SkeletonEffect from '../components/SkeletonEffect'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst SupplierListScreen = () => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = supplier.map((sup) => sup._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n  const { loading, error, supplier } = supplierListAdm\r\n\r\n  const supplierDelete = useSelector((state) => state.supplierDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = supplierDelete\r\n\r\n  const supplierCreate = useSelector((state) => state.supplierCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    supplier: createdProduct,\r\n  } = supplierCreate\r\n\r\n  const emptyRows =\r\n    supplier !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, supplier.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('Bạn có chắc?')) {\r\n      dispatch(deleteSupplier({ id }))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = supplier.find((cat) => cat._id)\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH NHÀ CUNG CẤP</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listSupplierAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  const submitHandlerDetails = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {loadingDelete && (\r\n          <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n        ) && <Loader />}\r\n      {errorDelete && <Message>{errorDelete}</Message>}\r\n      {loadingCreate && (\r\n        <MessageSuccess\r\n          variant={'Đã thêm ' + name + ' thành công'}\r\n        ></MessageSuccess>\r\n      )}\r\n      {errorCreate && <Message>{errorCreate}</Message>}\r\n      {loading ? (\r\n        <SkeletonEffect />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <div>\r\n            <Dialog\r\n              disableBackdropClick\r\n              disableEscapeKeyDown\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby='form-dialog-title'\r\n              maxWidth='xl'\r\n            >\r\n              <div className='d-flex justify-content-end'>\r\n                <Button\r\n                  onClick={handleClose}\r\n                  className='p-1 m-1 rounded-pill'\r\n                  variant='light'\r\n                >\r\n                  <Close />\r\n                </Button>\r\n              </div>\r\n\r\n              <DialogContent style={{ width: '30rem' }}>\r\n                <h4 className='text-center'>Thêm nhà cung cấp</h4>\r\n                <Form onSubmit={submitHandler}>\r\n                  <Form.Group>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Tên nhà cung cấp\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='name'\r\n                      size='normal'\r\n                      placeholder='Enter name'\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      size='sm'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                      }}\r\n                    >\r\n                      Tạo\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n\r\n          <div className={classes.root}>\r\n            <div className='d-flex justify-content-end'>\r\n              <Button\r\n                variant='outline-dark'\r\n                className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                onClick={handleClickOpen}\r\n                size='normal'\r\n              >\r\n                <i className='fas fa-plus'></i> Thêm nhà cung cấp\r\n              </Button>\r\n            </div>\r\n            <Paper\r\n              className={classes.paper + 'shadow'}\r\n              style={{\r\n                borderRadius: '1rem',\r\n                border: '0.25px solid #ddd',\r\n              }}\r\n            >\r\n              <TableContainer\r\n                className='text-center p-5'\r\n                style={{\r\n                  borderRadius: '1rem',\r\n                }}\r\n              >\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby='tableTitle'\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label='enhanced table'\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={supplier.length}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(supplier, getComparator(order, orderBy))\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((sup, index) => {\r\n                        const isItemSelected = isSelected(sup._id)\r\n                        const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            onClick={(event) => handleClick(event, sup._id)}\r\n                            role='checkbox'\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={sup._id}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding='checkbox'>\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell\r\n                              component='th'\r\n                              id={labelId}\r\n                              scope='row'\r\n                              padding='none'\r\n                              align='center'\r\n                            >\r\n                              {sup._id}\r\n                            </TableCell>\r\n                            <TableCell align='left' className='text-center'>\r\n                              {sup.name}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {format(\r\n                                new utcToZonedTime(\r\n                                  sup.createdAt,\r\n                                  'Asia/Ho_Chi_Minh'\r\n                                ),\r\n                                'HH:mm:ss - dd/MM/yyyy',\r\n                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                              )}\r\n                            </TableCell>\r\n                            <TableCell align='center'>\r\n                              {format(\r\n                                new utcToZonedTime(\r\n                                  sup.updatedAt,\r\n                                  'Asia/Ho_Chi_Minh'\r\n                                ),\r\n                                'HH:mm:ss - MM/dd/yyyy',\r\n                                { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                              )}\r\n                            </TableCell>\r\n\r\n                            <TableCell align='center'>\r\n                              <LinkContainer\r\n                                to={`/admin/supplier/${sup._id}/edit`}\r\n                              >\r\n                                <Button\r\n                                  variant='outline-light'\r\n                                  className='btn-sm rounded-pill btn_color_details'\r\n                                >\r\n                                  CHI TIẾT\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                    {emptyRows > 0 && (\r\n                      <TableRow\r\n                        style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                      >\r\n                        <TableCell colSpan={6} />\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component='div'\r\n                count={supplier.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n            <FormControlLabel\r\n              control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n              label='Dense padding'\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\actions\\supplierActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\supplierConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\supplierReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\SupplierEditScreen.js",["543"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getSupplierDetails, updateSupplier } from '../actions/supplierActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { SUPPLIER_UPDATE_RESET } from '../constants/supplierConstants'\r\n\r\nconst SupplierEditScreen = ({ history, match }) => {\r\n  const supId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const supplierDetails = useSelector((state) => state.supplierDetails)\r\n  const { loading, error, supplier } = supplierDetails\r\n\r\n  const supplierUpdate = useSelector((state) => state.supplierUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = supplierUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateSupplier({ _id: supId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: SUPPLIER_UPDATE_RESET })\r\n      history.push('/admin/supplierlist')\r\n    } else {\r\n      if (!supplier.name || supplier._id !== supId) {\r\n        dispatch(getSupplierDetails(supId))\r\n      } else {\r\n        setName(supplier.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, supId, supplier, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      {loadingUpdate && (\r\n        <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n      )}\r\n      {errorUpdate && <Message>{errorUpdate}</Message>}\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Row className='justify-content-center'>\r\n          <Col md={6}>\r\n            <Form\r\n              onSubmit={submitHandler}\r\n              className='p-4 bg-light shadow card_color'\r\n              fluid\r\n            >\r\n              <h3 className='text-center mb-4'>\r\n                Chỉnh sửa thông tin nhà cung cấp\r\n              </h3>\r\n              <Form.Group>\r\n                <Container>\r\n                  <Form.Label\r\n                    as='p'\r\n                    className='mb-1'\r\n                    style={{ fontSize: '1rem' }}\r\n                  >\r\n                    Tên nhà cung cấp\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    style={{ fontSize: '1rem' }}\r\n                    className='border border-grey rounded-pill'\r\n                    type='name'\r\n                    size='sm'\r\n                    placeholder='Enter name'\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  ></Form.Control>\r\n                </Container>\r\n              </Form.Group>\r\n              <div className='pl-3 pr-3 text-center'>\r\n                <Button\r\n                  type='submit'\r\n                  size='sm'\r\n                  variant='outline-light'\r\n                  className='rounded-pill btn_color_created'\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    letterSpacing: '0.25rem',\r\n                    width: '20rem',\r\n                  }}\r\n                >\r\n                  Cập nhật\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\AdminScreen.js",["544","545"],"import { Button } from '@material-ui/core'\r\nimport React, { useEffect } from 'react'\r\nimport { Card, Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listOrders } from '../../actions/orderActions'\r\nimport { listProducts } from '../../actions/productActions'\r\nimport { listSupplierAdm } from '../../actions/supplierActions'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nfunction format(n, currency) {\r\n  return n?.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst AdminScreen = ({ history }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { products } = productList\r\n\r\n  const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n  const { supplier } = supplierListAdm\r\n\r\n  const orderList = useSelector((state) => state.orderList)\r\n  const { orders } = orderList\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  let outOfStock = 0\r\n  let productOut = []\r\n  products.map((product) => {\r\n    if (product.countInStock == 0) {\r\n      productOut.push(product)\r\n      outOfStock += 1\r\n    }\r\n  })\r\n\r\n  console.log('orders', orders)\r\n\r\n  useEffect(() => {\r\n    if (!userInfo.isAdmin) {\r\n      history.push('/login')\r\n    }\r\n\r\n    if (userInfo) {\r\n      dispatch(listOrders())\r\n      dispatch(listProducts())\r\n      dispatch(listSupplierAdm())\r\n    }\r\n  }, [dispatch, history, userInfo])\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0' style={{ backgroundColor: '#eabf9f' }}>\r\n          <div className='mt-3'>\r\n            <h2 className='text-center text-dark'>Thống Kê</h2>\r\n            <div>\r\n              <Row className='p-3 '>\r\n                <Col md={3}>\r\n                  <Card\r\n                    border='success'\r\n                    className='shadow card_color'\r\n                    style={{ height: '16rem' }}\r\n                  >\r\n                    <Card.Body>\r\n                      <Card.Title className='text-center'>\r\n                        <h4>Tổng số đơn hàng</h4>\r\n                      </Card.Title>\r\n                      <Card.Subtitle className='mb-3 mt-4 text-center text-muted'>\r\n                        Tổng số đơn hàng đã được đặt\r\n                      </Card.Subtitle>\r\n                      <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>\r\n                          {orders && orders.orders?.length}\r\n                        </h1>\r\n                      </Card.Title>\r\n                      <Card.Subtitle className='mb-2 text-center'>\r\n                        <h5 className='text-muted'>Đơn hàng</h5>\r\n                      </Card.Subtitle>\r\n                      <Card.Link\r\n                        href='/admin/orderlist'\r\n                        className='d-flex justify-content-end'\r\n                      >\r\n                        <Button color='secondary'>\r\n                          <strong className='text-capitalize'>\r\n                            {' '}\r\n                            <strong className='text-capitalize'>\r\n                              {' '}\r\n                              Chi tiết\r\n                            </strong>\r\n                          </strong>\r\n                        </Button>\r\n                      </Card.Link>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Card\r\n                    border='danger'\r\n                    className='shadow card_color'\r\n                    style={{ height: '16rem' }}\r\n                  >\r\n                    <Card.Body>\r\n                      <Card.Title className='text-center'>\r\n                        <h4>Doanh thu</h4>\r\n                      </Card.Title>\r\n                      <Card.Subtitle className='mb-3 mt-5 text-center text-muted'>\r\n                        Tổng số doanh thu từ các đơn hàng\r\n                      </Card.Subtitle>\r\n                      <Card.Title className='text-center mb-4'>\r\n                        <h2\r\n                          style={{ fontSize: '2.5rem' }}\r\n                          className='text-lowercase'\r\n                        >\r\n                          {orders?.totalAmount &&\r\n                            format(orders?.totalAmount, 'đ')}\r\n                        </h2>\r\n                      </Card.Title>\r\n\r\n                      <Card.Link\r\n                        href='/admin/orderlist'\r\n                        className='d-flex justify-content-end'\r\n                      >\r\n                        <Button color='secondary'>\r\n                          <strong className='text-capitalize'> Chi tiết</strong>\r\n                        </Button>\r\n                      </Card.Link>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Card\r\n                    border='success'\r\n                    className='shadow card_color'\r\n                    style={{ height: '16rem' }}\r\n                  >\r\n                    <Card.Body>\r\n                      <Card.Title className='text-center'>\r\n                        <h4>Tổng số sản phẩm</h4>\r\n                      </Card.Title>\r\n                      <Card.Subtitle className='mb-2 mt-3 text-center text-muted'>\r\n                        Tổng số sản phẩm đang được bày bán\r\n                      </Card.Subtitle>\r\n                      <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>\r\n                          {products && products.length}\r\n                        </h1>\r\n                      </Card.Title>\r\n                      <Card.Subtitle className='mb-2 text-center'>\r\n                        <h5 className='text-muted'>Sản phẩm</h5>\r\n                      </Card.Subtitle>\r\n                      <Card.Link\r\n                        href='/admin/productlist'\r\n                        className='d-flex justify-content-end'\r\n                      >\r\n                        <Button color='secondary'>\r\n                          {' '}\r\n                          <strong className='text-capitalize'> Chi tiết</strong>\r\n                        </Button>\r\n                      </Card.Link>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                <Col md={3}>\r\n                  <Card\r\n                    border='danger'\r\n                    className='shadow card_color'\r\n                    style={{ height: '16rem' }}\r\n                  >\r\n                    <Card.Body>\r\n                      <Card.Title className='text-center'>\r\n                        <h4>Tổng số nhà cung cấp</h4>\r\n                      </Card.Title>\r\n                      <Card.Subtitle className='mb-3 mt-4 text-center text-muted'>\r\n                        Tổng số nhà cung cấp sản phẩm\r\n                      </Card.Subtitle>\r\n                      <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>\r\n                          {supplier && supplier.length}\r\n                        </h1>\r\n                      </Card.Title>\r\n                      <Card.Subtitle className='mb-2 text-center'>\r\n                        <h5 className='text-muted'>Nhà cung cấp</h5>\r\n                      </Card.Subtitle>\r\n                      <Card.Link\r\n                        href='/admin/supplierlist'\r\n                        className='d-flex justify-content-end'\r\n                      >\r\n                        <Button color='secondary'>\r\n                          {' '}\r\n                          <strong className='text-capitalize'> Chi tiết</strong>\r\n                        </Button>\r\n                      </Card.Link>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            <div>\r\n              <Row className='p-3 '>\r\n                <Col md={3}>\r\n                  <Card\r\n                    border='success'\r\n                    className='shadow card_color'\r\n                    style={{ height: '16rem' }}\r\n                    text='light'\r\n                  >\r\n                    <Card.Body>\r\n                      <Card.Title className='text-center'>\r\n                        <h4>Tổng số sản phẩm hết hàng</h4>\r\n                      </Card.Title>\r\n                      <Card.Subtitle className='mb-2 text-center text-muted'>\r\n                        Tổng số sản phẩm hết hàng\r\n                      </Card.Subtitle>\r\n                      <Card.Title className='text-center'>\r\n                        <h1 style={{ fontSize: '3rem' }}>{outOfStock}</h1>\r\n                      </Card.Title>\r\n                      <Card.Subtitle className='mb-3  mt-4 text-center'>\r\n                        <h5 className='text-muted'>Sản phẩm</h5>\r\n                      </Card.Subtitle>\r\n                      <Card.Link\r\n                        href='/admin/productlist'\r\n                        className='d-flex justify-content-end border-top border-4'\r\n                      >\r\n                        <Button color='secondary'>\r\n                          {' '}\r\n                          <strong className='text-capitalize'> Chi tiết</strong>\r\n                        </Button>\r\n                      </Card.Link>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AdminScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\Header.js",["546","547","548","549","550","551","552","553","554","555"],"// import { Menu } from '@material-ui/core'\r\n// import { Link } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Button from '@material-ui/core/Button'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport { Menu } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport { black } from 'colors'\r\nimport firebase from 'firebase'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Container, Image, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Route, useHistory } from 'react-router-dom'\r\nimport { listCategories } from '../../../actions/categoryAction'\r\nimport { logout } from '../../../actions/userActions'\r\nimport SearchBox from '../../../components/SearchBox'\r\n\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n})((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    {...props}\r\n  />\r\n))\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n  root: {\r\n    '&:focus': {\r\n      backgroundColor: theme.palette.primary.main,\r\n      '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n        color: theme.palette.common.white,\r\n      },\r\n    },\r\n  },\r\n}))(MenuItem)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  paper: {\r\n    marginRight: theme.spacing(1),\r\n    zIndex: '7 !important',\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n  },\r\n  link: {\r\n    color: black,\r\n    '&:hover': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:active': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n    '&:visited': {\r\n      color: '#002984',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}))\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: -3,\r\n    top: 13,\r\n    border: `2px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n  },\r\n}))(Badge)\r\n\r\nfunction Header(props) {\r\n  const classes = useStyles()\r\n\r\n  const [open, setOpen] = React.useState(false)\r\n  const anchorRef = React.useRef(null)\r\n  const anchorReff = React.useRef(null)\r\n  const history = useHistory()\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n  // const [menu, setMenu] = useState(false)\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { user } = userDetails\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const { loading, success, category } = categoriesList\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  const logoutHandler = () => {\r\n    firebase.auth().signOut()\r\n    dispatch(logout())\r\n    history.push('/')\r\n  }\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen)\r\n  }\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return\r\n    }\r\n\r\n    setOpen(false)\r\n  }\r\n\r\n  function handleListKeyDown(event) {\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault()\r\n      setOpen(false)\r\n    }\r\n  }\r\n\r\n  // return focus to the button when we transitioned from !open -> open\r\n  const prevOpen = React.useRef(open)\r\n  useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      anchorRef.current.focus()\r\n    }\r\n\r\n    dispatch(listCategories())\r\n\r\n    prevOpen.current = open\r\n  }, [open, userInfo, user])\r\n\r\n  return (\r\n    <>\r\n      <Navbar\r\n        expand='lg'\r\n        collapseOnSelect\r\n        className='p-0 pl-5 pr-5 m-0 shadow'\r\n        style={{ backgroundColor: '#edfead', height: '4rem' }}\r\n      >\r\n        <Container fluid>\r\n          <LinkContainer to='/'>\r\n            <Navbar.Brand className='text-uppercase font-weight-bold flex-grow-1 '>\r\n              {/* <h2>ProShop</h2> */}\r\n              <Image\r\n                src='/logo/logo_white.png'\r\n                style={{ width: '5rem', height: '4rem', zIndex: '0' }}\r\n              />\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n\r\n          <Route render={({ history }) => <SearchBox history={history} />} />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='ml-auto' inline>\r\n              <LinkContainer to='/cart'>\r\n                <Nav.Link className='text-uppercase'>\r\n                  <IconButton aria-label='cart'>\r\n                    <StyledBadge\r\n                      badgeContent={cartItems.length}\r\n                      color='secondary'\r\n                    >\r\n                      <ShoppingCartIcon />\r\n                    </StyledBadge>\r\n                  </IconButton>\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n\r\n              {userInfo ? (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2  mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    {userInfo ? (\r\n                      <Image\r\n                        className='rounded-circle border border-grey'\r\n                        src={userDetails.user && userDetails.user.avatar}\r\n                        alt={userDetails.user && userDetails.user.avatar}\r\n                        style={{ width: '2.5rem', height: '2.5rem' }}\r\n                        fluid\r\n                      />\r\n                    ) : (\r\n                      <Avatar className={classes.orange}>\r\n                        {userInfo.name.substring(0, 1)}\r\n                      </Avatar>\r\n                    )}\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '5' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow {...TransitionProps}>\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              <MenuItem onClick={handleClose}>\r\n                                <Link\r\n                                  to='/profile'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    src='https://img.icons8.com/fluent/24/000000/user-male-circle.png'\r\n                                    className='pr-1'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Hồ sơ\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem\r\n                                onClick={logoutHandler}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link\r\n                                  to='/'\r\n                                  className={classes.link}\r\n                                  style={{\r\n                                    color: 'black',\r\n                                    fontSize: '0.8rem',\r\n                                    letterSpacing: '0.05rem',\r\n                                  }}\r\n                                >\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/exit.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Xuất\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Button\r\n                    ref={anchorRef}\r\n                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                    aria-haspopup='true'\r\n                    onClick={handleToggle}\r\n                    className='ml-2 mt-1 mb-1 rounded-circle'\r\n                  >\r\n                    <Image src='https://img.icons8.com/fluent/30/000000/circled-menu.png' />\r\n                  </Button>\r\n                  <Popper\r\n                    open={open}\r\n                    anchorEl={anchorRef.current}\r\n                    role={undefined}\r\n                    transition\r\n                    disablePortal\r\n                    style={{ zIndex: '2' }}\r\n                  >\r\n                    {({ TransitionProps, placement }) => (\r\n                      <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                          transformOrigin:\r\n                            placement === 'bottom'\r\n                              ? 'center top'\r\n                              : 'center bottom',\r\n                        }}\r\n                      >\r\n                        <Paper>\r\n                          <ClickAwayListener onClickAway={handleClose}>\r\n                            <MenuList\r\n                              autoFocusItem={open}\r\n                              id='menu-list-grow'\r\n                              onKeyDown={handleListKeyDown}\r\n                            >\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link to='/login' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/key.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Nhập\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={handleClose}\r\n                                style={{\r\n                                  color: 'black',\r\n                                  fontSize: '0.8rem',\r\n                                  letterSpacing: '0.05rem',\r\n                                }}\r\n                              >\r\n                                <Link to='/register' className={classes.link}>\r\n                                  <Image\r\n                                    className='pr-1'\r\n                                    src='https://img.icons8.com/fluent/24/000000/new-contact.png'\r\n                                  />\r\n                                  <strong className='text-capitalize'>\r\n                                    Đăng Kí\r\n                                  </strong>\r\n                                </Link>\r\n                              </MenuItem>\r\n                            </MenuList>\r\n                          </ClickAwayListener>\r\n                        </Paper>\r\n                      </Grow>\r\n                    )}\r\n                  </Popper>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\components\\SideBar.js",["556"],"import React, { useEffect, useState } from 'react'\r\nimport { Menu, Button } from 'antd'\r\nimport {\r\n  AppstoreOutlined,\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n  PieChartOutlined,\r\n  DesktopOutlined,\r\n  ContainerOutlined,\r\n  MailOutlined,\r\n} from '@ant-design/icons'\r\nimport { Link } from '@material-ui/core'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nconst SideBar = () => {\r\n  const location = useLocation()\r\n\r\n  const [state, setState] = useState(false)\r\n  const [selectedKey, setSelectedKey] = useState('/')\r\n\r\n  useEffect(() => {\r\n    let path = location.pathname\r\n    if (path === '/') {\r\n      path = '/home'\r\n    }\r\n    setSelectedKey(path)\r\n  }, [location])\r\n\r\n  const toggleCollapsed = () => {\r\n    setState(!state)\r\n  }\r\n\r\n  console.log(selectedKey)\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Button\r\n          type='primary'\r\n          onClick={toggleCollapsed}\r\n          // style={{ marginBottom: 16 }}\r\n        >\r\n          {React.createElement(state ? MenuUnfoldOutlined : MenuFoldOutlined)}\r\n        </Button>\r\n        <Menu\r\n          // defaultSelectedKeys={selectedKey}\r\n          defaultOpenKeys={['sub1', 'sub2', 'sub3']}\r\n          mode='inline'\r\n          theme='dark'\r\n          inlineCollapsed={state}\r\n          selectedKeys={selectedKey}\r\n          style={{ height: '100vh', backgroundColor: '#b68973' }}\r\n        >\r\n          <Menu.Item key='/admin' icon={<PieChartOutlined />}>\r\n            <Link href='/admin' className='text-decoration-none '>\r\n              Dashboard\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key='/admin/userlist' icon={<DesktopOutlined />}>\r\n            <Link href='/admin/userlist' className='text-decoration-none'>\r\n              Người dùng\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key='/admin/categorieslist' icon={<ContainerOutlined />}>\r\n            <Link href='/admin/categorieslist' className='text-decoration-none'>\r\n              Danh mục\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key='/admin/supplierlist' icon={<ContainerOutlined />}>\r\n            <Link href='/admin/supplierlist' className='text-decoration-none'>\r\n              Nhà cung cấp\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key='/admin/orderlist' icon={<ContainerOutlined />}>\r\n            <Link href='/admin/orderlist' className='text-decoration-none'>\r\n              Đơn hàng\r\n            </Link>\r\n          </Menu.Item>\r\n          <SubMenu key='sub1' icon={<MailOutlined />} title='Sản phẩm'>\r\n            <Menu.Item\r\n              key='/admin/productlist'\r\n              className='m-0 pb-2'\r\n              style={{ backgroundColor: '#587B7F' }}\r\n            >\r\n              <Link href='/admin/productlist' className='text-decoration-none'>\r\n                Danh sách\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              key='/admin/product/create'\r\n              className='m-0  pb-4'\r\n              style={{ backgroundColor: '#587B7F' }}\r\n            >\r\n              <Link\r\n                href='/admin/product/create'\r\n                className='text-decoration-none'\r\n              >\r\n                Thêm\r\n              </Link>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n          {/* <SubMenu\r\n            key='sub2'\r\n            icon={<AppstoreOutlined />}\r\n            title='Navigation Two'\r\n          >\r\n            <Menu.Item key='9'>Option 9</Menu.Item>\r\n            <Menu.Item key='10'>Option 10</Menu.Item>\r\n            <SubMenu key='sub3' title='Submenu'>\r\n              <Menu.Item key='11'>Option 11</Menu.Item>\r\n              <Menu.Item key='12'>Option 12</Menu.Item>\r\n            </SubMenu>\r\n          </SubMenu> */}\r\n        </Menu>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideBar\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserListScreen.js",["557"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect } from 'react'\r\nimport { Button, Col, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport { deleteUser, listUsers } from '../../actions/userActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  { id: 'email', numeric: true, disablePadding: false, label: 'ĐỊA CHỈ EMAIL' },\r\n  { id: 'isAdmin', numeric: true, disablePadding: false, label: 'ADMIN' },\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction UserListScreen({ history }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((user) => user._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userList = useSelector((state) => state.userList)\r\n  const { loading, error, users } = userList\r\n\r\n  const emptyRows =\r\n    users !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage)\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDelete = useSelector((state) => state.userDelete)\r\n  const { success: successDelete } = userDelete\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteUser(id))\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = users.find((user) => user._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>Danh sách tài khoản người dùng</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers())\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch, history, successDelete, userInfo])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 '>\r\n          {loading ? (\r\n            <Loader />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div className={classes.root}>\r\n                <Paper\r\n                  className={classes.paper}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={users.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(users, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((user, index) => {\r\n                            const isItemSelected = isSelected(user._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) =>\r\n                                  handleClick(event, user._id)\r\n                                }\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={user._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {user._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {user.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {user.email}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {' '}\r\n                                  {user.isAdmin ? (\r\n                                    <i\r\n                                      className='fas fa-check'\r\n                                      style={{ color: 'green' }}\r\n                                    ></i>\r\n                                  ) : (\r\n                                    <i\r\n                                      className='fas fa-times'\r\n                                      style={{ color: 'red' }}\r\n                                    ></i>\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/user/${user._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='info'\r\n                                      className='btn-sm rounded-pill'\r\n                                    >\r\n                                      <i className='far fa-edit'></i>\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={users.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoriesListScreen.js",["558","559"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n  createCategory,\r\n  deleteCategory,\r\n  listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nformat(new Date(2014, 1, 11), 'dd/MM/yyyy')\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst CategoriesListScreen = ({ history }) => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = category.map((cat) => cat._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const categoriesListAdm = useSelector((state) => state.categoriesListAdm)\r\n  const { loading, error, category } = categoriesListAdm\r\n\r\n  const categoryDelete = useSelector((state) => state.categoryDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = categoryDelete\r\n\r\n  const categoryCreate = useSelector((state) => state.categoryCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    category: createdProduct,\r\n  } = categoryCreate\r\n\r\n  const emptyRows =\r\n    category !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, category.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteCategory(id))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = category.find((cat) => cat._id)\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH DANH MỤC</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listCategoriesAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createCategory(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingDelete && (\r\n              <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n            ) && <Loader />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n          {loadingCreate && (\r\n            <MessageSuccess\r\n              variant={'Đã thêm ' + name + ' thành công'}\r\n            ></MessageSuccess>\r\n          )}\r\n          {errorCreate && <Message>{errorCreate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Dialog\r\n                  disableBackdropClick\r\n                  disableEscapeKeyDown\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby='form-dialog-title'\r\n                  maxWidth='xl'\r\n                >\r\n                  <div className='d-flex justify-content-end'>\r\n                    <Button\r\n                      onClick={handleClose}\r\n                      className='p-1 m-1 rounded-pill'\r\n                      variant='light'\r\n                    >\r\n                      <Close />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <DialogContent style={{ width: '30rem' }}>\r\n                    <h4 className='text-center'>Tạo danh mục</h4>\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                          Tên danh mục\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='name'\r\n                          size='normal'\r\n                          placeholder='Enter name'\r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <div className='pl-3 pr-3 text-center'>\r\n                        <Button\r\n                          type='submit'\r\n                          size='sm'\r\n                          variant='outline-light'\r\n                          className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                          style={{\r\n                            fontSize: '1rem',\r\n                            letterSpacing: '0.25rem',\r\n                          }}\r\n                        >\r\n                          Tạo\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </DialogContent>\r\n                </Dialog>\r\n              </div>\r\n              <div className={classes.root}>\r\n                <div className='d-flex justify-content-end'>\r\n                  <Button\r\n                    variant='outline-light'\r\n                    className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                    onClick={handleClickOpen}\r\n                    size='normal'\r\n                  >\r\n                    <i className='fas fa-plus'></i> Tạo danh mục\r\n                  </Button>\r\n                </div>\r\n                <Paper\r\n                  className={classes.paper + 'shadow'}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={category.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(category, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((cat, index) => {\r\n                            const isItemSelected = isSelected(cat._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) => handleClick(event, cat._id)}\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={cat._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {cat._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {cat.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.createdAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      cat.updatedAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - MM/dd/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/category/${cat._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-sm rounded-pill btn_color_details'\r\n                                    >\r\n                                      CHI TIẾT\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={category.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoriesListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductListScreen.js",["560","561","562","563","564","565","566","567","568","569","570"],"import { Link } from '@material-ui/core'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types'\r\nimport { default as React, useEffect } from 'react'\r\nimport { Button, Col, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport '../../notisfied.css'\r\nimport {\r\n  getCategoryDetails,\r\n  listCategoriesAdm,\r\n} from '../../actions/categoryAction'\r\nimport {\r\n  createProduct,\r\n  deleteProduct,\r\n  listProducts,\r\n} from '../../actions/productActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: false, disablePadding: false, label: 'NAME' },\r\n  { id: 'image', numeric: false, disablePadding: false, label: 'IMAGE' },\r\n  { id: 'price', numeric: true, disablePadding: false, label: 'PRICE' },\r\n  { id: 'category', numeric: false, disablePadding: false, label: 'CATEGORY' },\r\n  { id: 'brand', numeric: false, disablePadding: false, label: 'BRAND' },\r\n  { id: 'quantity', numeric: true, disablePadding: false, label: 'QUANTITY' },\r\n  { id: 'action', numeric: false, disablePadding: false, label: 'ACTION' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = products.map((product) => product._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n  const pageNumber = match.params.pageNumber || 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const {\r\n    loading: loadingCat,\r\n    error: errorCat,\r\n    category: categoryCat,\r\n  } = categoriesList\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products } = productList\r\n\r\n  const emptyRows =\r\n    products !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, products.length - page * rowsPerPage)\r\n\r\n  const productDelete = useSelector((state) => state.productDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = productDelete\r\n\r\n  const categoryDetails = useSelector((state) => state.categoryDetails)\r\n  const {\r\n    loading: loadingCatDe,\r\n    error: errorCatDe,\r\n    category: categoryCatDe,\r\n  } = categoryDetails\r\n\r\n  const productCreate = useSelector((state) => state.productCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    product: createdProduct,\r\n  } = productCreate\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const k = '6067d4b59f684c3fe0bd9def'\r\n\r\n  useEffect(() => {\r\n    if (!userInfo.isAdmin) {\r\n      history.push('/login')\r\n    }\r\n\r\n    if (userInfo) {\r\n      dispatch(listCategoriesAdm())\r\n      dispatch(getCategoryDetails(categoryCat.map((e) => e._id)))\r\n    }\r\n\r\n    if (successCreate) {\r\n      history.push(`/admin/product/${createdProduct._id}/edit`)\r\n    } else {\r\n      dispatch(listProducts('', pageNumber))\r\n    }\r\n  }, [dispatch, history, userInfo, successDelete, successCreate, createProduct])\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteProduct(id))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          ></Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 pr-4'>\r\n          <Row className='align-items-center'>\r\n            <Col>\r\n              <h4 className='text-uppercase'>Danh sách sản phẩm</h4>\r\n            </Col>\r\n            <Col className='text-right'>\r\n              <LinkContainer to='/admin/product/create'>\r\n                <Button\r\n                  variant='outline-light'\r\n                  className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                >\r\n                  <i className='fas fa-plus'></i> Thêm sản phẩm\r\n                </Button>\r\n              </LinkContainer>\r\n            </Col>\r\n          </Row>\r\n          {loadingDelete && <Loader />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n\r\n          {loading ? (\r\n            <Loader />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div className={classes.root}>\r\n                <Paper\r\n                  className={classes.paper}\r\n                  // style={{\r\n                  //   borderRadius: '1rem',\r\n                  //   border: '0.25px solid #ddd',\r\n                  // }}\r\n                >\r\n                  <TableContainer\r\n                    className='text-center p-2'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={products.length}\r\n                        colSpan={1}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(products, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((product, index) => {\r\n                            const isItemSelected = isSelected(product._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) =>\r\n                                  handleClick(event, product._id)\r\n                                }\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={product._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {product._id}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  align='left'\r\n                                  component='th'\r\n                                  className='text-center'\r\n                                >\r\n                                  {product.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  <Image\r\n                                    src={product.image}\r\n                                    fluid\r\n                                    className='rounded-circle p-1'\r\n                                  />\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  ${product.price}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {categoryCat &&\r\n                                    categoryCat.map(\r\n                                      (cat, index) =>\r\n                                        cat._id === product.category && cat.name\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {product.brand}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  align='center'\r\n                                  style={{ padding: '1px' }}\r\n                                >\r\n                                  {product.countInStock}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/product/${product._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-block rounded-pill btn_color_details'\r\n                                    >\r\n                                      <i className='far fa-edit'></i>\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={products.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductCreateScreen.js",["571","572","573","574"],"F:\\Code\\shopPro\\frontend\\src\\components\\ProtectedRoute.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierListScreen.js",["575","576","577"],"import Checkbox from '@material-ui/core/Checkbox'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { lighten, makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Close, Message } from '@material-ui/icons'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport clsx from 'clsx'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../notisfied.css'\r\nimport {\r\n  createSupplier,\r\n  deleteSupplier,\r\n  listSupplierAdm,\r\n} from '../../actions/supplierActions'\r\nimport Announcement from '../../components/Announcement'\r\nimport Loader from '../../components/Loader'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport SkeletonEffect from '../../components/SkeletonEffect'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'id',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ID',\r\n  },\r\n  { id: 'name', numeric: true, disablePadding: false, label: 'TÊN' },\r\n  {\r\n    id: 'create',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN TẠO',\r\n  },\r\n  {\r\n    id: 'update',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'THỜI GIAN CẬP NHẬT',\r\n  },\r\n\r\n  { id: 'action', numeric: true, disablePadding: false, label: '' },\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className='pl-5'\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n    align: 'center',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}))\r\n\r\nconst SupplierListScreen = () => {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = supplier.map((sup) => sup._id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const supplierListAdm = useSelector((state) => state.supplierListAdm)\r\n  const { loading, error, supplier } = supplierListAdm\r\n\r\n  const supplierDelete = useSelector((state) => state.supplierDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = supplierDelete\r\n\r\n  const supplierCreate = useSelector((state) => state.supplierCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    supplier: createdProduct,\r\n  } = supplierCreate\r\n\r\n  const emptyRows =\r\n    supplier !== undefined &&\r\n    rowsPerPage - Math.min(rowsPerPage, supplier.length - page * rowsPerPage)\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('Bạn có chắc?')) {\r\n      dispatch(deleteSupplier({ id }))\r\n      setSelected([])\r\n    }\r\n  }\r\n\r\n  const EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles()\r\n    const { numSelected } = props\r\n\r\n    const did = supplier.find((cat) => cat._id)\r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography\r\n            className={classes.title}\r\n            color='inherit'\r\n            variant='subtitle1'\r\n            component='div'\r\n          >\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            className={classes.title}\r\n            variant='h6'\r\n            id='tableTitle'\r\n            component='div'\r\n          >\r\n            <h2>DANH SÁCH NHÀ CUNG CẤP</h2>\r\n          </Typography>\r\n        )}\r\n\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton\r\n              aria-label='delete'\r\n              onClick={() => deleteHandle(selected)}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Toolbar>\r\n    )\r\n  }\r\n\r\n  EnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listSupplierAdm())\r\n    }\r\n  }, [dispatch, userInfo, successCreate, successDelete])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  const submitHandlerDetails = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createSupplier(name))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingDelete && (\r\n              <MessageSuccess variant='Đã xoá thành công'></MessageSuccess>\r\n            ) && <Loader />}\r\n          {errorDelete && <Message>{errorDelete}</Message>}\r\n          {loadingCreate && (\r\n            <MessageSuccess\r\n              variant={'Đã thêm ' + name + ' thành công'}\r\n            ></MessageSuccess>\r\n          )}\r\n          {errorCreate && <Message>{errorCreate}</Message>}\r\n          {loading ? (\r\n            <SkeletonEffect />\r\n          ) : error ? (\r\n            <Announcement variant='danger'>{error}</Announcement>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <Dialog\r\n                  disableBackdropClick\r\n                  disableEscapeKeyDown\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby='form-dialog-title'\r\n                  maxWidth='xl'\r\n                >\r\n                  <div className='d-flex justify-content-end'>\r\n                    <Button\r\n                      onClick={handleClose}\r\n                      className='p-1 m-1 rounded-pill'\r\n                      variant='light'\r\n                    >\r\n                      <Close />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <DialogContent style={{ width: '30rem' }}>\r\n                    <h4 className='text-center'>Thêm nhà cung cấp</h4>\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group>\r\n                        <Form.Label as='p' className='mb-1'>\r\n                          Tên nhà cung cấp\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='name'\r\n                          size='normal'\r\n                          placeholder='Enter name'\r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <div className='pl-3 pr-3 text-center'>\r\n                        <Button\r\n                          type='submit'\r\n                          size='sm'\r\n                          variant='outline-light'\r\n                          className='rounded-pill btn-b btn_color_created pl-5 pr-5'\r\n                          style={{\r\n                            fontSize: '1rem',\r\n                            letterSpacing: '0.25rem',\r\n                          }}\r\n                        >\r\n                          Tạo\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </DialogContent>\r\n                </Dialog>\r\n              </div>\r\n\r\n              <div className={classes.root}>\r\n                <div className='d-flex justify-content-end'>\r\n                  <Button\r\n                    variant='outline-dark'\r\n                    className='my-2 text-uppercase rounded-pill pt-2 pb-2'\r\n                    onClick={handleClickOpen}\r\n                    size='normal'\r\n                  >\r\n                    <i className='fas fa-plus'></i> Thêm nhà cung cấp\r\n                  </Button>\r\n                </div>\r\n                <Paper className={classes.paper}>\r\n                  <TableContainer\r\n                    className='text-center p-5'\r\n                    style={{\r\n                      borderRadius: '1rem',\r\n                    }}\r\n                  >\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <Table\r\n                      className={classes.table}\r\n                      aria-labelledby='tableTitle'\r\n                      size={dense ? 'small' : 'medium'}\r\n                      aria-label='enhanced table'\r\n                    >\r\n                      <EnhancedTableHead\r\n                        classes={classes}\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={supplier.length}\r\n                      />\r\n                      <TableBody>\r\n                        {stableSort(supplier, getComparator(order, orderBy))\r\n                          .slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((sup, index) => {\r\n                            const isItemSelected = isSelected(sup._id)\r\n                            const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                            return (\r\n                              <TableRow\r\n                                hover\r\n                                onClick={(event) => handleClick(event, sup._id)}\r\n                                role='checkbox'\r\n                                aria-checked={isItemSelected}\r\n                                tabIndex={-1}\r\n                                key={sup._id}\r\n                                selected={isItemSelected}\r\n                              >\r\n                                <TableCell padding='checkbox'>\r\n                                  <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                  />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                  component='th'\r\n                                  id={labelId}\r\n                                  scope='row'\r\n                                  padding='none'\r\n                                  align='center'\r\n                                >\r\n                                  {sup._id}\r\n                                </TableCell>\r\n                                <TableCell align='left' className='text-center'>\r\n                                  {sup.name}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      sup.createdAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - dd/MM/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell align='center'>\r\n                                  {format(\r\n                                    new utcToZonedTime(\r\n                                      sup.updatedAt,\r\n                                      'Asia/Ho_Chi_Minh'\r\n                                    ),\r\n                                    'HH:mm:ss - MM/dd/yyyy',\r\n                                    { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                  )}\r\n                                </TableCell>\r\n\r\n                                <TableCell align='center'>\r\n                                  <LinkContainer\r\n                                    to={`/admin/supplier/${sup._id}/edit`}\r\n                                  >\r\n                                    <Button\r\n                                      variant='outline-light'\r\n                                      className='btn-sm rounded-pill btn_color_details'\r\n                                    >\r\n                                      CHI TIẾT\r\n                                    </Button>\r\n                                  </LinkContainer>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            )\r\n                          })}\r\n                        {emptyRows > 0 && (\r\n                          <TableRow\r\n                            style={{ height: (dense ? 33 : 53) * emptyRows }}\r\n                          >\r\n                            <TableCell colSpan={6} />\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component='div'\r\n                    count={supplier.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n                </Paper>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch checked={dense} onChange={handleChangeDense} />\r\n                  }\r\n                  label='Dense padding'\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderListScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\CategoryEditScreen.js",["578","579"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from 'react-spinners/ClipLoader'\r\nimport {\r\n  getCategoryDetails,\r\n  updateCategory,\r\n} from '../../actions/categoryAction'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { CATEGORY_UPDATE_RESET } from '../../constants/categoriesConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nconst CategoryEditScreen = ({ match, history }) => {\r\n  const catId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const categoryDetails = useSelector((state) => state.categoryDetails)\r\n  const { loading, error, category } = categoryDetails\r\n\r\n  const categoryUpdate = useSelector((state) => state.categoryUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = categoryUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateCategory({ _id: catId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: CATEGORY_UPDATE_RESET })\r\n      history.push('/admin/categorieslist')\r\n    } else {\r\n      if (!category.name || category._id !== catId) {\r\n        dispatch(getCategoryDetails(catId))\r\n      } else {\r\n        setName(category.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, catId, category, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Row className='justify-content-center'>\r\n              <Col md={6}>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h2 className='text-center mb-4'>Chỉnh sửa danh mục</h2>\r\n                  <Form.Group>\r\n                    <Container>\r\n                      <Form.Label\r\n                        as='p'\r\n                        className='mb-1'\r\n                        style={{ fontSize: '1.5rem' }}\r\n                      >\r\n                        Tên danh mục\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        style={{ fontSize: '1.2rem' }}\r\n                        className='border border-grey rounded-pill'\r\n                        type='name'\r\n                        size='normal'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                      ></Form.Control>\r\n                    </Container>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn_color_created'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Cập nhật\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\OrderEditScreen.js",["580","581","582"],"import Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Col, Image, ListGroup, Row, Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getOrderDetails, updateOrder } from '../../actions/orderActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport { ORDER_UPDATE_RESET } from '../../constants/orderConstants'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { format, utcToZonedTime } from 'date-fns-tz'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nlet formatPhoneNumber = (str) => {\r\n  //Filter only numbers from the input\r\n  let cleaned = ('' + str).replace(/\\D/g, '')\r\n\r\n  //Check if the input is of correct length\r\n  let match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n\r\n  if (match) {\r\n    return '(' + match[1] + ') ' + match[2] + ' ' + match[3]\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nfunction formatMoney(n, currency) {\r\n  return n.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + currency\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 500,\r\n  },\r\n}))\r\n\r\nconst OrderEditScreen = ({ match, history }) => {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const orderId = match.params.id\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading } = orderDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const orderUpdate = useSelector((state) => state.orderUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = orderUpdate\r\n\r\n  const orderPay = useSelector((state) => state.orderPay)\r\n  const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n  const stateOrder = ['Chờ xác nhận', 'Đang vận chuyển', 'Đã giao hàng', 'Huỷ']\r\n  const [orderStatus, setOrderStatus] = useState('')\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateOrder({ _id: orderId, orderStatus }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: ORDER_UPDATE_RESET })\r\n    } else {\r\n      dispatch(getOrderDetails(orderId))\r\n    }\r\n  }, [dispatch, orderId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Form onSubmit={submitHandler}>\r\n              <ListGroup variant='flush' className='mt-3'>\r\n                <ListGroup.Item className='border-0'>\r\n                  <div className='text-center'>\r\n                    <h3 className='pl-2'>CHI TIẾT ĐƠN HÀNG</h3>\r\n                  </div>\r\n                  <Row>\r\n                    <Col md={6}>\r\n                      <p className='text-start'>\r\n                        Mã đơn hàng: <strong>{order._id}</strong>\r\n                      </p>\r\n                      <p className='text-start'>\r\n                        Tổng tiền: <strong>{order.totalPrice}đ</strong>\r\n                      </p>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel\r\n                          id='demo-controlled-open-select-label'\r\n                          style={{ fontSize: '1.2rem' }}\r\n                        >\r\n                          Trạng thái đơn hàng\r\n                        </InputLabel>\r\n                        <Select\r\n                          labelId='demo-controlled-open-select-label'\r\n                          id='demo-controlled-open-select'\r\n                          open={open}\r\n                          onClose={handleClose}\r\n                          onOpen={handleOpen}\r\n                          value={\r\n                            order.orderStatus ? order.orderStatus : orderStatus\r\n                          }\r\n                          onChange={(e) => setOrderStatus(e.target.value)}\r\n                          className='text-danger text-center text-uppercase'\r\n                        >\r\n                          {stateOrder.map((t) => (\r\n                            <MenuItem\r\n                              className='justify-content-center'\r\n                              value={t}\r\n                            >\r\n                              {t}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item className='border-0'>\r\n                  <Row>\r\n                    <Col md={6} className='border-0'>\r\n                      <Card\r\n                        className='rounded card_color'\r\n                        style={{ height: '11rem', backgroundColor: '#F8F8F8' }}\r\n                      >\r\n                        <CardContent>\r\n                          <h5 className='border-bottom border-info text-info pb-1'>\r\n                            Thông tin người nhận\r\n                          </h5>\r\n                          <div>\r\n                            <Row className='m-0'>\r\n                              <Col md={4}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Địa chỉ:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={8}>\r\n                                <strong>{order.user.name}</strong>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={4}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Tên khách hàng:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={8}>\r\n                                <p className='mb-1'>\r\n                                  {order.shippingAddress.diaChi}\r\n                                  {' - '}\r\n                                  {order.shippingAddress.xa}\r\n                                  {' - '}\r\n                                  {order.shippingAddress.huyen}\r\n                                  {' - '}\r\n                                  {order.shippingAddress.thanhPho}.\r\n                                </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={4}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Số điện thoại:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={8}>\r\n                                <p className='mb-1'>\r\n                                  {formatPhoneNumber(\r\n                                    order.shippingAddress.numberPhone\r\n                                  )}\r\n                                </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={4}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Email:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={8}>\r\n                                <p className='mb-1'>{order.user.email}</p>\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <Card\r\n                        className='rounded card_color'\r\n                        style={{ height: '11rem', backgroundColor: '#F8F8F8' }}\r\n                      >\r\n                        <CardContent>\r\n                          <h5 className='border-bottom border-info text-info pb-1'>\r\n                            Phương thức thanh toán\r\n                          </h5>\r\n                          <div>\r\n                            <Row className='m-0'>\r\n                              <Col md={5}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Phương thức:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={7} className='pt-1'>\r\n                                <strong\r\n                                  className='mb-0 text-capitalize'\r\n                                  style={{ letterSpacing: '0.1rem' }}\r\n                                >\r\n                                  {order.paymentMethod}\r\n                                </strong>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={5}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Thời gian thanh toán:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={7}>\r\n                                <p className='mb-1'>\r\n                                  {order.paymentMethod ===\r\n                                    'Thanh toán bằng tiền mặt' &&\r\n                                  order.isDelivered ? (\r\n                                    <strong className='mb-0'>\r\n                                      {format(\r\n                                        new utcToZonedTime(\r\n                                          order.deliveredAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                        ),\r\n                                        'HH:mm:ss - dd/MM/yyyy',\r\n                                        { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                      )}\r\n                                    </strong>\r\n                                  ) : order.paymentMethod ===\r\n                                    'Thanh toán bằng PayPal' ? (\r\n                                    <strong className='mb-0'>\r\n                                      {format(\r\n                                        new utcToZonedTime(\r\n                                          order.paidAt,\r\n                                          'Asia/Ho_Chi_Minh'\r\n                                        ),\r\n                                        'HH:mm:ss - dd/MM/yyyy',\r\n                                        { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                      )}\r\n                                    </strong>\r\n                                  ) : (\r\n                                    <div className='d-flex'>\r\n                                      <strong className='text-danger mb-0'>\r\n                                        Chưa thanh toán\r\n                                      </strong>\r\n                                    </div>\r\n                                  )}\r\n                                </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row className='m-0'>\r\n                              <Col md={5}>\r\n                                <p style={{ color: 'grey' }} className='mb-1'>\r\n                                  Thời gian nhận hàng:\r\n                                </p>\r\n                              </Col>\r\n                              <Col md={7}>\r\n                                {order.isDelivered ? (\r\n                                  <strong className='mb-0'>\r\n                                    {format(\r\n                                      new utcToZonedTime(\r\n                                        order.deliveredAt,\r\n                                        'Asia/Ho_Chi_Minh'\r\n                                      ),\r\n                                      'HH:mm:ss - dd/MM/yyyy',\r\n                                      { timeZone: 'Asia/Ho_Chi_Minh' }\r\n                                    )}\r\n                                  </strong>\r\n                                ) : (\r\n                                  <div className='d-flex'>\r\n                                    {/* <Image\r\n                                  src='https://img.icons8.com/fluent/24/000000/only-cash.png'\r\n                                  className='pr-1'\r\n                                /> */}\r\n                                    <strong className='text-danger mb-0'>\r\n                                      Chưa nhận hàng\r\n                                    </strong>\r\n                                  </div>\r\n                                )}\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item className='border-0'>\r\n                  <h5\r\n                    className='pb-1'\r\n                    style={{ borderBottom: '0.04rem solid #ddd' }}\r\n                  >\r\n                    Giỏ hàng\r\n                  </h5>\r\n\r\n                  <div className='rounded mt-3'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className='p-3 card_color shadow border mb-1'\r\n                        style={{ backgroundColor: '#F8F8F8' }}\r\n                      >\r\n                        <Row>\r\n                          <Col md={1} className='img_container'>\r\n                            <Image\r\n                              className='img_color'\r\n                              src={item.image}\r\n                              alt={item.name}\r\n                              fluid\r\n                              rounded\r\n                            />\r\n                          </Col>\r\n\r\n                          <Col md={7} className='text-center'>\r\n                            <Link\r\n                              to={`/product/${item.product}`}\r\n                              className='link-product fst-italic'\r\n                            >\r\n                              <p\r\n                                style={{ fontSize: '1.1rem' }}\r\n                                className='pt-3'\r\n                              >\r\n                                {item.name}\r\n                              </p>\r\n                            </Link>\r\n                          </Col>\r\n\r\n                          <Col md={4} className='text-center'>\r\n                            <p\r\n                              style={{ fontSize: '1.1rem' }}\r\n                              className='pt-3 fst-italic'\r\n                            >\r\n                              {item.qty} x {formatMoney(item.price, 'đ')}\r\n                              {' = '}\r\n                              {formatMoney(item.qty * item.price, 'đ')}\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item className='border-0'>\r\n                  <div\r\n                    className='d-flex justify-content-end '\r\n                    style={{ borderTop: '0.04rem solid #ddd' }}\r\n                  >\r\n                    <Button\r\n                      type='submit'\r\n                      variant='outline-light rounded-pill mt-4 btn_color_pink'\r\n                      size='normal'\r\n                      style={{\r\n                        width: '14rem',\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                      }}\r\n                    >\r\n                      DUYỆT\r\n                    </Button>\r\n                  </div>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Form>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\ProductEditScreen.js",["583","584","585"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { listCategoriesAdm } from '../../actions/categoryAction'\r\nimport { listProductDetails, updateProduct } from '../../actions/productActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { PRODUCT_UPDATE_RESET } from '../../constants/productConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const categoriesList = useSelector((state) => state.categoriesList)\r\n  const {\r\n    loading: loadingCat,\r\n    error: errorCat,\r\n    category: categoryCat,\r\n  } = categoriesList\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      // history.push('/admin/productlist')\r\n    } else {\r\n      if (!product.name || product._id !== productId) {\r\n        if (userInfo) {\r\n          dispatch(listProductDetails(productId))\r\n          dispatch(listCategoriesAdm())\r\n        }\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInStock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, userInfo, history, productId, product, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          <Container>\r\n            {loadingUpdate && (\r\n                <MessageSuccess variant='Đã cập nhật thành công'></MessageSuccess>\r\n              ) && <Loader />}\r\n            {errorUpdate && <Message>{errorUpdate}</Message>}\r\n            {loading ? (\r\n              <Loader />\r\n            ) : error ? (\r\n              <Message>{error}</Message>\r\n            ) : (\r\n              <>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h2 className='text-center mb-4'>Cập nhật sản phẩm</h2>\r\n\r\n                  <Form.Group controlId='name' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Name\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='name'\r\n                      placeholder='Enter name'\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId='image' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Image\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey'\r\n                      type='text'\r\n                      placeholder='Enter image url'\r\n                      value={image}\r\n                      onChange={(e) => setImage(e.target.value)}\r\n                    ></Form.Control>\r\n                    <Form.File\r\n                      className='border border-grey'\r\n                      id='image-file'\r\n                      label='Choose File'\r\n                      custom\r\n                      onChange={uploadFileHandler}\r\n                    ></Form.File>\r\n                    {uploading && <Loader />}\r\n                  </Form.Group>\r\n\r\n                  <Row>\r\n                    <Col md={3}>\r\n                      <Form.Group controlId='brand' className='pl-3 pr-3'>\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Brand\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill'\r\n                          type='text'\r\n                          placeholder='Enter brand'\r\n                          value={brand}\r\n                          onChange={(e) => setBrand(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group\r\n                        controlId='countInStock'\r\n                        className='pl-3 pr-3'\r\n                      >\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Count In Stock\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill text-center'\r\n                          type='number'\r\n                          placeholder='Enter countInStock'\r\n                          value={countInStock}\r\n                          onChange={(e) => setCountInStock(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group controlId='category' className='pl-3 pr-3'>\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Category\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill '\r\n                          type='text'\r\n                          as='select'\r\n                          placeholder='Enter category'\r\n                          value={category}\r\n                          onChange={(e) => setCategory(e.target.value)}\r\n                        >\r\n                          <option></option>\r\n                          {categoryCat &&\r\n                            categoryCat.map((cat, index) => (\r\n                              <option\r\n                                style={{ color: 'black' }}\r\n                                key={index}\r\n                                value={cat._id}\r\n                              >\r\n                                {cat.name}\r\n                              </option>\r\n                            ))}\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <Form.Group controlId='price' className='pl-3 pr-3'>\r\n                        <Form.Label as='p' className='mb-1 text-center'>\r\n                          Price\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          className='border border-grey rounded-pill text-center'\r\n                          type='number'\r\n                          placeholder='Enter price'\r\n                          value={price}\r\n                          onChange={(e) => setPrice(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Form.Group controlId='description' className='pl-3 pr-3'>\r\n                    <Form.Label as='p' className='mb-1'>\r\n                      Description\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      className='border border-grey rounded-pill'\r\n                      type='text'\r\n                      rows={3}\r\n                      as='textarea'\r\n                      placeholder='Enter description'\r\n                      value={description}\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      variant='outline-success'\r\n                      className='rounded-pill'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </Container>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\SupplierEditScreen.js",["586"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {\r\n  getSupplierDetails,\r\n  updateSupplier,\r\n} from '../../actions/supplierActions'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { SUPPLIER_UPDATE_RESET } from '../../constants/supplierConstants'\r\nimport SideBar from './components/SideBar'\r\nimport Header from './components/Header'\r\n\r\nconst SupplierEditScreen = ({ history, match }) => {\r\n  const supId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const supplierDetails = useSelector((state) => state.supplierDetails)\r\n  const { loading, error, supplier } = supplierDetails\r\n\r\n  const supplierUpdate = useSelector((state) => state.supplierUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = supplierUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateSupplier({ _id: supId, name }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: SUPPLIER_UPDATE_RESET })\r\n      history.push('/admin/supplierlist')\r\n    } else {\r\n      if (!supplier.name || supplier._id !== supId) {\r\n        dispatch(getSupplierDetails(supId))\r\n      } else {\r\n        setName(supplier.name)\r\n      }\r\n    }\r\n  }, [dispatch, history, supId, supplier, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          {loadingUpdate && (\r\n            <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n          )}\r\n          {errorUpdate && <Message>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <Row className='justify-content-center'>\r\n              <Col md={6}>\r\n                <Form\r\n                  onSubmit={submitHandler}\r\n                  className='p-4 bg-light shadow card_color'\r\n                  fluid\r\n                >\r\n                  <h3 className='text-center mb-4'>\r\n                    Chỉnh sửa thông tin nhà cung cấp\r\n                  </h3>\r\n                  <Form.Group>\r\n                    <Container>\r\n                      <Form.Label\r\n                        as='p'\r\n                        className='mb-1'\r\n                        style={{ fontSize: '1rem' }}\r\n                      >\r\n                        Tên nhà cung cấp\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        style={{ fontSize: '1rem' }}\r\n                        className='border border-grey rounded-pill'\r\n                        type='name'\r\n                        size='sm'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                      ></Form.Control>\r\n                    </Container>\r\n                  </Form.Group>\r\n                  <div className='pl-3 pr-3 text-center'>\r\n                    <Button\r\n                      type='submit'\r\n                      size='sm'\r\n                      variant='outline-light'\r\n                      className='rounded-pill btn_color_created'\r\n                      style={{\r\n                        fontSize: '1rem',\r\n                        letterSpacing: '0.25rem',\r\n                        width: '20rem',\r\n                      }}\r\n                    >\r\n                      Cập nhật\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SupplierEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\admin\\UserEditScreen.js",["587","588","589"],"import { Switch } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../../actions/userActions'\r\nimport FormContainer from '../../components/FormContainer'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport MessageSuccess from '../../components/MessageSuccess'\r\nimport { USER_UPDATE_RESET } from '../../constants/userConstants'\r\nimport Header from './components/Header'\r\nimport SideBar from './components/SideBar'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const [state, setState] = useState(false)\r\n\r\n  const handleChange = () => {\r\n    setState(!state)\r\n  }\r\n\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin, password }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row style={{ backgroundColor: '#b68973' }}>\r\n        <Col md={2} className='p-0'>\r\n          <SideBar />\r\n        </Col>\r\n        <Col md={10} className='pl-0 mt-3'>\r\n          <div className='d-flex justify-content-center'>\r\n            {loadingUpdate && <Loader /> && (\r\n              <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess>\r\n            )}\r\n            {errorUpdate && <Message>{errorUpdate}</Message>}\r\n            {loading ? (\r\n              <Loader />\r\n            ) : (\r\n              <Form\r\n                onSubmit={submitHandler}\r\n                className='bg-light p-3 card_color '\r\n                style={{ width: '50rem' }}\r\n              >\r\n                <h2 className='mt-3 text-center'>Cập nhật người dùng</h2>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='name'>\r\n                      <Form.Label>\r\n                        <strong>Tên</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='name'\r\n                        placeholder='Nhập tên'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        className='rounded-pill border-1'\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='email'>\r\n                      <Form.Label>\r\n                        <strong>Địa chỉ email</strong>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type='email'\r\n                        placeholder='Enter email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        className='rounded-pill border-1'\r\n                      ></Form.Control>\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Form.Group\r\n                  controlId='idAdmin'\r\n                  className='d-flex justify-content-start'\r\n                >\r\n                  <Form.Check\r\n                    type='checkbox'\r\n                    label='Người quản lí'\r\n                    size='lg'\r\n                    checked={isAdmin}\r\n                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                  ></Form.Check>\r\n                </Form.Group>\r\n                <div className='d-flex align-items-center'>\r\n                  <Switch\r\n                    value={state}\r\n                    onChange={handleChange}\r\n                    color='secondary'\r\n                    name='checkedB'\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                  />\r\n                  {state === true ? (\r\n                    <p className='mb-0' style={{ opacity: '1' }}>\r\n                      <strong>Đổi mật khẩu</strong>\r\n                      <Image\r\n                        style={{ opacity: '1' }}\r\n                        src='https://img.icons8.com/fluent/32/000000/unlock-2.png'\r\n                      />\r\n                    </p>\r\n                  ) : (\r\n                    <p className='mb-0' style={{ opacity: '0.7' }}>\r\n                      Đổi mật khẩu\r\n                      <Image\r\n                        style={{ opacity: '1' }}\r\n                        src='https://img.icons8.com/fluent/32/000000/lock-2.png'\r\n                      />\r\n                    </p>\r\n                  )}\r\n                </div>\r\n                <Row>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='password' fluid>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Mật khẩu mới</strong>\r\n                      </Form.Label>\r\n                      {state === true ? (\r\n                        <>\r\n                          <Form.Control\r\n                            className='border-1 border-grey rounded-pill '\r\n                            type='password'\r\n                            placeholder='Nhập mật khẩu mới'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                          ></Form.Control>\r\n                        </>\r\n                      ) : (\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill '\r\n                          type='password'\r\n                          placeholder='Nhập mật khẩu mới'\r\n                          value={password}\r\n                          onChange={(e) => setPassword(e.target.value)}\r\n                          disabled\r\n                          // style={{ visibility: 'hidden' }}\r\n                        ></Form.Control>\r\n                      )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <Form.Group controlId='password'>\r\n                      <Form.Label as='p' className='mb-1'>\r\n                        <strong>Nhập lại mật khẩu</strong>\r\n                      </Form.Label>\r\n                      {state === true ? (\r\n                        <>\r\n                          <Form.Control\r\n                            className='border-1 border-grey rounded-pill'\r\n                            type='password'\r\n                            placeholder='Nhập lại mật khẩu'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                          ></Form.Control>\r\n                        </>\r\n                      ) : (\r\n                        <Form.Control\r\n                          className='border-1 border-grey rounded-pill'\r\n                          type='password'\r\n                          placeholder='Nhập lại mật khẩu'\r\n                          value={confirmPassword}\r\n                          onChange={(e) => setConfirmPassword(e.target.value)}\r\n                          disabled\r\n                          // style={{ visibility: 'hidden' }}\r\n                        ></Form.Control>\r\n                      )}\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Row>\r\n                <div className='pl-3 pr-3 text-center'>\r\n                  <Button\r\n                    type='submit'\r\n                    variant='outline-light'\r\n                    className='rounded-pill btn_color_created'\r\n                    style={{\r\n                      fontSize: '1rem',\r\n                      letterSpacing: '0.25rem',\r\n                      width: '15rem',\r\n                    }}\r\n                  >\r\n                    Cập nhật\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n",{"ruleId":"590","replacedBy":"591"},{"ruleId":"592","replacedBy":"593"},{"ruleId":"594","severity":1,"message":"595","line":47,"column":11,"nodeType":"596","messageId":"597","endLine":47,"endColumn":15},{"ruleId":"594","severity":1,"message":"598","line":22,"column":41,"nodeType":"596","messageId":"597","endLine":22,"endColumn":52},{"ruleId":"594","severity":1,"message":"599","line":30,"column":7,"nodeType":"596","messageId":"597","endLine":30,"endColumn":17},{"ruleId":"594","severity":1,"message":"600","line":50,"column":7,"nodeType":"596","messageId":"597","endLine":50,"endColumn":21},{"ruleId":"594","severity":1,"message":"601","line":105,"column":9,"nodeType":"596","messageId":"597","endLine":105,"endColumn":19},{"ruleId":"594","severity":1,"message":"602","line":107,"column":10,"nodeType":"596","messageId":"597","endLine":107,"endColumn":18},{"ruleId":"594","severity":1,"message":"603","line":110,"column":9,"nodeType":"596","messageId":"597","endLine":110,"endColumn":20},{"ruleId":"594","severity":1,"message":"604","line":114,"column":9,"nodeType":"596","messageId":"597","endLine":114,"endColumn":13},{"ruleId":"605","severity":1,"message":"606","line":117,"column":9,"nodeType":"607","endLine":117,"endColumn":42},{"ruleId":"605","severity":1,"message":"606","line":120,"column":9,"nodeType":"607","endLine":120,"endColumn":40},{"ruleId":"594","severity":1,"message":"608","line":131,"column":11,"nodeType":"596","messageId":"597","endLine":131,"endColumn":18},{"ruleId":"594","severity":1,"message":"609","line":131,"column":20,"nodeType":"596","messageId":"597","endLine":131,"endColumn":27},{"ruleId":"610","severity":1,"message":"611","line":176,"column":6,"nodeType":"612","endLine":176,"endColumn":28,"suggestions":"613"},{"ruleId":"605","severity":1,"message":"606","line":518,"column":31,"nodeType":"607","endLine":518,"endColumn":41},{"ruleId":"605","severity":1,"message":"606","line":521,"column":31,"nodeType":"607","endLine":521,"endColumn":41},{"ruleId":"594","severity":1,"message":"614","line":3,"column":15,"nodeType":"596","messageId":"597","endLine":3,"endColumn":24},{"ruleId":"594","severity":1,"message":"615","line":4,"column":10,"nodeType":"596","messageId":"597","endLine":4,"endColumn":23},{"ruleId":"594","severity":1,"message":"616","line":5,"column":22,"nodeType":"596","messageId":"597","endLine":5,"endColumn":32},{"ruleId":"594","severity":1,"message":"617","line":13,"column":8,"nodeType":"596","messageId":"597","endLine":13,"endColumn":23},{"ruleId":"594","severity":1,"message":"595","line":28,"column":11,"nodeType":"596","messageId":"597","endLine":28,"endColumn":15},{"ruleId":"594","severity":1,"message":"618","line":24,"column":8,"nodeType":"596","messageId":"597","endLine":24,"endColumn":22},{"ruleId":"594","severity":1,"message":"619","line":30,"column":8,"nodeType":"596","messageId":"597","endLine":30,"endColumn":22},{"ruleId":"594","severity":1,"message":"620","line":12,"column":17,"nodeType":"596","messageId":"597","endLine":12,"endColumn":27},{"ruleId":"594","severity":1,"message":"621","line":13,"column":15,"nodeType":"596","messageId":"597","endLine":13,"endColumn":23},{"ruleId":"594","severity":1,"message":"622","line":14,"column":3,"nodeType":"596","messageId":"597","endLine":14,"endColumn":16},{"ruleId":"594","severity":1,"message":"623","line":20,"column":10,"nodeType":"596","messageId":"597","endLine":20,"endColumn":24},{"ruleId":"594","severity":1,"message":"608","line":57,"column":11,"nodeType":"596","messageId":"597","endLine":57,"endColumn":18},{"ruleId":"594","severity":1,"message":"624","line":57,"column":20,"nodeType":"596","messageId":"597","endLine":57,"endColumn":25},{"ruleId":"594","severity":1,"message":"595","line":57,"column":27,"nodeType":"596","messageId":"597","endLine":57,"endColumn":31},{"ruleId":"594","severity":1,"message":"625","line":3,"column":3,"nodeType":"596","messageId":"597","endLine":3,"endColumn":17},{"ruleId":"594","severity":1,"message":"626","line":4,"column":3,"nodeType":"596","messageId":"597","endLine":4,"endColumn":20},{"ruleId":"594","severity":1,"message":"627","line":5,"column":3,"nodeType":"596","messageId":"597","endLine":5,"endColumn":20},{"ruleId":"594","severity":1,"message":"628","line":6,"column":3,"nodeType":"596","messageId":"597","endLine":6,"endColumn":13},{"ruleId":"594","severity":1,"message":"629","line":7,"column":3,"nodeType":"596","messageId":"597","endLine":7,"endColumn":16},{"ruleId":"594","severity":1,"message":"630","line":8,"column":3,"nodeType":"596","messageId":"597","endLine":8,"endColumn":16},{"ruleId":"594","severity":1,"message":"631","line":9,"column":3,"nodeType":"596","messageId":"597","endLine":9,"endColumn":14},{"ruleId":"594","severity":1,"message":"632","line":10,"column":3,"nodeType":"596","messageId":"597","endLine":10,"endColumn":17},{"ruleId":"594","severity":1,"message":"633","line":11,"column":3,"nodeType":"596","messageId":"597","endLine":11,"endColumn":21},{"ruleId":"594","severity":1,"message":"634","line":12,"column":3,"nodeType":"596","messageId":"597","endLine":12,"endColumn":24},{"ruleId":"594","severity":1,"message":"635","line":7,"column":8,"nodeType":"596","messageId":"597","endLine":7,"endColumn":21},{"ruleId":"594","severity":1,"message":"636","line":8,"column":8,"nodeType":"596","messageId":"597","endLine":8,"endColumn":14},{"ruleId":"594","severity":1,"message":"637","line":15,"column":7,"nodeType":"596","messageId":"597","endLine":15,"endColumn":18},{"ruleId":"594","severity":1,"message":"638","line":22,"column":10,"nodeType":"596","messageId":"597","endLine":22,"endColumn":14},{"ruleId":"594","severity":1,"message":"639","line":23,"column":10,"nodeType":"596","messageId":"597","endLine":23,"endColumn":14},{"ruleId":"594","severity":1,"message":"640","line":24,"column":10,"nodeType":"596","messageId":"597","endLine":24,"endColumn":15},{"ruleId":"594","severity":1,"message":"641","line":35,"column":13,"nodeType":"596","messageId":"597","endLine":35,"endColumn":18},{"ruleId":"594","severity":1,"message":"642","line":17,"column":3,"nodeType":"596","messageId":"597","endLine":17,"endColumn":25},{"ruleId":"594","severity":1,"message":"643","line":18,"column":3,"nodeType":"596","messageId":"597","endLine":18,"endColumn":28},{"ruleId":"594","severity":1,"message":"644","line":19,"column":3,"nodeType":"596","messageId":"597","endLine":19,"endColumn":28},{"ruleId":"645","severity":1,"message":"646","line":166,"column":7,"nodeType":"647","messageId":"648","endLine":166,"endColumn":11},{"ruleId":"645","severity":1,"message":"646","line":167,"column":7,"nodeType":"647","messageId":"648","endLine":167,"endColumn":11},{"ruleId":"594","severity":1,"message":"635","line":6,"column":8,"nodeType":"596","messageId":"597","endLine":6,"endColumn":21},{"ruleId":"594","severity":1,"message":"649","line":10,"column":10,"nodeType":"596","messageId":"597","endLine":10,"endColumn":16},{"ruleId":"594","severity":1,"message":"650","line":10,"column":18,"nodeType":"596","messageId":"597","endLine":10,"endColumn":25},{"ruleId":"594","severity":1,"message":"651","line":11,"column":10,"nodeType":"596","messageId":"597","endLine":11,"endColumn":25},{"ruleId":"594","severity":1,"message":"652","line":11,"column":27,"nodeType":"596","messageId":"597","endLine":11,"endColumn":39},{"ruleId":"594","severity":1,"message":"653","line":12,"column":8,"nodeType":"596","messageId":"597","endLine":12,"endColumn":14},{"ruleId":"594","severity":1,"message":"654","line":32,"column":9,"nodeType":"596","messageId":"597","endLine":32,"endColumn":16},{"ruleId":"594","severity":1,"message":"655","line":25,"column":8,"nodeType":"596","messageId":"597","endLine":25,"endColumn":14},{"ruleId":"594","severity":1,"message":"608","line":64,"column":11,"nodeType":"596","messageId":"597","endLine":64,"endColumn":18},{"ruleId":"594","severity":1,"message":"656","line":74,"column":19,"nodeType":"596","messageId":"597","endLine":74,"endColumn":29},{"ruleId":"594","severity":1,"message":"657","line":88,"column":20,"nodeType":"596","messageId":"597","endLine":88,"endColumn":33},{"ruleId":"610","severity":1,"message":"658","line":243,"column":6,"nodeType":"612","endLine":243,"endColumn":41,"suggestions":"659"},{"ruleId":"594","severity":1,"message":"635","line":6,"column":8,"nodeType":"596","messageId":"597","endLine":6,"endColumn":21},{"ruleId":"594","severity":1,"message":"608","line":15,"column":28,"nodeType":"596","messageId":"597","endLine":15,"endColumn":35},{"ruleId":"594","severity":1,"message":"624","line":18,"column":39,"nodeType":"596","messageId":"597","endLine":18,"endColumn":44},{"ruleId":"590","replacedBy":"660"},{"ruleId":"592","replacedBy":"661"},{"ruleId":"594","severity":1,"message":"635","line":8,"column":8,"nodeType":"596","messageId":"597","endLine":8,"endColumn":21},{"ruleId":"594","severity":1,"message":"662","line":1,"column":28,"nodeType":"596","messageId":"597","endLine":1,"endColumn":36},{"ruleId":"610","severity":1,"message":"663","line":83,"column":6,"nodeType":"612","endLine":83,"endColumn":24,"suggestions":"664"},{"ruleId":"594","severity":1,"message":"665","line":54,"column":23,"nodeType":"596","messageId":"597","endLine":54,"endColumn":37},{"ruleId":"594","severity":1,"message":"666","line":67,"column":14,"nodeType":"596","messageId":"597","endLine":67,"endColumn":29},{"ruleId":"610","severity":1,"message":"667","line":114,"column":6,"nodeType":"612","endLine":114,"endColumn":77,"suggestions":"668"},{"ruleId":"594","severity":1,"message":"669","line":262,"column":11,"nodeType":"596","messageId":"597","endLine":262,"endColumn":14},{"ruleId":"590","replacedBy":"670"},{"ruleId":"592","replacedBy":"671"},{"ruleId":"594","severity":1,"message":"624","line":24,"column":20,"nodeType":"596","messageId":"597","endLine":24,"endColumn":25},{"ruleId":"610","severity":1,"message":"672","line":51,"column":6,"nodeType":"612","endLine":51,"endColumn":45,"suggestions":"673"},{"ruleId":"594","severity":1,"message":"674","line":1,"column":10,"nodeType":"596","messageId":"597","endLine":1,"endColumn":14},{"ruleId":"594","severity":1,"message":"675","line":27,"column":8,"nodeType":"596","messageId":"597","endLine":27,"endColumn":16},{"ruleId":"594","severity":1,"message":"676","line":256,"column":14,"nodeType":"596","messageId":"597","endLine":256,"endColumn":24},{"ruleId":"594","severity":1,"message":"677","line":257,"column":12,"nodeType":"596","messageId":"597","endLine":257,"endColumn":20},{"ruleId":"594","severity":1,"message":"678","line":277,"column":14,"nodeType":"596","messageId":"597","endLine":277,"endColumn":26},{"ruleId":"594","severity":1,"message":"679","line":278,"column":12,"nodeType":"596","messageId":"597","endLine":278,"endColumn":22},{"ruleId":"594","severity":1,"message":"680","line":279,"column":15,"nodeType":"596","messageId":"597","endLine":279,"endColumn":28},{"ruleId":"594","severity":1,"message":"681","line":284,"column":14,"nodeType":"596","messageId":"597","endLine":284,"endColumn":27},{"ruleId":"594","severity":1,"message":"682","line":285,"column":12,"nodeType":"596","messageId":"597","endLine":285,"endColumn":23},{"ruleId":"594","severity":1,"message":"683","line":293,"column":9,"nodeType":"596","messageId":"597","endLine":293,"endColumn":10},{"ruleId":"610","severity":1,"message":"684","line":310,"column":6,"nodeType":"612","endLine":310,"endColumn":80,"suggestions":"685"},{"ruleId":"594","severity":1,"message":"676","line":35,"column":14,"nodeType":"596","messageId":"597","endLine":35,"endColumn":24},{"ruleId":"594","severity":1,"message":"677","line":36,"column":12,"nodeType":"596","messageId":"597","endLine":36,"endColumn":20},{"ruleId":"594","severity":1,"message":"686","line":2,"column":24,"nodeType":"596","messageId":"597","endLine":2,"endColumn":29},{"ruleId":"594","severity":1,"message":"687","line":2,"column":31,"nodeType":"596","messageId":"597","endLine":2,"endColumn":41},{"ruleId":"594","severity":1,"message":"688","line":4,"column":10,"nodeType":"596","messageId":"597","endLine":4,"endColumn":20},{"ruleId":"594","severity":1,"message":"689","line":4,"column":22,"nodeType":"596","messageId":"597","endLine":4,"endColumn":31},{"ruleId":"594","severity":1,"message":"690","line":4,"column":33,"nodeType":"596","messageId":"597","endLine":4,"endColumn":38},{"ruleId":"594","severity":1,"message":"691","line":1,"column":8,"nodeType":"596","messageId":"597","endLine":1,"endColumn":30},{"ruleId":"594","severity":1,"message":"692","line":2,"column":8,"nodeType":"596","messageId":"597","endLine":2,"endColumn":24},{"ruleId":"594","severity":1,"message":"686","line":4,"column":23,"nodeType":"596","messageId":"597","endLine":4,"endColumn":28},{"ruleId":"594","severity":1,"message":"693","line":7,"column":10,"nodeType":"596","messageId":"597","endLine":7,"endColumn":15},{"ruleId":"594","severity":1,"message":"623","line":10,"column":10,"nodeType":"596","messageId":"597","endLine":10,"endColumn":24},{"ruleId":"594","severity":1,"message":"694","line":10,"column":26,"nodeType":"596","messageId":"597","endLine":10,"endColumn":43},{"ruleId":"594","severity":1,"message":"638","line":23,"column":10,"nodeType":"596","messageId":"597","endLine":23,"endColumn":14},{"ruleId":"594","severity":1,"message":"695","line":23,"column":16,"nodeType":"596","messageId":"597","endLine":23,"endColumn":23},{"ruleId":"594","severity":1,"message":"696","line":24,"column":10,"nodeType":"596","messageId":"597","endLine":24,"endColumn":15},{"ruleId":"594","severity":1,"message":"697","line":24,"column":17,"nodeType":"596","messageId":"597","endLine":24,"endColumn":25},{"ruleId":"594","severity":1,"message":"698","line":25,"column":10,"nodeType":"596","messageId":"597","endLine":25,"endColumn":18},{"ruleId":"594","severity":1,"message":"699","line":25,"column":20,"nodeType":"596","messageId":"597","endLine":25,"endColumn":31},{"ruleId":"594","severity":1,"message":"700","line":26,"column":10,"nodeType":"596","messageId":"597","endLine":26,"endColumn":25},{"ruleId":"594","severity":1,"message":"701","line":26,"column":27,"nodeType":"596","messageId":"597","endLine":26,"endColumn":45},{"ruleId":"594","severity":1,"message":"702","line":27,"column":10,"nodeType":"596","messageId":"597","endLine":27,"endColumn":17},{"ruleId":"594","severity":1,"message":"656","line":27,"column":19,"nodeType":"596","messageId":"597","endLine":27,"endColumn":29},{"ruleId":"594","severity":1,"message":"608","line":32,"column":11,"nodeType":"596","messageId":"597","endLine":32,"endColumn":18},{"ruleId":"594","severity":1,"message":"624","line":32,"column":20,"nodeType":"596","messageId":"597","endLine":32,"endColumn":25},{"ruleId":"594","severity":1,"message":"609","line":38,"column":11,"nodeType":"596","messageId":"597","endLine":38,"endColumn":18},{"ruleId":"594","severity":1,"message":"703","line":64,"column":11,"nodeType":"596","messageId":"597","endLine":64,"endColumn":19},{"ruleId":"594","severity":1,"message":"704","line":74,"column":20,"nodeType":"596","messageId":"597","endLine":74,"endColumn":30},{"ruleId":"594","severity":1,"message":"705","line":74,"column":41,"nodeType":"596","messageId":"597","endLine":74,"endColumn":51},{"ruleId":"594","severity":1,"message":"706","line":7,"column":8,"nodeType":"596","messageId":"597","endLine":7,"endColumn":20},{"ruleId":"594","severity":1,"message":"707","line":8,"column":8,"nodeType":"596","messageId":"597","endLine":8,"endColumn":20},{"ruleId":"594","severity":1,"message":"708","line":9,"column":8,"nodeType":"596","messageId":"597","endLine":9,"endColumn":22},{"ruleId":"594","severity":1,"message":"709","line":13,"column":17,"nodeType":"596","messageId":"597","endLine":13,"endColumn":26},{"ruleId":"594","severity":1,"message":"710","line":14,"column":10,"nodeType":"596","messageId":"597","endLine":14,"endColumn":21},{"ruleId":"594","severity":1,"message":"711","line":15,"column":10,"nodeType":"596","messageId":"597","endLine":15,"endColumn":13},{"ruleId":"594","severity":1,"message":"686","line":15,"column":15,"nodeType":"596","messageId":"597","endLine":15,"endColumn":20},{"ruleId":"594","severity":1,"message":"712","line":15,"column":22,"nodeType":"596","messageId":"597","endLine":15,"endColumn":31},{"ruleId":"594","severity":1,"message":"713","line":15,"column":33,"nodeType":"596","messageId":"597","endLine":15,"endColumn":36},{"ruleId":"594","severity":1,"message":"714","line":15,"column":38,"nodeType":"596","messageId":"597","endLine":15,"endColumn":44},{"ruleId":"594","severity":1,"message":"715","line":15,"column":46,"nodeType":"596","messageId":"597","endLine":15,"endColumn":50},{"ruleId":"594","severity":1,"message":"716","line":168,"column":10,"nodeType":"596","messageId":"597","endLine":168,"endColumn":20},{"ruleId":"594","severity":1,"message":"608","line":171,"column":18,"nodeType":"596","messageId":"597","endLine":171,"endColumn":25},{"ruleId":"594","severity":1,"message":"624","line":171,"column":27,"nodeType":"596","messageId":"597","endLine":171,"endColumn":32},{"ruleId":"594","severity":1,"message":"717","line":291,"column":15,"nodeType":"596","messageId":"597","endLine":291,"endColumn":29},{"ruleId":"594","severity":1,"message":"669","line":309,"column":11,"nodeType":"596","messageId":"597","endLine":309,"endColumn":14},{"ruleId":"594","severity":1,"message":"712","line":2,"column":40,"nodeType":"596","messageId":"597","endLine":2,"endColumn":49},{"ruleId":"594","severity":1,"message":"624","line":18,"column":20,"nodeType":"596","messageId":"597","endLine":18,"endColumn":25},{"ruleId":"594","severity":1,"message":"618","line":10,"column":8,"nodeType":"596","messageId":"597","endLine":10,"endColumn":22},{"ruleId":"594","severity":1,"message":"676","line":37,"column":20,"nodeType":"596","messageId":"597","endLine":37,"endColumn":30},{"ruleId":"594","severity":1,"message":"677","line":37,"column":39,"nodeType":"596","messageId":"597","endLine":37,"endColumn":47},{"ruleId":"594","severity":1,"message":"653","line":13,"column":8,"nodeType":"596","messageId":"597","endLine":13,"endColumn":14},{"ruleId":"594","severity":1,"message":"718","line":15,"column":8,"nodeType":"596","messageId":"597","endLine":15,"endColumn":16},{"ruleId":"594","severity":1,"message":"719","line":16,"column":8,"nodeType":"596","messageId":"597","endLine":16,"endColumn":16},{"ruleId":"594","severity":1,"message":"720","line":32,"column":9,"nodeType":"596","messageId":"597","endLine":32,"endColumn":16},{"ruleId":"594","severity":1,"message":"721","line":33,"column":9,"nodeType":"596","messageId":"597","endLine":33,"endColumn":19},{"ruleId":"594","severity":1,"message":"654","line":36,"column":9,"nodeType":"596","messageId":"597","endLine":36,"endColumn":16},{"ruleId":"594","severity":1,"message":"722","line":38,"column":9,"nodeType":"596","messageId":"597","endLine":38,"endColumn":21},{"ruleId":"594","severity":1,"message":"603","line":42,"column":9,"nodeType":"596","messageId":"597","endLine":42,"endColumn":20},{"ruleId":"594","severity":1,"message":"676","line":52,"column":20,"nodeType":"596","messageId":"597","endLine":52,"endColumn":30},{"ruleId":"594","severity":1,"message":"723","line":52,"column":41,"nodeType":"596","messageId":"597","endLine":52,"endColumn":51},{"ruleId":"594","severity":1,"message":"724","line":52,"column":53,"nodeType":"596","messageId":"597","endLine":52,"endColumn":61},{"ruleId":"594","severity":1,"message":"725","line":60,"column":14,"nodeType":"596","messageId":"597","endLine":60,"endColumn":27},{"ruleId":"594","severity":1,"message":"726","line":66,"column":14,"nodeType":"596","messageId":"597","endLine":66,"endColumn":32},{"ruleId":"594","severity":1,"message":"727","line":67,"column":14,"nodeType":"596","messageId":"597","endLine":67,"endColumn":32},{"ruleId":"594","severity":1,"message":"728","line":1,"column":24,"nodeType":"596","messageId":"597","endLine":1,"endColumn":38},{"ruleId":"594","severity":1,"message":"711","line":11,"column":10,"nodeType":"596","messageId":"597","endLine":11,"endColumn":13},{"ruleId":"594","severity":1,"message":"713","line":11,"column":22,"nodeType":"596","messageId":"597","endLine":11,"endColumn":25},{"ruleId":"594","severity":1,"message":"654","line":59,"column":9,"nodeType":"596","messageId":"597","endLine":59,"endColumn":16},{"ruleId":"594","severity":1,"message":"608","line":105,"column":11,"nodeType":"596","messageId":"597","endLine":105,"endColumn":18},{"ruleId":"594","severity":1,"message":"609","line":105,"column":20,"nodeType":"596","messageId":"597","endLine":105,"endColumn":27},{"ruleId":"594","severity":1,"message":"717","line":289,"column":15,"nodeType":"596","messageId":"597","endLine":289,"endColumn":29},{"ruleId":"594","severity":1,"message":"669","line":307,"column":11,"nodeType":"596","messageId":"597","endLine":307,"endColumn":14},{"ruleId":"594","severity":1,"message":"729","line":369,"column":9,"nodeType":"596","messageId":"597","endLine":369,"endColumn":29},{"ruleId":"594","severity":1,"message":"624","line":19,"column":20,"nodeType":"596","messageId":"597","endLine":19,"endColumn":25},{"ruleId":"730","severity":1,"message":"731","line":32,"column":26,"nodeType":"732","messageId":"733","endLine":32,"endColumn":28},{"ruleId":"734","severity":1,"message":"735","line":33,"column":30,"nodeType":"736","messageId":"648","endLine":33,"endColumn":32},{"ruleId":"594","severity":1,"message":"598","line":22,"column":41,"nodeType":"596","messageId":"597","endLine":22,"endColumn":52},{"ruleId":"594","severity":1,"message":"599","line":30,"column":7,"nodeType":"596","messageId":"597","endLine":30,"endColumn":17},{"ruleId":"594","severity":1,"message":"600","line":50,"column":7,"nodeType":"596","messageId":"597","endLine":50,"endColumn":21},{"ruleId":"594","severity":1,"message":"601","line":106,"column":9,"nodeType":"596","messageId":"597","endLine":106,"endColumn":19},{"ruleId":"594","severity":1,"message":"602","line":108,"column":10,"nodeType":"596","messageId":"597","endLine":108,"endColumn":18},{"ruleId":"594","severity":1,"message":"603","line":111,"column":9,"nodeType":"596","messageId":"597","endLine":111,"endColumn":20},{"ruleId":"594","severity":1,"message":"608","line":119,"column":11,"nodeType":"596","messageId":"597","endLine":119,"endColumn":18},{"ruleId":"594","severity":1,"message":"609","line":119,"column":20,"nodeType":"596","messageId":"597","endLine":119,"endColumn":27},{"ruleId":"594","severity":1,"message":"724","line":119,"column":29,"nodeType":"596","messageId":"597","endLine":119,"endColumn":37},{"ruleId":"610","severity":1,"message":"611","line":164,"column":6,"nodeType":"612","endLine":164,"endColumn":28,"suggestions":"737"},{"ruleId":"594","severity":1,"message":"738","line":4,"column":3,"nodeType":"596","messageId":"597","endLine":4,"endColumn":19},{"ruleId":"594","severity":1,"message":"669","line":264,"column":11,"nodeType":"596","messageId":"597","endLine":264,"endColumn":14},{"ruleId":"594","severity":1,"message":"717","line":293,"column":15,"nodeType":"596","messageId":"597","endLine":293,"endColumn":29},{"ruleId":"594","severity":1,"message":"669","line":311,"column":11,"nodeType":"596","messageId":"597","endLine":311,"endColumn":14},{"ruleId":"594","severity":1,"message":"674","line":1,"column":10,"nodeType":"596","messageId":"597","endLine":1,"endColumn":14},{"ruleId":"594","severity":1,"message":"675","line":27,"column":8,"nodeType":"596","messageId":"597","endLine":27,"endColumn":16},{"ruleId":"594","severity":1,"message":"676","line":258,"column":14,"nodeType":"596","messageId":"597","endLine":258,"endColumn":24},{"ruleId":"594","severity":1,"message":"677","line":259,"column":12,"nodeType":"596","messageId":"597","endLine":259,"endColumn":20},{"ruleId":"594","severity":1,"message":"678","line":279,"column":14,"nodeType":"596","messageId":"597","endLine":279,"endColumn":26},{"ruleId":"594","severity":1,"message":"679","line":280,"column":12,"nodeType":"596","messageId":"597","endLine":280,"endColumn":22},{"ruleId":"594","severity":1,"message":"680","line":281,"column":15,"nodeType":"596","messageId":"597","endLine":281,"endColumn":28},{"ruleId":"594","severity":1,"message":"681","line":286,"column":14,"nodeType":"596","messageId":"597","endLine":286,"endColumn":27},{"ruleId":"594","severity":1,"message":"682","line":287,"column":12,"nodeType":"596","messageId":"597","endLine":287,"endColumn":23},{"ruleId":"594","severity":1,"message":"683","line":295,"column":9,"nodeType":"596","messageId":"597","endLine":295,"endColumn":10},{"ruleId":"610","severity":1,"message":"684","line":312,"column":6,"nodeType":"612","endLine":312,"endColumn":80,"suggestions":"739"},{"ruleId":"594","severity":1,"message":"614","line":3,"column":23,"nodeType":"596","messageId":"597","endLine":3,"endColumn":32},{"ruleId":"594","severity":1,"message":"674","line":5,"column":10,"nodeType":"596","messageId":"597","endLine":5,"endColumn":14},{"ruleId":"594","severity":1,"message":"740","line":11,"column":8,"nodeType":"596","messageId":"597","endLine":11,"endColumn":20},{"ruleId":"594","severity":1,"message":"741","line":17,"column":10,"nodeType":"596","messageId":"597","endLine":17,"endColumn":21},{"ruleId":"594","severity":1,"message":"717","line":291,"column":15,"nodeType":"596","messageId":"597","endLine":291,"endColumn":29},{"ruleId":"594","severity":1,"message":"669","line":309,"column":11,"nodeType":"596","messageId":"597","endLine":309,"endColumn":14},{"ruleId":"594","severity":1,"message":"729","line":371,"column":9,"nodeType":"596","messageId":"597","endLine":371,"endColumn":29},{"ruleId":"594","severity":1,"message":"712","line":2,"column":40,"nodeType":"596","messageId":"597","endLine":2,"endColumn":49},{"ruleId":"594","severity":1,"message":"624","line":23,"column":20,"nodeType":"596","messageId":"597","endLine":23,"endColumn":25},{"ruleId":"594","severity":1,"message":"703","line":66,"column":11,"nodeType":"596","messageId":"597","endLine":66,"endColumn":19},{"ruleId":"594","severity":1,"message":"704","line":76,"column":20,"nodeType":"596","messageId":"597","endLine":76,"endColumn":30},{"ruleId":"594","severity":1,"message":"705","line":76,"column":41,"nodeType":"596","messageId":"597","endLine":76,"endColumn":51},{"ruleId":"594","severity":1,"message":"674","line":5,"column":10,"nodeType":"596","messageId":"597","endLine":5,"endColumn":14},{"ruleId":"594","severity":1,"message":"676","line":37,"column":14,"nodeType":"596","messageId":"597","endLine":37,"endColumn":24},{"ruleId":"594","severity":1,"message":"677","line":38,"column":12,"nodeType":"596","messageId":"597","endLine":38,"endColumn":20},{"ruleId":"594","severity":1,"message":"624","line":24,"column":20,"nodeType":"596","messageId":"597","endLine":24,"endColumn":25},{"ruleId":"594","severity":1,"message":"674","line":5,"column":10,"nodeType":"596","messageId":"597","endLine":5,"endColumn":14},{"ruleId":"594","severity":1,"message":"635","line":7,"column":8,"nodeType":"596","messageId":"597","endLine":7,"endColumn":21},{"ruleId":"594","severity":1,"message":"624","line":33,"column":20,"nodeType":"596","messageId":"597","endLine":33,"endColumn":25},"no-native-reassign",["742"],"no-negated-in-lhs",["743"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'NavDropdown' is defined but never used.","'StyledMenu' is assigned a value but never used.","'StyledMenuItem' is assigned a value but never used.","'anchorReff' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'menu' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'loading' is assigned a value but never used.","'success' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["744"],"'Container' is defined but never used.","'LinkContainer' is defined but never used.","'withStyles' is defined but never used.","'ProductCarousel' is defined but never used.","'MessageSuccess' is defined but never used.","'SkeletonEffect' is defined but never used.","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","'ListGroupItem' is defined but never used.","'getUserDetails' is defined but never used.","'error' is assigned a value but never used.","'LOAD_USER_FAIL' is defined but never used.","'LOAD_USER_REQUEST' is defined but never used.","'LOAD_USER_SUCCESS' is defined but never used.","'LOGIN_FAIL' is defined but never used.","'LOGIN_REQUEST' is defined but never used.","'LOGIN_SUCCESS' is defined but never used.","'LOGOUT_FAIL' is defined but never used.","'LOGOUT_SUCCESS' is defined but never used.","'REGISTER_USER_FAIL' is defined but never used.","'REGISTER_USER_REQUEST' is defined but never used.","'FormContainer' is defined but never used.","'Loader' is defined but never used.","'firebaseApp' is assigned a value but never used.","'name' is assigned a value but never used.","'mail' is assigned a value but never used.","'photo' is assigned a value but never used.","'token' is assigned a value but never used.","'USER_LOGIN_GOOGLE_FAIL' is defined but never used.","'USER_LOGIN_GOOGLE_REQUEST' is defined but never used.","'USER_LOGIN_GOOGLE_SUCCESS' is defined but never used.","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","'Upload' is defined but never used.","'message' is defined but never used.","'LoadingOutlined' is defined but never used.","'PlusOutlined' is defined but never used.","'Avatar' is defined but never used.","'classes' is assigned a value but never used.","'Banner' is defined but never used.","'setMessage' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'success'. Either include it or remove the dependency array.",["745"],["742"],["743"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'cart.cartItems', 'dispatch', and 'order._id'. Either include them or remove the dependency array.",["746"],"'setOrderStatus' is assigned a value but never used.","'loadingByMember' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["747"],"'did' is assigned a value but never used.",["742"],["743"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["748"],"'Link' is defined but never used.","'Skeleton' is defined but never used.","'loadingCat' is assigned a value but never used.","'errorCat' is assigned a value but never used.","'loadingCatDe' is assigned a value but never used.","'errorCatDe' is assigned a value but never used.","'categoryCatDe' is assigned a value but never used.","'loadingCreate' is assigned a value but never used.","'errorCreate' is assigned a value but never used.","'k' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categoryCat', 'createdProduct._id', and 'pageNumber'. Either include them or remove the dependency array. Outer scope values like 'createProduct' aren't valid dependencies because mutating them doesn't re-render the component.",["749"],"'Image' is defined but never used.","'InputGroup' is defined but never used.","'ButtonBase' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'CheckCircleOutlineIcon' is defined but never used.","'ErrorOutlineIcon' is defined but never used.","'toast' is defined but never used.","'updateUserProfile' is defined but never used.","'setName' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'message' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'successPay' is assigned a value but never used.","'GroupAddIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'VideoLabelIcon' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'activeStep' is assigned a value but never used.","'createdProduct' is assigned a value but never used.","'FaceIcon' is defined but never used.","'DoneIcon' is defined but never used.","'keyword' is assigned a value but never used.","'pageNumber' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'successCat' is assigned a value but never used.","'category' is assigned a value but never used.","'successFilter' is assigned a value but never used.","'loadingFilterPrice' is assigned a value but never used.","'successFilterPrice' is assigned a value but never used.","'DollarOutlined' is defined but never used.","'submitHandlerDetails' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["750"],"'AppstoreOutlined' is defined but never used.",["751"],"'Announcement' is defined but never used.","'formatPrice' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"752","fix":"764"},{"desc":"762","fix":"765"},"Update the dependencies array to be: [open, userInfo, user, dispatch]",{"range":"766","text":"767"},"Update the dependencies array to be: [dispatch, history, userInfo, user, success]",{"range":"768","text":"769"},"Update the dependencies array to be: [cart.cartItems, dispatch, history, order._id, success]",{"range":"770","text":"771"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",{"range":"772","text":"773"},"Update the dependencies array to be: [dispatch, user, userId, successUpdate, history]",{"range":"774","text":"775"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id, pageNumber]",{"range":"776","text":"777"},{"range":"778","text":"767"},{"range":"779","text":"777"},[4822,4844],"[open, userInfo, user, dispatch]",[7146,7181],"[dispatch, history, userInfo, user, success]",[2549,2567],"[cart.cartItems, dispatch, history, order._id, success]",[3561,3632],"[dispatch, orderId, successPay, successDeliver, successByMember, order, userInfo, history]",[1578,1617],"[dispatch, user, userId, successUpdate, history]",[9432,9506],"[dispatch, history, userInfo, successDelete, successCreate, categoryCat, createdProduct._id, pageNumber]",[4513,4535],[9529,9603]]